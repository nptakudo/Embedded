
Bai5_UART_Thinh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006614  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080067a4  080067a4  000077a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800680c  0800680c  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  0800680c  0800680c  0000780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006814  08006814  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006814  08006814  00007814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800681c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008064  2**0
                  CONTENTS
 10 .bss          000004b0  20000064  20000064  00008064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000514  20000514  00008064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017312  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ce8  00000000  00000000  0001f3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  00023090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001074  00000000  00000000  000245b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002422b  00000000  00000000  0002562c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c28d  00000000  00000000  00049857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2c54  00000000  00000000  00065ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00138738  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c58  00000000  00000000  0013877c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0013e3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800678c 	.word	0x0800678c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	0800678c 	.word	0x0800678c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	2108      	movs	r1, #8
 8000568:	4802      	ldr	r0, [pc, #8]	@ (8000574 <button_init+0x14>)
 800056a:	f001 fe03 	bl	8002174 <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020c00 	.word	0x40020c00

08000578 <button_Scan>:

void button_Scan(){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	482f      	ldr	r0, [pc, #188]	@ (8000640 <button_Scan+0xc8>)
 8000584:	f001 fdf6 	bl	8002174 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2108      	movs	r1, #8
 800058c:	482c      	ldr	r0, [pc, #176]	@ (8000640 <button_Scan+0xc8>)
 800058e:	f001 fdf1 	bl	8002174 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000592:	230a      	movs	r3, #10
 8000594:	2202      	movs	r2, #2
 8000596:	492b      	ldr	r1, [pc, #172]	@ (8000644 <button_Scan+0xcc>)
 8000598:	482b      	ldr	r0, [pc, #172]	@ (8000648 <button_Scan+0xd0>)
 800059a:	f003 fa6a 	bl	8003a72 <HAL_SPI_Receive>
	  int button_index = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	e03f      	b.n	800062e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db06      	blt.n	80005c2 <button_Scan+0x4a>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	dc03      	bgt.n	80005c2 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3304      	adds	r3, #4
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e018      	b.n	80005f4 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	dd07      	ble.n	80005d8 <button_Scan+0x60>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b07      	cmp	r3, #7
 80005cc:	dc04      	bgt.n	80005d8 <button_Scan+0x60>
			  button_index = 7 - i;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f1c3 0307 	rsb	r3, r3, #7
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e00d      	b.n	80005f4 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	dd06      	ble.n	80005ec <button_Scan+0x74>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b0b      	cmp	r3, #11
 80005e2:	dc03      	bgt.n	80005ec <button_Scan+0x74>
			  button_index = i + 4;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3304      	adds	r3, #4
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e003      	b.n	80005f4 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f1c3 0317 	rsb	r3, r3, #23
 80005f2:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <button_Scan+0xcc>)
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	897b      	ldrh	r3, [r7, #10]
 80005fa:	4013      	ands	r3, r2
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d005      	beq.n	800060e <button_Scan+0x96>
 8000602:	4a12      	ldr	r2, [pc, #72]	@ (800064c <button_Scan+0xd4>)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2100      	movs	r1, #0
 8000608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800060c:	e009      	b.n	8000622 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800060e:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <button_Scan+0xd4>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000616:	3301      	adds	r3, #1
 8000618:	b299      	uxth	r1, r3
 800061a:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <button_Scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000622:	897b      	ldrh	r3, [r7, #10]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	ddbc      	ble.n	80005ae <button_Scan+0x36>
	  }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020c00 	.word	0x40020c00
 8000644:	200000a0 	.word	0x200000a0
 8000648:	20000170 	.word	0x20000170
 800064c:	20000080 	.word	0x20000080

08000650 <ds3231_ReadTime>:
void ds3231_Write(uint8_t address, uint8_t value){
	uint8_t temp = DEC2BCD(value);
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
}

void ds3231_ReadTime(){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000656:	230a      	movs	r3, #10
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	2307      	movs	r3, #7
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <ds3231_ReadTime+0xa4>)
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	2200      	movs	r2, #0
 8000666:	21d0      	movs	r1, #208	@ 0xd0
 8000668:	4823      	ldr	r0, [pc, #140]	@ (80006f8 <ds3231_ReadTime+0xa8>)
 800066a:	f001 fefb 	bl	8002464 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <ds3231_ReadTime+0xa4>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f964 	bl	8001940 <BCD2DEC>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <ds3231_ReadTime+0xac>)
 800067e:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <ds3231_ReadTime+0xa4>)
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f95b 	bl	8001940 <BCD2DEC>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <ds3231_ReadTime+0xb0>)
 8000690:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000692:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <ds3231_ReadTime+0xa4>)
 8000694:	789b      	ldrb	r3, [r3, #2]
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f952 	bl	8001940 <BCD2DEC>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <ds3231_ReadTime+0xb4>)
 80006a2:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <ds3231_ReadTime+0xa4>)
 80006a6:	78db      	ldrb	r3, [r3, #3]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 f949 	bl	8001940 <BCD2DEC>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <ds3231_ReadTime+0xb8>)
 80006b4:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <ds3231_ReadTime+0xa4>)
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f940 	bl	8001940 <BCD2DEC>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <ds3231_ReadTime+0xbc>)
 80006c6:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <ds3231_ReadTime+0xa4>)
 80006ca:	795b      	ldrb	r3, [r3, #5]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f937 	bl	8001940 <BCD2DEC>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <ds3231_ReadTime+0xc0>)
 80006d8:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <ds3231_ReadTime+0xa4>)
 80006dc:	799b      	ldrb	r3, [r3, #6]
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f92e 	bl	8001940 <BCD2DEC>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <ds3231_ReadTime+0xc4>)
 80006ea:	701a      	strb	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000a4 	.word	0x200000a4
 80006f8:	20000108 	.word	0x20000108
 80006fc:	200000ad 	.word	0x200000ad
 8000700:	200000ac 	.word	0x200000ac
 8000704:	200000ab 	.word	0x200000ab
 8000708:	200000af 	.word	0x200000af
 800070c:	200000ae 	.word	0x200000ae
 8000710:	200000b0 	.word	0x200000b0
 8000714:	200000b1 	.word	0x200000b1

08000718 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	@ 0x38
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
 8000740:	615a      	str	r2, [r3, #20]
 8000742:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000744:	4b2f      	ldr	r3, [pc, #188]	@ (8000804 <MX_FSMC_Init+0xec>)
 8000746:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800074a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800074c:	4b2d      	ldr	r3, [pc, #180]	@ (8000804 <MX_FSMC_Init+0xec>)
 800074e:	4a2e      	ldr	r2, [pc, #184]	@ (8000808 <MX_FSMC_Init+0xf0>)
 8000750:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000752:	4b2c      	ldr	r3, [pc, #176]	@ (8000804 <MX_FSMC_Init+0xec>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000758:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <MX_FSMC_Init+0xec>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800075e:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <MX_FSMC_Init+0xec>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000764:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <MX_FSMC_Init+0xec>)
 8000766:	2210      	movs	r2, #16
 8000768:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <MX_FSMC_Init+0xec>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <MX_FSMC_Init+0xec>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <MX_FSMC_Init+0xec>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800077c:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_FSMC_Init+0xec>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000782:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <MX_FSMC_Init+0xec>)
 8000784:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000788:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800078a:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <MX_FSMC_Init+0xec>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000790:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_FSMC_Init+0xec>)
 8000792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000796:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000798:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_FSMC_Init+0xec>)
 800079a:	2200      	movs	r2, #0
 800079c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_FSMC_Init+0xec>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_FSMC_Init+0xec>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007aa:	230f      	movs	r3, #15
 80007ac:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007ae:	230f      	movs	r3, #15
 80007b0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007b2:	233c      	movs	r3, #60	@ 0x3c
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80007ba:	2310      	movs	r3, #16
 80007bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80007be:	2311      	movs	r3, #17
 80007c0:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007c2:	2300      	movs	r3, #0
 80007c4:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007c6:	2308      	movs	r3, #8
 80007c8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007ca:	230f      	movs	r3, #15
 80007cc:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007ce:	2309      	movs	r3, #9
 80007d0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80007d6:	2310      	movs	r3, #16
 80007d8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80007da:	2311      	movs	r3, #17
 80007dc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80007e2:	463a      	mov	r2, r7
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <MX_FSMC_Init+0xec>)
 80007ec:	f003 fd24 	bl	8004238 <HAL_SRAM_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80007f6:	f000 fd1f 	bl	8001238 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80007fa:	bf00      	nop
 80007fc:	3738      	adds	r7, #56	@ 0x38
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000b4 	.word	0x200000b4
 8000808:	a0000104 	.word	0xa0000104

0800080c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <HAL_FSMC_MspInit+0x88>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d131      	bne.n	800088c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <HAL_FSMC_MspInit+0x88>)
 800082a:	2201      	movs	r2, #1
 800082c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <HAL_FSMC_MspInit+0x8c>)
 8000834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000836:	4a18      	ldr	r2, [pc, #96]	@ (8000898 <HAL_FSMC_MspInit+0x8c>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6393      	str	r3, [r2, #56]	@ 0x38
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <HAL_FSMC_MspInit+0x8c>)
 8000840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800084a:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800084e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800085c:	230c      	movs	r3, #12
 800085e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	480d      	ldr	r0, [pc, #52]	@ (800089c <HAL_FSMC_MspInit+0x90>)
 8000866:	f001 fae9 	bl	8001e3c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800086a:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800086e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800087c:	230c      	movs	r3, #12
 800087e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <HAL_FSMC_MspInit+0x94>)
 8000886:	f001 fad9 	bl	8001e3c <HAL_GPIO_Init>
 800088a:	e000      	b.n	800088e <HAL_FSMC_MspInit+0x82>
    return;
 800088c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000104 	.word	0x20000104
 8000898:	40023800 	.word	0x40023800
 800089c:	40021000 	.word	0x40021000
 80008a0:	40020c00 	.word	0x40020c00

080008a4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008ac:	f7ff ffae 	bl	800080c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	@ 0x30
 80008bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	4b6f      	ldr	r3, [pc, #444]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a6e      	ldr	r2, [pc, #440]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b6c      	ldr	r3, [pc, #432]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	4b68      	ldr	r3, [pc, #416]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a67      	ldr	r2, [pc, #412]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b65      	ldr	r3, [pc, #404]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b61      	ldr	r3, [pc, #388]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a60      	ldr	r2, [pc, #384]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b5e      	ldr	r3, [pc, #376]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b5a      	ldr	r3, [pc, #360]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a59      	ldr	r2, [pc, #356]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b57      	ldr	r3, [pc, #348]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b53      	ldr	r3, [pc, #332]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a52      	ldr	r2, [pc, #328]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b50      	ldr	r3, [pc, #320]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a4b      	ldr	r2, [pc, #300]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 8000964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b49      	ldr	r3, [pc, #292]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b45      	ldr	r3, [pc, #276]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a44      	ldr	r2, [pc, #272]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b42      	ldr	r3, [pc, #264]	@ (8000a90 <MX_GPIO_Init+0x1d8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2170      	movs	r1, #112	@ 0x70
 8000996:	483f      	ldr	r0, [pc, #252]	@ (8000a94 <MX_GPIO_Init+0x1dc>)
 8000998:	f001 fbec 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a2:	483d      	ldr	r0, [pc, #244]	@ (8000a98 <MX_GPIO_Init+0x1e0>)
 80009a4:	f001 fbe6 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2140      	movs	r1, #64	@ 0x40
 80009ac:	483b      	ldr	r0, [pc, #236]	@ (8000a9c <MX_GPIO_Init+0x1e4>)
 80009ae:	f001 fbe1 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009b8:	4839      	ldr	r0, [pc, #228]	@ (8000aa0 <MX_GPIO_Init+0x1e8>)
 80009ba:	f001 fbdb 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2108      	movs	r1, #8
 80009c2:	4838      	ldr	r0, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x1ec>)
 80009c4:	f001 fbd6 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009c8:	2370      	movs	r3, #112	@ 0x70
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	482d      	ldr	r0, [pc, #180]	@ (8000a94 <MX_GPIO_Init+0x1dc>)
 80009e0:	f001 fa2c 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4826      	ldr	r0, [pc, #152]	@ (8000a98 <MX_GPIO_Init+0x1e0>)
 80009fe:	f001 fa1d 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a02:	23c0      	movs	r3, #192	@ 0xc0
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4822      	ldr	r0, [pc, #136]	@ (8000aa0 <MX_GPIO_Init+0x1e8>)
 8000a16:	f001 fa11 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a1a:	2330      	movs	r3, #48	@ 0x30
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481a      	ldr	r0, [pc, #104]	@ (8000a98 <MX_GPIO_Init+0x1e0>)
 8000a2e:	f001 fa05 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a32:	2340      	movs	r3, #64	@ 0x40
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4814      	ldr	r0, [pc, #80]	@ (8000a9c <MX_GPIO_Init+0x1e4>)
 8000a4a:	f001 f9f7 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <MX_GPIO_Init+0x1e8>)
 8000a68:	f001 f9e8 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4808      	ldr	r0, [pc, #32]	@ (8000aa4 <MX_GPIO_Init+0x1ec>)
 8000a84:	f001 f9da 	bl	8001e3c <HAL_GPIO_Init>

}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	@ 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40021800 	.word	0x40021800
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000aae:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <MX_I2C1_Init+0x54>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ab4:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <MX_I2C1_Init+0x58>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ac6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ae6:	f001 fb79 	bl	80021dc <HAL_I2C_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af0:	f000 fba2 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000108 	.word	0x20000108
 8000afc:	40005400 	.word	0x40005400
 8000b00:	000186a0 	.word	0x000186a0

08000b04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	@ (8000b88 <HAL_I2C_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b42:	23c0      	movs	r3, #192	@ 0xc0
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b46:	2312      	movs	r3, #18
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b52:	2304      	movs	r3, #4
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <HAL_I2C_MspInit+0x8c>)
 8000b5e:	f001 f96d 	bl	8001e3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	@ 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <LCD_WR_REG+0x1c>)
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	8013      	strh	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	600ffffe 	.word	0x600ffffe

08000bb4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <LCD_WR_DATA+0x1c>)
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	8053      	strh	r3, [r2, #2]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	600ffffe 	.word	0x600ffffe

08000bd4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <LCD_RD_DATA+0x20>)
 8000bdc:	885b      	ldrh	r3, [r3, #2]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	b29b      	uxth	r3, r3
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	600ffffe 	.word	0x600ffffe

08000bf8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	091b      	lsrs	r3, r3, #4
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d007      	beq.n	8000c22 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <lcd_SetDir+0x44>)
 8000c14:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c18:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <lcd_SetDir+0x44>)
 8000c1c:	22f0      	movs	r2, #240	@ 0xf0
 8000c1e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000c20:	e006      	b.n	8000c30 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <lcd_SetDir+0x44>)
 8000c24:	22f0      	movs	r2, #240	@ 0xf0
 8000c26:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <lcd_SetDir+0x44>)
 8000c2a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000c2e:	805a      	strh	r2, [r3, #2]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	2000015c 	.word	0x2000015c

08000c40 <lcd_init>:


void lcd_init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4a:	48aa      	ldr	r0, [pc, #680]	@ (8000ef4 <lcd_init+0x2b4>)
 8000c4c:	f001 fa92 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c54:	f000 ff2a 	bl	8001aac <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c5e:	48a5      	ldr	r0, [pc, #660]	@ (8000ef4 <lcd_init+0x2b4>)
 8000c60:	f001 fa88 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c68:	f000 ff20 	bl	8001aac <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ffc3 	bl	8000bf8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000c72:	20d3      	movs	r0, #211	@ 0xd3
 8000c74:	f7ff ff8e 	bl	8000b94 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000c78:	f7ff ffac 	bl	8000bd4 <LCD_RD_DATA>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b9d      	ldr	r3, [pc, #628]	@ (8000ef8 <lcd_init+0x2b8>)
 8000c82:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000c84:	f7ff ffa6 	bl	8000bd4 <LCD_RD_DATA>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b9a      	ldr	r3, [pc, #616]	@ (8000ef8 <lcd_init+0x2b8>)
 8000c8e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000c90:	f7ff ffa0 	bl	8000bd4 <LCD_RD_DATA>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b97      	ldr	r3, [pc, #604]	@ (8000ef8 <lcd_init+0x2b8>)
 8000c9a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000c9c:	4b96      	ldr	r3, [pc, #600]	@ (8000ef8 <lcd_init+0x2b8>)
 8000c9e:	889b      	ldrh	r3, [r3, #4]
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b94      	ldr	r3, [pc, #592]	@ (8000ef8 <lcd_init+0x2b8>)
 8000ca6:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000ca8:	f7ff ff94 	bl	8000bd4 <LCD_RD_DATA>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b91      	ldr	r3, [pc, #580]	@ (8000ef8 <lcd_init+0x2b8>)
 8000cb2:	889b      	ldrh	r3, [r3, #4]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8000ef8 <lcd_init+0x2b8>)
 8000cba:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000cbc:	20cf      	movs	r0, #207	@ 0xcf
 8000cbe:	f7ff ff69 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff ff76 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000cc8:	20c1      	movs	r0, #193	@ 0xc1
 8000cca:	f7ff ff73 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000cce:	2030      	movs	r0, #48	@ 0x30
 8000cd0:	f7ff ff70 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000cd4:	20ed      	movs	r0, #237	@ 0xed
 8000cd6:	f7ff ff5d 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000cda:	2064      	movs	r0, #100	@ 0x64
 8000cdc:	f7ff ff6a 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f7ff ff67 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000ce6:	2012      	movs	r0, #18
 8000ce8:	f7ff ff64 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000cec:	2081      	movs	r0, #129	@ 0x81
 8000cee:	f7ff ff61 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000cf2:	20e8      	movs	r0, #232	@ 0xe8
 8000cf4:	f7ff ff4e 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000cf8:	2085      	movs	r0, #133	@ 0x85
 8000cfa:	f7ff ff5b 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000cfe:	2010      	movs	r0, #16
 8000d00:	f7ff ff58 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000d04:	207a      	movs	r0, #122	@ 0x7a
 8000d06:	f7ff ff55 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000d0a:	20cb      	movs	r0, #203	@ 0xcb
 8000d0c:	f7ff ff42 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000d10:	2039      	movs	r0, #57	@ 0x39
 8000d12:	f7ff ff4f 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000d16:	202c      	movs	r0, #44	@ 0x2c
 8000d18:	f7ff ff4c 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff ff49 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000d22:	2034      	movs	r0, #52	@ 0x34
 8000d24:	f7ff ff46 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f7ff ff43 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000d2e:	20f7      	movs	r0, #247	@ 0xf7
 8000d30:	f7ff ff30 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000d34:	2020      	movs	r0, #32
 8000d36:	f7ff ff3d 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000d3a:	20ea      	movs	r0, #234	@ 0xea
 8000d3c:	f7ff ff2a 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f7ff ff37 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff ff34 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000d4c:	20c0      	movs	r0, #192	@ 0xc0
 8000d4e:	f7ff ff21 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000d52:	201b      	movs	r0, #27
 8000d54:	f7ff ff2e 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000d58:	20c1      	movs	r0, #193	@ 0xc1
 8000d5a:	f7ff ff1b 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff ff28 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000d64:	20c5      	movs	r0, #197	@ 0xc5
 8000d66:	f7ff ff15 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000d6a:	2030      	movs	r0, #48	@ 0x30
 8000d6c:	f7ff ff22 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000d70:	2030      	movs	r0, #48	@ 0x30
 8000d72:	f7ff ff1f 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000d76:	20c7      	movs	r0, #199	@ 0xc7
 8000d78:	f7ff ff0c 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000d7c:	20b7      	movs	r0, #183	@ 0xb7
 8000d7e:	f7ff ff19 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000d82:	2036      	movs	r0, #54	@ 0x36
 8000d84:	f7ff ff06 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8000d88:	2008      	movs	r0, #8
 8000d8a:	f7ff ff13 	bl	8000bb4 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8000d8e:	203a      	movs	r0, #58	@ 0x3a
 8000d90:	f7ff ff00 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000d94:	2055      	movs	r0, #85	@ 0x55
 8000d96:	f7ff ff0d 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000d9a:	20b1      	movs	r0, #177	@ 0xb1
 8000d9c:	f7ff fefa 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff ff07 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000da6:	201a      	movs	r0, #26
 8000da8:	f7ff ff04 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000dac:	20b6      	movs	r0, #182	@ 0xb6
 8000dae:	f7ff fef1 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f7ff fefe 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000db8:	20a2      	movs	r0, #162	@ 0xa2
 8000dba:	f7ff fefb 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000dbe:	20f2      	movs	r0, #242	@ 0xf2
 8000dc0:	f7ff fee8 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff fef5 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000dca:	2026      	movs	r0, #38	@ 0x26
 8000dcc:	f7ff fee2 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff feef 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000dd6:	20e0      	movs	r0, #224	@ 0xe0
 8000dd8:	f7ff fedc 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000ddc:	200f      	movs	r0, #15
 8000dde:	f7ff fee9 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000de2:	202a      	movs	r0, #42	@ 0x2a
 8000de4:	f7ff fee6 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000de8:	2028      	movs	r0, #40	@ 0x28
 8000dea:	f7ff fee3 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000dee:	2008      	movs	r0, #8
 8000df0:	f7ff fee0 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000df4:	200e      	movs	r0, #14
 8000df6:	f7ff fedd 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000dfa:	2008      	movs	r0, #8
 8000dfc:	f7ff feda 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000e00:	2054      	movs	r0, #84	@ 0x54
 8000e02:	f7ff fed7 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000e06:	20a9      	movs	r0, #169	@ 0xa9
 8000e08:	f7ff fed4 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000e0c:	2043      	movs	r0, #67	@ 0x43
 8000e0e:	f7ff fed1 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000e12:	200a      	movs	r0, #10
 8000e14:	f7ff fece 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000e18:	200f      	movs	r0, #15
 8000e1a:	f7ff fecb 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fec8 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fec5 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fec2 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff febf 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000e36:	20e1      	movs	r0, #225	@ 0xe1
 8000e38:	f7ff feac 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff feb9 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000e42:	2015      	movs	r0, #21
 8000e44:	f7ff feb6 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000e48:	2017      	movs	r0, #23
 8000e4a:	f7ff feb3 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000e4e:	2007      	movs	r0, #7
 8000e50:	f7ff feb0 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000e54:	2011      	movs	r0, #17
 8000e56:	f7ff fead 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000e5a:	2006      	movs	r0, #6
 8000e5c:	f7ff feaa 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000e60:	202b      	movs	r0, #43	@ 0x2b
 8000e62:	f7ff fea7 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000e66:	2056      	movs	r0, #86	@ 0x56
 8000e68:	f7ff fea4 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000e6c:	203c      	movs	r0, #60	@ 0x3c
 8000e6e:	f7ff fea1 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000e72:	2005      	movs	r0, #5
 8000e74:	f7ff fe9e 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000e78:	2010      	movs	r0, #16
 8000e7a:	f7ff fe9b 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f7ff fe98 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000e84:	203f      	movs	r0, #63	@ 0x3f
 8000e86:	f7ff fe95 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000e8a:	203f      	movs	r0, #63	@ 0x3f
 8000e8c:	f7ff fe92 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000e90:	200f      	movs	r0, #15
 8000e92:	f7ff fe8f 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000e96:	202b      	movs	r0, #43	@ 0x2b
 8000e98:	f7ff fe7c 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff fe89 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fe86 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff fe83 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000eae:	203f      	movs	r0, #63	@ 0x3f
 8000eb0:	f7ff fe80 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000eb4:	202a      	movs	r0, #42	@ 0x2a
 8000eb6:	f7ff fe6d 	bl	8000b94 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fe7a 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fe77 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff fe74 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000ecc:	20ef      	movs	r0, #239	@ 0xef
 8000ece:	f7ff fe71 	bl	8000bb4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8000ed2:	2011      	movs	r0, #17
 8000ed4:	f7ff fe5e 	bl	8000b94 <LCD_WR_REG>
	HAL_Delay(120);
 8000ed8:	2078      	movs	r0, #120	@ 0x78
 8000eda:	f000 fde7 	bl	8001aac <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8000ede:	2029      	movs	r0, #41	@ 0x29
 8000ee0:	f7ff fe58 	bl	8000b94 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eea:	4804      	ldr	r0, [pc, #16]	@ (8000efc <lcd_init+0x2bc>)
 8000eec:	f001 f942 	bl	8002174 <HAL_GPIO_WritePin>
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	2000015c 	.word	0x2000015c
 8000efc:	40020000 	.word	0x40020000

08000f00 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2140      	movs	r1, #64	@ 0x40
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <led7_init+0x14>)
 8000f0a:	f001 f933 	bl	8002174 <HAL_GPIO_WritePin>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021800 	.word	0x40021800

08000f18 <led7_Scan>:

void led7_Scan(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800101c <led7_Scan+0x104>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4b3d      	ldr	r3, [pc, #244]	@ (800101c <led7_Scan+0x104>)
 8000f26:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8000f28:	4b3d      	ldr	r3, [pc, #244]	@ (8001020 <led7_Scan+0x108>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a3d      	ldr	r2, [pc, #244]	@ (8001024 <led7_Scan+0x10c>)
 8000f2e:	5cd3      	ldrb	r3, [r2, r3]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	4b39      	ldr	r3, [pc, #228]	@ (800101c <led7_Scan+0x104>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b36      	ldr	r3, [pc, #216]	@ (800101c <led7_Scan+0x104>)
 8000f42:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8000f44:	4b36      	ldr	r3, [pc, #216]	@ (8001020 <led7_Scan+0x108>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d847      	bhi.n	8000fdc <led7_Scan+0xc4>
 8000f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f54 <led7_Scan+0x3c>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	08000f65 	.word	0x08000f65
 8000f58:	08000f83 	.word	0x08000f83
 8000f5c:	08000fa1 	.word	0x08000fa1
 8000f60:	08000fbf 	.word	0x08000fbf
	case 0:
		spi_buffer |= 0x00b0;
 8000f64:	4b2d      	ldr	r3, [pc, #180]	@ (800101c <led7_Scan+0x104>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <led7_Scan+0x104>)
 8000f70:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8000f72:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <led7_Scan+0x104>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b27      	ldr	r3, [pc, #156]	@ (800101c <led7_Scan+0x104>)
 8000f7e:	801a      	strh	r2, [r3, #0]
		break;
 8000f80:	e02d      	b.n	8000fde <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000f82:	4b26      	ldr	r3, [pc, #152]	@ (800101c <led7_Scan+0x104>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b23      	ldr	r3, [pc, #140]	@ (800101c <led7_Scan+0x104>)
 8000f8e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8000f90:	4b22      	ldr	r3, [pc, #136]	@ (800101c <led7_Scan+0x104>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	f023 0320 	bic.w	r3, r3, #32
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b20      	ldr	r3, [pc, #128]	@ (800101c <led7_Scan+0x104>)
 8000f9c:	801a      	strh	r2, [r3, #0]
		break;
 8000f9e:	e01e      	b.n	8000fde <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <led7_Scan+0x104>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <led7_Scan+0x104>)
 8000fac:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8000fae:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <led7_Scan+0x104>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	f023 0310 	bic.w	r3, r3, #16
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <led7_Scan+0x104>)
 8000fba:	801a      	strh	r2, [r3, #0]
		break;
 8000fbc:	e00f      	b.n	8000fde <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <led7_Scan+0x104>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b14      	ldr	r3, [pc, #80]	@ (800101c <led7_Scan+0x104>)
 8000fca:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <led7_Scan+0x104>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <led7_Scan+0x104>)
 8000fd8:	801a      	strh	r2, [r3, #0]
		break;
 8000fda:	e000      	b.n	8000fde <led7_Scan+0xc6>
	default:
		break;
 8000fdc:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <led7_Scan+0x108>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	425a      	negs	r2, r3
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	f002 0203 	and.w	r2, r2, #3
 8000fee:	bf58      	it	pl
 8000ff0:	4253      	negpl	r3, r2
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8001020 <led7_Scan+0x108>)
 8000ff4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2140      	movs	r1, #64	@ 0x40
 8000ffa:	480b      	ldr	r0, [pc, #44]	@ (8001028 <led7_Scan+0x110>)
 8000ffc:	f001 f8ba 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001000:	2301      	movs	r3, #1
 8001002:	2202      	movs	r2, #2
 8001004:	4905      	ldr	r1, [pc, #20]	@ (800101c <led7_Scan+0x104>)
 8001006:	4809      	ldr	r0, [pc, #36]	@ (800102c <led7_Scan+0x114>)
 8001008:	f002 fbf7 	bl	80037fa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	2140      	movs	r1, #64	@ 0x40
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <led7_Scan+0x110>)
 8001012:	f001 f8af 	bl	8002174 <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000004 	.word	0x20000004
 8001020:	20000164 	.word	0x20000164
 8001024:	20000000 	.word	0x20000000
 8001028:	40021800 	.word	0x40021800
 800102c:	20000170 	.word	0x20000170

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f000 fcc8 	bl	80019c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f822 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f7ff fc3c 	bl	80008b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001040:	f000 fa82 	bl	8001548 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001044:	f000 f94e 	bl	80012e4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001048:	f7ff fb66 	bl	8000718 <MX_FSMC_Init>
  MX_I2C1_Init();
 800104c:	f7ff fd2c 	bl	8000aa8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001050:	f000 fbfc 	bl	800184c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001054:	f000 f87e 	bl	8001154 <system_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 8001058:	bf00      	nop
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <main+0x4c>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0fb      	beq.n	800105a <main+0x2a>
	  flag_timer2 = 0;
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <main+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001068:	f7ff fa86 	bl	8000578 <button_Scan>
	  test_LedDebug();
 800106c:	f000 f894 	bl	8001198 <test_LedDebug>
	  ds3231_ReadTime();
 8001070:	f7ff faee 	bl	8000650 <ds3231_ReadTime>
	  test_Uart();
 8001074:	f000 f8b4 	bl	80011e0 <test_Uart>
	  while(!flag_timer2);
 8001078:	e7ee      	b.n	8001058 <main+0x28>
 800107a:	bf00      	nop
 800107c:	2000016a 	.word	0x2000016a

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	@ 0x50
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2230      	movs	r2, #48	@ 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f004 fefc 	bl	8005e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b28      	ldr	r3, [pc, #160]	@ (800114c <SystemClock_Config+0xcc>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	4a27      	ldr	r2, [pc, #156]	@ (800114c <SystemClock_Config+0xcc>)
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b4:	4b25      	ldr	r3, [pc, #148]	@ (800114c <SystemClock_Config+0xcc>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <SystemClock_Config+0xd0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a21      	ldr	r2, [pc, #132]	@ (8001150 <SystemClock_Config+0xd0>)
 80010ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <SystemClock_Config+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010dc:	2302      	movs	r3, #2
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e4:	2310      	movs	r3, #16
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f0:	2308      	movs	r3, #8
 80010f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010f4:	23a8      	movs	r3, #168	@ 0xa8
 80010f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010fc:	2304      	movs	r3, #4
 80010fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	f107 0320 	add.w	r3, r7, #32
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fe57 	bl	8002db8 <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001110:	f000 f892 	bl	8001238 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001118:	2302      	movs	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001120:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001126:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800112a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2105      	movs	r1, #5
 8001132:	4618      	mov	r0, r3
 8001134:	f002 f8b8 	bl	80032a8 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800113e:	f000 f87b 	bl	8001238 <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	@ 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2120      	movs	r1, #32
 800115c:	480d      	ldr	r0, [pc, #52]	@ (8001194 <system_init+0x40>)
 800115e:	f001 f809 	bl	8002174 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2140      	movs	r1, #64	@ 0x40
 8001166:	480b      	ldr	r0, [pc, #44]	@ (8001194 <system_init+0x40>)
 8001168:	f001 f804 	bl	8002174 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2110      	movs	r1, #16
 8001170:	4808      	ldr	r0, [pc, #32]	@ (8001194 <system_init+0x40>)
 8001172:	f000 ffff 	bl	8002174 <HAL_GPIO_WritePin>
	  timer_init();
 8001176:	f000 f865 	bl	8001244 <timer_init>
	  led7_init();
 800117a:	f7ff fec1 	bl	8000f00 <led7_init>
	  button_init();
 800117e:	f7ff f9ef 	bl	8000560 <button_init>
	  lcd_init();
 8001182:	f7ff fd5d 	bl	8000c40 <lcd_init>
	  uart_init_rs232();
 8001186:	f000 fab7 	bl	80016f8 <uart_init_rs232>
	  setTimer2(50);
 800118a:	2032      	movs	r0, #50	@ 0x32
 800118c:	f000 f864 	bl	8001258 <setTimer2>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000

08001198 <test_LedDebug>:

uint16_t count_led_debug = 0;

void test_LedDebug(){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 800119c:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <test_LedDebug+0x3c>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <test_LedDebug+0x40>)
 80011a4:	fb83 1302 	smull	r1, r3, r3, r2
 80011a8:	10d9      	asrs	r1, r3, #3
 80011aa:	17d3      	asrs	r3, r2, #31
 80011ac:	1ac9      	subs	r1, r1, r3
 80011ae:	460b      	mov	r3, r1
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	1ad1      	subs	r1, r2, r3
 80011b8:	b28a      	uxth	r2, r1
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <test_LedDebug+0x3c>)
 80011bc:	801a      	strh	r2, [r3, #0]
	if(count_led_debug == 0){
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <test_LedDebug+0x3c>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d103      	bne.n	80011ce <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80011c6:	2110      	movs	r1, #16
 80011c8:	4804      	ldr	r0, [pc, #16]	@ (80011dc <test_LedDebug+0x44>)
 80011ca:	f000 ffec 	bl	80021a6 <HAL_GPIO_TogglePin>
	}
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000168 	.word	0x20000168
 80011d8:	66666667 	.word	0x66666667
 80011dc:	40021000 	.word	0x40021000

080011e0 <test_Uart>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void test_Uart(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    if(button_count[12] == 1){
 80011e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <test_Uart+0x40>)
 80011e6:	8b1b      	ldrh	r3, [r3, #24]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d117      	bne.n	800121c <test_Uart+0x3c>
        uart_Rs232SendNum(ds3231_hours);
 80011ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <test_Uart+0x44>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 faad 	bl	8001750 <uart_Rs232SendNum>
        uart_Rs232SendString((uint8_t*)":");
 80011f6:	480c      	ldr	r0, [pc, #48]	@ (8001228 <test_Uart+0x48>)
 80011f8:	f000 fa90 	bl	800171c <uart_Rs232SendString>
        uart_Rs232SendNum(ds3231_min);
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <test_Uart+0x4c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 faa5 	bl	8001750 <uart_Rs232SendNum>
        uart_Rs232SendString((uint8_t*)":");
 8001206:	4808      	ldr	r0, [pc, #32]	@ (8001228 <test_Uart+0x48>)
 8001208:	f000 fa88 	bl	800171c <uart_Rs232SendString>
        uart_Rs232SendNum(ds3231_sec);
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <test_Uart+0x50>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fa9d 	bl	8001750 <uart_Rs232SendNum>
        uart_Rs232SendString((uint8_t*)"\n");
 8001216:	4807      	ldr	r0, [pc, #28]	@ (8001234 <test_Uart+0x54>)
 8001218:	f000 fa80 	bl	800171c <uart_Rs232SendString>
    }
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000080 	.word	0x20000080
 8001224:	200000ab 	.word	0x200000ab
 8001228:	080067a4 	.word	0x080067a4
 800122c:	200000ac 	.word	0x200000ac
 8001230:	200000ad 	.word	0x200000ad
 8001234:	080067a8 	.word	0x080067a8

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <Error_Handler+0x8>

08001244 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <timer_init+0x10>)
 800124a:	f003 f889 	bl	8004360 <HAL_TIM_Base_Start_IT>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200001cc 	.word	0x200001cc

08001258 <setTimer2>:

void setTimer2(uint16_t duration){
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001262:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <setTimer2+0x2c>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <setTimer2+0x2c>)
 800126a:	881a      	ldrh	r2, [r3, #0]
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <setTimer2+0x30>)
 800126e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <setTimer2+0x34>)
 8001272:	2200      	movs	r2, #0
 8001274:	801a      	strh	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000016e 	.word	0x2000016e
 8001288:	2000016c 	.word	0x2000016c
 800128c:	2000016a 	.word	0x2000016a

08001290 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012a0:	d116      	bne.n	80012d0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d010      	beq.n	80012cc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012b4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d106      	bne.n	80012cc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80012c6:	881a      	ldrh	r2, [r3, #0]
 80012c8:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012ca:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80012cc:	f7ff fe24 	bl	8000f18 <led7_Scan>
	}
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000016c 	.word	0x2000016c
 80012dc:	2000016a 	.word	0x2000016a
 80012e0:	2000016e 	.word	0x2000016e

080012e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012e8:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <MX_SPI1_Init+0x64>)
 80012ea:	4a18      	ldr	r2, [pc, #96]	@ (800134c <MX_SPI1_Init+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <MX_SPI1_Init+0x64>)
 80012f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012f6:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_SPI1_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_SPI1_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_SPI1_Init+0x64>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_SPI1_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_SPI1_Init+0x64>)
 8001310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001314:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_SPI1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <MX_SPI1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_SPI1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <MX_SPI1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_SPI1_Init+0x64>)
 8001330:	220a      	movs	r2, #10
 8001332:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	@ (8001348 <MX_SPI1_Init+0x64>)
 8001336:	f002 f9d7 	bl	80036e8 <HAL_SPI_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001340:	f7ff ff7a 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000170 	.word	0x20000170
 800134c:	40013000 	.word	0x40013000

08001350 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <HAL_SPI_MspInit+0x84>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12b      	bne.n	80013ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	4a17      	ldr	r2, [pc, #92]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 800137c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001380:	6453      	str	r3, [r2, #68]	@ 0x44
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a10      	ldr	r2, [pc, #64]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013aa:	2338      	movs	r3, #56	@ 0x38
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ba:	2305      	movs	r3, #5
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <HAL_SPI_MspInit+0x8c>)
 80013c6:	f000 fd39 	bl	8001e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	@ 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40013000 	.word	0x40013000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	4a0f      	ldr	r2, [pc, #60]	@ (800142c <HAL_MspInit+0x4c>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f6:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	4a08      	ldr	r2, [pc, #32]	@ (800142c <HAL_MspInit+0x4c>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	@ 0x40
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <NMI_Handler+0x4>

08001438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <MemManage_Handler+0x4>

08001448 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <UsageFault_Handler+0x4>

08001458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001486:	f000 faf1 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <TIM2_IRQHandler+0x10>)
 8001496:	f002 ffd3 	bl	8004440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200001cc 	.word	0x200001cc

080014a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <USART1_IRQHandler+0x10>)
 80014aa:	f003 fc9b 	bl	8004de4 <HAL_UART_IRQHandler>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000384 	.word	0x20000384

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	@ (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	@ (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f004 fcd8 	bl	8005e9c <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	@ (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	@ (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20020000 	.word	0x20020000
 8001518:	00000400 	.word	0x00000400
 800151c:	200001c8 	.word	0x200001c8
 8001520:	20000518 	.word	0x20000518

08001524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <SystemInit+0x20>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800152e:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <SystemInit+0x20>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_TIM2_Init+0x94>)
 8001566:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800156a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <MX_TIM2_Init+0x94>)
 800156e:	f240 3247 	movw	r2, #839	@ 0x347
 8001572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <MX_TIM2_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_TIM2_Init+0x94>)
 800157c:	2263      	movs	r2, #99	@ 0x63
 800157e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <MX_TIM2_Init+0x94>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MX_TIM2_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800158c:	4813      	ldr	r0, [pc, #76]	@ (80015dc <MX_TIM2_Init+0x94>)
 800158e:	f002 fe97 	bl	80042c0 <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001598:	f7ff fe4e 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	@ (80015dc <MX_TIM2_Init+0x94>)
 80015aa:	f003 f851 	bl	8004650 <HAL_TIM_ConfigClockSource>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015b4:	f7ff fe40 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_TIM2_Init+0x94>)
 80015c6:	f003 fa6d 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015d0:	f7ff fe32 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200001cc 	.word	0x200001cc

080015e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f0:	d115      	bne.n	800161e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <HAL_TIM_Base_MspInit+0x48>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <HAL_TIM_Base_MspInit+0x48>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <HAL_TIM_Base_MspInit+0x48>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	201c      	movs	r0, #28
 8001614:	f000 fb49 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001618:	201c      	movs	r0, #28
 800161a:	f000 fb62 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <mypow>:
 *      Author: HaHuyen
 */
#include "uart.h"
#include <stdio.h>

static uint32_t mypow(uint8_t base, uint8_t exp) {
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	71bb      	strb	r3, [r7, #6]
    uint32_t result = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
    for(uint8_t i = 0; i < exp; i++) {
 8001640:	2300      	movs	r3, #0
 8001642:	72fb      	strb	r3, [r7, #11]
 8001644:	e007      	b.n	8001656 <mypow+0x2a>
        result *= base;
 8001646:	79fa      	ldrb	r2, [r7, #7]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	60fb      	str	r3, [r7, #12]
    for(uint8_t i = 0; i < exp; i++) {
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	3301      	adds	r3, #1
 8001654:	72fb      	strb	r3, [r7, #11]
 8001656:	7afa      	ldrb	r2, [r7, #11]
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	429a      	cmp	r2, r3
 800165c:	d3f3      	bcc.n	8001646 <mypow+0x1a>
    }
    return result;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <ring_buffer_init>:
uint8_t receive_buffer1 = 0;
uint8_t msg[100];
ring_buffer_t uart_ring_buffer;
volatile uint8_t uart_data_ready = 0;

void ring_buffer_init(ring_buffer_t *ring_buffer) {
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
    ring_buffer->head = 0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    ring_buffer->tail = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
    ring_buffer->count = 0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <ring_buffer_put>:

uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
    if (ring_buffer->count >= RING_BUFFER_SIZE) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80016aa:	2bff      	cmp	r3, #255	@ 0xff
 80016ac:	d901      	bls.n	80016b2 <ring_buffer_put+0x1a>
        return 0; // Buffer full
 80016ae:	2300      	movs	r3, #0
 80016b0:	e01c      	b.n	80016ec <ring_buffer_put+0x54>
    }
    
    ring_buffer->buffer[ring_buffer->head] = data;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80016b8:	4619      	mov	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	545a      	strb	r2, [r3, r1]
    ring_buffer->head = (ring_buffer->head + 1) % RING_BUFFER_SIZE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80016c6:	3301      	adds	r3, #1
 80016c8:	425a      	negs	r2, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	bf58      	it	pl
 80016d0:	4253      	negpl	r3, r2
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    ring_buffer->count++;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80016e0:	3301      	adds	r3, #1
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    return 1;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <uart_init_rs232>:

uint16_t ring_buffer_available(ring_buffer_t *ring_buffer) {
    return ring_buffer->count;
}

void uart_init_rs232() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
    ring_buffer_init(&uart_ring_buffer);
 80016fc:	4804      	ldr	r0, [pc, #16]	@ (8001710 <uart_init_rs232+0x18>)
 80016fe:	f7ff ffb5 	bl	800166c <ring_buffer_init>
    HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001702:	2201      	movs	r2, #1
 8001704:	4903      	ldr	r1, [pc, #12]	@ (8001714 <uart_init_rs232+0x1c>)
 8001706:	4804      	ldr	r0, [pc, #16]	@ (8001718 <uart_init_rs232+0x20>)
 8001708:	f003 fb3b 	bl	8004d82 <HAL_UART_Receive_IT>
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000027c 	.word	0x2000027c
 8001714:	20000214 	.word	0x20000214
 8001718:	20000384 	.word	0x20000384

0800171c <uart_Rs232SendString>:

void uart_Rs232SendString(const uint8_t* str) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4907      	ldr	r1, [pc, #28]	@ (8001744 <uart_Rs232SendString+0x28>)
 8001728:	4807      	ldr	r0, [pc, #28]	@ (8001748 <uart_Rs232SendString+0x2c>)
 800172a:	f004 fb8f 	bl	8005e4c <siprintf>
 800172e:	4603      	mov	r3, r0
 8001730:	b29a      	uxth	r2, r3
 8001732:	230a      	movs	r3, #10
 8001734:	4904      	ldr	r1, [pc, #16]	@ (8001748 <uart_Rs232SendString+0x2c>)
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <uart_Rs232SendString+0x30>)
 8001738:	f003 fa91 	bl	8004c5e <HAL_UART_Transmit>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	080067ac 	.word	0x080067ac
 8001748:	20000218 	.word	0x20000218
 800174c:	20000384 	.word	0x20000384

08001750 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size) {
    HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    if(num == 0){
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d103      	bne.n	8001766 <uart_Rs232SendNum+0x16>
        uart_Rs232SendString((uint8_t*)"0");
 800175e:	4825      	ldr	r0, [pc, #148]	@ (80017f4 <uart_Rs232SendNum+0xa4>)
 8001760:	f7ff ffdc 	bl	800171c <uart_Rs232SendString>
        return;
 8001764:	e043      	b.n	80017ee <uart_Rs232SendNum+0x9e>
    }
    uint8_t num_flag = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
    int i;
    if(num < 0) uart_Rs232SendString((uint8_t*)"-");
    for(i = 10; i > 0; i--)
 800176a:	230a      	movs	r3, #10
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	e03b      	b.n	80017e8 <uart_Rs232SendNum+0x98>
    {
        if((num / mypow(10, i-1)) != 0)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	3b01      	subs	r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4619      	mov	r1, r3
 800177a:	200a      	movs	r0, #10
 800177c:	f7ff ff56 	bl	800162c <mypow>
 8001780:	4602      	mov	r2, r0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4293      	cmp	r3, r2
 8001786:	d316      	bcc.n	80017b6 <uart_Rs232SendNum+0x66>
        {
            num_flag = 1;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%lu",num/mypow(10, i-1));
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	3b01      	subs	r3, #1
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4619      	mov	r1, r3
 8001796:	200a      	movs	r0, #10
 8001798:	f7ff ff48 	bl	800162c <mypow>
 800179c:	4602      	mov	r2, r0
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4914      	ldr	r1, [pc, #80]	@ (80017f8 <uart_Rs232SendNum+0xa8>)
 80017a8:	4814      	ldr	r0, [pc, #80]	@ (80017fc <uart_Rs232SendNum+0xac>)
 80017aa:	f004 fb4f 	bl	8005e4c <siprintf>
            uart_Rs232SendString(msg);
 80017ae:	4813      	ldr	r0, [pc, #76]	@ (80017fc <uart_Rs232SendNum+0xac>)
 80017b0:	f7ff ffb4 	bl	800171c <uart_Rs232SendString>
 80017b4:	e005      	b.n	80017c2 <uart_Rs232SendNum+0x72>
        }
        else
        {
            if(num_flag != 0)
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <uart_Rs232SendNum+0x72>
                uart_Rs232SendString((uint8_t*)"0");
 80017bc:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <uart_Rs232SendNum+0xa4>)
 80017be:	f7ff ffad 	bl	800171c <uart_Rs232SendString>
        }
        num = num % mypow(10, i-1);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	200a      	movs	r0, #10
 80017ce:	f7ff ff2d 	bl	800162c <mypow>
 80017d2:	4602      	mov	r2, r0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80017da:	fb01 f202 	mul.w	r2, r1, r2
 80017de:	1a9b      	subs	r3, r3, r2
 80017e0:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dcc0      	bgt.n	8001770 <uart_Rs232SendNum+0x20>
    }
}
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	080067b0 	.word	0x080067b0
 80017f8:	080067b4 	.word	0x080067b4
 80017fc:	20000218 	.word	0x20000218

08001800 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString((const uint8_t*)".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString((const uint8_t*)msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <HAL_UART_RxCpltCallback+0x38>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10d      	bne.n	800182e <HAL_UART_RxCpltCallback+0x2e>
        ring_buffer_put(&uart_ring_buffer, receive_buffer1);
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_UART_RxCpltCallback+0x3c>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4809      	ldr	r0, [pc, #36]	@ (8001840 <HAL_UART_RxCpltCallback+0x40>)
 800181a:	f7ff ff3d 	bl	8001698 <ring_buffer_put>
        uart_data_ready = 1;
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <HAL_UART_RxCpltCallback+0x44>)
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001824:	2201      	movs	r2, #1
 8001826:	4905      	ldr	r1, [pc, #20]	@ (800183c <HAL_UART_RxCpltCallback+0x3c>)
 8001828:	4807      	ldr	r0, [pc, #28]	@ (8001848 <HAL_UART_RxCpltCallback+0x48>)
 800182a:	f003 faaa 	bl	8004d82 <HAL_UART_Receive_IT>
    }
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40011000 	.word	0x40011000
 800183c:	20000214 	.word	0x20000214
 8001840:	2000027c 	.word	0x2000027c
 8001844:	20000382 	.word	0x20000382
 8001848:	20000384 	.word	0x20000384

0800184c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <MX_USART1_UART_Init+0x4c>)
 8001852:	4a12      	ldr	r2, [pc, #72]	@ (800189c <MX_USART1_UART_Init+0x50>)
 8001854:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <MX_USART1_UART_Init+0x4c>)
 8001858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800185c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <MX_USART1_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <MX_USART1_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800186a:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <MX_USART1_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <MX_USART1_UART_Init+0x4c>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <MX_USART1_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <MX_USART1_UART_Init+0x4c>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	@ (8001898 <MX_USART1_UART_Init+0x4c>)
 8001884:	f003 f99e 	bl	8004bc4 <HAL_UART_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800188e:	f7ff fcd3 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000384 	.word	0x20000384
 800189c:	40011000 	.word	0x40011000

080018a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001934 <HAL_UART_MspInit+0x94>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d134      	bne.n	800192c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <HAL_UART_MspInit+0x98>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001938 <HAL_UART_MspInit+0x98>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d2:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_UART_MspInit+0x98>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <HAL_UART_MspInit+0x98>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a14      	ldr	r2, [pc, #80]	@ (8001938 <HAL_UART_MspInit+0x98>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_UART_MspInit+0x98>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800190c:	2307      	movs	r3, #7
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4809      	ldr	r0, [pc, #36]	@ (800193c <HAL_UART_MspInit+0x9c>)
 8001918:	f000 fa90 	bl	8001e3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	2025      	movs	r0, #37	@ 0x25
 8001922:	f000 f9c2 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001926:	2025      	movs	r0, #37	@ 0x25
 8001928:	f000 f9db 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800192c:	bf00      	nop
 800192e:	3728      	adds	r7, #40	@ 0x28
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40011000 	.word	0x40011000
 8001938:	40023800 	.word	0x40023800
 800193c:	40020000 	.word	0x40020000

08001940 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4413      	add	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	b2da      	uxtb	r2, r3
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4413      	add	r3, r2
 8001964:	b2db      	uxtb	r3, r3
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001974:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001978:	480d      	ldr	r0, [pc, #52]	@ (80019b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800197a:	490e      	ldr	r1, [pc, #56]	@ (80019b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800197c:	4a0e      	ldr	r2, [pc, #56]	@ (80019b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0b      	ldr	r2, [pc, #44]	@ (80019bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001990:	4c0b      	ldr	r4, [pc, #44]	@ (80019c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800199e:	f7ff fdc1 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a2:	f004 fa81 	bl	8005ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a6:	f7ff fb43 	bl	8001030 <main>
  bx  lr    
 80019aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80019b8:	0800681c 	.word	0x0800681c
  ldr r2, =_sbss
 80019bc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80019c0:	20000514 	.word	0x20000514

080019c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <ADC_IRQHandler>
	...

080019c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <HAL_Init+0x40>)
 80019d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_Init+0x40>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	@ (8001a08 <HAL_Init+0x40>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 f94f 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	200f      	movs	r0, #15
 80019f8:	f000 f808 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff fcf0 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_InitTick+0x54>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_InitTick+0x58>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f967 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00e      	b.n	8001a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d80a      	bhi.n	8001a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a48:	f000 f92f 	bl	8001caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a4c:	4a06      	ldr	r2, [pc, #24]	@ (8001a68 <HAL_InitTick+0x5c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000010 	.word	0x20000010
 8001a68:	2000000c 	.word	0x2000000c

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000010 	.word	0x20000010
 8001a90:	200003c8 	.word	0x200003c8

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	200003c8 	.word	0x200003c8

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff ffee 	bl	8001a94 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000010 	.word	0x20000010

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	@ (8001b90 <__NVIC_EnableIRQ+0x38>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	@ (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	@ (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff29 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff3e 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff31 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa2 	bl	8001c50 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7ff feb6 	bl	8001a94 <HAL_GetTick>
 8001d28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d008      	beq.n	8001d48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2280      	movs	r2, #128	@ 0x80
 8001d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e052      	b.n	8001dee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0216 	bic.w	r2, r2, #22
 8001d56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d103      	bne.n	8001d78 <HAL_DMA_Abort+0x62>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0208 	bic.w	r2, r2, #8
 8001d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d98:	e013      	b.n	8001dc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d9a:	f7ff fe7b 	bl	8001a94 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d90c      	bls.n	8001dc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e015      	b.n	8001dee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1e4      	bne.n	8001d9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	223f      	movs	r2, #63	@ 0x3f
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d004      	beq.n	8001e14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e00c      	b.n	8001e2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2205      	movs	r2, #5
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	@ 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e16b      	b.n	8002130 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 815a 	bne.w	800212a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d005      	beq.n	8001e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d130      	bne.n	8001ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d017      	beq.n	8001f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d123      	bne.n	8001f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80b4 	beq.w	800212a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b60      	ldr	r3, [pc, #384]	@ (8002148 <HAL_GPIO_Init+0x30c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	4a5f      	ldr	r2, [pc, #380]	@ (8002148 <HAL_GPIO_Init+0x30c>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002148 <HAL_GPIO_Init+0x30c>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fde:	4a5b      	ldr	r2, [pc, #364]	@ (800214c <HAL_GPIO_Init+0x310>)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a52      	ldr	r2, [pc, #328]	@ (8002150 <HAL_GPIO_Init+0x314>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d02b      	beq.n	8002062 <HAL_GPIO_Init+0x226>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a51      	ldr	r2, [pc, #324]	@ (8002154 <HAL_GPIO_Init+0x318>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d025      	beq.n	800205e <HAL_GPIO_Init+0x222>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a50      	ldr	r2, [pc, #320]	@ (8002158 <HAL_GPIO_Init+0x31c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d01f      	beq.n	800205a <HAL_GPIO_Init+0x21e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4f      	ldr	r2, [pc, #316]	@ (800215c <HAL_GPIO_Init+0x320>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d019      	beq.n	8002056 <HAL_GPIO_Init+0x21a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4e      	ldr	r2, [pc, #312]	@ (8002160 <HAL_GPIO_Init+0x324>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_GPIO_Init+0x216>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4d      	ldr	r2, [pc, #308]	@ (8002164 <HAL_GPIO_Init+0x328>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00d      	beq.n	800204e <HAL_GPIO_Init+0x212>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4c      	ldr	r2, [pc, #304]	@ (8002168 <HAL_GPIO_Init+0x32c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <HAL_GPIO_Init+0x20e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4b      	ldr	r2, [pc, #300]	@ (800216c <HAL_GPIO_Init+0x330>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_GPIO_Init+0x20a>
 8002042:	2307      	movs	r3, #7
 8002044:	e00e      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002046:	2308      	movs	r3, #8
 8002048:	e00c      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800204a:	2306      	movs	r3, #6
 800204c:	e00a      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800204e:	2305      	movs	r3, #5
 8002050:	e008      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002052:	2304      	movs	r3, #4
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002056:	2303      	movs	r3, #3
 8002058:	e004      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800205a:	2302      	movs	r3, #2
 800205c:	e002      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002062:	2300      	movs	r3, #0
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	f002 0203 	and.w	r2, r2, #3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4093      	lsls	r3, r2
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002074:	4935      	ldr	r1, [pc, #212]	@ (800214c <HAL_GPIO_Init+0x310>)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	3302      	adds	r3, #2
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002082:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <HAL_GPIO_Init+0x334>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a6:	4a32      	ldr	r2, [pc, #200]	@ (8002170 <HAL_GPIO_Init+0x334>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020ac:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <HAL_GPIO_Init+0x334>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d0:	4a27      	ldr	r2, [pc, #156]	@ (8002170 <HAL_GPIO_Init+0x334>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020d6:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <HAL_GPIO_Init+0x334>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <HAL_GPIO_Init+0x334>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_GPIO_Init+0x334>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002124:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <HAL_GPIO_Init+0x334>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3301      	adds	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	f67f ae90 	bls.w	8001e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3724      	adds	r7, #36	@ 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	40013800 	.word	0x40013800
 8002150:	40020000 	.word	0x40020000
 8002154:	40020400 	.word	0x40020400
 8002158:	40020800 	.word	0x40020800
 800215c:	40020c00 	.word	0x40020c00
 8002160:	40021000 	.word	0x40021000
 8002164:	40021400 	.word	0x40021400
 8002168:	40021800 	.word	0x40021800
 800216c:	40021c00 	.word	0x40021c00
 8002170:	40013c00 	.word	0x40013c00

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021b8:	887a      	ldrh	r2, [r7, #2]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	041a      	lsls	r2, r3, #16
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	400b      	ands	r3, r1
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e12b      	b.n	8002446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fc7e 	bl	8000b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2224      	movs	r2, #36	@ 0x24
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800222e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800223e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002240:	f001 fa2a 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8002244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a81      	ldr	r2, [pc, #516]	@ (8002450 <HAL_I2C_Init+0x274>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d807      	bhi.n	8002260 <HAL_I2C_Init+0x84>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a80      	ldr	r2, [pc, #512]	@ (8002454 <HAL_I2C_Init+0x278>)
 8002254:	4293      	cmp	r3, r2
 8002256:	bf94      	ite	ls
 8002258:	2301      	movls	r3, #1
 800225a:	2300      	movhi	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e006      	b.n	800226e <HAL_I2C_Init+0x92>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a7d      	ldr	r2, [pc, #500]	@ (8002458 <HAL_I2C_Init+0x27c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	bf94      	ite	ls
 8002268:	2301      	movls	r3, #1
 800226a:	2300      	movhi	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0e7      	b.n	8002446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a78      	ldr	r2, [pc, #480]	@ (800245c <HAL_I2C_Init+0x280>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0c9b      	lsrs	r3, r3, #18
 8002280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002450 <HAL_I2C_Init+0x274>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d802      	bhi.n	80022b0 <HAL_I2C_Init+0xd4>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3301      	adds	r3, #1
 80022ae:	e009      	b.n	80022c4 <HAL_I2C_Init+0xe8>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	4a69      	ldr	r2, [pc, #420]	@ (8002460 <HAL_I2C_Init+0x284>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	3301      	adds	r3, #1
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	495c      	ldr	r1, [pc, #368]	@ (8002450 <HAL_I2C_Init+0x274>)
 80022e0:	428b      	cmp	r3, r1
 80022e2:	d819      	bhi.n	8002318 <HAL_I2C_Init+0x13c>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e59      	subs	r1, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f2:	1c59      	adds	r1, r3, #1
 80022f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022f8:	400b      	ands	r3, r1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_I2C_Init+0x138>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e59      	subs	r1, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fbb1 f3f3 	udiv	r3, r1, r3
 800230c:	3301      	adds	r3, #1
 800230e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002312:	e051      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002314:	2304      	movs	r3, #4
 8002316:	e04f      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d111      	bne.n	8002344 <HAL_I2C_Init+0x168>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf0c      	ite	eq
 800233c:	2301      	moveq	r3, #1
 800233e:	2300      	movne	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	e012      	b.n	800236a <HAL_I2C_Init+0x18e>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e58      	subs	r0, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	0099      	lsls	r1, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	fbb0 f3f3 	udiv	r3, r0, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Init+0x196>
 800236e:	2301      	movs	r3, #1
 8002370:	e022      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10e      	bne.n	8002398 <HAL_I2C_Init+0x1bc>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1e58      	subs	r0, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	440b      	add	r3, r1
 8002388:	fbb0 f3f3 	udiv	r3, r0, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002396:	e00f      	b.n	80023b8 <HAL_I2C_Init+0x1dc>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e58      	subs	r0, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	0099      	lsls	r1, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	6809      	ldr	r1, [r1, #0]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69da      	ldr	r2, [r3, #28]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6911      	ldr	r1, [r2, #16]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68d2      	ldr	r2, [r2, #12]
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	000186a0 	.word	0x000186a0
 8002454:	001e847f 	.word	0x001e847f
 8002458:	003d08ff 	.word	0x003d08ff
 800245c:	431bde83 	.word	0x431bde83
 8002460:	10624dd3 	.word	0x10624dd3

08002464 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	@ 0x30
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	461a      	mov	r2, r3
 8002472:	4603      	mov	r3, r0
 8002474:	817b      	strh	r3, [r7, #10]
 8002476:	460b      	mov	r3, r1
 8002478:	813b      	strh	r3, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800247e:	f7ff fb09 	bl	8001a94 <HAL_GetTick>
 8002482:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b20      	cmp	r3, #32
 800248e:	f040 8208 	bne.w	80028a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2319      	movs	r3, #25
 8002498:	2201      	movs	r2, #1
 800249a:	497b      	ldr	r1, [pc, #492]	@ (8002688 <HAL_I2C_Mem_Read+0x224>)
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 faef 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
 80024aa:	e1fb      	b.n	80028a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_I2C_Mem_Read+0x56>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e1f4      	b.n	80028a4 <HAL_I2C_Mem_Read+0x440>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d007      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2222      	movs	r2, #34	@ 0x22
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2240      	movs	r2, #64	@ 0x40
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800250a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002510:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a5b      	ldr	r2, [pc, #364]	@ (800268c <HAL_I2C_Mem_Read+0x228>)
 8002520:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002522:	88f8      	ldrh	r0, [r7, #6]
 8002524:	893a      	ldrh	r2, [r7, #8]
 8002526:	8979      	ldrh	r1, [r7, #10]
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	4603      	mov	r3, r0
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f9bc 	bl	80028b0 <I2C_RequestMemoryRead>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1b0      	b.n	80028a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002546:	2b00      	cmp	r3, #0
 8002548:	d113      	bne.n	8002572 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e184      	b.n	800287c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002576:	2b01      	cmp	r3, #1
 8002578:	d11b      	bne.n	80025b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002588:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e164      	b.n	800287c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d11b      	bne.n	80025f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	e144      	b.n	800287c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002608:	e138      	b.n	800287c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260e:	2b03      	cmp	r3, #3
 8002610:	f200 80f1 	bhi.w	80027f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002618:	2b01      	cmp	r3, #1
 800261a:	d123      	bne.n	8002664 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fb44 	bl	8002cae <I2C_WaitOnRXNEFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e139      	b.n	80028a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002662:	e10b      	b.n	800287c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002668:	2b02      	cmp	r3, #2
 800266a:	d14e      	bne.n	800270a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002672:	2200      	movs	r2, #0
 8002674:	4906      	ldr	r1, [pc, #24]	@ (8002690 <HAL_I2C_Mem_Read+0x22c>)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fa02 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e10e      	b.n	80028a4 <HAL_I2C_Mem_Read+0x440>
 8002686:	bf00      	nop
 8002688:	00100002 	.word	0x00100002
 800268c:	ffff0000 	.word	0xffff0000
 8002690:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002708:	e0b8      	b.n	800287c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002710:	2200      	movs	r2, #0
 8002712:	4966      	ldr	r1, [pc, #408]	@ (80028ac <HAL_I2C_Mem_Read+0x448>)
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f9b3 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0bf      	b.n	80028a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800276c:	2200      	movs	r2, #0
 800276e:	494f      	ldr	r1, [pc, #316]	@ (80028ac <HAL_I2C_Mem_Read+0x448>)
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f985 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e091      	b.n	80028a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800278e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027f4:	e042      	b.n	800287c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fa57 	bl	8002cae <I2C_WaitOnRXNEFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e04c      	b.n	80028a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b04      	cmp	r3, #4
 8002848:	d118      	bne.n	800287c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002880:	2b00      	cmp	r3, #0
 8002882:	f47f aec2 	bne.w	800260a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3728      	adds	r7, #40	@ 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	00010004 	.word	0x00010004

080028b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	4608      	mov	r0, r1
 80028ba:	4611      	mov	r1, r2
 80028bc:	461a      	mov	r2, r3
 80028be:	4603      	mov	r3, r0
 80028c0:	817b      	strh	r3, [r7, #10]
 80028c2:	460b      	mov	r3, r1
 80028c4:	813b      	strh	r3, [r7, #8]
 80028c6:	4613      	mov	r3, r2
 80028c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f8c2 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002910:	d103      	bne.n	800291a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002918:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e0aa      	b.n	8002a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800292c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	4952      	ldr	r1, [pc, #328]	@ (8002a7c <I2C_RequestMemoryRead+0x1cc>)
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f8fa 	bl	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e097      	b.n	8002a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800295a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800295c:	6a39      	ldr	r1, [r7, #32]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f964 	bl	8002c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	2b04      	cmp	r3, #4
 8002970:	d107      	bne.n	8002982 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002980:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e076      	b.n	8002a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800298c:	893b      	ldrh	r3, [r7, #8]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	611a      	str	r2, [r3, #16]
 8002996:	e021      	b.n	80029dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002998:	893b      	ldrh	r3, [r7, #8]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	b29b      	uxth	r3, r3
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a8:	6a39      	ldr	r1, [r7, #32]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f93e 	bl	8002c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d107      	bne.n	80029ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e050      	b.n	8002a74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029d2:	893b      	ldrh	r3, [r7, #8]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029de:	6a39      	ldr	r1, [r7, #32]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f923 	bl	8002c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00d      	beq.n	8002a08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d107      	bne.n	8002a04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e035      	b.n	8002a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f82b 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a3e:	d103      	bne.n	8002a48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e013      	b.n	8002a74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a4c:	897b      	ldrh	r3, [r7, #10]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	6a3a      	ldr	r2, [r7, #32]
 8002a60:	4906      	ldr	r1, [pc, #24]	@ (8002a7c <I2C_RequestMemoryRead+0x1cc>)
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f863 	bl	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	00010002 	.word	0x00010002

08002a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a90:	e025      	b.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a98:	d021      	beq.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9a:	f7fe fffb 	bl	8001a94 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d116      	bne.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e023      	b.n	8002b26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d10d      	bne.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4013      	ands	r3, r2
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf0c      	ite	eq
 8002afa:	2301      	moveq	r3, #1
 8002afc:	2300      	movne	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	e00c      	b.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf0c      	ite	eq
 8002b16:	2301      	moveq	r3, #1
 8002b18:	2300      	movne	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d0b6      	beq.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b3c:	e051      	b.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b4c:	d123      	bne.n	8002b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f043 0204 	orr.w	r2, r3, #4
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e046      	b.n	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b9c:	d021      	beq.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	f7fe ff79 	bl	8001a94 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d116      	bne.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f043 0220 	orr.w	r2, r3, #32
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e020      	b.n	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10c      	bne.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	e00b      	b.n	8002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4013      	ands	r3, r2
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf14      	ite	ne
 8002c18:	2301      	movne	r3, #1
 8002c1a:	2300      	moveq	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d18d      	bne.n	8002b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c38:	e02d      	b.n	8002c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f88d 	bl	8002d5a <I2C_IsAcknowledgeFailed>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e02d      	b.n	8002ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c50:	d021      	beq.n	8002c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7fe ff1f 	bl	8001a94 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d116      	bne.n	8002c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e007      	b.n	8002ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca0:	2b80      	cmp	r3, #128	@ 0x80
 8002ca2:	d1ca      	bne.n	8002c3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cba:	e042      	b.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d119      	bne.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f06f 0210 	mvn.w	r2, #16
 8002cd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e029      	b.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7fe fec9 	bl	8001a94 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	f043 0220 	orr.w	r2, r3, #32
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e007      	b.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4c:	2b40      	cmp	r3, #64	@ 0x40
 8002d4e:	d1b5      	bne.n	8002cbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d70:	d11b      	bne.n	8002daa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f043 0204 	orr.w	r2, r3, #4
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e267      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d075      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dd6:	4b88      	ldr	r3, [pc, #544]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d00c      	beq.n	8002dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de2:	4b85      	ldr	r3, [pc, #532]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d112      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dee:	4b82      	ldr	r3, [pc, #520]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x108>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d157      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e242      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x74>
 8002e1e:	4b76      	ldr	r3, [pc, #472]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a75      	ldr	r2, [pc, #468]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x98>
 8002e36:	4b70      	ldr	r3, [pc, #448]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6f      	ldr	r2, [pc, #444]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b6d      	ldr	r3, [pc, #436]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a6c      	ldr	r2, [pc, #432]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e50:	4b69      	ldr	r3, [pc, #420]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a68      	ldr	r2, [pc, #416]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b66      	ldr	r3, [pc, #408]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a65      	ldr	r2, [pc, #404]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fe fe10 	bl	8001a94 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe fe0c 	bl	8001a94 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	@ 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e207      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0xc0>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe fdfc 	bl	8001a94 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fe fdf8 	bl	8001a94 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e1f3      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	4b51      	ldr	r3, [pc, #324]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xe8>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d063      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ece:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eda:	4b47      	ldr	r3, [pc, #284]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d11c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ee6:	4b44      	ldr	r3, [pc, #272]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d116      	bne.n	8002f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef2:	4b41      	ldr	r3, [pc, #260]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_RCC_OscConfig+0x152>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e1c7      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4937      	ldr	r1, [pc, #220]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	e03a      	b.n	8002f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f28:	4b34      	ldr	r3, [pc, #208]	@ (8002ffc <HAL_RCC_OscConfig+0x244>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fdb1 	bl	8001a94 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f36:	f7fe fdad 	bl	8001a94 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1a8      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f48:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f54:	4b28      	ldr	r3, [pc, #160]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4925      	ldr	r1, [pc, #148]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	600b      	str	r3, [r1, #0]
 8002f68:	e015      	b.n	8002f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6a:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <HAL_RCC_OscConfig+0x244>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fd90 	bl	8001a94 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f78:	f7fe fd8c 	bl	8001a94 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e187      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d036      	beq.n	8003010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d016      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002faa:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <HAL_RCC_OscConfig+0x248>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fd70 	bl	8001a94 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb8:	f7fe fd6c 	bl	8001a94 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e167      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fca:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x200>
 8002fd6:	e01b      	b.n	8003010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd8:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <HAL_RCC_OscConfig+0x248>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fde:	f7fe fd59 	bl	8001a94 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe4:	e00e      	b.n	8003004 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe6:	f7fe fd55 	bl	8001a94 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d907      	bls.n	8003004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e150      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	42470000 	.word	0x42470000
 8003000:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	4b88      	ldr	r3, [pc, #544]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ea      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8097 	beq.w	800314c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003022:	4b81      	ldr	r3, [pc, #516]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10f      	bne.n	800304e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	4b7d      	ldr	r3, [pc, #500]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	4a7c      	ldr	r2, [pc, #496]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	@ 0x40
 800303e:	4b7a      	ldr	r3, [pc, #488]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304a:	2301      	movs	r3, #1
 800304c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304e:	4b77      	ldr	r3, [pc, #476]	@ (800322c <HAL_RCC_OscConfig+0x474>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d118      	bne.n	800308c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800305a:	4b74      	ldr	r3, [pc, #464]	@ (800322c <HAL_RCC_OscConfig+0x474>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a73      	ldr	r2, [pc, #460]	@ (800322c <HAL_RCC_OscConfig+0x474>)
 8003060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003066:	f7fe fd15 	bl	8001a94 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306e:	f7fe fd11 	bl	8001a94 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e10c      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	4b6a      	ldr	r3, [pc, #424]	@ (800322c <HAL_RCC_OscConfig+0x474>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x2ea>
 8003094:	4b64      	ldr	r3, [pc, #400]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003098:	4a63      	ldr	r2, [pc, #396]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a0:	e01c      	b.n	80030dc <HAL_RCC_OscConfig+0x324>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x30c>
 80030aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c2:	e00b      	b.n	80030dc <HAL_RCC_OscConfig+0x324>
 80030c4:	4b58      	ldr	r3, [pc, #352]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c8:	4a57      	ldr	r2, [pc, #348]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d0:	4b55      	ldr	r3, [pc, #340]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d4:	4a54      	ldr	r2, [pc, #336]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 80030d6:	f023 0304 	bic.w	r3, r3, #4
 80030da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d015      	beq.n	8003110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe fcd6 	bl	8001a94 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7fe fcd2 	bl	8001a94 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0cb      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	4b49      	ldr	r3, [pc, #292]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0ee      	beq.n	80030ec <HAL_RCC_OscConfig+0x334>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003110:	f7fe fcc0 	bl	8001a94 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fe fcbc 	bl	8001a94 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e0b5      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312e:	4b3e      	ldr	r3, [pc, #248]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ee      	bne.n	8003118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003140:	4b39      	ldr	r3, [pc, #228]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	4a38      	ldr	r2, [pc, #224]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800314a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80a1 	beq.w	8003298 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003156:	4b34      	ldr	r3, [pc, #208]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b08      	cmp	r3, #8
 8003160:	d05c      	beq.n	800321c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d141      	bne.n	80031ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b31      	ldr	r3, [pc, #196]	@ (8003230 <HAL_RCC_OscConfig+0x478>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fc90 	bl	8001a94 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003178:	f7fe fc8c 	bl	8001a94 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e087      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	4b27      	ldr	r3, [pc, #156]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	019b      	lsls	r3, r3, #6
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	3b01      	subs	r3, #1
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	491b      	ldr	r1, [pc, #108]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <HAL_RCC_OscConfig+0x478>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fc65 	bl	8001a94 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fe fc61 	bl	8001a94 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e05c      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e0:	4b11      	ldr	r3, [pc, #68]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x416>
 80031ec:	e054      	b.n	8003298 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <HAL_RCC_OscConfig+0x478>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe fc4e 	bl	8001a94 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fe fc4a 	bl	8001a94 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e045      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320e:	4b06      	ldr	r3, [pc, #24]	@ (8003228 <HAL_RCC_OscConfig+0x470>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x444>
 800321a:	e03d      	b.n	8003298 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d107      	bne.n	8003234 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e038      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
 8003228:	40023800 	.word	0x40023800
 800322c:	40007000 	.word	0x40007000
 8003230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003234:	4b1b      	ldr	r3, [pc, #108]	@ (80032a4 <HAL_RCC_OscConfig+0x4ec>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d028      	beq.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d121      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d11a      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003264:	4013      	ands	r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800326a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800326c:	4293      	cmp	r3, r2
 800326e:	d111      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	3b01      	subs	r3, #1
 800327e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d107      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800

080032a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0cc      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032bc:	4b68      	ldr	r3, [pc, #416]	@ (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d90c      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b65      	ldr	r3, [pc, #404]	@ (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b63      	ldr	r3, [pc, #396]	@ (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0b8      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032fc:	4b59      	ldr	r3, [pc, #356]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a58      	ldr	r2, [pc, #352]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003314:	4b53      	ldr	r3, [pc, #332]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a52      	ldr	r2, [pc, #328]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800331e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003320:	4b50      	ldr	r3, [pc, #320]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	494d      	ldr	r1, [pc, #308]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d044      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	4b47      	ldr	r3, [pc, #284]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d119      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e07f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d003      	beq.n	8003366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003362:	2b03      	cmp	r3, #3
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	4b3f      	ldr	r3, [pc, #252]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e06f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	4b3b      	ldr	r3, [pc, #236]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e067      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b37      	ldr	r3, [pc, #220]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4934      	ldr	r1, [pc, #208]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003398:	f7fe fb7c 	bl	8001a94 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7fe fb78 	bl	8001a94 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e04f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b25      	ldr	r3, [pc, #148]	@ (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d20c      	bcs.n	80033f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b22      	ldr	r3, [pc, #136]	@ (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e032      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033fc:	4b19      	ldr	r3, [pc, #100]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4916      	ldr	r1, [pc, #88]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800341a:	4b12      	ldr	r3, [pc, #72]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	490e      	ldr	r1, [pc, #56]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800342e:	f000 f821 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8003432:	4602      	mov	r2, r0
 8003434:	4b0b      	ldr	r3, [pc, #44]	@ (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	490a      	ldr	r1, [pc, #40]	@ (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	5ccb      	ldrb	r3, [r1, r3]
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	4a09      	ldr	r2, [pc, #36]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800344a:	4b09      	ldr	r3, [pc, #36]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe fadc 	bl	8001a0c <HAL_InitTick>

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40023c00 	.word	0x40023c00
 8003464:	40023800 	.word	0x40023800
 8003468:	080067c0 	.word	0x080067c0
 800346c:	20000008 	.word	0x20000008
 8003470:	2000000c 	.word	0x2000000c

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003478:	b094      	sub	sp, #80	@ 0x50
 800347a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003480:	2300      	movs	r3, #0
 8003482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003484:	2300      	movs	r3, #0
 8003486:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800348c:	4b79      	ldr	r3, [pc, #484]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b08      	cmp	r3, #8
 8003496:	d00d      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003498:	2b08      	cmp	r3, #8
 800349a:	f200 80e1 	bhi.w	8003660 <HAL_RCC_GetSysClockFreq+0x1ec>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x34>
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d003      	beq.n	80034ae <HAL_RCC_GetSysClockFreq+0x3a>
 80034a6:	e0db      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b73      	ldr	r3, [pc, #460]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x204>)
 80034aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80034ac:	e0db      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ae:	4b73      	ldr	r3, [pc, #460]	@ (800367c <HAL_RCC_GetSysClockFreq+0x208>)
 80034b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034b2:	e0d8      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034be:	4b6d      	ldr	r3, [pc, #436]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d063      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	2200      	movs	r2, #0
 80034d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80034de:	2300      	movs	r3, #0
 80034e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80034e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034e6:	4622      	mov	r2, r4
 80034e8:	462b      	mov	r3, r5
 80034ea:	f04f 0000 	mov.w	r0, #0
 80034ee:	f04f 0100 	mov.w	r1, #0
 80034f2:	0159      	lsls	r1, r3, #5
 80034f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f8:	0150      	lsls	r0, r2, #5
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4621      	mov	r1, r4
 8003500:	1a51      	subs	r1, r2, r1
 8003502:	6139      	str	r1, [r7, #16]
 8003504:	4629      	mov	r1, r5
 8003506:	eb63 0301 	sbc.w	r3, r3, r1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003518:	4659      	mov	r1, fp
 800351a:	018b      	lsls	r3, r1, #6
 800351c:	4651      	mov	r1, sl
 800351e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003522:	4651      	mov	r1, sl
 8003524:	018a      	lsls	r2, r1, #6
 8003526:	4651      	mov	r1, sl
 8003528:	ebb2 0801 	subs.w	r8, r2, r1
 800352c:	4659      	mov	r1, fp
 800352e:	eb63 0901 	sbc.w	r9, r3, r1
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800353e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003546:	4690      	mov	r8, r2
 8003548:	4699      	mov	r9, r3
 800354a:	4623      	mov	r3, r4
 800354c:	eb18 0303 	adds.w	r3, r8, r3
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	462b      	mov	r3, r5
 8003554:	eb49 0303 	adc.w	r3, r9, r3
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003566:	4629      	mov	r1, r5
 8003568:	024b      	lsls	r3, r1, #9
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003570:	4621      	mov	r1, r4
 8003572:	024a      	lsls	r2, r1, #9
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800357a:	2200      	movs	r2, #0
 800357c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800357e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003580:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003584:	f7fc fe74 	bl	8000270 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003590:	e058      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003592:	4b38      	ldr	r3, [pc, #224]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	2200      	movs	r2, #0
 800359a:	4618      	mov	r0, r3
 800359c:	4611      	mov	r1, r2
 800359e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035a2:	623b      	str	r3, [r7, #32]
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035ac:	4642      	mov	r2, r8
 80035ae:	464b      	mov	r3, r9
 80035b0:	f04f 0000 	mov.w	r0, #0
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	0159      	lsls	r1, r3, #5
 80035ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035be:	0150      	lsls	r0, r2, #5
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4641      	mov	r1, r8
 80035c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80035ca:	4649      	mov	r1, r9
 80035cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035e4:	ebb2 040a 	subs.w	r4, r2, sl
 80035e8:	eb63 050b 	sbc.w	r5, r3, fp
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	00eb      	lsls	r3, r5, #3
 80035f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fa:	00e2      	lsls	r2, r4, #3
 80035fc:	4614      	mov	r4, r2
 80035fe:	461d      	mov	r5, r3
 8003600:	4643      	mov	r3, r8
 8003602:	18e3      	adds	r3, r4, r3
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	464b      	mov	r3, r9
 8003608:	eb45 0303 	adc.w	r3, r5, r3
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361a:	4629      	mov	r1, r5
 800361c:	028b      	lsls	r3, r1, #10
 800361e:	4621      	mov	r1, r4
 8003620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003624:	4621      	mov	r1, r4
 8003626:	028a      	lsls	r2, r1, #10
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800362e:	2200      	movs	r2, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	61fa      	str	r2, [r7, #28]
 8003634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003638:	f7fc fe1a 	bl	8000270 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	3301      	adds	r3, #1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003654:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x204>)
 8003662:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003668:	4618      	mov	r0, r3
 800366a:	3750      	adds	r7, #80	@ 0x50
 800366c:	46bd      	mov	sp, r7
 800366e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	00f42400 	.word	0x00f42400
 800367c:	007a1200 	.word	0x007a1200

08003680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003684:	4b03      	ldr	r3, [pc, #12]	@ (8003694 <HAL_RCC_GetHCLKFreq+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000008 	.word	0x20000008

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff0 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	@ (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	080067d0 	.word	0x080067d0

080036c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c4:	f7ff ffdc 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0b5b      	lsrs	r3, r3, #13
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	@ (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	080067d0 	.word	0x080067d0

080036e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e07b      	b.n	80037f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d108      	bne.n	8003714 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800370a:	d009      	beq.n	8003720 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	61da      	str	r2, [r3, #28]
 8003712:	e005      	b.n	8003720 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd fe08 	bl	8001350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003756:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a4:	ea42 0103 	orr.w	r1, r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0104 	and.w	r1, r3, #4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	f003 0210 	and.w	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b088      	sub	sp, #32
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_SPI_Transmit+0x22>
 8003818:	2302      	movs	r3, #2
 800381a:	e126      	b.n	8003a6a <HAL_SPI_Transmit+0x270>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003824:	f7fe f936 	bl	8001a94 <HAL_GetTick>
 8003828:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d002      	beq.n	8003840 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800383a:	2302      	movs	r3, #2
 800383c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800383e:	e10b      	b.n	8003a58 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_SPI_Transmit+0x52>
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003850:	e102      	b.n	8003a58 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2203      	movs	r2, #3
 8003856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	88fa      	ldrh	r2, [r7, #6]
 800386a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003898:	d10f      	bne.n	80038ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c4:	2b40      	cmp	r3, #64	@ 0x40
 80038c6:	d007      	beq.n	80038d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e0:	d14b      	bne.n	800397a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_SPI_Transmit+0xf6>
 80038ea:	8afb      	ldrh	r3, [r7, #22]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d13e      	bne.n	800396e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	881a      	ldrh	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003900:	1c9a      	adds	r2, r3, #2
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003914:	e02b      	b.n	800396e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b02      	cmp	r3, #2
 8003922:	d112      	bne.n	800394a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	1c9a      	adds	r2, r3, #2
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003948:	e011      	b.n	800396e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800394a:	f7fe f8a3 	bl	8001a94 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d803      	bhi.n	8003962 <HAL_SPI_Transmit+0x168>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003960:	d102      	bne.n	8003968 <HAL_SPI_Transmit+0x16e>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800396c:	e074      	b.n	8003a58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ce      	bne.n	8003916 <HAL_SPI_Transmit+0x11c>
 8003978:	e04c      	b.n	8003a14 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_SPI_Transmit+0x18e>
 8003982:	8afb      	ldrh	r3, [r7, #22]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d140      	bne.n	8003a0a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	7812      	ldrb	r2, [r2, #0]
 8003994:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039ae:	e02c      	b.n	8003a0a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d113      	bne.n	80039e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	330c      	adds	r3, #12
 80039c8:	7812      	ldrb	r2, [r2, #0]
 80039ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039e4:	e011      	b.n	8003a0a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e6:	f7fe f855 	bl	8001a94 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d803      	bhi.n	80039fe <HAL_SPI_Transmit+0x204>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039fc:	d102      	bne.n	8003a04 <HAL_SPI_Transmit+0x20a>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a08:	e026      	b.n	8003a58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1cd      	bne.n	80039b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	6839      	ldr	r1, [r7, #0]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fbcb 	bl	80041b4 <SPI_EndRxTxTransaction>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e000      	b.n	8003a58 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b088      	sub	sp, #32
 8003a76:	af02      	add	r7, sp, #8
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a8e:	d112      	bne.n	8003ab6 <HAL_SPI_Receive+0x44>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10e      	bne.n	8003ab6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003aa0:	88fa      	ldrh	r2, [r7, #6]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f8f1 	bl	8003c94 <HAL_SPI_TransmitReceive>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	e0ea      	b.n	8003c8c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_SPI_Receive+0x52>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e0e3      	b.n	8003c8c <HAL_SPI_Receive+0x21a>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003acc:	f7fd ffe2 	bl	8001a94 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d002      	beq.n	8003ae4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ae2:	e0ca      	b.n	8003c7a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_SPI_Receive+0x7e>
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003af4:	e0c1      	b.n	8003c7a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2204      	movs	r2, #4
 8003afa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	88fa      	ldrh	r2, [r7, #6]
 8003b0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b3c:	d10f      	bne.n	8003b5e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b68:	2b40      	cmp	r3, #64	@ 0x40
 8003b6a:	d007      	beq.n	8003b7c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d162      	bne.n	8003c4a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b84:	e02e      	b.n	8003be4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d115      	bne.n	8003bc0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f103 020c 	add.w	r2, r3, #12
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	7812      	ldrb	r2, [r2, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bbe:	e011      	b.n	8003be4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bc0:	f7fd ff68 	bl	8001a94 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d803      	bhi.n	8003bd8 <HAL_SPI_Receive+0x166>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bd6:	d102      	bne.n	8003bde <HAL_SPI_Receive+0x16c>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003be2:	e04a      	b.n	8003c7a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1cb      	bne.n	8003b86 <HAL_SPI_Receive+0x114>
 8003bee:	e031      	b.n	8003c54 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d113      	bne.n	8003c26 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	b292      	uxth	r2, r2
 8003c0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c24:	e011      	b.n	8003c4a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c26:	f7fd ff35 	bl	8001a94 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d803      	bhi.n	8003c3e <HAL_SPI_Receive+0x1cc>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c3c:	d102      	bne.n	8003c44 <HAL_SPI_Receive+0x1d2>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c48:	e017      	b.n	8003c7a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1cd      	bne.n	8003bf0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	6839      	ldr	r1, [r7, #0]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fa45 	bl	80040e8 <SPI_EndRxTransaction>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
 8003c76:	e000      	b.n	8003c7a <HAL_SPI_Receive+0x208>
  }

error :
 8003c78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08c      	sub	sp, #48	@ 0x30
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x26>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e18a      	b.n	8003fd0 <HAL_SPI_TransmitReceive+0x33c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cc2:	f7fd fee7 	bl	8001a94 <HAL_GetTick>
 8003cc6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cd8:	887b      	ldrh	r3, [r7, #2]
 8003cda:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d00f      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x70>
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cea:	d107      	bne.n	8003cfc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d103      	bne.n	8003cfc <HAL_SPI_TransmitReceive+0x68>
 8003cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d003      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003d02:	e15b      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_SPI_TransmitReceive+0x82>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_SPI_TransmitReceive+0x82>
 8003d10:	887b      	ldrh	r3, [r7, #2]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003d1c:	e14e      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d003      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2205      	movs	r2, #5
 8003d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	887a      	ldrh	r2, [r7, #2]
 8003d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	887a      	ldrh	r2, [r7, #2]
 8003d5a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d72:	2b40      	cmp	r3, #64	@ 0x40
 8003d74:	d007      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8e:	d178      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_SPI_TransmitReceive+0x10a>
 8003d98:	8b7b      	ldrh	r3, [r7, #26]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d166      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	881a      	ldrh	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	1c9a      	adds	r2, r3, #2
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc2:	e053      	b.n	8003e6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d11b      	bne.n	8003e0a <HAL_SPI_TransmitReceive+0x176>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x176>
 8003ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d113      	bne.n	8003e0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	881a      	ldrh	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	1c9a      	adds	r2, r3, #2
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d119      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x1b8>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d014      	beq.n	8003e4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	b292      	uxth	r2, r2
 8003e2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e34:	1c9a      	adds	r2, r3, #2
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e4c:	f7fd fe22 	bl	8001a94 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d807      	bhi.n	8003e6c <HAL_SPI_TransmitReceive+0x1d8>
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e62:	d003      	beq.n	8003e6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8003e6a:	e0a7      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1a6      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x130>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1a1      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x130>
 8003e80:	e07c      	b.n	8003f7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_SPI_TransmitReceive+0x1fc>
 8003e8a:	8b7b      	ldrh	r3, [r7, #26]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d16b      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb6:	e057      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d11c      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x26c>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d017      	beq.n	8003f00 <HAL_SPI_TransmitReceive+0x26c>
 8003ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d114      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	330c      	adds	r3, #12
 8003ee0:	7812      	ldrb	r2, [r2, #0]
 8003ee2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d119      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x2ae>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d014      	beq.n	8003f42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f42:	f7fd fda7 	bl	8001a94 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d803      	bhi.n	8003f5a <HAL_SPI_TransmitReceive+0x2c6>
 8003f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f58:	d102      	bne.n	8003f60 <HAL_SPI_TransmitReceive+0x2cc>
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d103      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8003f66:	e029      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1a2      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x224>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d19d      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f917 	bl	80041b4 <SPI_EndRxTxTransaction>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d006      	beq.n	8003f9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003f98:	e010      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	e000      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003fcc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3730      	adds	r7, #48	@ 0x30
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fe8:	f7fd fd54 	bl	8001a94 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ff8:	f7fd fd4c 	bl	8001a94 <HAL_GetTick>
 8003ffc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ffe:	4b39      	ldr	r3, [pc, #228]	@ (80040e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	015b      	lsls	r3, r3, #5
 8004004:	0d1b      	lsrs	r3, r3, #20
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	fb02 f303 	mul.w	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800400e:	e054      	b.n	80040ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004016:	d050      	beq.n	80040ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004018:	f7fd fd3c 	bl	8001a94 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	429a      	cmp	r2, r3
 8004026:	d902      	bls.n	800402e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d13d      	bne.n	80040aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800403c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004046:	d111      	bne.n	800406c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004050:	d004      	beq.n	800405c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405a:	d107      	bne.n	800406c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800406a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004074:	d10f      	bne.n	8004096 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004094:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e017      	b.n	80040da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4013      	ands	r3, r2
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d19b      	bne.n	8004010 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000008 	.word	0x20000008

080040e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040fc:	d111      	bne.n	8004122 <SPI_EndRxTransaction+0x3a>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004106:	d004      	beq.n	8004112 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004110:	d107      	bne.n	8004122 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004120:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800412a:	d12a      	bne.n	8004182 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004134:	d012      	beq.n	800415c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2200      	movs	r2, #0
 800413e:	2180      	movs	r1, #128	@ 0x80
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f7ff ff49 	bl	8003fd8 <SPI_WaitFlagStateUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d02d      	beq.n	80041a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e026      	b.n	80041aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2200      	movs	r2, #0
 8004164:	2101      	movs	r1, #1
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f7ff ff36 	bl	8003fd8 <SPI_WaitFlagStateUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01a      	beq.n	80041a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e013      	b.n	80041aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2200      	movs	r2, #0
 800418a:	2101      	movs	r1, #1
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7ff ff23 	bl	8003fd8 <SPI_WaitFlagStateUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e000      	b.n	80041aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004230 <SPI_EndRxTxTransaction+0x7c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004234 <SPI_EndRxTxTransaction+0x80>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	0d5b      	lsrs	r3, r3, #21
 80041cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041de:	d112      	bne.n	8004206 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2200      	movs	r2, #0
 80041e8:	2180      	movs	r1, #128	@ 0x80
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff fef4 	bl	8003fd8 <SPI_WaitFlagStateUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d016      	beq.n	8004224 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e00f      	b.n	8004226 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	3b01      	subs	r3, #1
 8004210:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421c:	2b80      	cmp	r3, #128	@ 0x80
 800421e:	d0f2      	beq.n	8004206 <SPI_EndRxTxTransaction+0x52>
 8004220:	e000      	b.n	8004224 <SPI_EndRxTxTransaction+0x70>
        break;
 8004222:	bf00      	nop
  }

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000008 	.word	0x20000008
 8004234:	165e9f81 	.word	0x165e9f81

08004238 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e034      	b.n	80042b8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7fc fb1e 	bl	80008a4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3308      	adds	r3, #8
 8004270:	4619      	mov	r1, r3
 8004272:	4610      	mov	r0, r2
 8004274:	f001 fd1a 	bl	8005cac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	461a      	mov	r2, r3
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	f001 fd64 	bl	8005d50 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6858      	ldr	r0, [r3, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	f001 fd99 	bl	8005dcc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	6892      	ldr	r2, [r2, #8]
 80042a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	6892      	ldr	r2, [r2, #8]
 80042ae:	f041 0101 	orr.w	r1, r1, #1
 80042b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e041      	b.n	8004356 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd f97a 	bl	80015e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f000 fa96 	bl	8004830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d001      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e04e      	b.n	8004416 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a23      	ldr	r2, [pc, #140]	@ (8004424 <HAL_TIM_Base_Start_IT+0xc4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d022      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x80>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a2:	d01d      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x80>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004428 <HAL_TIM_Base_Start_IT+0xc8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d018      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x80>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1e      	ldr	r2, [pc, #120]	@ (800442c <HAL_TIM_Base_Start_IT+0xcc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d013      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x80>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004430 <HAL_TIM_Base_Start_IT+0xd0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00e      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x80>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004434 <HAL_TIM_Base_Start_IT+0xd4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d009      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x80>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a19      	ldr	r2, [pc, #100]	@ (8004438 <HAL_TIM_Base_Start_IT+0xd8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0x80>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a18      	ldr	r2, [pc, #96]	@ (800443c <HAL_TIM_Base_Start_IT+0xdc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d111      	bne.n	8004404 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b06      	cmp	r3, #6
 80043f0:	d010      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004402:	e007      	b.n	8004414 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40010000 	.word	0x40010000
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800
 8004430:	40000c00 	.word	0x40000c00
 8004434:	40010400 	.word	0x40010400
 8004438:	40014000 	.word	0x40014000
 800443c:	40001800 	.word	0x40001800

08004440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b02      	cmp	r3, #2
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0202 	mvn.w	r2, #2
 800446c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f9b5 	bl	80047f2 <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f9a7 	bl	80047de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f9b8 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0204 	mvn.w	r2, #4
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f98b 	bl	80047f2 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f97d 	bl	80047de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f98e 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b08      	cmp	r3, #8
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0208 	mvn.w	r2, #8
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2204      	movs	r2, #4
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f961 	bl	80047f2 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f953 	bl	80047de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f964 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b10      	cmp	r3, #16
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0210 	mvn.w	r2, #16
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2208      	movs	r2, #8
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f937 	bl	80047f2 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f929 	bl	80047de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f93a 	bl	8004806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d10e      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0201 	mvn.w	r2, #1
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc fe66 	bl	8001290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ce:	2b80      	cmp	r3, #128	@ 0x80
 80045d0:	d10e      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045dc:	2b80      	cmp	r3, #128	@ 0x80
 80045de:	d107      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fae0 	bl	8004bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fa:	2b40      	cmp	r3, #64	@ 0x40
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004608:	2b40      	cmp	r3, #64	@ 0x40
 800460a:	d107      	bne.n	800461c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f8ff 	bl	800481a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b20      	cmp	r3, #32
 8004628:	d10e      	bne.n	8004648 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b20      	cmp	r3, #32
 8004636:	d107      	bne.n	8004648 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0220 	mvn.w	r2, #32
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 faaa 	bl	8004b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_TIM_ConfigClockSource+0x1c>
 8004668:	2302      	movs	r3, #2
 800466a:	e0b4      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x186>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800468a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046a4:	d03e      	beq.n	8004724 <HAL_TIM_ConfigClockSource+0xd4>
 80046a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046aa:	f200 8087 	bhi.w	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046b2:	f000 8086 	beq.w	80047c2 <HAL_TIM_ConfigClockSource+0x172>
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ba:	d87f      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046bc:	2b70      	cmp	r3, #112	@ 0x70
 80046be:	d01a      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0xa6>
 80046c0:	2b70      	cmp	r3, #112	@ 0x70
 80046c2:	d87b      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b60      	cmp	r3, #96	@ 0x60
 80046c6:	d050      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x11a>
 80046c8:	2b60      	cmp	r3, #96	@ 0x60
 80046ca:	d877      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	2b50      	cmp	r3, #80	@ 0x50
 80046ce:	d03c      	beq.n	800474a <HAL_TIM_ConfigClockSource+0xfa>
 80046d0:	2b50      	cmp	r3, #80	@ 0x50
 80046d2:	d873      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046d4:	2b40      	cmp	r3, #64	@ 0x40
 80046d6:	d058      	beq.n	800478a <HAL_TIM_ConfigClockSource+0x13a>
 80046d8:	2b40      	cmp	r3, #64	@ 0x40
 80046da:	d86f      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046dc:	2b30      	cmp	r3, #48	@ 0x30
 80046de:	d064      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x15a>
 80046e0:	2b30      	cmp	r3, #48	@ 0x30
 80046e2:	d86b      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d060      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x15a>
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d867      	bhi.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d05c      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x15a>
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d05a      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x15a>
 80046f4:	e062      	b.n	80047bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6899      	ldr	r1, [r3, #8]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f000 f9ad 	bl	8004a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004718:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	609a      	str	r2, [r3, #8]
      break;
 8004722:	e04f      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6899      	ldr	r1, [r3, #8]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f000 f996 	bl	8004a64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004746:	609a      	str	r2, [r3, #8]
      break;
 8004748:	e03c      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6859      	ldr	r1, [r3, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	461a      	mov	r2, r3
 8004758:	f000 f90a 	bl	8004970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2150      	movs	r1, #80	@ 0x50
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f963 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 8004768:	e02c      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6859      	ldr	r1, [r3, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	461a      	mov	r2, r3
 8004778:	f000 f929 	bl	80049ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2160      	movs	r1, #96	@ 0x60
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f953 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 8004788:	e01c      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6859      	ldr	r1, [r3, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	461a      	mov	r2, r3
 8004798:	f000 f8ea 	bl	8004970 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2140      	movs	r1, #64	@ 0x40
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f943 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 80047a8:	e00c      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f000 f93a 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 80047ba:	e003      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
      break;
 80047c0:	e000      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a40      	ldr	r2, [pc, #256]	@ (8004944 <TIM_Base_SetConfig+0x114>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484e:	d00f      	beq.n	8004870 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a3d      	ldr	r2, [pc, #244]	@ (8004948 <TIM_Base_SetConfig+0x118>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00b      	beq.n	8004870 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3c      	ldr	r2, [pc, #240]	@ (800494c <TIM_Base_SetConfig+0x11c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3b      	ldr	r2, [pc, #236]	@ (8004950 <TIM_Base_SetConfig+0x120>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3a      	ldr	r2, [pc, #232]	@ (8004954 <TIM_Base_SetConfig+0x124>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d108      	bne.n	8004882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a2f      	ldr	r2, [pc, #188]	@ (8004944 <TIM_Base_SetConfig+0x114>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d02b      	beq.n	80048e2 <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004890:	d027      	beq.n	80048e2 <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2c      	ldr	r2, [pc, #176]	@ (8004948 <TIM_Base_SetConfig+0x118>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d023      	beq.n	80048e2 <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2b      	ldr	r2, [pc, #172]	@ (800494c <TIM_Base_SetConfig+0x11c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d01f      	beq.n	80048e2 <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004950 <TIM_Base_SetConfig+0x120>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01b      	beq.n	80048e2 <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a29      	ldr	r2, [pc, #164]	@ (8004954 <TIM_Base_SetConfig+0x124>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d017      	beq.n	80048e2 <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a28      	ldr	r2, [pc, #160]	@ (8004958 <TIM_Base_SetConfig+0x128>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a27      	ldr	r2, [pc, #156]	@ (800495c <TIM_Base_SetConfig+0x12c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00f      	beq.n	80048e2 <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a26      	ldr	r2, [pc, #152]	@ (8004960 <TIM_Base_SetConfig+0x130>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00b      	beq.n	80048e2 <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a25      	ldr	r2, [pc, #148]	@ (8004964 <TIM_Base_SetConfig+0x134>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d007      	beq.n	80048e2 <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a24      	ldr	r2, [pc, #144]	@ (8004968 <TIM_Base_SetConfig+0x138>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a23      	ldr	r2, [pc, #140]	@ (800496c <TIM_Base_SetConfig+0x13c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d108      	bne.n	80048f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a0a      	ldr	r2, [pc, #40]	@ (8004944 <TIM_Base_SetConfig+0x114>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0xf8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a0c      	ldr	r2, [pc, #48]	@ (8004954 <TIM_Base_SetConfig+0x124>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d103      	bne.n	8004930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	615a      	str	r2, [r3, #20]
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40000c00 	.word	0x40000c00
 8004954:	40010400 	.word	0x40010400
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800
 8004964:	40001800 	.word	0x40001800
 8004968:	40001c00 	.word	0x40001c00
 800496c:	40002000 	.word	0x40002000

08004970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0201 	bic.w	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800499a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 030a 	bic.w	r3, r3, #10
 80049ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b087      	sub	sp, #28
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0210 	bic.w	r2, r3, #16
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	031b      	lsls	r3, r3, #12
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f043 0307 	orr.w	r3, r3, #7
 8004a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	021a      	lsls	r2, r3, #8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e05a      	b.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a21      	ldr	r2, [pc, #132]	@ (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d022      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b08:	d01d      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d018      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1b      	ldr	r2, [pc, #108]	@ (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1a      	ldr	r2, [pc, #104]	@ (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00e      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a18      	ldr	r2, [pc, #96]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d009      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a17      	ldr	r2, [pc, #92]	@ (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d004      	beq.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a15      	ldr	r2, [pc, #84]	@ (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d10c      	bne.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40000800 	.word	0x40000800
 8004b8c:	40000c00 	.word	0x40000c00
 8004b90:	40010400 	.word	0x40010400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40001800 	.word	0x40001800

08004b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e03f      	b.n	8004c56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc fe58 	bl	80018a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2224      	movs	r2, #36	@ 0x24
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fddb 	bl	80057c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695a      	ldr	r2, [r3, #20]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b08a      	sub	sp, #40	@ 0x28
 8004c62:	af02      	add	r7, sp, #8
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d17c      	bne.n	8004d78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_UART_Transmit+0x2c>
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e075      	b.n	8004d7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_UART_Transmit+0x3e>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e06e      	b.n	8004d7a <HAL_UART_Transmit+0x11c>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2221      	movs	r2, #33	@ 0x21
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cb2:	f7fc feef 	bl	8001a94 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	88fa      	ldrh	r2, [r7, #6]
 8004cbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	88fa      	ldrh	r2, [r7, #6]
 8004cc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ccc:	d108      	bne.n	8004ce0 <HAL_UART_Transmit+0x82>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d104      	bne.n	8004ce0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	e003      	b.n	8004ce8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8004cf0:	e02a      	b.n	8004d48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2180      	movs	r1, #128	@ 0x80
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fb1f 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e036      	b.n	8004d7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	3302      	adds	r3, #2
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	e007      	b.n	8004d3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	781a      	ldrb	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	3301      	adds	r3, #1
 8004d38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1cf      	bne.n	8004cf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2140      	movs	r1, #64	@ 0x40
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 faef 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e006      	b.n	8004d7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e000      	b.n	8004d7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d78:	2302      	movs	r3, #2
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b20      	cmp	r3, #32
 8004d9a:	d11d      	bne.n	8004dd8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_UART_Receive_IT+0x26>
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e016      	b.n	8004dda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d101      	bne.n	8004dba <HAL_UART_Receive_IT+0x38>
 8004db6:	2302      	movs	r3, #2
 8004db8:	e00f      	b.n	8004dda <HAL_UART_Receive_IT+0x58>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 fb24 	bl	800541c <UART_Start_Receive_IT>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	e000      	b.n	8004dda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b0ba      	sub	sp, #232	@ 0xe8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10f      	bne.n	8004e4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <HAL_UART_IRQHandler+0x66>
 8004e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fc03 	bl	800564e <UART_Receive_IT>
      return;
 8004e48:	e256      	b.n	80052f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 80de 	beq.w	8005010 <HAL_UART_IRQHandler+0x22c>
 8004e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80d1 	beq.w	8005010 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00b      	beq.n	8004e92 <HAL_UART_IRQHandler+0xae>
 8004e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	f043 0201 	orr.w	r2, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <HAL_UART_IRQHandler+0xd2>
 8004e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	f043 0202 	orr.w	r2, r3, #2
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00b      	beq.n	8004eda <HAL_UART_IRQHandler+0xf6>
 8004ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	f043 0204 	orr.w	r2, r3, #4
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d011      	beq.n	8004f0a <HAL_UART_IRQHandler+0x126>
 8004ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d105      	bne.n	8004efe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	f043 0208 	orr.w	r2, r3, #8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 81ed 	beq.w	80052ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_UART_IRQHandler+0x14e>
 8004f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fb8e 	bl	800564e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3c:	2b40      	cmp	r3, #64	@ 0x40
 8004f3e:	bf0c      	ite	eq
 8004f40:	2301      	moveq	r3, #1
 8004f42:	2300      	movne	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <HAL_UART_IRQHandler+0x17a>
 8004f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d04f      	beq.n	8004ffe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa96 	bl	8005490 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6e:	2b40      	cmp	r3, #64	@ 0x40
 8004f70:	d141      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3314      	adds	r3, #20
 8004f78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3314      	adds	r3, #20
 8004f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1d9      	bne.n	8004f72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d013      	beq.n	8004fee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	4a7d      	ldr	r2, [pc, #500]	@ (80051c0 <HAL_UART_IRQHandler+0x3dc>)
 8004fcc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fc ff0f 	bl	8001df6 <HAL_DMA_Abort_IT>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d016      	beq.n	800500c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fec:	e00e      	b.n	800500c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f990 	bl	8005314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff4:	e00a      	b.n	800500c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f98c 	bl	8005314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ffc:	e006      	b.n	800500c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f988 	bl	8005314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800500a:	e170      	b.n	80052ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500c:	bf00      	nop
    return;
 800500e:	e16e      	b.n	80052ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	2b01      	cmp	r3, #1
 8005016:	f040 814a 	bne.w	80052ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8143 	beq.w	80052ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 813c 	beq.w	80052ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005036:	2300      	movs	r3, #0
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005056:	2b40      	cmp	r3, #64	@ 0x40
 8005058:	f040 80b4 	bne.w	80051c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005068:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8140 	beq.w	80052f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800507a:	429a      	cmp	r2, r3
 800507c:	f080 8139 	bcs.w	80052f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005086:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005092:	f000 8088 	beq.w	80051a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80050c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1d9      	bne.n	8005096 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3314      	adds	r3, #20
 80050e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005106:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800510a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800510e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005118:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e1      	bne.n	80050e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3314      	adds	r3, #20
 8005124:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800512e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005134:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3314      	adds	r3, #20
 800513e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005142:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005144:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005148:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005150:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e3      	bne.n	800511e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005176:	f023 0310 	bic.w	r3, r3, #16
 800517a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005188:	65ba      	str	r2, [r7, #88]	@ 0x58
 800518a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800518e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e3      	bne.n	8005164 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fc fdb8 	bl	8001d16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f8b6 	bl	8005328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051bc:	e099      	b.n	80052f2 <HAL_UART_IRQHandler+0x50e>
 80051be:	bf00      	nop
 80051c0:	08005557 	.word	0x08005557
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 808b 	beq.w	80052f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80051e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8086 	beq.w	80052f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	330c      	adds	r3, #12
 80051f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800520e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005210:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800521c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e3      	bne.n	80051ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3314      	adds	r3, #20
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	623b      	str	r3, [r7, #32]
   return(result);
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3314      	adds	r3, #20
 8005242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005246:	633a      	str	r2, [r7, #48]	@ 0x30
 8005248:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800524c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1e3      	bne.n	8005222 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	60fb      	str	r3, [r7, #12]
   return(result);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0310 	bic.w	r3, r3, #16
 800527e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	330c      	adds	r3, #12
 8005288:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800528c:	61fa      	str	r2, [r7, #28]
 800528e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	69b9      	ldr	r1, [r7, #24]
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	617b      	str	r3, [r7, #20]
   return(result);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e3      	bne.n	8005268 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052a4:	4619      	mov	r1, r3
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f83e 	bl	8005328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052ac:	e023      	b.n	80052f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <HAL_UART_IRQHandler+0x4ea>
 80052ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f959 	bl	800557e <UART_Transmit_IT>
    return;
 80052cc:	e014      	b.n	80052f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00e      	beq.n	80052f8 <HAL_UART_IRQHandler+0x514>
 80052da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f999 	bl	800561e <UART_EndTransmit_IT>
    return;
 80052ec:	e004      	b.n	80052f8 <HAL_UART_IRQHandler+0x514>
    return;
 80052ee:	bf00      	nop
 80052f0:	e002      	b.n	80052f8 <HAL_UART_IRQHandler+0x514>
      return;
 80052f2:	bf00      	nop
 80052f4:	e000      	b.n	80052f8 <HAL_UART_IRQHandler+0x514>
      return;
 80052f6:	bf00      	nop
  }
}
 80052f8:	37e8      	adds	r7, #232	@ 0xe8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop

08005300 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b090      	sub	sp, #64	@ 0x40
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005350:	e050      	b.n	80053f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005358:	d04c      	beq.n	80053f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800535a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <UART_WaitOnFlagUntilTimeout+0x30>
 8005360:	f7fc fb98 	bl	8001a94 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800536c:	429a      	cmp	r2, r3
 800536e:	d241      	bcs.n	80053f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005390:	637a      	str	r2, [r7, #52]	@ 0x34
 8005392:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800539e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3314      	adds	r3, #20
 80053aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	613b      	str	r3, [r7, #16]
   return(result);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f023 0301 	bic.w	r3, r3, #1
 80053ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3314      	adds	r3, #20
 80053c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053c4:	623a      	str	r2, [r7, #32]
 80053c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	69f9      	ldr	r1, [r7, #28]
 80053ca:	6a3a      	ldr	r2, [r7, #32]
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e5      	bne.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e00f      	b.n	8005414 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	4013      	ands	r3, r2
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	429a      	cmp	r2, r3
 8005402:	bf0c      	ite	eq
 8005404:	2301      	moveq	r3, #1
 8005406:	2300      	movne	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	429a      	cmp	r2, r3
 8005410:	d09f      	beq.n	8005352 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3740      	adds	r7, #64	@ 0x40
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	88fa      	ldrh	r2, [r7, #6]
 800543a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2222      	movs	r2, #34	@ 0x22
 8005446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005460:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695a      	ldr	r2, [r3, #20]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0201 	orr.w	r2, r2, #1
 8005470:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0220 	orr.w	r2, r2, #32
 8005480:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b095      	sub	sp, #84	@ 0x54
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80054ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3314      	adds	r3, #20
 80054d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	61fb      	str	r3, [r7, #28]
   return(result);
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3314      	adds	r3, #20
 80054ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e5      	bne.n	80054cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005504:	2b01      	cmp	r3, #1
 8005506:	d119      	bne.n	800553c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	60bb      	str	r3, [r7, #8]
   return(result);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f023 0310 	bic.w	r3, r3, #16
 800551e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	330c      	adds	r3, #12
 8005526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005528:	61ba      	str	r2, [r7, #24]
 800552a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	6979      	ldr	r1, [r7, #20]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	613b      	str	r3, [r7, #16]
   return(result);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e5      	bne.n	8005508 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800554a:	bf00      	nop
 800554c:	3754      	adds	r7, #84	@ 0x54
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005562:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff fecf 	bl	8005314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b21      	cmp	r3, #33	@ 0x21
 8005590:	d13e      	bne.n	8005610 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800559a:	d114      	bne.n	80055c6 <UART_Transmit_IT+0x48>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d110      	bne.n	80055c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	1c9a      	adds	r2, r3, #2
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	621a      	str	r2, [r3, #32]
 80055c4:	e008      	b.n	80055d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6211      	str	r1, [r2, #32]
 80055d0:	781a      	ldrb	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	4619      	mov	r1, r3
 80055e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10f      	bne.n	800560c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800560a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e000      	b.n	8005612 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005634:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fe5e 	bl	8005300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b08c      	sub	sp, #48	@ 0x30
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b22      	cmp	r3, #34	@ 0x22
 8005660:	f040 80ab 	bne.w	80057ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800566c:	d117      	bne.n	800569e <UART_Receive_IT+0x50>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d113      	bne.n	800569e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005676:	2300      	movs	r3, #0
 8005678:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	b29b      	uxth	r3, r3
 8005688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568c:	b29a      	uxth	r2, r3
 800568e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005690:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005696:	1c9a      	adds	r2, r3, #2
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	629a      	str	r2, [r3, #40]	@ 0x28
 800569c:	e026      	b.n	80056ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b0:	d007      	beq.n	80056c2 <UART_Receive_IT+0x74>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <UART_Receive_IT+0x82>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	e008      	b.n	80056e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4619      	mov	r1, r3
 80056fa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d15a      	bne.n	80057b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0220 	bic.w	r2, r2, #32
 800570e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800571e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695a      	ldr	r2, [r3, #20]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573c:	2b01      	cmp	r3, #1
 800573e:	d135      	bne.n	80057ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	330c      	adds	r3, #12
 800574c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	613b      	str	r3, [r7, #16]
   return(result);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f023 0310 	bic.w	r3, r3, #16
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005766:	623a      	str	r2, [r7, #32]
 8005768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	69f9      	ldr	r1, [r7, #28]
 800576c:	6a3a      	ldr	r2, [r7, #32]
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	61bb      	str	r3, [r7, #24]
   return(result);
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e5      	bne.n	8005746 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b10      	cmp	r3, #16
 8005786:	d10a      	bne.n	800579e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fdbf 	bl	8005328 <HAL_UARTEx_RxEventCallback>
 80057aa:	e002      	b.n	80057b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fc f827 	bl	8001800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e002      	b.n	80057bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e000      	b.n	80057bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
  }
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3730      	adds	r7, #48	@ 0x30
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c8:	b0c0      	sub	sp, #256	@ 0x100
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e0:	68d9      	ldr	r1, [r3, #12]
 80057e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	ea40 0301 	orr.w	r3, r0, r1
 80057ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	431a      	orrs	r2, r3
 8005804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800581c:	f021 010c 	bic.w	r1, r1, #12
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800582a:	430b      	orrs	r3, r1
 800582c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583e:	6999      	ldr	r1, [r3, #24]
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	ea40 0301 	orr.w	r3, r0, r1
 800584a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800584c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b8f      	ldr	r3, [pc, #572]	@ (8005a90 <UART_SetConfig+0x2cc>)
 8005854:	429a      	cmp	r2, r3
 8005856:	d005      	beq.n	8005864 <UART_SetConfig+0xa0>
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4b8d      	ldr	r3, [pc, #564]	@ (8005a94 <UART_SetConfig+0x2d0>)
 8005860:	429a      	cmp	r2, r3
 8005862:	d104      	bne.n	800586e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005864:	f7fd ff2c 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 8005868:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800586c:	e003      	b.n	8005876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800586e:	f7fd ff13 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8005872:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005880:	f040 810c 	bne.w	8005a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005888:	2200      	movs	r2, #0
 800588a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800588e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005896:	4622      	mov	r2, r4
 8005898:	462b      	mov	r3, r5
 800589a:	1891      	adds	r1, r2, r2
 800589c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800589e:	415b      	adcs	r3, r3
 80058a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058a6:	4621      	mov	r1, r4
 80058a8:	eb12 0801 	adds.w	r8, r2, r1
 80058ac:	4629      	mov	r1, r5
 80058ae:	eb43 0901 	adc.w	r9, r3, r1
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058c6:	4690      	mov	r8, r2
 80058c8:	4699      	mov	r9, r3
 80058ca:	4623      	mov	r3, r4
 80058cc:	eb18 0303 	adds.w	r3, r8, r3
 80058d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058d4:	462b      	mov	r3, r5
 80058d6:	eb49 0303 	adc.w	r3, r9, r3
 80058da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80058ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058f2:	460b      	mov	r3, r1
 80058f4:	18db      	adds	r3, r3, r3
 80058f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80058f8:	4613      	mov	r3, r2
 80058fa:	eb42 0303 	adc.w	r3, r2, r3
 80058fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005908:	f7fa fcb2 	bl	8000270 <__aeabi_uldivmod>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4b61      	ldr	r3, [pc, #388]	@ (8005a98 <UART_SetConfig+0x2d4>)
 8005912:	fba3 2302 	umull	r2, r3, r3, r2
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	011c      	lsls	r4, r3, #4
 800591a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800591e:	2200      	movs	r2, #0
 8005920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005924:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800592c:	4642      	mov	r2, r8
 800592e:	464b      	mov	r3, r9
 8005930:	1891      	adds	r1, r2, r2
 8005932:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005934:	415b      	adcs	r3, r3
 8005936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800593c:	4641      	mov	r1, r8
 800593e:	eb12 0a01 	adds.w	sl, r2, r1
 8005942:	4649      	mov	r1, r9
 8005944:	eb43 0b01 	adc.w	fp, r3, r1
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800595c:	4692      	mov	sl, r2
 800595e:	469b      	mov	fp, r3
 8005960:	4643      	mov	r3, r8
 8005962:	eb1a 0303 	adds.w	r3, sl, r3
 8005966:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800596a:	464b      	mov	r3, r9
 800596c:	eb4b 0303 	adc.w	r3, fp, r3
 8005970:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005980:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005988:	460b      	mov	r3, r1
 800598a:	18db      	adds	r3, r3, r3
 800598c:	643b      	str	r3, [r7, #64]	@ 0x40
 800598e:	4613      	mov	r3, r2
 8005990:	eb42 0303 	adc.w	r3, r2, r3
 8005994:	647b      	str	r3, [r7, #68]	@ 0x44
 8005996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800599a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800599e:	f7fa fc67 	bl	8000270 <__aeabi_uldivmod>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4611      	mov	r1, r2
 80059a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005a98 <UART_SetConfig+0x2d4>)
 80059aa:	fba3 2301 	umull	r2, r3, r3, r1
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	2264      	movs	r2, #100	@ 0x64
 80059b2:	fb02 f303 	mul.w	r3, r2, r3
 80059b6:	1acb      	subs	r3, r1, r3
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80059be:	4b36      	ldr	r3, [pc, #216]	@ (8005a98 <UART_SetConfig+0x2d4>)
 80059c0:	fba3 2302 	umull	r2, r3, r3, r2
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80059cc:	441c      	add	r4, r3
 80059ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80059dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80059e0:	4642      	mov	r2, r8
 80059e2:	464b      	mov	r3, r9
 80059e4:	1891      	adds	r1, r2, r2
 80059e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80059e8:	415b      	adcs	r3, r3
 80059ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80059f0:	4641      	mov	r1, r8
 80059f2:	1851      	adds	r1, r2, r1
 80059f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80059f6:	4649      	mov	r1, r9
 80059f8:	414b      	adcs	r3, r1
 80059fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a08:	4659      	mov	r1, fp
 8005a0a:	00cb      	lsls	r3, r1, #3
 8005a0c:	4651      	mov	r1, sl
 8005a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a12:	4651      	mov	r1, sl
 8005a14:	00ca      	lsls	r2, r1, #3
 8005a16:	4610      	mov	r0, r2
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	189b      	adds	r3, r3, r2
 8005a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a24:	464b      	mov	r3, r9
 8005a26:	460a      	mov	r2, r1
 8005a28:	eb42 0303 	adc.w	r3, r2, r3
 8005a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a44:	460b      	mov	r3, r1
 8005a46:	18db      	adds	r3, r3, r3
 8005a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	eb42 0303 	adc.w	r3, r2, r3
 8005a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a5a:	f7fa fc09 	bl	8000270 <__aeabi_uldivmod>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4b0d      	ldr	r3, [pc, #52]	@ (8005a98 <UART_SetConfig+0x2d4>)
 8005a64:	fba3 1302 	umull	r1, r3, r3, r2
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	2164      	movs	r1, #100	@ 0x64
 8005a6c:	fb01 f303 	mul.w	r3, r1, r3
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	3332      	adds	r3, #50	@ 0x32
 8005a76:	4a08      	ldr	r2, [pc, #32]	@ (8005a98 <UART_SetConfig+0x2d4>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	f003 0207 	and.w	r2, r3, #7
 8005a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4422      	add	r2, r4
 8005a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a8c:	e106      	b.n	8005c9c <UART_SetConfig+0x4d8>
 8005a8e:	bf00      	nop
 8005a90:	40011000 	.word	0x40011000
 8005a94:	40011400 	.word	0x40011400
 8005a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005aae:	4642      	mov	r2, r8
 8005ab0:	464b      	mov	r3, r9
 8005ab2:	1891      	adds	r1, r2, r2
 8005ab4:	6239      	str	r1, [r7, #32]
 8005ab6:	415b      	adcs	r3, r3
 8005ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005abe:	4641      	mov	r1, r8
 8005ac0:	1854      	adds	r4, r2, r1
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	eb43 0501 	adc.w	r5, r3, r1
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	00eb      	lsls	r3, r5, #3
 8005ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ad6:	00e2      	lsls	r2, r4, #3
 8005ad8:	4614      	mov	r4, r2
 8005ada:	461d      	mov	r5, r3
 8005adc:	4643      	mov	r3, r8
 8005ade:	18e3      	adds	r3, r4, r3
 8005ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	eb45 0303 	adc.w	r3, r5, r3
 8005aea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005afa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	008b      	lsls	r3, r1, #2
 8005b0e:	4621      	mov	r1, r4
 8005b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b14:	4621      	mov	r1, r4
 8005b16:	008a      	lsls	r2, r1, #2
 8005b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b1c:	f7fa fba8 	bl	8000270 <__aeabi_uldivmod>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4b60      	ldr	r3, [pc, #384]	@ (8005ca8 <UART_SetConfig+0x4e4>)
 8005b26:	fba3 2302 	umull	r2, r3, r3, r2
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	011c      	lsls	r4, r3, #4
 8005b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b40:	4642      	mov	r2, r8
 8005b42:	464b      	mov	r3, r9
 8005b44:	1891      	adds	r1, r2, r2
 8005b46:	61b9      	str	r1, [r7, #24]
 8005b48:	415b      	adcs	r3, r3
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b50:	4641      	mov	r1, r8
 8005b52:	1851      	adds	r1, r2, r1
 8005b54:	6139      	str	r1, [r7, #16]
 8005b56:	4649      	mov	r1, r9
 8005b58:	414b      	adcs	r3, r1
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b68:	4659      	mov	r1, fp
 8005b6a:	00cb      	lsls	r3, r1, #3
 8005b6c:	4651      	mov	r1, sl
 8005b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b72:	4651      	mov	r1, sl
 8005b74:	00ca      	lsls	r2, r1, #3
 8005b76:	4610      	mov	r0, r2
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	189b      	adds	r3, r3, r2
 8005b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b84:	464b      	mov	r3, r9
 8005b86:	460a      	mov	r2, r1
 8005b88:	eb42 0303 	adc.w	r3, r2, r3
 8005b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ba8:	4649      	mov	r1, r9
 8005baa:	008b      	lsls	r3, r1, #2
 8005bac:	4641      	mov	r1, r8
 8005bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	008a      	lsls	r2, r1, #2
 8005bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005bba:	f7fa fb59 	bl	8000270 <__aeabi_uldivmod>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4b38      	ldr	r3, [pc, #224]	@ (8005ca8 <UART_SetConfig+0x4e4>)
 8005bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	2264      	movs	r2, #100	@ 0x64
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	1acb      	subs	r3, r1, r3
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	3332      	adds	r3, #50	@ 0x32
 8005bd8:	4a33      	ldr	r2, [pc, #204]	@ (8005ca8 <UART_SetConfig+0x4e4>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005be4:	441c      	add	r4, r3
 8005be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bea:	2200      	movs	r2, #0
 8005bec:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bee:	677a      	str	r2, [r7, #116]	@ 0x74
 8005bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	1891      	adds	r1, r2, r2
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	415b      	adcs	r3, r3
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c04:	4641      	mov	r1, r8
 8005c06:	1851      	adds	r1, r2, r1
 8005c08:	6039      	str	r1, [r7, #0]
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	414b      	adcs	r3, r1
 8005c0e:	607b      	str	r3, [r7, #4]
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	00cb      	lsls	r3, r1, #3
 8005c20:	4651      	mov	r1, sl
 8005c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c26:	4651      	mov	r1, sl
 8005c28:	00ca      	lsls	r2, r1, #3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4603      	mov	r3, r0
 8005c30:	4642      	mov	r2, r8
 8005c32:	189b      	adds	r3, r3, r2
 8005c34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c36:	464b      	mov	r3, r9
 8005c38:	460a      	mov	r2, r1
 8005c3a:	eb42 0303 	adc.w	r3, r2, r3
 8005c3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c58:	4649      	mov	r1, r9
 8005c5a:	008b      	lsls	r3, r1, #2
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c62:	4641      	mov	r1, r8
 8005c64:	008a      	lsls	r2, r1, #2
 8005c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c6a:	f7fa fb01 	bl	8000270 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca8 <UART_SetConfig+0x4e4>)
 8005c74:	fba3 1302 	umull	r1, r3, r3, r2
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	2164      	movs	r1, #100	@ 0x64
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	3332      	adds	r3, #50	@ 0x32
 8005c86:	4a08      	ldr	r2, [pc, #32]	@ (8005ca8 <UART_SetConfig+0x4e4>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	f003 020f 	and.w	r2, r3, #15
 8005c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4422      	add	r2, r4
 8005c9a:	609a      	str	r2, [r3, #8]
}
 8005c9c:	bf00      	nop
 8005c9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca8:	51eb851f 	.word	0x51eb851f

08005cac <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4b20      	ldr	r3, [pc, #128]	@ (8005d4c <FSMC_NORSRAM_Init+0xa0>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005cd6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005cdc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005ce2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005ce8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005cee:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005cf4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005cfa:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8005d00:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8005d06:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8005d0c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8005d12:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8005d18:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d103      	bne.n	8005d30 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d2e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	fff00080 	.word	0xfff00080

08005d50 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005d72:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005d7e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005d86:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005d8e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005d98:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	3b02      	subs	r3, #2
 8005da0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005da2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005da8:	4313      	orrs	r3, r2
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6979      	ldr	r1, [r7, #20]
 8005db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005de4:	d122      	bne.n	8005e2c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dee:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4b15      	ldr	r3, [pc, #84]	@ (8005e48 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e02:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005e0a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005e12:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e18:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6979      	ldr	r1, [r7, #20]
 8005e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005e2a:	e005      	b.n	8005e38 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8005e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	cff00000 	.word	0xcff00000

08005e4c <siprintf>:
 8005e4c:	b40e      	push	{r1, r2, r3}
 8005e4e:	b500      	push	{lr}
 8005e50:	b09c      	sub	sp, #112	@ 0x70
 8005e52:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e54:	9002      	str	r0, [sp, #8]
 8005e56:	9006      	str	r0, [sp, #24]
 8005e58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e5c:	4809      	ldr	r0, [pc, #36]	@ (8005e84 <siprintf+0x38>)
 8005e5e:	9107      	str	r1, [sp, #28]
 8005e60:	9104      	str	r1, [sp, #16]
 8005e62:	4909      	ldr	r1, [pc, #36]	@ (8005e88 <siprintf+0x3c>)
 8005e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e68:	9105      	str	r1, [sp, #20]
 8005e6a:	6800      	ldr	r0, [r0, #0]
 8005e6c:	9301      	str	r3, [sp, #4]
 8005e6e:	a902      	add	r1, sp, #8
 8005e70:	f000 f89c 	bl	8005fac <_svfiprintf_r>
 8005e74:	9b02      	ldr	r3, [sp, #8]
 8005e76:	2200      	movs	r2, #0
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	b01c      	add	sp, #112	@ 0x70
 8005e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e80:	b003      	add	sp, #12
 8005e82:	4770      	bx	lr
 8005e84:	20000014 	.word	0x20000014
 8005e88:	ffff0208 	.word	0xffff0208

08005e8c <memset>:
 8005e8c:	4402      	add	r2, r0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d100      	bne.n	8005e96 <memset+0xa>
 8005e94:	4770      	bx	lr
 8005e96:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9a:	e7f9      	b.n	8005e90 <memset+0x4>

08005e9c <__errno>:
 8005e9c:	4b01      	ldr	r3, [pc, #4]	@ (8005ea4 <__errno+0x8>)
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20000014 	.word	0x20000014

08005ea8 <__libc_init_array>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8005ee0 <__libc_init_array+0x38>)
 8005eac:	4c0d      	ldr	r4, [pc, #52]	@ (8005ee4 <__libc_init_array+0x3c>)
 8005eae:	1b64      	subs	r4, r4, r5
 8005eb0:	10a4      	asrs	r4, r4, #2
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	42a6      	cmp	r6, r4
 8005eb6:	d109      	bne.n	8005ecc <__libc_init_array+0x24>
 8005eb8:	4d0b      	ldr	r5, [pc, #44]	@ (8005ee8 <__libc_init_array+0x40>)
 8005eba:	4c0c      	ldr	r4, [pc, #48]	@ (8005eec <__libc_init_array+0x44>)
 8005ebc:	f000 fc66 	bl	800678c <_init>
 8005ec0:	1b64      	subs	r4, r4, r5
 8005ec2:	10a4      	asrs	r4, r4, #2
 8005ec4:	2600      	movs	r6, #0
 8005ec6:	42a6      	cmp	r6, r4
 8005ec8:	d105      	bne.n	8005ed6 <__libc_init_array+0x2e>
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed0:	4798      	blx	r3
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7ee      	b.n	8005eb4 <__libc_init_array+0xc>
 8005ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eda:	4798      	blx	r3
 8005edc:	3601      	adds	r6, #1
 8005ede:	e7f2      	b.n	8005ec6 <__libc_init_array+0x1e>
 8005ee0:	08006814 	.word	0x08006814
 8005ee4:	08006814 	.word	0x08006814
 8005ee8:	08006814 	.word	0x08006814
 8005eec:	08006818 	.word	0x08006818

08005ef0 <__retarget_lock_acquire_recursive>:
 8005ef0:	4770      	bx	lr

08005ef2 <__retarget_lock_release_recursive>:
 8005ef2:	4770      	bx	lr

08005ef4 <__ssputs_r>:
 8005ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef8:	688e      	ldr	r6, [r1, #8]
 8005efa:	461f      	mov	r7, r3
 8005efc:	42be      	cmp	r6, r7
 8005efe:	680b      	ldr	r3, [r1, #0]
 8005f00:	4682      	mov	sl, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	4690      	mov	r8, r2
 8005f06:	d82d      	bhi.n	8005f64 <__ssputs_r+0x70>
 8005f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f10:	d026      	beq.n	8005f60 <__ssputs_r+0x6c>
 8005f12:	6965      	ldr	r5, [r4, #20]
 8005f14:	6909      	ldr	r1, [r1, #16]
 8005f16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f1a:	eba3 0901 	sub.w	r9, r3, r1
 8005f1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f22:	1c7b      	adds	r3, r7, #1
 8005f24:	444b      	add	r3, r9
 8005f26:	106d      	asrs	r5, r5, #1
 8005f28:	429d      	cmp	r5, r3
 8005f2a:	bf38      	it	cc
 8005f2c:	461d      	movcc	r5, r3
 8005f2e:	0553      	lsls	r3, r2, #21
 8005f30:	d527      	bpl.n	8005f82 <__ssputs_r+0x8e>
 8005f32:	4629      	mov	r1, r5
 8005f34:	f000 f958 	bl	80061e8 <_malloc_r>
 8005f38:	4606      	mov	r6, r0
 8005f3a:	b360      	cbz	r0, 8005f96 <__ssputs_r+0xa2>
 8005f3c:	6921      	ldr	r1, [r4, #16]
 8005f3e:	464a      	mov	r2, r9
 8005f40:	f000 fbc4 	bl	80066cc <memcpy>
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f4e:	81a3      	strh	r3, [r4, #12]
 8005f50:	6126      	str	r6, [r4, #16]
 8005f52:	6165      	str	r5, [r4, #20]
 8005f54:	444e      	add	r6, r9
 8005f56:	eba5 0509 	sub.w	r5, r5, r9
 8005f5a:	6026      	str	r6, [r4, #0]
 8005f5c:	60a5      	str	r5, [r4, #8]
 8005f5e:	463e      	mov	r6, r7
 8005f60:	42be      	cmp	r6, r7
 8005f62:	d900      	bls.n	8005f66 <__ssputs_r+0x72>
 8005f64:	463e      	mov	r6, r7
 8005f66:	6820      	ldr	r0, [r4, #0]
 8005f68:	4632      	mov	r2, r6
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	f000 fb84 	bl	8006678 <memmove>
 8005f70:	68a3      	ldr	r3, [r4, #8]
 8005f72:	1b9b      	subs	r3, r3, r6
 8005f74:	60a3      	str	r3, [r4, #8]
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	4433      	add	r3, r6
 8005f7a:	6023      	str	r3, [r4, #0]
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f82:	462a      	mov	r2, r5
 8005f84:	f000 fb4a 	bl	800661c <_realloc_r>
 8005f88:	4606      	mov	r6, r0
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d1e0      	bne.n	8005f50 <__ssputs_r+0x5c>
 8005f8e:	6921      	ldr	r1, [r4, #16]
 8005f90:	4650      	mov	r0, sl
 8005f92:	f000 fba9 	bl	80066e8 <_free_r>
 8005f96:	230c      	movs	r3, #12
 8005f98:	f8ca 3000 	str.w	r3, [sl]
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fa2:	81a3      	strh	r3, [r4, #12]
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fa8:	e7e9      	b.n	8005f7e <__ssputs_r+0x8a>
	...

08005fac <_svfiprintf_r>:
 8005fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb0:	4698      	mov	r8, r3
 8005fb2:	898b      	ldrh	r3, [r1, #12]
 8005fb4:	061b      	lsls	r3, r3, #24
 8005fb6:	b09d      	sub	sp, #116	@ 0x74
 8005fb8:	4607      	mov	r7, r0
 8005fba:	460d      	mov	r5, r1
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	d510      	bpl.n	8005fe2 <_svfiprintf_r+0x36>
 8005fc0:	690b      	ldr	r3, [r1, #16]
 8005fc2:	b973      	cbnz	r3, 8005fe2 <_svfiprintf_r+0x36>
 8005fc4:	2140      	movs	r1, #64	@ 0x40
 8005fc6:	f000 f90f 	bl	80061e8 <_malloc_r>
 8005fca:	6028      	str	r0, [r5, #0]
 8005fcc:	6128      	str	r0, [r5, #16]
 8005fce:	b930      	cbnz	r0, 8005fde <_svfiprintf_r+0x32>
 8005fd0:	230c      	movs	r3, #12
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fd8:	b01d      	add	sp, #116	@ 0x74
 8005fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fde:	2340      	movs	r3, #64	@ 0x40
 8005fe0:	616b      	str	r3, [r5, #20]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fe6:	2320      	movs	r3, #32
 8005fe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ff0:	2330      	movs	r3, #48	@ 0x30
 8005ff2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006190 <_svfiprintf_r+0x1e4>
 8005ff6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ffa:	f04f 0901 	mov.w	r9, #1
 8005ffe:	4623      	mov	r3, r4
 8006000:	469a      	mov	sl, r3
 8006002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006006:	b10a      	cbz	r2, 800600c <_svfiprintf_r+0x60>
 8006008:	2a25      	cmp	r2, #37	@ 0x25
 800600a:	d1f9      	bne.n	8006000 <_svfiprintf_r+0x54>
 800600c:	ebba 0b04 	subs.w	fp, sl, r4
 8006010:	d00b      	beq.n	800602a <_svfiprintf_r+0x7e>
 8006012:	465b      	mov	r3, fp
 8006014:	4622      	mov	r2, r4
 8006016:	4629      	mov	r1, r5
 8006018:	4638      	mov	r0, r7
 800601a:	f7ff ff6b 	bl	8005ef4 <__ssputs_r>
 800601e:	3001      	adds	r0, #1
 8006020:	f000 80a7 	beq.w	8006172 <_svfiprintf_r+0x1c6>
 8006024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006026:	445a      	add	r2, fp
 8006028:	9209      	str	r2, [sp, #36]	@ 0x24
 800602a:	f89a 3000 	ldrb.w	r3, [sl]
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 809f 	beq.w	8006172 <_svfiprintf_r+0x1c6>
 8006034:	2300      	movs	r3, #0
 8006036:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800603a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800603e:	f10a 0a01 	add.w	sl, sl, #1
 8006042:	9304      	str	r3, [sp, #16]
 8006044:	9307      	str	r3, [sp, #28]
 8006046:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800604a:	931a      	str	r3, [sp, #104]	@ 0x68
 800604c:	4654      	mov	r4, sl
 800604e:	2205      	movs	r2, #5
 8006050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006054:	484e      	ldr	r0, [pc, #312]	@ (8006190 <_svfiprintf_r+0x1e4>)
 8006056:	f7fa f8bb 	bl	80001d0 <memchr>
 800605a:	9a04      	ldr	r2, [sp, #16]
 800605c:	b9d8      	cbnz	r0, 8006096 <_svfiprintf_r+0xea>
 800605e:	06d0      	lsls	r0, r2, #27
 8006060:	bf44      	itt	mi
 8006062:	2320      	movmi	r3, #32
 8006064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006068:	0711      	lsls	r1, r2, #28
 800606a:	bf44      	itt	mi
 800606c:	232b      	movmi	r3, #43	@ 0x2b
 800606e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006072:	f89a 3000 	ldrb.w	r3, [sl]
 8006076:	2b2a      	cmp	r3, #42	@ 0x2a
 8006078:	d015      	beq.n	80060a6 <_svfiprintf_r+0xfa>
 800607a:	9a07      	ldr	r2, [sp, #28]
 800607c:	4654      	mov	r4, sl
 800607e:	2000      	movs	r0, #0
 8006080:	f04f 0c0a 	mov.w	ip, #10
 8006084:	4621      	mov	r1, r4
 8006086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800608a:	3b30      	subs	r3, #48	@ 0x30
 800608c:	2b09      	cmp	r3, #9
 800608e:	d94b      	bls.n	8006128 <_svfiprintf_r+0x17c>
 8006090:	b1b0      	cbz	r0, 80060c0 <_svfiprintf_r+0x114>
 8006092:	9207      	str	r2, [sp, #28]
 8006094:	e014      	b.n	80060c0 <_svfiprintf_r+0x114>
 8006096:	eba0 0308 	sub.w	r3, r0, r8
 800609a:	fa09 f303 	lsl.w	r3, r9, r3
 800609e:	4313      	orrs	r3, r2
 80060a0:	9304      	str	r3, [sp, #16]
 80060a2:	46a2      	mov	sl, r4
 80060a4:	e7d2      	b.n	800604c <_svfiprintf_r+0xa0>
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	1d19      	adds	r1, r3, #4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	9103      	str	r1, [sp, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	bfbb      	ittet	lt
 80060b2:	425b      	neglt	r3, r3
 80060b4:	f042 0202 	orrlt.w	r2, r2, #2
 80060b8:	9307      	strge	r3, [sp, #28]
 80060ba:	9307      	strlt	r3, [sp, #28]
 80060bc:	bfb8      	it	lt
 80060be:	9204      	strlt	r2, [sp, #16]
 80060c0:	7823      	ldrb	r3, [r4, #0]
 80060c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80060c4:	d10a      	bne.n	80060dc <_svfiprintf_r+0x130>
 80060c6:	7863      	ldrb	r3, [r4, #1]
 80060c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ca:	d132      	bne.n	8006132 <_svfiprintf_r+0x186>
 80060cc:	9b03      	ldr	r3, [sp, #12]
 80060ce:	1d1a      	adds	r2, r3, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	9203      	str	r2, [sp, #12]
 80060d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060d8:	3402      	adds	r4, #2
 80060da:	9305      	str	r3, [sp, #20]
 80060dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80061a0 <_svfiprintf_r+0x1f4>
 80060e0:	7821      	ldrb	r1, [r4, #0]
 80060e2:	2203      	movs	r2, #3
 80060e4:	4650      	mov	r0, sl
 80060e6:	f7fa f873 	bl	80001d0 <memchr>
 80060ea:	b138      	cbz	r0, 80060fc <_svfiprintf_r+0x150>
 80060ec:	9b04      	ldr	r3, [sp, #16]
 80060ee:	eba0 000a 	sub.w	r0, r0, sl
 80060f2:	2240      	movs	r2, #64	@ 0x40
 80060f4:	4082      	lsls	r2, r0
 80060f6:	4313      	orrs	r3, r2
 80060f8:	3401      	adds	r4, #1
 80060fa:	9304      	str	r3, [sp, #16]
 80060fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006100:	4824      	ldr	r0, [pc, #144]	@ (8006194 <_svfiprintf_r+0x1e8>)
 8006102:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006106:	2206      	movs	r2, #6
 8006108:	f7fa f862 	bl	80001d0 <memchr>
 800610c:	2800      	cmp	r0, #0
 800610e:	d036      	beq.n	800617e <_svfiprintf_r+0x1d2>
 8006110:	4b21      	ldr	r3, [pc, #132]	@ (8006198 <_svfiprintf_r+0x1ec>)
 8006112:	bb1b      	cbnz	r3, 800615c <_svfiprintf_r+0x1b0>
 8006114:	9b03      	ldr	r3, [sp, #12]
 8006116:	3307      	adds	r3, #7
 8006118:	f023 0307 	bic.w	r3, r3, #7
 800611c:	3308      	adds	r3, #8
 800611e:	9303      	str	r3, [sp, #12]
 8006120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006122:	4433      	add	r3, r6
 8006124:	9309      	str	r3, [sp, #36]	@ 0x24
 8006126:	e76a      	b.n	8005ffe <_svfiprintf_r+0x52>
 8006128:	fb0c 3202 	mla	r2, ip, r2, r3
 800612c:	460c      	mov	r4, r1
 800612e:	2001      	movs	r0, #1
 8006130:	e7a8      	b.n	8006084 <_svfiprintf_r+0xd8>
 8006132:	2300      	movs	r3, #0
 8006134:	3401      	adds	r4, #1
 8006136:	9305      	str	r3, [sp, #20]
 8006138:	4619      	mov	r1, r3
 800613a:	f04f 0c0a 	mov.w	ip, #10
 800613e:	4620      	mov	r0, r4
 8006140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006144:	3a30      	subs	r2, #48	@ 0x30
 8006146:	2a09      	cmp	r2, #9
 8006148:	d903      	bls.n	8006152 <_svfiprintf_r+0x1a6>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0c6      	beq.n	80060dc <_svfiprintf_r+0x130>
 800614e:	9105      	str	r1, [sp, #20]
 8006150:	e7c4      	b.n	80060dc <_svfiprintf_r+0x130>
 8006152:	fb0c 2101 	mla	r1, ip, r1, r2
 8006156:	4604      	mov	r4, r0
 8006158:	2301      	movs	r3, #1
 800615a:	e7f0      	b.n	800613e <_svfiprintf_r+0x192>
 800615c:	ab03      	add	r3, sp, #12
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	462a      	mov	r2, r5
 8006162:	4b0e      	ldr	r3, [pc, #56]	@ (800619c <_svfiprintf_r+0x1f0>)
 8006164:	a904      	add	r1, sp, #16
 8006166:	4638      	mov	r0, r7
 8006168:	f3af 8000 	nop.w
 800616c:	1c42      	adds	r2, r0, #1
 800616e:	4606      	mov	r6, r0
 8006170:	d1d6      	bne.n	8006120 <_svfiprintf_r+0x174>
 8006172:	89ab      	ldrh	r3, [r5, #12]
 8006174:	065b      	lsls	r3, r3, #25
 8006176:	f53f af2d 	bmi.w	8005fd4 <_svfiprintf_r+0x28>
 800617a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800617c:	e72c      	b.n	8005fd8 <_svfiprintf_r+0x2c>
 800617e:	ab03      	add	r3, sp, #12
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	462a      	mov	r2, r5
 8006184:	4b05      	ldr	r3, [pc, #20]	@ (800619c <_svfiprintf_r+0x1f0>)
 8006186:	a904      	add	r1, sp, #16
 8006188:	4638      	mov	r0, r7
 800618a:	f000 f91b 	bl	80063c4 <_printf_i>
 800618e:	e7ed      	b.n	800616c <_svfiprintf_r+0x1c0>
 8006190:	080067d8 	.word	0x080067d8
 8006194:	080067e2 	.word	0x080067e2
 8006198:	00000000 	.word	0x00000000
 800619c:	08005ef5 	.word	0x08005ef5
 80061a0:	080067de 	.word	0x080067de

080061a4 <sbrk_aligned>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	4e0f      	ldr	r6, [pc, #60]	@ (80061e4 <sbrk_aligned+0x40>)
 80061a8:	460c      	mov	r4, r1
 80061aa:	6831      	ldr	r1, [r6, #0]
 80061ac:	4605      	mov	r5, r0
 80061ae:	b911      	cbnz	r1, 80061b6 <sbrk_aligned+0x12>
 80061b0:	f000 fa7c 	bl	80066ac <_sbrk_r>
 80061b4:	6030      	str	r0, [r6, #0]
 80061b6:	4621      	mov	r1, r4
 80061b8:	4628      	mov	r0, r5
 80061ba:	f000 fa77 	bl	80066ac <_sbrk_r>
 80061be:	1c43      	adds	r3, r0, #1
 80061c0:	d103      	bne.n	80061ca <sbrk_aligned+0x26>
 80061c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80061c6:	4620      	mov	r0, r4
 80061c8:	bd70      	pop	{r4, r5, r6, pc}
 80061ca:	1cc4      	adds	r4, r0, #3
 80061cc:	f024 0403 	bic.w	r4, r4, #3
 80061d0:	42a0      	cmp	r0, r4
 80061d2:	d0f8      	beq.n	80061c6 <sbrk_aligned+0x22>
 80061d4:	1a21      	subs	r1, r4, r0
 80061d6:	4628      	mov	r0, r5
 80061d8:	f000 fa68 	bl	80066ac <_sbrk_r>
 80061dc:	3001      	adds	r0, #1
 80061de:	d1f2      	bne.n	80061c6 <sbrk_aligned+0x22>
 80061e0:	e7ef      	b.n	80061c2 <sbrk_aligned+0x1e>
 80061e2:	bf00      	nop
 80061e4:	20000508 	.word	0x20000508

080061e8 <_malloc_r>:
 80061e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ec:	1ccd      	adds	r5, r1, #3
 80061ee:	f025 0503 	bic.w	r5, r5, #3
 80061f2:	3508      	adds	r5, #8
 80061f4:	2d0c      	cmp	r5, #12
 80061f6:	bf38      	it	cc
 80061f8:	250c      	movcc	r5, #12
 80061fa:	2d00      	cmp	r5, #0
 80061fc:	4606      	mov	r6, r0
 80061fe:	db01      	blt.n	8006204 <_malloc_r+0x1c>
 8006200:	42a9      	cmp	r1, r5
 8006202:	d904      	bls.n	800620e <_malloc_r+0x26>
 8006204:	230c      	movs	r3, #12
 8006206:	6033      	str	r3, [r6, #0]
 8006208:	2000      	movs	r0, #0
 800620a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062e4 <_malloc_r+0xfc>
 8006212:	f000 f9f7 	bl	8006604 <__malloc_lock>
 8006216:	f8d8 3000 	ldr.w	r3, [r8]
 800621a:	461c      	mov	r4, r3
 800621c:	bb44      	cbnz	r4, 8006270 <_malloc_r+0x88>
 800621e:	4629      	mov	r1, r5
 8006220:	4630      	mov	r0, r6
 8006222:	f7ff ffbf 	bl	80061a4 <sbrk_aligned>
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	4604      	mov	r4, r0
 800622a:	d158      	bne.n	80062de <_malloc_r+0xf6>
 800622c:	f8d8 4000 	ldr.w	r4, [r8]
 8006230:	4627      	mov	r7, r4
 8006232:	2f00      	cmp	r7, #0
 8006234:	d143      	bne.n	80062be <_malloc_r+0xd6>
 8006236:	2c00      	cmp	r4, #0
 8006238:	d04b      	beq.n	80062d2 <_malloc_r+0xea>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	4639      	mov	r1, r7
 800623e:	4630      	mov	r0, r6
 8006240:	eb04 0903 	add.w	r9, r4, r3
 8006244:	f000 fa32 	bl	80066ac <_sbrk_r>
 8006248:	4581      	cmp	r9, r0
 800624a:	d142      	bne.n	80062d2 <_malloc_r+0xea>
 800624c:	6821      	ldr	r1, [r4, #0]
 800624e:	1a6d      	subs	r5, r5, r1
 8006250:	4629      	mov	r1, r5
 8006252:	4630      	mov	r0, r6
 8006254:	f7ff ffa6 	bl	80061a4 <sbrk_aligned>
 8006258:	3001      	adds	r0, #1
 800625a:	d03a      	beq.n	80062d2 <_malloc_r+0xea>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	442b      	add	r3, r5
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	f8d8 3000 	ldr.w	r3, [r8]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	bb62      	cbnz	r2, 80062c4 <_malloc_r+0xdc>
 800626a:	f8c8 7000 	str.w	r7, [r8]
 800626e:	e00f      	b.n	8006290 <_malloc_r+0xa8>
 8006270:	6822      	ldr	r2, [r4, #0]
 8006272:	1b52      	subs	r2, r2, r5
 8006274:	d420      	bmi.n	80062b8 <_malloc_r+0xd0>
 8006276:	2a0b      	cmp	r2, #11
 8006278:	d917      	bls.n	80062aa <_malloc_r+0xc2>
 800627a:	1961      	adds	r1, r4, r5
 800627c:	42a3      	cmp	r3, r4
 800627e:	6025      	str	r5, [r4, #0]
 8006280:	bf18      	it	ne
 8006282:	6059      	strne	r1, [r3, #4]
 8006284:	6863      	ldr	r3, [r4, #4]
 8006286:	bf08      	it	eq
 8006288:	f8c8 1000 	streq.w	r1, [r8]
 800628c:	5162      	str	r2, [r4, r5]
 800628e:	604b      	str	r3, [r1, #4]
 8006290:	4630      	mov	r0, r6
 8006292:	f000 f9bd 	bl	8006610 <__malloc_unlock>
 8006296:	f104 000b 	add.w	r0, r4, #11
 800629a:	1d23      	adds	r3, r4, #4
 800629c:	f020 0007 	bic.w	r0, r0, #7
 80062a0:	1ac2      	subs	r2, r0, r3
 80062a2:	bf1c      	itt	ne
 80062a4:	1a1b      	subne	r3, r3, r0
 80062a6:	50a3      	strne	r3, [r4, r2]
 80062a8:	e7af      	b.n	800620a <_malloc_r+0x22>
 80062aa:	6862      	ldr	r2, [r4, #4]
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	bf0c      	ite	eq
 80062b0:	f8c8 2000 	streq.w	r2, [r8]
 80062b4:	605a      	strne	r2, [r3, #4]
 80062b6:	e7eb      	b.n	8006290 <_malloc_r+0xa8>
 80062b8:	4623      	mov	r3, r4
 80062ba:	6864      	ldr	r4, [r4, #4]
 80062bc:	e7ae      	b.n	800621c <_malloc_r+0x34>
 80062be:	463c      	mov	r4, r7
 80062c0:	687f      	ldr	r7, [r7, #4]
 80062c2:	e7b6      	b.n	8006232 <_malloc_r+0x4a>
 80062c4:	461a      	mov	r2, r3
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	42a3      	cmp	r3, r4
 80062ca:	d1fb      	bne.n	80062c4 <_malloc_r+0xdc>
 80062cc:	2300      	movs	r3, #0
 80062ce:	6053      	str	r3, [r2, #4]
 80062d0:	e7de      	b.n	8006290 <_malloc_r+0xa8>
 80062d2:	230c      	movs	r3, #12
 80062d4:	6033      	str	r3, [r6, #0]
 80062d6:	4630      	mov	r0, r6
 80062d8:	f000 f99a 	bl	8006610 <__malloc_unlock>
 80062dc:	e794      	b.n	8006208 <_malloc_r+0x20>
 80062de:	6005      	str	r5, [r0, #0]
 80062e0:	e7d6      	b.n	8006290 <_malloc_r+0xa8>
 80062e2:	bf00      	nop
 80062e4:	2000050c 	.word	0x2000050c

080062e8 <_printf_common>:
 80062e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ec:	4616      	mov	r6, r2
 80062ee:	4698      	mov	r8, r3
 80062f0:	688a      	ldr	r2, [r1, #8]
 80062f2:	690b      	ldr	r3, [r1, #16]
 80062f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062f8:	4293      	cmp	r3, r2
 80062fa:	bfb8      	it	lt
 80062fc:	4613      	movlt	r3, r2
 80062fe:	6033      	str	r3, [r6, #0]
 8006300:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006304:	4607      	mov	r7, r0
 8006306:	460c      	mov	r4, r1
 8006308:	b10a      	cbz	r2, 800630e <_printf_common+0x26>
 800630a:	3301      	adds	r3, #1
 800630c:	6033      	str	r3, [r6, #0]
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	0699      	lsls	r1, r3, #26
 8006312:	bf42      	ittt	mi
 8006314:	6833      	ldrmi	r3, [r6, #0]
 8006316:	3302      	addmi	r3, #2
 8006318:	6033      	strmi	r3, [r6, #0]
 800631a:	6825      	ldr	r5, [r4, #0]
 800631c:	f015 0506 	ands.w	r5, r5, #6
 8006320:	d106      	bne.n	8006330 <_printf_common+0x48>
 8006322:	f104 0a19 	add.w	sl, r4, #25
 8006326:	68e3      	ldr	r3, [r4, #12]
 8006328:	6832      	ldr	r2, [r6, #0]
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	42ab      	cmp	r3, r5
 800632e:	dc26      	bgt.n	800637e <_printf_common+0x96>
 8006330:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	3b00      	subs	r3, #0
 8006338:	bf18      	it	ne
 800633a:	2301      	movne	r3, #1
 800633c:	0692      	lsls	r2, r2, #26
 800633e:	d42b      	bmi.n	8006398 <_printf_common+0xb0>
 8006340:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006344:	4641      	mov	r1, r8
 8006346:	4638      	mov	r0, r7
 8006348:	47c8      	blx	r9
 800634a:	3001      	adds	r0, #1
 800634c:	d01e      	beq.n	800638c <_printf_common+0xa4>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	6922      	ldr	r2, [r4, #16]
 8006352:	f003 0306 	and.w	r3, r3, #6
 8006356:	2b04      	cmp	r3, #4
 8006358:	bf02      	ittt	eq
 800635a:	68e5      	ldreq	r5, [r4, #12]
 800635c:	6833      	ldreq	r3, [r6, #0]
 800635e:	1aed      	subeq	r5, r5, r3
 8006360:	68a3      	ldr	r3, [r4, #8]
 8006362:	bf0c      	ite	eq
 8006364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006368:	2500      	movne	r5, #0
 800636a:	4293      	cmp	r3, r2
 800636c:	bfc4      	itt	gt
 800636e:	1a9b      	subgt	r3, r3, r2
 8006370:	18ed      	addgt	r5, r5, r3
 8006372:	2600      	movs	r6, #0
 8006374:	341a      	adds	r4, #26
 8006376:	42b5      	cmp	r5, r6
 8006378:	d11a      	bne.n	80063b0 <_printf_common+0xc8>
 800637a:	2000      	movs	r0, #0
 800637c:	e008      	b.n	8006390 <_printf_common+0xa8>
 800637e:	2301      	movs	r3, #1
 8006380:	4652      	mov	r2, sl
 8006382:	4641      	mov	r1, r8
 8006384:	4638      	mov	r0, r7
 8006386:	47c8      	blx	r9
 8006388:	3001      	adds	r0, #1
 800638a:	d103      	bne.n	8006394 <_printf_common+0xac>
 800638c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006394:	3501      	adds	r5, #1
 8006396:	e7c6      	b.n	8006326 <_printf_common+0x3e>
 8006398:	18e1      	adds	r1, r4, r3
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	2030      	movs	r0, #48	@ 0x30
 800639e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063a2:	4422      	add	r2, r4
 80063a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063ac:	3302      	adds	r3, #2
 80063ae:	e7c7      	b.n	8006340 <_printf_common+0x58>
 80063b0:	2301      	movs	r3, #1
 80063b2:	4622      	mov	r2, r4
 80063b4:	4641      	mov	r1, r8
 80063b6:	4638      	mov	r0, r7
 80063b8:	47c8      	blx	r9
 80063ba:	3001      	adds	r0, #1
 80063bc:	d0e6      	beq.n	800638c <_printf_common+0xa4>
 80063be:	3601      	adds	r6, #1
 80063c0:	e7d9      	b.n	8006376 <_printf_common+0x8e>
	...

080063c4 <_printf_i>:
 80063c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063c8:	7e0f      	ldrb	r7, [r1, #24]
 80063ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063cc:	2f78      	cmp	r7, #120	@ 0x78
 80063ce:	4691      	mov	r9, r2
 80063d0:	4680      	mov	r8, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	469a      	mov	sl, r3
 80063d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063da:	d807      	bhi.n	80063ec <_printf_i+0x28>
 80063dc:	2f62      	cmp	r7, #98	@ 0x62
 80063de:	d80a      	bhi.n	80063f6 <_printf_i+0x32>
 80063e0:	2f00      	cmp	r7, #0
 80063e2:	f000 80d2 	beq.w	800658a <_printf_i+0x1c6>
 80063e6:	2f58      	cmp	r7, #88	@ 0x58
 80063e8:	f000 80b9 	beq.w	800655e <_printf_i+0x19a>
 80063ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063f4:	e03a      	b.n	800646c <_printf_i+0xa8>
 80063f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063fa:	2b15      	cmp	r3, #21
 80063fc:	d8f6      	bhi.n	80063ec <_printf_i+0x28>
 80063fe:	a101      	add	r1, pc, #4	@ (adr r1, 8006404 <_printf_i+0x40>)
 8006400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006404:	0800645d 	.word	0x0800645d
 8006408:	08006471 	.word	0x08006471
 800640c:	080063ed 	.word	0x080063ed
 8006410:	080063ed 	.word	0x080063ed
 8006414:	080063ed 	.word	0x080063ed
 8006418:	080063ed 	.word	0x080063ed
 800641c:	08006471 	.word	0x08006471
 8006420:	080063ed 	.word	0x080063ed
 8006424:	080063ed 	.word	0x080063ed
 8006428:	080063ed 	.word	0x080063ed
 800642c:	080063ed 	.word	0x080063ed
 8006430:	08006571 	.word	0x08006571
 8006434:	0800649b 	.word	0x0800649b
 8006438:	0800652b 	.word	0x0800652b
 800643c:	080063ed 	.word	0x080063ed
 8006440:	080063ed 	.word	0x080063ed
 8006444:	08006593 	.word	0x08006593
 8006448:	080063ed 	.word	0x080063ed
 800644c:	0800649b 	.word	0x0800649b
 8006450:	080063ed 	.word	0x080063ed
 8006454:	080063ed 	.word	0x080063ed
 8006458:	08006533 	.word	0x08006533
 800645c:	6833      	ldr	r3, [r6, #0]
 800645e:	1d1a      	adds	r2, r3, #4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6032      	str	r2, [r6, #0]
 8006464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006468:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800646c:	2301      	movs	r3, #1
 800646e:	e09d      	b.n	80065ac <_printf_i+0x1e8>
 8006470:	6833      	ldr	r3, [r6, #0]
 8006472:	6820      	ldr	r0, [r4, #0]
 8006474:	1d19      	adds	r1, r3, #4
 8006476:	6031      	str	r1, [r6, #0]
 8006478:	0606      	lsls	r6, r0, #24
 800647a:	d501      	bpl.n	8006480 <_printf_i+0xbc>
 800647c:	681d      	ldr	r5, [r3, #0]
 800647e:	e003      	b.n	8006488 <_printf_i+0xc4>
 8006480:	0645      	lsls	r5, r0, #25
 8006482:	d5fb      	bpl.n	800647c <_printf_i+0xb8>
 8006484:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006488:	2d00      	cmp	r5, #0
 800648a:	da03      	bge.n	8006494 <_printf_i+0xd0>
 800648c:	232d      	movs	r3, #45	@ 0x2d
 800648e:	426d      	negs	r5, r5
 8006490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006494:	4859      	ldr	r0, [pc, #356]	@ (80065fc <_printf_i+0x238>)
 8006496:	230a      	movs	r3, #10
 8006498:	e011      	b.n	80064be <_printf_i+0xfa>
 800649a:	6821      	ldr	r1, [r4, #0]
 800649c:	6833      	ldr	r3, [r6, #0]
 800649e:	0608      	lsls	r0, r1, #24
 80064a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80064a4:	d402      	bmi.n	80064ac <_printf_i+0xe8>
 80064a6:	0649      	lsls	r1, r1, #25
 80064a8:	bf48      	it	mi
 80064aa:	b2ad      	uxthmi	r5, r5
 80064ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80064ae:	4853      	ldr	r0, [pc, #332]	@ (80065fc <_printf_i+0x238>)
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	bf14      	ite	ne
 80064b4:	230a      	movne	r3, #10
 80064b6:	2308      	moveq	r3, #8
 80064b8:	2100      	movs	r1, #0
 80064ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064be:	6866      	ldr	r6, [r4, #4]
 80064c0:	60a6      	str	r6, [r4, #8]
 80064c2:	2e00      	cmp	r6, #0
 80064c4:	bfa2      	ittt	ge
 80064c6:	6821      	ldrge	r1, [r4, #0]
 80064c8:	f021 0104 	bicge.w	r1, r1, #4
 80064cc:	6021      	strge	r1, [r4, #0]
 80064ce:	b90d      	cbnz	r5, 80064d4 <_printf_i+0x110>
 80064d0:	2e00      	cmp	r6, #0
 80064d2:	d04b      	beq.n	800656c <_printf_i+0x1a8>
 80064d4:	4616      	mov	r6, r2
 80064d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80064da:	fb03 5711 	mls	r7, r3, r1, r5
 80064de:	5dc7      	ldrb	r7, [r0, r7]
 80064e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064e4:	462f      	mov	r7, r5
 80064e6:	42bb      	cmp	r3, r7
 80064e8:	460d      	mov	r5, r1
 80064ea:	d9f4      	bls.n	80064d6 <_printf_i+0x112>
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d10b      	bne.n	8006508 <_printf_i+0x144>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	07df      	lsls	r7, r3, #31
 80064f4:	d508      	bpl.n	8006508 <_printf_i+0x144>
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	6861      	ldr	r1, [r4, #4]
 80064fa:	4299      	cmp	r1, r3
 80064fc:	bfde      	ittt	le
 80064fe:	2330      	movle	r3, #48	@ 0x30
 8006500:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006504:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006508:	1b92      	subs	r2, r2, r6
 800650a:	6122      	str	r2, [r4, #16]
 800650c:	f8cd a000 	str.w	sl, [sp]
 8006510:	464b      	mov	r3, r9
 8006512:	aa03      	add	r2, sp, #12
 8006514:	4621      	mov	r1, r4
 8006516:	4640      	mov	r0, r8
 8006518:	f7ff fee6 	bl	80062e8 <_printf_common>
 800651c:	3001      	adds	r0, #1
 800651e:	d14a      	bne.n	80065b6 <_printf_i+0x1f2>
 8006520:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006524:	b004      	add	sp, #16
 8006526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	f043 0320 	orr.w	r3, r3, #32
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	4833      	ldr	r0, [pc, #204]	@ (8006600 <_printf_i+0x23c>)
 8006534:	2778      	movs	r7, #120	@ 0x78
 8006536:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	6831      	ldr	r1, [r6, #0]
 800653e:	061f      	lsls	r7, r3, #24
 8006540:	f851 5b04 	ldr.w	r5, [r1], #4
 8006544:	d402      	bmi.n	800654c <_printf_i+0x188>
 8006546:	065f      	lsls	r7, r3, #25
 8006548:	bf48      	it	mi
 800654a:	b2ad      	uxthmi	r5, r5
 800654c:	6031      	str	r1, [r6, #0]
 800654e:	07d9      	lsls	r1, r3, #31
 8006550:	bf44      	itt	mi
 8006552:	f043 0320 	orrmi.w	r3, r3, #32
 8006556:	6023      	strmi	r3, [r4, #0]
 8006558:	b11d      	cbz	r5, 8006562 <_printf_i+0x19e>
 800655a:	2310      	movs	r3, #16
 800655c:	e7ac      	b.n	80064b8 <_printf_i+0xf4>
 800655e:	4827      	ldr	r0, [pc, #156]	@ (80065fc <_printf_i+0x238>)
 8006560:	e7e9      	b.n	8006536 <_printf_i+0x172>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	f023 0320 	bic.w	r3, r3, #32
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	e7f6      	b.n	800655a <_printf_i+0x196>
 800656c:	4616      	mov	r6, r2
 800656e:	e7bd      	b.n	80064ec <_printf_i+0x128>
 8006570:	6833      	ldr	r3, [r6, #0]
 8006572:	6825      	ldr	r5, [r4, #0]
 8006574:	6961      	ldr	r1, [r4, #20]
 8006576:	1d18      	adds	r0, r3, #4
 8006578:	6030      	str	r0, [r6, #0]
 800657a:	062e      	lsls	r6, r5, #24
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	d501      	bpl.n	8006584 <_printf_i+0x1c0>
 8006580:	6019      	str	r1, [r3, #0]
 8006582:	e002      	b.n	800658a <_printf_i+0x1c6>
 8006584:	0668      	lsls	r0, r5, #25
 8006586:	d5fb      	bpl.n	8006580 <_printf_i+0x1bc>
 8006588:	8019      	strh	r1, [r3, #0]
 800658a:	2300      	movs	r3, #0
 800658c:	6123      	str	r3, [r4, #16]
 800658e:	4616      	mov	r6, r2
 8006590:	e7bc      	b.n	800650c <_printf_i+0x148>
 8006592:	6833      	ldr	r3, [r6, #0]
 8006594:	1d1a      	adds	r2, r3, #4
 8006596:	6032      	str	r2, [r6, #0]
 8006598:	681e      	ldr	r6, [r3, #0]
 800659a:	6862      	ldr	r2, [r4, #4]
 800659c:	2100      	movs	r1, #0
 800659e:	4630      	mov	r0, r6
 80065a0:	f7f9 fe16 	bl	80001d0 <memchr>
 80065a4:	b108      	cbz	r0, 80065aa <_printf_i+0x1e6>
 80065a6:	1b80      	subs	r0, r0, r6
 80065a8:	6060      	str	r0, [r4, #4]
 80065aa:	6863      	ldr	r3, [r4, #4]
 80065ac:	6123      	str	r3, [r4, #16]
 80065ae:	2300      	movs	r3, #0
 80065b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065b4:	e7aa      	b.n	800650c <_printf_i+0x148>
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	4632      	mov	r2, r6
 80065ba:	4649      	mov	r1, r9
 80065bc:	4640      	mov	r0, r8
 80065be:	47d0      	blx	sl
 80065c0:	3001      	adds	r0, #1
 80065c2:	d0ad      	beq.n	8006520 <_printf_i+0x15c>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	079b      	lsls	r3, r3, #30
 80065c8:	d413      	bmi.n	80065f2 <_printf_i+0x22e>
 80065ca:	68e0      	ldr	r0, [r4, #12]
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	4298      	cmp	r0, r3
 80065d0:	bfb8      	it	lt
 80065d2:	4618      	movlt	r0, r3
 80065d4:	e7a6      	b.n	8006524 <_printf_i+0x160>
 80065d6:	2301      	movs	r3, #1
 80065d8:	4632      	mov	r2, r6
 80065da:	4649      	mov	r1, r9
 80065dc:	4640      	mov	r0, r8
 80065de:	47d0      	blx	sl
 80065e0:	3001      	adds	r0, #1
 80065e2:	d09d      	beq.n	8006520 <_printf_i+0x15c>
 80065e4:	3501      	adds	r5, #1
 80065e6:	68e3      	ldr	r3, [r4, #12]
 80065e8:	9903      	ldr	r1, [sp, #12]
 80065ea:	1a5b      	subs	r3, r3, r1
 80065ec:	42ab      	cmp	r3, r5
 80065ee:	dcf2      	bgt.n	80065d6 <_printf_i+0x212>
 80065f0:	e7eb      	b.n	80065ca <_printf_i+0x206>
 80065f2:	2500      	movs	r5, #0
 80065f4:	f104 0619 	add.w	r6, r4, #25
 80065f8:	e7f5      	b.n	80065e6 <_printf_i+0x222>
 80065fa:	bf00      	nop
 80065fc:	080067e9 	.word	0x080067e9
 8006600:	080067fa 	.word	0x080067fa

08006604 <__malloc_lock>:
 8006604:	4801      	ldr	r0, [pc, #4]	@ (800660c <__malloc_lock+0x8>)
 8006606:	f7ff bc73 	b.w	8005ef0 <__retarget_lock_acquire_recursive>
 800660a:	bf00      	nop
 800660c:	20000504 	.word	0x20000504

08006610 <__malloc_unlock>:
 8006610:	4801      	ldr	r0, [pc, #4]	@ (8006618 <__malloc_unlock+0x8>)
 8006612:	f7ff bc6e 	b.w	8005ef2 <__retarget_lock_release_recursive>
 8006616:	bf00      	nop
 8006618:	20000504 	.word	0x20000504

0800661c <_realloc_r>:
 800661c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006620:	4680      	mov	r8, r0
 8006622:	4615      	mov	r5, r2
 8006624:	460c      	mov	r4, r1
 8006626:	b921      	cbnz	r1, 8006632 <_realloc_r+0x16>
 8006628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800662c:	4611      	mov	r1, r2
 800662e:	f7ff bddb 	b.w	80061e8 <_malloc_r>
 8006632:	b92a      	cbnz	r2, 8006640 <_realloc_r+0x24>
 8006634:	f000 f858 	bl	80066e8 <_free_r>
 8006638:	2400      	movs	r4, #0
 800663a:	4620      	mov	r0, r4
 800663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006640:	f000 f89c 	bl	800677c <_malloc_usable_size_r>
 8006644:	4285      	cmp	r5, r0
 8006646:	4606      	mov	r6, r0
 8006648:	d802      	bhi.n	8006650 <_realloc_r+0x34>
 800664a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800664e:	d8f4      	bhi.n	800663a <_realloc_r+0x1e>
 8006650:	4629      	mov	r1, r5
 8006652:	4640      	mov	r0, r8
 8006654:	f7ff fdc8 	bl	80061e8 <_malloc_r>
 8006658:	4607      	mov	r7, r0
 800665a:	2800      	cmp	r0, #0
 800665c:	d0ec      	beq.n	8006638 <_realloc_r+0x1c>
 800665e:	42b5      	cmp	r5, r6
 8006660:	462a      	mov	r2, r5
 8006662:	4621      	mov	r1, r4
 8006664:	bf28      	it	cs
 8006666:	4632      	movcs	r2, r6
 8006668:	f000 f830 	bl	80066cc <memcpy>
 800666c:	4621      	mov	r1, r4
 800666e:	4640      	mov	r0, r8
 8006670:	f000 f83a 	bl	80066e8 <_free_r>
 8006674:	463c      	mov	r4, r7
 8006676:	e7e0      	b.n	800663a <_realloc_r+0x1e>

08006678 <memmove>:
 8006678:	4288      	cmp	r0, r1
 800667a:	b510      	push	{r4, lr}
 800667c:	eb01 0402 	add.w	r4, r1, r2
 8006680:	d902      	bls.n	8006688 <memmove+0x10>
 8006682:	4284      	cmp	r4, r0
 8006684:	4623      	mov	r3, r4
 8006686:	d807      	bhi.n	8006698 <memmove+0x20>
 8006688:	1e43      	subs	r3, r0, #1
 800668a:	42a1      	cmp	r1, r4
 800668c:	d008      	beq.n	80066a0 <memmove+0x28>
 800668e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006692:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006696:	e7f8      	b.n	800668a <memmove+0x12>
 8006698:	4402      	add	r2, r0
 800669a:	4601      	mov	r1, r0
 800669c:	428a      	cmp	r2, r1
 800669e:	d100      	bne.n	80066a2 <memmove+0x2a>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066aa:	e7f7      	b.n	800669c <memmove+0x24>

080066ac <_sbrk_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4d06      	ldr	r5, [pc, #24]	@ (80066c8 <_sbrk_r+0x1c>)
 80066b0:	2300      	movs	r3, #0
 80066b2:	4604      	mov	r4, r0
 80066b4:	4608      	mov	r0, r1
 80066b6:	602b      	str	r3, [r5, #0]
 80066b8:	f7fa fefe 	bl	80014b8 <_sbrk>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_sbrk_r+0x1a>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_sbrk_r+0x1a>
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	20000510 	.word	0x20000510

080066cc <memcpy>:
 80066cc:	440a      	add	r2, r1
 80066ce:	4291      	cmp	r1, r2
 80066d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80066d4:	d100      	bne.n	80066d8 <memcpy+0xc>
 80066d6:	4770      	bx	lr
 80066d8:	b510      	push	{r4, lr}
 80066da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066e2:	4291      	cmp	r1, r2
 80066e4:	d1f9      	bne.n	80066da <memcpy+0xe>
 80066e6:	bd10      	pop	{r4, pc}

080066e8 <_free_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4605      	mov	r5, r0
 80066ec:	2900      	cmp	r1, #0
 80066ee:	d041      	beq.n	8006774 <_free_r+0x8c>
 80066f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f4:	1f0c      	subs	r4, r1, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bfb8      	it	lt
 80066fa:	18e4      	addlt	r4, r4, r3
 80066fc:	f7ff ff82 	bl	8006604 <__malloc_lock>
 8006700:	4a1d      	ldr	r2, [pc, #116]	@ (8006778 <_free_r+0x90>)
 8006702:	6813      	ldr	r3, [r2, #0]
 8006704:	b933      	cbnz	r3, 8006714 <_free_r+0x2c>
 8006706:	6063      	str	r3, [r4, #4]
 8006708:	6014      	str	r4, [r2, #0]
 800670a:	4628      	mov	r0, r5
 800670c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006710:	f7ff bf7e 	b.w	8006610 <__malloc_unlock>
 8006714:	42a3      	cmp	r3, r4
 8006716:	d908      	bls.n	800672a <_free_r+0x42>
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	1821      	adds	r1, r4, r0
 800671c:	428b      	cmp	r3, r1
 800671e:	bf01      	itttt	eq
 8006720:	6819      	ldreq	r1, [r3, #0]
 8006722:	685b      	ldreq	r3, [r3, #4]
 8006724:	1809      	addeq	r1, r1, r0
 8006726:	6021      	streq	r1, [r4, #0]
 8006728:	e7ed      	b.n	8006706 <_free_r+0x1e>
 800672a:	461a      	mov	r2, r3
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	b10b      	cbz	r3, 8006734 <_free_r+0x4c>
 8006730:	42a3      	cmp	r3, r4
 8006732:	d9fa      	bls.n	800672a <_free_r+0x42>
 8006734:	6811      	ldr	r1, [r2, #0]
 8006736:	1850      	adds	r0, r2, r1
 8006738:	42a0      	cmp	r0, r4
 800673a:	d10b      	bne.n	8006754 <_free_r+0x6c>
 800673c:	6820      	ldr	r0, [r4, #0]
 800673e:	4401      	add	r1, r0
 8006740:	1850      	adds	r0, r2, r1
 8006742:	4283      	cmp	r3, r0
 8006744:	6011      	str	r1, [r2, #0]
 8006746:	d1e0      	bne.n	800670a <_free_r+0x22>
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	6053      	str	r3, [r2, #4]
 800674e:	4408      	add	r0, r1
 8006750:	6010      	str	r0, [r2, #0]
 8006752:	e7da      	b.n	800670a <_free_r+0x22>
 8006754:	d902      	bls.n	800675c <_free_r+0x74>
 8006756:	230c      	movs	r3, #12
 8006758:	602b      	str	r3, [r5, #0]
 800675a:	e7d6      	b.n	800670a <_free_r+0x22>
 800675c:	6820      	ldr	r0, [r4, #0]
 800675e:	1821      	adds	r1, r4, r0
 8006760:	428b      	cmp	r3, r1
 8006762:	bf04      	itt	eq
 8006764:	6819      	ldreq	r1, [r3, #0]
 8006766:	685b      	ldreq	r3, [r3, #4]
 8006768:	6063      	str	r3, [r4, #4]
 800676a:	bf04      	itt	eq
 800676c:	1809      	addeq	r1, r1, r0
 800676e:	6021      	streq	r1, [r4, #0]
 8006770:	6054      	str	r4, [r2, #4]
 8006772:	e7ca      	b.n	800670a <_free_r+0x22>
 8006774:	bd38      	pop	{r3, r4, r5, pc}
 8006776:	bf00      	nop
 8006778:	2000050c 	.word	0x2000050c

0800677c <_malloc_usable_size_r>:
 800677c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006780:	1f18      	subs	r0, r3, #4
 8006782:	2b00      	cmp	r3, #0
 8006784:	bfbc      	itt	lt
 8006786:	580b      	ldrlt	r3, [r1, r0]
 8006788:	18c0      	addlt	r0, r0, r3
 800678a:	4770      	bx	lr

0800678c <_init>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr

08006798 <_fini>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr
