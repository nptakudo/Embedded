
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a84  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003088  08007c0c  08007c0c  00008c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac94  0800ac94  0000c0b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac94  0800ac94  0000bc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac9c  0800ac9c  0000c0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac9c  0800ac9c  0000bc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aca0  0800aca0  0000bca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800aca4  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c0b0  2**0
                  CONTENTS
 10 .bss          000003f0  200000b0  200000b0  0000c0b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a0  200004a0  0000c0b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015144  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c61  00000000  00000000  00021224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  00024e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000faa  00000000  00000000  000262d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259b0  00000000  00000000  0002727a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6ab  00000000  00000000  0004cc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd628  00000000  00000000  000682d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001458fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005704  00000000  00000000  00145940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0014b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007bf4 	.word	0x08007bf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	08007bf4 	.word	0x08007bf4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000af4:	f000 b96a 	b.w	8000dcc <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	460c      	mov	r4, r1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14e      	bne.n	8000bba <__udivmoddi4+0xaa>
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	458c      	cmp	ip, r1
 8000b20:	4686      	mov	lr, r0
 8000b22:	fab2 f282 	clz	r2, r2
 8000b26:	d962      	bls.n	8000bee <__udivmoddi4+0xde>
 8000b28:	b14a      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2a:	f1c2 0320 	rsb	r3, r2, #32
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	fa20 f303 	lsr.w	r3, r0, r3
 8000b34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b38:	4319      	orrs	r1, r3
 8000b3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f f68c 	uxth.w	r6, ip
 8000b46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b56:	fb04 f106 	mul.w	r1, r4, r6
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	d90a      	bls.n	8000b74 <__udivmoddi4+0x64>
 8000b5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b62:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b66:	f080 8112 	bcs.w	8000d8e <__udivmoddi4+0x27e>
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	f240 810f 	bls.w	8000d8e <__udivmoddi4+0x27e>
 8000b70:	3c02      	subs	r4, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	1a59      	subs	r1, r3, r1
 8000b76:	fa1f f38e 	uxth.w	r3, lr
 8000b7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b86:	fb00 f606 	mul.w	r6, r0, r6
 8000b8a:	429e      	cmp	r6, r3
 8000b8c:	d90a      	bls.n	8000ba4 <__udivmoddi4+0x94>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b96:	f080 80fc 	bcs.w	8000d92 <__udivmoddi4+0x282>
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	f240 80f9 	bls.w	8000d92 <__udivmoddi4+0x282>
 8000ba0:	4463      	add	r3, ip
 8000ba2:	3802      	subs	r0, #2
 8000ba4:	1b9b      	subs	r3, r3, r6
 8000ba6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11d      	cbz	r5, 8000bb6 <__udivmoddi4+0xa6>
 8000bae:	40d3      	lsrs	r3, r2
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d905      	bls.n	8000bca <__udivmoddi4+0xba>
 8000bbe:	b10d      	cbz	r5, 8000bc4 <__udivmoddi4+0xb4>
 8000bc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e7f5      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000bca:	fab3 f183 	clz	r1, r3
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d146      	bne.n	8000c60 <__udivmoddi4+0x150>
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xcc>
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	f0c0 80f0 	bcc.w	8000dbc <__udivmoddi4+0x2ac>
 8000bdc:	1a86      	subs	r6, r0, r2
 8000bde:	eb64 0303 	sbc.w	r3, r4, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d0e6      	beq.n	8000bb6 <__udivmoddi4+0xa6>
 8000be8:	e9c5 6300 	strd	r6, r3, [r5]
 8000bec:	e7e3      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	f040 8090 	bne.w	8000d14 <__udivmoddi4+0x204>
 8000bf4:	eba1 040c 	sub.w	r4, r1, ip
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	fa1f f78c 	uxth.w	r7, ip
 8000c00:	2101      	movs	r1, #1
 8000c02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c12:	fb07 f006 	mul.w	r0, r7, r6
 8000c16:	4298      	cmp	r0, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x11c>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x11a>
 8000c24:	4298      	cmp	r0, r3
 8000c26:	f200 80cd 	bhi.w	8000dc4 <__udivmoddi4+0x2b4>
 8000c2a:	4626      	mov	r6, r4
 8000c2c:	1a1c      	subs	r4, r3, r0
 8000c2e:	fa1f f38e 	uxth.w	r3, lr
 8000c32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c36:	fb08 4410 	mls	r4, r8, r0, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb00 f707 	mul.w	r7, r0, r7
 8000c42:	429f      	cmp	r7, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x148>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x146>
 8000c50:	429f      	cmp	r7, r3
 8000c52:	f200 80b0 	bhi.w	8000db6 <__udivmoddi4+0x2a6>
 8000c56:	4620      	mov	r0, r4
 8000c58:	1bdb      	subs	r3, r3, r7
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0x9c>
 8000c60:	f1c1 0620 	rsb	r6, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6a:	431f      	orrs	r7, r3
 8000c6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c70:	fa04 f301 	lsl.w	r3, r4, r1
 8000c74:	ea43 030c 	orr.w	r3, r3, ip
 8000c78:	40f4      	lsrs	r4, r6
 8000c7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c7e:	0c38      	lsrs	r0, r7, #16
 8000c80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c84:	fbb4 fef0 	udiv	lr, r4, r0
 8000c88:	fa1f fc87 	uxth.w	ip, r7
 8000c8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000c90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c94:	fb0e f90c 	mul.w	r9, lr, ip
 8000c98:	45a1      	cmp	r9, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	d90a      	bls.n	8000cb6 <__udivmoddi4+0x1a6>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ca6:	f080 8084 	bcs.w	8000db2 <__udivmoddi4+0x2a2>
 8000caa:	45a1      	cmp	r9, r4
 8000cac:	f240 8081 	bls.w	8000db2 <__udivmoddi4+0x2a2>
 8000cb0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb4:	443c      	add	r4, r7
 8000cb6:	eba4 0409 	sub.w	r4, r4, r9
 8000cba:	fa1f f983 	uxth.w	r9, r3
 8000cbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000cc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x1d2>
 8000cd2:	193c      	adds	r4, r7, r4
 8000cd4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cd8:	d267      	bcs.n	8000daa <__udivmoddi4+0x29a>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0x29a>
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ce6:	fba0 9302 	umull	r9, r3, r0, r2
 8000cea:	eba4 040c 	sub.w	r4, r4, ip
 8000cee:	429c      	cmp	r4, r3
 8000cf0:	46ce      	mov	lr, r9
 8000cf2:	469c      	mov	ip, r3
 8000cf4:	d351      	bcc.n	8000d9a <__udivmoddi4+0x28a>
 8000cf6:	d04e      	beq.n	8000d96 <__udivmoddi4+0x286>
 8000cf8:	b155      	cbz	r5, 8000d10 <__udivmoddi4+0x200>
 8000cfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000cfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000d02:	fa04 f606 	lsl.w	r6, r4, r6
 8000d06:	40cb      	lsrs	r3, r1
 8000d08:	431e      	orrs	r6, r3
 8000d0a:	40cc      	lsrs	r4, r1
 8000d0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d10:	2100      	movs	r1, #0
 8000d12:	e750      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f103 	lsr.w	r1, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa24 f303 	lsr.w	r3, r4, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	430c      	orrs	r4, r1
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d30:	fa1f f78c 	uxth.w	r7, ip
 8000d34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d38:	fb08 3110 	mls	r1, r8, r0, r3
 8000d3c:	0c23      	lsrs	r3, r4, #16
 8000d3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d42:	fb00 f107 	mul.w	r1, r0, r7
 8000d46:	4299      	cmp	r1, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x24c>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d52:	d22c      	bcs.n	8000dae <__udivmoddi4+0x29e>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	d92a      	bls.n	8000dae <__udivmoddi4+0x29e>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d64:	fb08 3311 	mls	r3, r8, r1, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb01 f307 	mul.w	r3, r1, r7
 8000d70:	42a3      	cmp	r3, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x276>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d7c:	d213      	bcs.n	8000da6 <__udivmoddi4+0x296>
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d911      	bls.n	8000da6 <__udivmoddi4+0x296>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	1ae4      	subs	r4, r4, r3
 8000d88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d8c:	e739      	b.n	8000c02 <__udivmoddi4+0xf2>
 8000d8e:	4604      	mov	r4, r0
 8000d90:	e6f0      	b.n	8000b74 <__udivmoddi4+0x64>
 8000d92:	4608      	mov	r0, r1
 8000d94:	e706      	b.n	8000ba4 <__udivmoddi4+0x94>
 8000d96:	45c8      	cmp	r8, r9
 8000d98:	d2ae      	bcs.n	8000cf8 <__udivmoddi4+0x1e8>
 8000d9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000da2:	3801      	subs	r0, #1
 8000da4:	e7a8      	b.n	8000cf8 <__udivmoddi4+0x1e8>
 8000da6:	4631      	mov	r1, r6
 8000da8:	e7ed      	b.n	8000d86 <__udivmoddi4+0x276>
 8000daa:	4603      	mov	r3, r0
 8000dac:	e799      	b.n	8000ce2 <__udivmoddi4+0x1d2>
 8000dae:	4630      	mov	r0, r6
 8000db0:	e7d4      	b.n	8000d5c <__udivmoddi4+0x24c>
 8000db2:	46d6      	mov	lr, sl
 8000db4:	e77f      	b.n	8000cb6 <__udivmoddi4+0x1a6>
 8000db6:	4463      	add	r3, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e74d      	b.n	8000c58 <__udivmoddi4+0x148>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e70f      	b.n	8000be4 <__udivmoddi4+0xd4>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	e730      	b.n	8000c2c <__udivmoddi4+0x11c>
 8000dca:	bf00      	nop

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000de2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000de4:	4a3d      	ldr	r2, [pc, #244]	@ (8000edc <MX_ADC1_Init+0x10c>)
 8000de6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000de8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dee:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000df4:	4b38      	ldr	r3, [pc, #224]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dfa:	4b37      	ldr	r3, [pc, #220]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	4b35      	ldr	r3, [pc, #212]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e08:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e0e:	4b32      	ldr	r3, [pc, #200]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e10:	4a33      	ldr	r2, [pc, #204]	@ (8000ee0 <MX_ADC1_Init+0x110>)
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e14:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e20:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e28:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e2e:	482a      	ldr	r0, [pc, #168]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e30:	f002 fdc4 	bl	80039bc <HAL_ADC_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f001 fb3f 	bl	80024bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4822      	ldr	r0, [pc, #136]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e50:	f002 fdf8 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e5a:	f001 fb2f 	bl	80024bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e5e:	2309      	movs	r3, #9
 8000e60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481b      	ldr	r0, [pc, #108]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e6c:	f002 fdea 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e76:	f001 fb21 	bl	80024bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	4814      	ldr	r0, [pc, #80]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e88:	f002 fddc 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e92:	f001 fb13 	bl	80024bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e96:	230b      	movs	r3, #11
 8000e98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000ea4:	f002 fdce 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000eae:	f001 fb05 	bl	80024bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000eb2:	230c      	movs	r3, #12
 8000eb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000ec0:	f002 fdc0 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000eca:	f001 faf7 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000cc 	.word	0x200000cc
 8000edc:	40012000 	.word	0x40012000
 8000ee0:	0f000001 	.word	0x0f000001

08000ee4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a3c      	ldr	r2, [pc, #240]	@ (8000ff4 <HAL_ADC_MspInit+0x110>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d171      	bne.n	8000fea <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b38      	ldr	r3, [pc, #224]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b34      	ldr	r3, [pc, #208]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a33      	ldr	r2, [pc, #204]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b31      	ldr	r3, [pc, #196]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a2c      	ldr	r2, [pc, #176]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4823      	ldr	r0, [pc, #140]	@ (8000ffc <HAL_ADC_MspInit+0x118>)
 8000f6e:	f003 fb83 	bl	8004678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f72:	2303      	movs	r3, #3
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f76:	2303      	movs	r3, #3
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	481e      	ldr	r0, [pc, #120]	@ (8001000 <HAL_ADC_MspInit+0x11c>)
 8000f86:	f003 fb77 	bl	8004678 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001008 <HAL_ADC_MspInit+0x124>)
 8000f8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fa8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fc0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fce:	480d      	ldr	r0, [pc, #52]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fd0:	f003 f868 	bl	80040a4 <HAL_DMA_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fda:	f001 fa6f 	bl	80024bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a08      	ldr	r2, [pc, #32]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fe2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	@ 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40012000 	.word	0x40012000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020400 	.word	0x40020400
 8001004:	20000114 	.word	0x20000114
 8001008:	40026410 	.word	0x40026410

0800100c <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	at24c_Check();
 8001010:	f000 f83c 	bl	800108c <at24c_Check>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af04      	add	r7, sp, #16
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 8001026:	88fa      	ldrh	r2, [r7, #6]
 8001028:	230a      	movs	r3, #10
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	2301      	movs	r3, #1
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	f107 030f 	add.w	r3, r7, #15
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2310      	movs	r3, #16
 8001038:	21a0      	movs	r1, #160	@ 0xa0
 800103a:	4804      	ldr	r0, [pc, #16]	@ (800104c <at24c_ReadOneByte+0x34>)
 800103c:	f003 ff42 	bl	8004ec4 <HAL_I2C_Mem_Read>
	return temp;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001c8 	.word	0x200001c8

08001050 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af04      	add	r7, sp, #16
 8001056:	4603      	mov	r3, r0
 8001058:	460a      	mov	r2, r1
 800105a:	80fb      	strh	r3, [r7, #6]
 800105c:	4613      	mov	r3, r2
 800105e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001060:	88fa      	ldrh	r2, [r7, #6]
 8001062:	230a      	movs	r3, #10
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1d7b      	adds	r3, r7, #5
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2310      	movs	r3, #16
 8001070:	21a0      	movs	r1, #160	@ 0xa0
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <at24c_WriteOneByte+0x38>)
 8001074:	f003 fe2c 	bl	8004cd0 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001078:	2005      	movs	r0, #5
 800107a:	f002 fc7b 	bl	8003974 <HAL_Delay>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001c8 	.word	0x200001c8

0800108c <at24c_Check>:

uint8_t at24c_Check(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 8001092:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001096:	f7ff ffbf 	bl	8001018 <at24c_ReadOneByte>
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b55      	cmp	r3, #85	@ 0x55
 80010a2:	d101      	bne.n	80010a8 <at24c_Check+0x1c>
 80010a4:	2300      	movs	r3, #0
 80010a6:	e010      	b.n	80010ca <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 80010a8:	2155      	movs	r1, #85	@ 0x55
 80010aa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010ae:	f7ff ffcf 	bl	8001050 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 80010b2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010b6:	f7ff ffaf 	bl	8001018 <at24c_ReadOneByte>
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b55      	cmp	r3, #85	@ 0x55
 80010c2:	d101      	bne.n	80010c8 <at24c_Check+0x3c>
 80010c4:	2300      	movs	r3, #0
 80010c6:	e000      	b.n	80010ca <at24c_Check+0x3e>
	}
	return 1;
 80010c8:	2301      	movs	r3, #1
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 80010d2:	b590      	push	{r4, r7, lr}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	6039      	str	r1, [r7, #0]
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	4613      	mov	r3, r2
 80010e0:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80010e2:	e00d      	b.n	8001100 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	80fa      	strh	r2, [r7, #6]
 80010ea:	683c      	ldr	r4, [r7, #0]
 80010ec:	1c62      	adds	r2, r4, #1
 80010ee:	603a      	str	r2, [r7, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff91 	bl	8001018 <at24c_ReadOneByte>
 80010f6:	4603      	mov	r3, r0
 80010f8:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1ee      	bne.n	80010e4 <at24c_Read+0x12>
	}
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}

08001110 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	80fb      	strh	r3, [r7, #6]
 800111c:	4613      	mov	r3, r2
 800111e:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8001120:	e00c      	b.n	800113c <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff90 	bl	8001050 <at24c_WriteOneByte>
		WriteAddr++;
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	3301      	adds	r3, #1
 8001134:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	80ba      	strh	r2, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1ed      	bne.n	8001122 <at24c_Write+0x12>
	}
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	2108      	movs	r1, #8
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <button_init+0x14>)
 800115a:	f003 fc41 	bl	80049e0 <HAL_GPIO_WritePin>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40020c00 	.word	0x40020c00

08001168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_DMA_Init+0x3c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a0b      	ldr	r2, [pc, #44]	@ (80011a4 <MX_DMA_Init+0x3c>)
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_DMA_Init+0x3c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2038      	movs	r0, #56	@ 0x38
 8001190:	f002 ff51 	bl	8004036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001194:	2038      	movs	r0, #56	@ 0x38
 8001196:	f002 ff6a 	bl	800406e <HAL_NVIC_EnableIRQ>

}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08e      	sub	sp, #56	@ 0x38
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]
 80011be:	615a      	str	r2, [r3, #20]
 80011c0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80011d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <MX_FSMC_Init+0xec>)
 80011d6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80011da:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <MX_FSMC_Init+0xec>)
 80011de:	4a2e      	ldr	r2, [pc, #184]	@ (8001298 <MX_FSMC_Init+0xf0>)
 80011e0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80011e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001294 <MX_FSMC_Init+0xec>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80011e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <MX_FSMC_Init+0xec>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80011ee:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <MX_FSMC_Init+0xec>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011f4:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <MX_FSMC_Init+0xec>)
 80011f6:	2210      	movs	r2, #16
 80011f8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011fa:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <MX_FSMC_Init+0xec>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001200:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <MX_FSMC_Init+0xec>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001206:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <MX_FSMC_Init+0xec>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800120c:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <MX_FSMC_Init+0xec>)
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <MX_FSMC_Init+0xec>)
 8001214:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001218:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800121a:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <MX_FSMC_Init+0xec>)
 800121c:	2200      	movs	r2, #0
 800121e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001220:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <MX_FSMC_Init+0xec>)
 8001222:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001226:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <MX_FSMC_Init+0xec>)
 800122a:	2200      	movs	r2, #0
 800122c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <MX_FSMC_Init+0xec>)
 8001230:	2200      	movs	r2, #0
 8001232:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <MX_FSMC_Init+0xec>)
 8001236:	2200      	movs	r2, #0
 8001238:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800123a:	230f      	movs	r3, #15
 800123c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800123e:	230f      	movs	r3, #15
 8001240:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001242:	233c      	movs	r3, #60	@ 0x3c
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800124a:	2310      	movs	r3, #16
 800124c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800124e:	2311      	movs	r3, #17
 8001250:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001252:	2300      	movs	r3, #0
 8001254:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001256:	2308      	movs	r3, #8
 8001258:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800125a:	230f      	movs	r3, #15
 800125c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800125e:	2309      	movs	r3, #9
 8001260:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001266:	2310      	movs	r3, #16
 8001268:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800126a:	2311      	movs	r3, #17
 800126c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001272:	463a      	mov	r2, r7
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	@ (8001294 <MX_FSMC_Init+0xec>)
 800127c:	f005 fab8 	bl	80067f0 <HAL_SRAM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001286:	f001 f919 	bl	80024bc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800128a:	bf00      	nop
 800128c:	3738      	adds	r7, #56	@ 0x38
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000174 	.word	0x20000174
 8001298:	a0000104 	.word	0xa0000104

0800129c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <HAL_FSMC_MspInit+0x88>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d131      	bne.n	800131c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <HAL_FSMC_MspInit+0x88>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <HAL_FSMC_MspInit+0x8c>)
 80012c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c6:	4a18      	ldr	r2, [pc, #96]	@ (8001328 <HAL_FSMC_MspInit+0x8c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <HAL_FSMC_MspInit+0x8c>)
 80012d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80012da:	f64f 7388 	movw	r3, #65416	@ 0xff88
 80012de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012ec:	230c      	movs	r3, #12
 80012ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	480d      	ldr	r0, [pc, #52]	@ (800132c <HAL_FSMC_MspInit+0x90>)
 80012f6:	f003 f9bf 	bl	8004678 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80012fa:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80012fe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800130c:	230c      	movs	r3, #12
 800130e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4619      	mov	r1, r3
 8001314:	4806      	ldr	r0, [pc, #24]	@ (8001330 <HAL_FSMC_MspInit+0x94>)
 8001316:	f003 f9af 	bl	8004678 <HAL_GPIO_Init>
 800131a:	e000      	b.n	800131e <HAL_FSMC_MspInit+0x82>
    return;
 800131c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200001c4 	.word	0x200001c4
 8001328:	40023800 	.word	0x40023800
 800132c:	40021000 	.word	0x40021000
 8001330:	40020c00 	.word	0x40020c00

08001334 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800133c:	f7ff ffae 	bl	800129c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08e      	sub	sp, #56	@ 0x38
 800134c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
 8001362:	4b7e      	ldr	r3, [pc, #504]	@ (800155c <MX_GPIO_Init+0x214>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a7d      	ldr	r2, [pc, #500]	@ (800155c <MX_GPIO_Init+0x214>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b7b      	ldr	r3, [pc, #492]	@ (800155c <MX_GPIO_Init+0x214>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	623b      	str	r3, [r7, #32]
 8001378:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	4b77      	ldr	r3, [pc, #476]	@ (800155c <MX_GPIO_Init+0x214>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a76      	ldr	r2, [pc, #472]	@ (800155c <MX_GPIO_Init+0x214>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b74      	ldr	r3, [pc, #464]	@ (800155c <MX_GPIO_Init+0x214>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	4b70      	ldr	r3, [pc, #448]	@ (800155c <MX_GPIO_Init+0x214>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a6f      	ldr	r2, [pc, #444]	@ (800155c <MX_GPIO_Init+0x214>)
 80013a0:	f043 0320 	orr.w	r3, r3, #32
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b6d      	ldr	r3, [pc, #436]	@ (800155c <MX_GPIO_Init+0x214>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	4b69      	ldr	r3, [pc, #420]	@ (800155c <MX_GPIO_Init+0x214>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a68      	ldr	r2, [pc, #416]	@ (800155c <MX_GPIO_Init+0x214>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b66      	ldr	r3, [pc, #408]	@ (800155c <MX_GPIO_Init+0x214>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b62      	ldr	r3, [pc, #392]	@ (800155c <MX_GPIO_Init+0x214>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a61      	ldr	r2, [pc, #388]	@ (800155c <MX_GPIO_Init+0x214>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b5f      	ldr	r3, [pc, #380]	@ (800155c <MX_GPIO_Init+0x214>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b5b      	ldr	r3, [pc, #364]	@ (800155c <MX_GPIO_Init+0x214>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a5a      	ldr	r2, [pc, #360]	@ (800155c <MX_GPIO_Init+0x214>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b58      	ldr	r3, [pc, #352]	@ (800155c <MX_GPIO_Init+0x214>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b54      	ldr	r3, [pc, #336]	@ (800155c <MX_GPIO_Init+0x214>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a53      	ldr	r2, [pc, #332]	@ (800155c <MX_GPIO_Init+0x214>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b51      	ldr	r3, [pc, #324]	@ (800155c <MX_GPIO_Init+0x214>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b4d      	ldr	r3, [pc, #308]	@ (800155c <MX_GPIO_Init+0x214>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a4c      	ldr	r2, [pc, #304]	@ (800155c <MX_GPIO_Init+0x214>)
 800142c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b4a      	ldr	r3, [pc, #296]	@ (800155c <MX_GPIO_Init+0x214>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2170      	movs	r1, #112	@ 0x70
 8001442:	4847      	ldr	r0, [pc, #284]	@ (8001560 <MX_GPIO_Init+0x218>)
 8001444:	f003 facc 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 800144e:	4845      	ldr	r0, [pc, #276]	@ (8001564 <MX_GPIO_Init+0x21c>)
 8001450:	f003 fac6 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800145a:	4843      	ldr	r0, [pc, #268]	@ (8001568 <MX_GPIO_Init+0x220>)
 800145c:	f003 fac0 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001466:	4841      	ldr	r0, [pc, #260]	@ (800156c <MX_GPIO_Init+0x224>)
 8001468:	f003 faba 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2108      	movs	r1, #8
 8001470:	483f      	ldr	r0, [pc, #252]	@ (8001570 <MX_GPIO_Init+0x228>)
 8001472:	f003 fab5 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001476:	2370      	movs	r3, #112	@ 0x70
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	4834      	ldr	r0, [pc, #208]	@ (8001560 <MX_GPIO_Init+0x218>)
 800148e:	f003 f8f3 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001492:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	482e      	ldr	r0, [pc, #184]	@ (8001564 <MX_GPIO_Init+0x21c>)
 80014ac:	f003 f8e4 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80014b0:	23c0      	movs	r3, #192	@ 0xc0
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c0:	4619      	mov	r1, r3
 80014c2:	482a      	ldr	r0, [pc, #168]	@ (800156c <MX_GPIO_Init+0x224>)
 80014c4:	f003 f8d8 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80014c8:	2330      	movs	r3, #48	@ 0x30
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d8:	4619      	mov	r1, r3
 80014da:	4822      	ldr	r0, [pc, #136]	@ (8001564 <MX_GPIO_Init+0x21c>)
 80014dc:	f003 f8cc 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80014e0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	481b      	ldr	r0, [pc, #108]	@ (8001568 <MX_GPIO_Init+0x220>)
 80014fa:	f003 f8bd 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 80014fe:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001508:	2301      	movs	r3, #1
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	4814      	ldr	r0, [pc, #80]	@ (8001564 <MX_GPIO_Init+0x21c>)
 8001514:	f003 f8b0 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001518:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152e:	4619      	mov	r1, r3
 8001530:	480e      	ldr	r0, [pc, #56]	@ (800156c <MX_GPIO_Init+0x224>)
 8001532:	f003 f8a1 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001536:	2308      	movs	r3, #8
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4808      	ldr	r0, [pc, #32]	@ (8001570 <MX_GPIO_Init+0x228>)
 800154e:	f003 f893 	bl	8004678 <HAL_GPIO_Init>

}
 8001552:	bf00      	nop
 8001554:	3738      	adds	r7, #56	@ 0x38
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40021000 	.word	0x40021000
 8001564:	40020800 	.word	0x40020800
 8001568:	40021800 	.word	0x40021800
 800156c:	40020000 	.word	0x40020000
 8001570:	40020c00 	.word	0x40020c00

08001574 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <MX_I2C1_Init+0x50>)
 800157a:	4a13      	ldr	r2, [pc, #76]	@ (80015c8 <MX_I2C1_Init+0x54>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <MX_I2C1_Init+0x50>)
 8001580:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <MX_I2C1_Init+0x58>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <MX_I2C1_Init+0x50>)
 8001592:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001596:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001598:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015b2:	f003 fa49 	bl	8004a48 <HAL_I2C_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015bc:	f000 ff7e 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200001c8 	.word	0x200001c8
 80015c8:	40005400 	.word	0x40005400
 80015cc:	000186a0 	.word	0x000186a0

080015d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a19      	ldr	r2, [pc, #100]	@ (8001654 <HAL_I2C_MspInit+0x84>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12b      	bne.n	800164a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_I2C_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <HAL_I2C_MspInit+0x88>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_I2C_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800160e:	23c0      	movs	r3, #192	@ 0xc0
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001612:	2312      	movs	r3, #18
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161e:	2304      	movs	r3, #4
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	480c      	ldr	r0, [pc, #48]	@ (800165c <HAL_I2C_MspInit+0x8c>)
 800162a:	f003 f825 	bl	8004678 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_I2C_MspInit+0x88>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <HAL_I2C_MspInit+0x88>)
 8001638:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800163c:	6413      	str	r3, [r2, #64]	@ 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_I2C_MspInit+0x88>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	@ 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40005400 	.word	0x40005400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400

08001660 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800166a:	4a04      	ldr	r2, [pc, #16]	@ (800167c <LCD_WR_REG+0x1c>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	8013      	strh	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	600ffffe 	.word	0x600ffffe

08001680 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800168a:	4a04      	ldr	r2, [pc, #16]	@ (800169c <LCD_WR_DATA+0x1c>)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	8053      	strh	r3, [r2, #2]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	600ffffe 	.word	0x600ffffe

080016a0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <LCD_RD_DATA+0x20>)
 80016a8:	885b      	ldrh	r3, [r3, #2]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	80fb      	strh	r3, [r7, #6]
	return ram;
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	b29b      	uxth	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	600ffffe 	.word	0x600ffffe

080016c4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	80fb      	strh	r3, [r7, #6]
 80016d6:	4603      	mov	r3, r0
 80016d8:	80bb      	strh	r3, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	807b      	strh	r3, [r7, #2]
 80016de:	4613      	mov	r3, r2
 80016e0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80016e2:	202a      	movs	r0, #42	@ 0x2a
 80016e4:	f7ff ffbc 	bl	8001660 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ffc6 	bl	8001680 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ffc0 	bl	8001680 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001700:	887b      	ldrh	r3, [r7, #2]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	b29b      	uxth	r3, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ffba 	bl	8001680 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	b29b      	uxth	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ffb4 	bl	8001680 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001718:	202b      	movs	r0, #43	@ 0x2b
 800171a:	f7ff ffa1 	bl	8001660 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ffab 	bl	8001680 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800172a:	88bb      	ldrh	r3, [r7, #4]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	b29b      	uxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ffa5 	bl	8001680 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001736:	883b      	ldrh	r3, [r7, #0]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff9f 	bl	8001680 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001742:	883b      	ldrh	r3, [r7, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	b29b      	uxth	r3, r3
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff99 	bl	8001680 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800174e:	202c      	movs	r0, #44	@ 0x2c
 8001750:	f7ff ff86 	bl	8001660 <LCD_WR_REG>
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bd90      	pop	{r4, r7, pc}

0800175c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001766:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <lcd_Clear+0x60>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <lcd_Clear+0x60>)
 8001770:	885b      	ldrh	r3, [r3, #2]
 8001772:	3b01      	subs	r3, #1
 8001774:	b29b      	uxth	r3, r3
 8001776:	2100      	movs	r1, #0
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff ffa3 	bl	80016c4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800177e:	2300      	movs	r3, #0
 8001780:	81fb      	strh	r3, [r7, #14]
 8001782:	e011      	b.n	80017a8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001784:	2300      	movs	r3, #0
 8001786:	81bb      	strh	r3, [r7, #12]
 8001788:	e006      	b.n	8001798 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff77 	bl	8001680 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001792:	89bb      	ldrh	r3, [r7, #12]
 8001794:	3301      	adds	r3, #1
 8001796:	81bb      	strh	r3, [r7, #12]
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <lcd_Clear+0x60>)
 800179a:	885b      	ldrh	r3, [r3, #2]
 800179c:	89ba      	ldrh	r2, [r7, #12]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3f3      	bcc.n	800178a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80017a2:	89fb      	ldrh	r3, [r7, #14]
 80017a4:	3301      	adds	r3, #1
 80017a6:	81fb      	strh	r3, [r7, #14]
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <lcd_Clear+0x60>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	89fa      	ldrh	r2, [r7, #14]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d3e8      	bcc.n	8001784 <lcd_Clear+0x28>
		}
	}
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000021c 	.word	0x2000021c

080017c0 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4604      	mov	r4, r0
 80017c8:	4608      	mov	r0, r1
 80017ca:	4611      	mov	r1, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	4623      	mov	r3, r4
 80017d0:	80fb      	strh	r3, [r7, #6]
 80017d2:	4603      	mov	r3, r0
 80017d4:	80bb      	strh	r3, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	807b      	strh	r3, [r7, #2]
 80017da:	4613      	mov	r3, r2
 80017dc:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	883b      	ldrh	r3, [r7, #0]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	88b9      	ldrh	r1, [r7, #4]
 80017ec:	88f8      	ldrh	r0, [r7, #6]
 80017ee:	f7ff ff69 	bl	80016c4 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	81fb      	strh	r3, [r7, #14]
 80017f6:	e010      	b.n	800181a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	81bb      	strh	r3, [r7, #12]
 80017fc:	e006      	b.n	800180c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80017fe:	8c3b      	ldrh	r3, [r7, #32]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff3d 	bl	8001680 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001806:	89bb      	ldrh	r3, [r7, #12]
 8001808:	3301      	adds	r3, #1
 800180a:	81bb      	strh	r3, [r7, #12]
 800180c:	89ba      	ldrh	r2, [r7, #12]
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	429a      	cmp	r2, r3
 8001812:	d3f4      	bcc.n	80017fe <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001814:	89fb      	ldrh	r3, [r7, #14]
 8001816:	3301      	adds	r3, #1
 8001818:	81fb      	strh	r3, [r7, #14]
 800181a:	89fa      	ldrh	r2, [r7, #14]
 800181c:	883b      	ldrh	r3, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d3ea      	bcc.n	80017f8 <lcd_Fill+0x38>
		}
	}
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}

0800182c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
 8001836:	460b      	mov	r3, r1
 8001838:	80bb      	strh	r3, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800183e:	88bb      	ldrh	r3, [r7, #4]
 8001840:	88fa      	ldrh	r2, [r7, #6]
 8001842:	88b9      	ldrh	r1, [r7, #4]
 8001844:	88f8      	ldrh	r0, [r7, #6]
 8001846:	f7ff ff3d 	bl	80016c4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff17 	bl	8001680 <LCD_WR_DATA>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 800185a:	b590      	push	{r4, r7, lr}
 800185c:	b08d      	sub	sp, #52	@ 0x34
 800185e:	af00      	add	r7, sp, #0
 8001860:	4604      	mov	r4, r0
 8001862:	4608      	mov	r0, r1
 8001864:	4611      	mov	r1, r2
 8001866:	461a      	mov	r2, r3
 8001868:	4623      	mov	r3, r4
 800186a:	80fb      	strh	r3, [r7, #6]
 800186c:	4603      	mov	r3, r0
 800186e:	80bb      	strh	r3, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
 8001874:	4613      	mov	r3, r2
 8001876:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001880:	887a      	ldrh	r2, [r7, #2]
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001888:	883a      	ldrh	r2, [r7, #0]
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001894:	88bb      	ldrh	r3, [r7, #4]
 8001896:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dd02      	ble.n	80018a4 <lcd_DrawLine+0x4a>
 800189e:	2301      	movs	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e00b      	b.n	80018bc <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <lcd_DrawLine+0x56>
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	e005      	b.n	80018bc <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	425b      	negs	r3, r3
 80018ba:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	dd02      	ble.n	80018c8 <lcd_DrawLine+0x6e>
 80018c2:	2301      	movs	r3, #1
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	e00b      	b.n	80018e0 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <lcd_DrawLine+0x7a>
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	e005      	b.n	80018e0 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	425b      	negs	r3, r3
 80018de:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 80018e0:	6a3a      	ldr	r2, [r7, #32]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dd02      	ble.n	80018ee <lcd_DrawLine+0x94>
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	e001      	b.n	80018f2 <lcd_DrawLine+0x98>
	else distance=delta_y;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80018f6:	e02b      	b.n	8001950 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	b291      	uxth	r1, r2
 8001900:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff91 	bl	800182c <lcd_DrawPoint>
		xerr+=delta_x;
 800190a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	4413      	add	r3, r2
 8001910:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 8001912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 800191a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	429a      	cmp	r2, r3
 8001920:	dd07      	ble.n	8001932 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001922:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	429a      	cmp	r2, r3
 8001938:	dd07      	ble.n	800194a <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 800193a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4413      	add	r3, r2
 8001948:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 800194a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800194c:	3301      	adds	r3, #1
 800194e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001950:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	429a      	cmp	r2, r3
 8001956:	dacf      	bge.n	80018f8 <lcd_DrawLine+0x9e>
		}
	}
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3734      	adds	r7, #52	@ 0x34
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}
	...

08001964 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	4604      	mov	r4, r0
 800196c:	4608      	mov	r0, r1
 800196e:	4611      	mov	r1, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4623      	mov	r3, r4
 8001974:	80fb      	strh	r3, [r7, #6]
 8001976:	4603      	mov	r3, r0
 8001978:	80bb      	strh	r3, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	70fb      	strb	r3, [r7, #3]
 800197e:	4613      	mov	r3, r2
 8001980:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001982:	2300      	movs	r3, #0
 8001984:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800198a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf14      	ite	ne
 80019a6:	2301      	movne	r3, #1
 80019a8:	2300      	moveq	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	fb12 f303 	smulbb	r3, r2, r3
 80019ba:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	3b20      	subs	r3, #32
 80019c0:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	4413      	add	r3, r2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29c      	uxth	r4, r3
 80019d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	88bb      	ldrh	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29b      	uxth	r3, r3
 80019e0:	88b9      	ldrh	r1, [r7, #4]
 80019e2:	88f8      	ldrh	r0, [r7, #6]
 80019e4:	4622      	mov	r2, r4
 80019e6:	f7ff fe6d 	bl	80016c4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	827b      	strh	r3, [r7, #18]
 80019ee:	e07a      	b.n	8001ae6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80019f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	d028      	beq.n	8001a4a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80019f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d108      	bne.n	8001a12 <lcd_ShowChar+0xae>
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	8a7b      	ldrh	r3, [r7, #18]
 8001a04:	493c      	ldr	r1, [pc, #240]	@ (8001af8 <lcd_ShowChar+0x194>)
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	440a      	add	r2, r1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	75fb      	strb	r3, [r7, #23]
 8001a10:	e01b      	b.n	8001a4a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001a12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a16:	2b18      	cmp	r3, #24
 8001a18:	d10b      	bne.n	8001a32 <lcd_ShowChar+0xce>
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	8a79      	ldrh	r1, [r7, #18]
 8001a1e:	4837      	ldr	r0, [pc, #220]	@ (8001afc <lcd_ShowChar+0x198>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4403      	add	r3, r0
 8001a2a:	440b      	add	r3, r1
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	75fb      	strb	r3, [r7, #23]
 8001a30:	e00b      	b.n	8001a4a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001a32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	d15a      	bne.n	8001af0 <lcd_ShowChar+0x18c>
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	8a7b      	ldrh	r3, [r7, #18]
 8001a3e:	4930      	ldr	r1, [pc, #192]	@ (8001b00 <lcd_ShowChar+0x19c>)
 8001a40:	0192      	lsls	r2, r2, #6
 8001a42:	440a      	add	r2, r1
 8001a44:	4413      	add	r3, r2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75bb      	strb	r3, [r7, #22]
 8001a4e:	e044      	b.n	8001ada <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001a50:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d120      	bne.n	8001a9a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001a58:	7dfa      	ldrb	r2, [r7, #23]
 8001a5a:	7dbb      	ldrb	r3, [r7, #22]
 8001a5c:	fa42 f303 	asr.w	r3, r2, r3
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <lcd_ShowChar+0x10e>
 8001a68:	883b      	ldrh	r3, [r7, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fe08 	bl	8001680 <LCD_WR_DATA>
 8001a70:	e003      	b.n	8001a7a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001a72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fe03 	bl	8001680 <LCD_WR_DATA>
				m++;
 8001a7a:	7d7b      	ldrb	r3, [r7, #21]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001a80:	7d7b      	ldrb	r3, [r7, #21]
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a88:	fb01 f202 	mul.w	r2, r1, r2
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d11f      	bne.n	8001ad4 <lcd_ShowChar+0x170>
				{
					m=0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	757b      	strb	r3, [r7, #21]
					break;
 8001a98:	e022      	b.n	8001ae0 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001a9a:	7dfa      	ldrb	r2, [r7, #23]
 8001a9c:	7dbb      	ldrb	r3, [r7, #22]
 8001a9e:	fa42 f303 	asr.w	r3, r2, r3
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <lcd_ShowChar+0x152>
 8001aaa:	883a      	ldrh	r2, [r7, #0]
 8001aac:	88b9      	ldrh	r1, [r7, #4]
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff febb 	bl	800182c <lcd_DrawPoint>
				x++;
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001abc:	88fa      	ldrh	r2, [r7, #6]
 8001abe:	8a3b      	ldrh	r3, [r7, #16]
 8001ac0:	1ad2      	subs	r2, r2, r3
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d105      	bne.n	8001ad4 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001ac8:	8a3b      	ldrh	r3, [r7, #16]
 8001aca:	80fb      	strh	r3, [r7, #6]
					y++;
 8001acc:	88bb      	ldrh	r3, [r7, #4]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	80bb      	strh	r3, [r7, #4]
					break;
 8001ad2:	e005      	b.n	8001ae0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001ad4:	7dbb      	ldrb	r3, [r7, #22]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	75bb      	strb	r3, [r7, #22]
 8001ada:	7dbb      	ldrb	r3, [r7, #22]
 8001adc:	2b07      	cmp	r3, #7
 8001ade:	d9b7      	bls.n	8001a50 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001ae0:	8a7b      	ldrh	r3, [r7, #18]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	827b      	strh	r3, [r7, #18]
 8001ae6:	8a7a      	ldrh	r2, [r7, #18]
 8001ae8:	89bb      	ldrh	r3, [r7, #12]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d380      	bcc.n	80019f0 <lcd_ShowChar+0x8c>
 8001aee:	e000      	b.n	8001af2 <lcd_ShowChar+0x18e>
		else return;
 8001af0:	bf00      	nop
				}
			}
		}
	}
}
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}
 8001af8:	08007cf4 	.word	0x08007cf4
 8001afc:	080082e4 	.word	0x080082e4
 8001b00:	080094b4 	.word	0x080094b4

08001b04 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <lcd_SetDir+0x44>)
 8001b20:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b24:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001b26:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <lcd_SetDir+0x44>)
 8001b28:	22f0      	movs	r2, #240	@ 0xf0
 8001b2a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001b2c:	e006      	b.n	8001b3c <lcd_SetDir+0x38>
		lcddev.width=240;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <lcd_SetDir+0x44>)
 8001b30:	22f0      	movs	r2, #240	@ 0xf0
 8001b32:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <lcd_SetDir+0x44>)
 8001b36:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b3a:	805a      	strh	r2, [r3, #2]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	2000021c 	.word	0x2000021c

08001b4c <lcd_init>:


void lcd_init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b56:	48aa      	ldr	r0, [pc, #680]	@ (8001e00 <lcd_init+0x2b4>)
 8001b58:	f002 ff42 	bl	80049e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001b5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b60:	f001 ff08 	bl	8003974 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b6a:	48a5      	ldr	r0, [pc, #660]	@ (8001e00 <lcd_init+0x2b4>)
 8001b6c:	f002 ff38 	bl	80049e0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001b70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b74:	f001 fefe 	bl	8003974 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff ffc3 	bl	8001b04 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001b7e:	20d3      	movs	r0, #211	@ 0xd3
 8001b80:	f7ff fd6e 	bl	8001660 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001b84:	f7ff fd8c 	bl	80016a0 <LCD_RD_DATA>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b9d      	ldr	r3, [pc, #628]	@ (8001e04 <lcd_init+0x2b8>)
 8001b8e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001b90:	f7ff fd86 	bl	80016a0 <LCD_RD_DATA>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b9a      	ldr	r3, [pc, #616]	@ (8001e04 <lcd_init+0x2b8>)
 8001b9a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001b9c:	f7ff fd80 	bl	80016a0 <LCD_RD_DATA>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b97      	ldr	r3, [pc, #604]	@ (8001e04 <lcd_init+0x2b8>)
 8001ba6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001ba8:	4b96      	ldr	r3, [pc, #600]	@ (8001e04 <lcd_init+0x2b8>)
 8001baa:	889b      	ldrh	r3, [r3, #4]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b94      	ldr	r3, [pc, #592]	@ (8001e04 <lcd_init+0x2b8>)
 8001bb2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001bb4:	f7ff fd74 	bl	80016a0 <LCD_RD_DATA>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b91      	ldr	r3, [pc, #580]	@ (8001e04 <lcd_init+0x2b8>)
 8001bbe:	889b      	ldrh	r3, [r3, #4]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b8f      	ldr	r3, [pc, #572]	@ (8001e04 <lcd_init+0x2b8>)
 8001bc6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001bc8:	20cf      	movs	r0, #207	@ 0xcf
 8001bca:	f7ff fd49 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff fd56 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001bd4:	20c1      	movs	r0, #193	@ 0xc1
 8001bd6:	f7ff fd53 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001bda:	2030      	movs	r0, #48	@ 0x30
 8001bdc:	f7ff fd50 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001be0:	20ed      	movs	r0, #237	@ 0xed
 8001be2:	f7ff fd3d 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001be6:	2064      	movs	r0, #100	@ 0x64
 8001be8:	f7ff fd4a 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f7ff fd47 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001bf2:	2012      	movs	r0, #18
 8001bf4:	f7ff fd44 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001bf8:	2081      	movs	r0, #129	@ 0x81
 8001bfa:	f7ff fd41 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001bfe:	20e8      	movs	r0, #232	@ 0xe8
 8001c00:	f7ff fd2e 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001c04:	2085      	movs	r0, #133	@ 0x85
 8001c06:	f7ff fd3b 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001c0a:	2010      	movs	r0, #16
 8001c0c:	f7ff fd38 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001c10:	207a      	movs	r0, #122	@ 0x7a
 8001c12:	f7ff fd35 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001c16:	20cb      	movs	r0, #203	@ 0xcb
 8001c18:	f7ff fd22 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001c1c:	2039      	movs	r0, #57	@ 0x39
 8001c1e:	f7ff fd2f 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001c22:	202c      	movs	r0, #44	@ 0x2c
 8001c24:	f7ff fd2c 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7ff fd29 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001c2e:	2034      	movs	r0, #52	@ 0x34
 8001c30:	f7ff fd26 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001c34:	2002      	movs	r0, #2
 8001c36:	f7ff fd23 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001c3a:	20f7      	movs	r0, #247	@ 0xf7
 8001c3c:	f7ff fd10 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001c40:	2020      	movs	r0, #32
 8001c42:	f7ff fd1d 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001c46:	20ea      	movs	r0, #234	@ 0xea
 8001c48:	f7ff fd0a 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f7ff fd17 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fd14 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001c58:	20c0      	movs	r0, #192	@ 0xc0
 8001c5a:	f7ff fd01 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001c5e:	201b      	movs	r0, #27
 8001c60:	f7ff fd0e 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001c64:	20c1      	movs	r0, #193	@ 0xc1
 8001c66:	f7ff fcfb 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f7ff fd08 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001c70:	20c5      	movs	r0, #197	@ 0xc5
 8001c72:	f7ff fcf5 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001c76:	2030      	movs	r0, #48	@ 0x30
 8001c78:	f7ff fd02 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001c7c:	2030      	movs	r0, #48	@ 0x30
 8001c7e:	f7ff fcff 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001c82:	20c7      	movs	r0, #199	@ 0xc7
 8001c84:	f7ff fcec 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001c88:	20b7      	movs	r0, #183	@ 0xb7
 8001c8a:	f7ff fcf9 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001c8e:	2036      	movs	r0, #54	@ 0x36
 8001c90:	f7ff fce6 	bl	8001660 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001c94:	2008      	movs	r0, #8
 8001c96:	f7ff fcf3 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001c9a:	203a      	movs	r0, #58	@ 0x3a
 8001c9c:	f7ff fce0 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001ca0:	2055      	movs	r0, #85	@ 0x55
 8001ca2:	f7ff fced 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001ca6:	20b1      	movs	r0, #177	@ 0xb1
 8001ca8:	f7ff fcda 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff fce7 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001cb2:	201a      	movs	r0, #26
 8001cb4:	f7ff fce4 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001cb8:	20b6      	movs	r0, #182	@ 0xb6
 8001cba:	f7ff fcd1 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001cbe:	200a      	movs	r0, #10
 8001cc0:	f7ff fcde 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001cc4:	20a2      	movs	r0, #162	@ 0xa2
 8001cc6:	f7ff fcdb 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001cca:	20f2      	movs	r0, #242	@ 0xf2
 8001ccc:	f7ff fcc8 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f7ff fcd5 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001cd6:	2026      	movs	r0, #38	@ 0x26
 8001cd8:	f7ff fcc2 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff fccf 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001ce2:	20e0      	movs	r0, #224	@ 0xe0
 8001ce4:	f7ff fcbc 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001ce8:	200f      	movs	r0, #15
 8001cea:	f7ff fcc9 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001cee:	202a      	movs	r0, #42	@ 0x2a
 8001cf0:	f7ff fcc6 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001cf4:	2028      	movs	r0, #40	@ 0x28
 8001cf6:	f7ff fcc3 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001cfa:	2008      	movs	r0, #8
 8001cfc:	f7ff fcc0 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001d00:	200e      	movs	r0, #14
 8001d02:	f7ff fcbd 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001d06:	2008      	movs	r0, #8
 8001d08:	f7ff fcba 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001d0c:	2054      	movs	r0, #84	@ 0x54
 8001d0e:	f7ff fcb7 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001d12:	20a9      	movs	r0, #169	@ 0xa9
 8001d14:	f7ff fcb4 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001d18:	2043      	movs	r0, #67	@ 0x43
 8001d1a:	f7ff fcb1 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001d1e:	200a      	movs	r0, #10
 8001d20:	f7ff fcae 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001d24:	200f      	movs	r0, #15
 8001d26:	f7ff fcab 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff fca8 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff fca5 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fca2 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff fc9f 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001d42:	20e1      	movs	r0, #225	@ 0xe1
 8001d44:	f7ff fc8c 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff fc99 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001d4e:	2015      	movs	r0, #21
 8001d50:	f7ff fc96 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001d54:	2017      	movs	r0, #23
 8001d56:	f7ff fc93 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001d5a:	2007      	movs	r0, #7
 8001d5c:	f7ff fc90 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001d60:	2011      	movs	r0, #17
 8001d62:	f7ff fc8d 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001d66:	2006      	movs	r0, #6
 8001d68:	f7ff fc8a 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001d6c:	202b      	movs	r0, #43	@ 0x2b
 8001d6e:	f7ff fc87 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001d72:	2056      	movs	r0, #86	@ 0x56
 8001d74:	f7ff fc84 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001d78:	203c      	movs	r0, #60	@ 0x3c
 8001d7a:	f7ff fc81 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001d7e:	2005      	movs	r0, #5
 8001d80:	f7ff fc7e 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d84:	2010      	movs	r0, #16
 8001d86:	f7ff fc7b 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	f7ff fc78 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001d90:	203f      	movs	r0, #63	@ 0x3f
 8001d92:	f7ff fc75 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001d96:	203f      	movs	r0, #63	@ 0x3f
 8001d98:	f7ff fc72 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001d9c:	200f      	movs	r0, #15
 8001d9e:	f7ff fc6f 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001da2:	202b      	movs	r0, #43	@ 0x2b
 8001da4:	f7ff fc5c 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff fc69 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff fc66 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001db4:	2001      	movs	r0, #1
 8001db6:	f7ff fc63 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001dba:	203f      	movs	r0, #63	@ 0x3f
 8001dbc:	f7ff fc60 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001dc0:	202a      	movs	r0, #42	@ 0x2a
 8001dc2:	f7ff fc4d 	bl	8001660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fc5a 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff fc57 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fc54 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001dd8:	20ef      	movs	r0, #239	@ 0xef
 8001dda:	f7ff fc51 	bl	8001680 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001dde:	2011      	movs	r0, #17
 8001de0:	f7ff fc3e 	bl	8001660 <LCD_WR_REG>
	HAL_Delay(120);
 8001de4:	2078      	movs	r0, #120	@ 0x78
 8001de6:	f001 fdc5 	bl	8003974 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001dea:	2029      	movs	r0, #41	@ 0x29
 8001dec:	f7ff fc38 	bl	8001660 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001df0:	2201      	movs	r2, #1
 8001df2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001df6:	4804      	ldr	r0, [pc, #16]	@ (8001e08 <lcd_init+0x2bc>)
 8001df8:	f002 fdf2 	bl	80049e0 <HAL_GPIO_WritePin>
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40020800 	.word	0x40020800
 8001e04:	2000021c 	.word	0x2000021c
 8001e08:	40020000 	.word	0x40020000

08001e0c <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	b298      	uxth	r0, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	8b3a      	ldrh	r2, [r7, #24]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7ff fcf9 	bl	800182c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	b298      	uxth	r0, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	8b3a      	ldrh	r2, [r7, #24]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7ff fce9 	bl	800182c <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	b298      	uxth	r0, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	8b3a      	ldrh	r2, [r7, #24]
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7ff fcd9 	bl	800182c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	b298      	uxth	r0, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	8b3a      	ldrh	r2, [r7, #24]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7ff fcc9 	bl	800182c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b298      	uxth	r0, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	8b3a      	ldrh	r2, [r7, #24]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f7ff fcb9 	bl	800182c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	b298      	uxth	r0, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	8b3a      	ldrh	r2, [r7, #24]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7ff fca9 	bl	800182c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b298      	uxth	r0, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	8b3a      	ldrh	r2, [r7, #24]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7ff fc99 	bl	800182c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	b298      	uxth	r0, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	8b3a      	ldrh	r2, [r7, #24]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7ff fc89 	bl	800182c <lcd_DrawPoint>
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b08a      	sub	sp, #40	@ 0x28
 8001f26:	af02      	add	r7, sp, #8
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	f1c3 0303 	rsb	r3, r3, #3
 8001f42:	613b      	str	r3, [r7, #16]


	if (fill)
 8001f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d04f      	beq.n	8001fea <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001f4a:	e029      	b.n	8001fa0 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e00a      	b.n	8001f68 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff ff55 	bl	8001e0c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	ddf0      	ble.n	8001f52 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	da06      	bge.n	8001f84 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	009a      	lsls	r2, r3, #2
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3306      	adds	r3, #6
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e00a      	b.n	8001f9a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	009a      	lsls	r2, r3, #2
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	330a      	adds	r3, #10
 8001f92:	613b      	str	r3, [r7, #16]
				y--;
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	ddd1      	ble.n	8001f4c <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001fa8:	e023      	b.n	8001ff2 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff ff29 	bl	8001e0c <_draw_circle_8>
			if (d < 0) {
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	da06      	bge.n	8001fce <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	009a      	lsls	r2, r3, #2
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3306      	adds	r3, #6
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e00a      	b.n	8001fe4 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	009a      	lsls	r2, r3, #2
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4413      	add	r3, r2
 8001fda:	330a      	adds	r3, #10
 8001fdc:	613b      	str	r3, [r7, #16]
				y--;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	61bb      	str	r3, [r7, #24]
			x++;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dddb      	ble.n	8001faa <lcd_DrawCircle+0x88>
}
 8001ff2:	bf00      	nop
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b08b      	sub	sp, #44	@ 0x2c
 8002000:	af04      	add	r7, sp, #16
 8002002:	60ba      	str	r2, [r7, #8]
 8002004:	461a      	mov	r2, r3
 8002006:	4603      	mov	r3, r0
 8002008:	81fb      	strh	r3, [r7, #14]
 800200a:	460b      	mov	r3, r1
 800200c:	81bb      	strh	r3, [r7, #12]
 800200e:	4613      	mov	r3, r2
 8002010:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002012:	89fb      	ldrh	r3, [r7, #14]
 8002014:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8002016:	2300      	movs	r3, #0
 8002018:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800201a:	e048      	b.n	80020ae <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d145      	bne.n	80020ae <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002022:	89fa      	ldrh	r2, [r7, #14]
 8002024:	4b26      	ldr	r3, [pc, #152]	@ (80020c0 <lcd_ShowStr+0xc4>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800202e:	085b      	lsrs	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	1acb      	subs	r3, r1, r3
 8002034:	429a      	cmp	r2, r3
 8002036:	dc3f      	bgt.n	80020b8 <lcd_ShowStr+0xbc>
 8002038:	89ba      	ldrh	r2, [r7, #12]
 800203a:	4b21      	ldr	r3, [pc, #132]	@ (80020c0 <lcd_ShowStr+0xc4>)
 800203c:	885b      	ldrh	r3, [r3, #2]
 800203e:	4619      	mov	r1, r3
 8002040:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002044:	1acb      	subs	r3, r1, r3
 8002046:	429a      	cmp	r2, r3
 8002048:	dc36      	bgt.n	80020b8 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b80      	cmp	r3, #128	@ 0x80
 8002050:	d902      	bls.n	8002058 <lcd_ShowStr+0x5c>
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
 8002056:	e02a      	b.n	80020ae <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b0d      	cmp	r3, #13
 800205e:	d10b      	bne.n	8002078 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002060:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002064:	b29a      	uxth	r2, r3
 8002066:	89bb      	ldrh	r3, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800206c:	8abb      	ldrh	r3, [r7, #20]
 800206e:	81fb      	strh	r3, [r7, #14]
					str++;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	3301      	adds	r3, #1
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	e017      	b.n	80020a8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	88fc      	ldrh	r4, [r7, #6]
 800207e:	89b9      	ldrh	r1, [r7, #12]
 8002080:	89f8      	ldrh	r0, [r7, #14]
 8002082:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002086:	9302      	str	r3, [sp, #8]
 8002088:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	4623      	mov	r3, r4
 8002094:	f7ff fc66 	bl	8001964 <lcd_ShowChar>
					x+=sizey/2;
 8002098:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800209c:	085b      	lsrs	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	89fb      	ldrh	r3, [r7, #14]
 80020a4:	4413      	add	r3, r2
 80020a6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1b2      	bne.n	800201c <lcd_ShowStr+0x20>
 80020b6:	e000      	b.n	80020ba <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80020b8:	bf00      	nop
			}
		}
	}
}
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd90      	pop	{r4, r7, pc}
 80020c0:	2000021c 	.word	0x2000021c

080020c4 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80020c8:	4b3f      	ldr	r3, [pc, #252]	@ (80021c8 <led7_Scan+0x104>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b3d      	ldr	r3, [pc, #244]	@ (80021c8 <led7_Scan+0x104>)
 80020d2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80020d4:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <led7_Scan+0x108>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3d      	ldr	r2, [pc, #244]	@ (80021d0 <led7_Scan+0x10c>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	b21a      	sxth	r2, r3
 80020e0:	4b39      	ldr	r3, [pc, #228]	@ (80021c8 <led7_Scan+0x104>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	4b36      	ldr	r3, [pc, #216]	@ (80021c8 <led7_Scan+0x104>)
 80020ee:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80020f0:	4b36      	ldr	r3, [pc, #216]	@ (80021cc <led7_Scan+0x108>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d847      	bhi.n	8002188 <led7_Scan+0xc4>
 80020f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002100 <led7_Scan+0x3c>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002111 	.word	0x08002111
 8002104:	0800212f 	.word	0x0800212f
 8002108:	0800214d 	.word	0x0800214d
 800210c:	0800216b 	.word	0x0800216b
	case 0:
		spi_buffer |= 0x00b0;
 8002110:	4b2d      	ldr	r3, [pc, #180]	@ (80021c8 <led7_Scan+0x104>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002118:	b29a      	uxth	r2, r3
 800211a:	4b2b      	ldr	r3, [pc, #172]	@ (80021c8 <led7_Scan+0x104>)
 800211c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800211e:	4b2a      	ldr	r3, [pc, #168]	@ (80021c8 <led7_Scan+0x104>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b27      	ldr	r3, [pc, #156]	@ (80021c8 <led7_Scan+0x104>)
 800212a:	801a      	strh	r2, [r3, #0]
		break;
 800212c:	e02d      	b.n	800218a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800212e:	4b26      	ldr	r3, [pc, #152]	@ (80021c8 <led7_Scan+0x104>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8002136:	b29a      	uxth	r2, r3
 8002138:	4b23      	ldr	r3, [pc, #140]	@ (80021c8 <led7_Scan+0x104>)
 800213a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800213c:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <led7_Scan+0x104>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	f023 0320 	bic.w	r3, r3, #32
 8002144:	b29a      	uxth	r2, r3
 8002146:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <led7_Scan+0x104>)
 8002148:	801a      	strh	r2, [r3, #0]
		break;
 800214a:	e01e      	b.n	800218a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800214c:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <led7_Scan+0x104>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8002154:	b29a      	uxth	r2, r3
 8002156:	4b1c      	ldr	r3, [pc, #112]	@ (80021c8 <led7_Scan+0x104>)
 8002158:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800215a:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <led7_Scan+0x104>)
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	f023 0310 	bic.w	r3, r3, #16
 8002162:	b29a      	uxth	r2, r3
 8002164:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <led7_Scan+0x104>)
 8002166:	801a      	strh	r2, [r3, #0]
		break;
 8002168:	e00f      	b.n	800218a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800216a:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <led7_Scan+0x104>)
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <led7_Scan+0x104>)
 8002176:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <led7_Scan+0x104>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <led7_Scan+0x104>)
 8002184:	801a      	strh	r2, [r3, #0]
		break;
 8002186:	e000      	b.n	800218a <led7_Scan+0xc6>
	default:
		break;
 8002188:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800218a:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <led7_Scan+0x108>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	425a      	negs	r2, r3
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	f002 0203 	and.w	r2, r2, #3
 800219a:	bf58      	it	pl
 800219c:	4253      	negpl	r3, r2
 800219e:	4a0b      	ldr	r2, [pc, #44]	@ (80021cc <led7_Scan+0x108>)
 80021a0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2140      	movs	r1, #64	@ 0x40
 80021a6:	480b      	ldr	r0, [pc, #44]	@ (80021d4 <led7_Scan+0x110>)
 80021a8:	f002 fc1a 	bl	80049e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80021ac:	2301      	movs	r3, #1
 80021ae:	2202      	movs	r2, #2
 80021b0:	4905      	ldr	r1, [pc, #20]	@ (80021c8 <led7_Scan+0x104>)
 80021b2:	4809      	ldr	r0, [pc, #36]	@ (80021d8 <led7_Scan+0x114>)
 80021b4:	f004 f915 	bl	80063e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80021b8:	2201      	movs	r2, #1
 80021ba:	2140      	movs	r1, #64	@ 0x40
 80021bc:	4805      	ldr	r0, [pc, #20]	@ (80021d4 <led7_Scan+0x110>)
 80021be:	f002 fc0f 	bl	80049e0 <HAL_GPIO_WritePin>
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000004 	.word	0x20000004
 80021cc:	20000224 	.word	0x20000224
 80021d0:	20000000 	.word	0x20000000
 80021d4:	40021800 	.word	0x40021800
 80021d8:	20000234 	.word	0x20000234

080021dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021dc:	b598      	push	{r3, r4, r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e0:	f001 fb56 	bl	8003890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e4:	f000 f842 	bl	800226c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021e8:	f7ff f8ae 	bl	8001348 <MX_GPIO_Init>
  MX_TIM2_Init();
 80021ec:	f000 fb26 	bl	800283c <MX_TIM2_Init>
  MX_SPI1_Init();
 80021f0:	f000 f9d8 	bl	80025a4 <MX_SPI1_Init>
  MX_FSMC_Init();
 80021f4:	f7fe ffd8 	bl	80011a8 <MX_FSMC_Init>
  MX_I2C1_Init();
 80021f8:	f7ff f9bc 	bl	8001574 <MX_I2C1_Init>
  MX_TIM13_Init();
 80021fc:	f000 fb6a 	bl	80028d4 <MX_TIM13_Init>
  MX_DMA_Init();
 8002200:	f7fe ffb2 	bl	8001168 <MX_DMA_Init>
  MX_ADC1_Init();
 8002204:	f7fe fde4 	bl	8000dd0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002208:	f000 fac8 	bl	800279c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800220c:	f000 f898 	bl	8002340 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 touch_Adjust();
 8002210:	f000 fefe 	bl	8003010 <touch_Adjust>
 lcd_Clear(BLACK);
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff faa1 	bl	800175c <lcd_Clear>
 while (1)
  {
	  //scan touch screen
	  touch_Scan();
 800221a:	f001 fadb 	bl	80037d4 <touch_Scan>
	  //check if touch screen is touched
	  if(touch_IsTouched() && draw_Status == DRAW){
 800221e:	f001 fae3 	bl	80037e8 <touch_IsTouched>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <main+0x6e>
 8002228:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <main+0x88>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d10c      	bne.n	800224a <main+0x6e>
            //draw a point at the touch position
		  lcd_DrawPoint(touch_GetX(), touch_GetY(), RED);
 8002230:	f001 faec 	bl	800380c <touch_GetX>
 8002234:	4603      	mov	r3, r0
 8002236:	461c      	mov	r4, r3
 8002238:	f001 faf4 	bl	8003824 <touch_GetY>
 800223c:	4603      	mov	r3, r0
 800223e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002242:	4619      	mov	r1, r3
 8002244:	4620      	mov	r0, r4
 8002246:	f7ff faf1 	bl	800182c <lcd_DrawPoint>
	  }
	  // 50ms task
	  if(flag_timer2 == 1){
 800224a:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <main+0x8c>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d1e3      	bne.n	800221a <main+0x3e>
		  flag_timer2 = 0;
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <main+0x8c>)
 8002254:	2200      	movs	r2, #0
 8002256:	801a      	strh	r2, [r3, #0]
		  touchProcess();
 8002258:	f000 f8ca 	bl	80023f0 <touchProcess>
		  test_LedDebug();
 800225c:	f000 f880 	bl	8002360 <test_LedDebug>
	  touch_Scan();
 8002260:	e7db      	b.n	800221a <main+0x3e>
 8002262:	bf00      	nop
 8002264:	20000228 	.word	0x20000228
 8002268:	2000022e 	.word	0x2000022e

0800226c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b094      	sub	sp, #80	@ 0x50
 8002270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	2230      	movs	r2, #48	@ 0x30
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f005 fb82 	bl	8007984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <SystemClock_Config+0xcc>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	4a27      	ldr	r2, [pc, #156]	@ (8002338 <SystemClock_Config+0xcc>)
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229e:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a0:	4b25      	ldr	r3, [pc, #148]	@ (8002338 <SystemClock_Config+0xcc>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ac:	2300      	movs	r3, #0
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	4b22      	ldr	r3, [pc, #136]	@ (800233c <SystemClock_Config+0xd0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a21      	ldr	r2, [pc, #132]	@ (800233c <SystemClock_Config+0xd0>)
 80022b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b1f      	ldr	r3, [pc, #124]	@ (800233c <SystemClock_Config+0xd0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c8:	2302      	movs	r3, #2
 80022ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022cc:	2301      	movs	r3, #1
 80022ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d0:	2310      	movs	r3, #16
 80022d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022d4:	2302      	movs	r3, #2
 80022d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022d8:	2300      	movs	r3, #0
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022dc:	2308      	movs	r3, #8
 80022de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022e0:	23a8      	movs	r3, #168	@ 0xa8
 80022e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022e4:	2302      	movs	r3, #2
 80022e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022e8:	2304      	movs	r3, #4
 80022ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ec:	f107 0320 	add.w	r3, r7, #32
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 fb69 	bl	80059c8 <HAL_RCC_OscConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022fc:	f000 f8de 	bl	80024bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002300:	230f      	movs	r3, #15
 8002302:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002304:	2302      	movs	r3, #2
 8002306:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800230c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002310:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002312:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002316:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	2105      	movs	r1, #5
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fdca 	bl	8005eb8 <HAL_RCC_ClockConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800232a:	f000 f8c7 	bl	80024bc <Error_Handler>
  }
}
 800232e:	bf00      	nop
 8002330:	3750      	adds	r7, #80	@ 0x50
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40007000 	.word	0x40007000

08002340 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	  timer_init();
 8002344:	f000 f8c0 	bl	80024c8 <timer_init>
	  button_init();
 8002348:	f7fe ff02 	bl	8001150 <button_init>
	  lcd_init();
 800234c:	f7ff fbfe 	bl	8001b4c <lcd_init>
	  touch_init();
 8002350:	f001 fa30 	bl	80037b4 <touch_init>
	  setTimer2(50);
 8002354:	2032      	movs	r0, #50	@ 0x32
 8002356:	f000 f8c5 	bl	80024e4 <setTimer2>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8002364:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <test_LedDebug+0x3c>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <test_LedDebug+0x40>)
 800236c:	fb83 1302 	smull	r1, r3, r3, r2
 8002370:	10d9      	asrs	r1, r3, #3
 8002372:	17d3      	asrs	r3, r2, #31
 8002374:	1ac9      	subs	r1, r1, r3
 8002376:	460b      	mov	r3, r1
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	1ad1      	subs	r1, r2, r3
 8002380:	b2ca      	uxtb	r2, r1
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <test_LedDebug+0x3c>)
 8002384:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <test_LedDebug+0x3c>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800238e:	2110      	movs	r1, #16
 8002390:	4804      	ldr	r0, [pc, #16]	@ (80023a4 <test_LedDebug+0x44>)
 8002392:	f002 fb3e 	bl	8004a12 <HAL_GPIO_TogglePin>
	}
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2000022c 	.word	0x2000022c
 80023a0:	66666667 	.word	0x66666667
 80023a4:	40021000 	.word	0x40021000

080023a8 <isButtonClear>:

uint8_t isButtonClear(){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80023ac:	f001 fa1c 	bl	80037e8 <touch_IsTouched>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <isButtonClear+0x12>
 80023b6:	2300      	movs	r3, #0
 80023b8:	e017      	b.n	80023ea <isButtonClear+0x42>
	return touch_GetX() > 60 && touch_GetX() < 180 && touch_GetY() > 10 && touch_GetY() < 60;
 80023ba:	f001 fa27 	bl	800380c <touch_GetX>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b3c      	cmp	r3, #60	@ 0x3c
 80023c2:	d910      	bls.n	80023e6 <isButtonClear+0x3e>
 80023c4:	f001 fa22 	bl	800380c <touch_GetX>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2bb3      	cmp	r3, #179	@ 0xb3
 80023cc:	d80b      	bhi.n	80023e6 <isButtonClear+0x3e>
 80023ce:	f001 fa29 	bl	8003824 <touch_GetY>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b0a      	cmp	r3, #10
 80023d6:	d906      	bls.n	80023e6 <isButtonClear+0x3e>
 80023d8:	f001 fa24 	bl	8003824 <touch_GetY>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b3b      	cmp	r3, #59	@ 0x3b
 80023e0:	d801      	bhi.n	80023e6 <isButtonClear+0x3e>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <isButtonClear+0x40>
 80023e6:	2300      	movs	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <touchProcess>:

void touchProcess(){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af04      	add	r7, sp, #16
	switch (draw_Status) {
 80023f6:	4b2f      	ldr	r3, [pc, #188]	@ (80024b4 <touchProcess+0xc4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d048      	beq.n	8002490 <touchProcess+0xa0>
 80023fe:	2b02      	cmp	r3, #2
 8002400:	dc4f      	bgt.n	80024a2 <touchProcess+0xb2>
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <touchProcess+0x1c>
 8002406:	2b01      	cmp	r3, #1
 8002408:	d01a      	beq.n	8002440 <touchProcess+0x50>
			break;
		case CLEAR:
			if(!touch_IsTouched()) draw_Status = INIT;
			break;
		default:
			break;
 800240a:	e04a      	b.n	80024a2 <touchProcess+0xb2>
			lcd_Fill(60, 10, 180, 60, GBLUE);
 800240c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	233c      	movs	r3, #60	@ 0x3c
 8002414:	22b4      	movs	r2, #180	@ 0xb4
 8002416:	210a      	movs	r1, #10
 8002418:	203c      	movs	r0, #60	@ 0x3c
 800241a:	f7ff f9d1 	bl	80017c0 <lcd_Fill>
			lcd_ShowStr(90, 20, "CLEAR", RED, BLACK, 24, 1);
 800241e:	2301      	movs	r3, #1
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	2318      	movs	r3, #24
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2300      	movs	r3, #0
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800242e:	4a22      	ldr	r2, [pc, #136]	@ (80024b8 <touchProcess+0xc8>)
 8002430:	2114      	movs	r1, #20
 8002432:	205a      	movs	r0, #90	@ 0x5a
 8002434:	f7ff fde2 	bl	8001ffc <lcd_ShowStr>
			draw_Status = DRAW;
 8002438:	4b1e      	ldr	r3, [pc, #120]	@ (80024b4 <touchProcess+0xc4>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]
			break;
 800243e:	e035      	b.n	80024ac <touchProcess+0xbc>
			if(isButtonClear()){
 8002440:	f7ff ffb2 	bl	80023a8 <isButtonClear>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d02d      	beq.n	80024a6 <touchProcess+0xb6>
				draw_Status = CLEAR;
 800244a:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <touchProcess+0xc4>)
 800244c:	2202      	movs	r2, #2
 800244e:	601a      	str	r2, [r3, #0]
				lcd_Fill(0, 60, 240, 320, BLACK);
 8002450:	2300      	movs	r3, #0
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002458:	22f0      	movs	r2, #240	@ 0xf0
 800245a:	213c      	movs	r1, #60	@ 0x3c
 800245c:	2000      	movs	r0, #0
 800245e:	f7ff f9af 	bl	80017c0 <lcd_Fill>
				lcd_Fill(60, 10, 180, 60, GREEN);
 8002462:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	233c      	movs	r3, #60	@ 0x3c
 800246a:	22b4      	movs	r2, #180	@ 0xb4
 800246c:	210a      	movs	r1, #10
 800246e:	203c      	movs	r0, #60	@ 0x3c
 8002470:	f7ff f9a6 	bl	80017c0 <lcd_Fill>
				lcd_ShowStr(90, 20, "CLEAR", RED, BLACK, 24, 1);
 8002474:	2301      	movs	r3, #1
 8002476:	9302      	str	r3, [sp, #8]
 8002478:	2318      	movs	r3, #24
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	2300      	movs	r3, #0
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002484:	4a0c      	ldr	r2, [pc, #48]	@ (80024b8 <touchProcess+0xc8>)
 8002486:	2114      	movs	r1, #20
 8002488:	205a      	movs	r0, #90	@ 0x5a
 800248a:	f7ff fdb7 	bl	8001ffc <lcd_ShowStr>
			break;
 800248e:	e00a      	b.n	80024a6 <touchProcess+0xb6>
			if(!touch_IsTouched()) draw_Status = INIT;
 8002490:	f001 f9aa 	bl	80037e8 <touch_IsTouched>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d107      	bne.n	80024aa <touchProcess+0xba>
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <touchProcess+0xc4>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
			break;
 80024a0:	e003      	b.n	80024aa <touchProcess+0xba>
			break;
 80024a2:	bf00      	nop
 80024a4:	e002      	b.n	80024ac <touchProcess+0xbc>
			break;
 80024a6:	bf00      	nop
 80024a8:	e000      	b.n	80024ac <touchProcess+0xbc>
			break;
 80024aa:	bf00      	nop
	}
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000228 	.word	0x20000228
 80024b8:	08007c0c 	.word	0x08007c0c

080024bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c0:	b672      	cpsid	i
}
 80024c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <Error_Handler+0x8>

080024c8 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80024cc:	4803      	ldr	r0, [pc, #12]	@ (80024dc <timer_init+0x14>)
 80024ce:	f004 fa8b 	bl	80069e8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80024d2:	4803      	ldr	r0, [pc, #12]	@ (80024e0 <timer_init+0x18>)
 80024d4:	f004 fa20 	bl	8006918 <HAL_TIM_Base_Start>
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200002d4 	.word	0x200002d4
 80024e0:	2000028c 	.word	0x2000028c

080024e4 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80024ee:	4a08      	ldr	r2, [pc, #32]	@ (8002510 <setTimer2+0x2c>)
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <setTimer2+0x2c>)
 80024f6:	881a      	ldrh	r2, [r3, #0]
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <setTimer2+0x30>)
 80024fa:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80024fc:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <setTimer2+0x34>)
 80024fe:	2200      	movs	r2, #0
 8002500:	801a      	strh	r2, [r3, #0]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000232 	.word	0x20000232
 8002514:	20000230 	.word	0x20000230
 8002518:	2000022e 	.word	0x2000022e

0800251c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800252c:	d116      	bne.n	800255c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800252e:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d010      	beq.n	8002558 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002536:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002540:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002542:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800254a:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800254c:	2201      	movs	r2, #1
 800254e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002552:	881a      	ldrh	r2, [r3, #0]
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002556:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002558:	f7ff fdb4 	bl	80020c4 <led7_Scan>
	}
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000230 	.word	0x20000230
 8002568:	2000022e 	.word	0x2000022e
 800256c:	20000232 	.word	0x20000232

08002570 <delay_us>:

void delay_us (uint16_t us)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <delay_us+0x30>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002582:	bf00      	nop
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <delay_us+0x30>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3f9      	bcc.n	8002584 <delay_us+0x14>
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	2000028c 	.word	0x2000028c

080025a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025a8:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025aa:	4a18      	ldr	r2, [pc, #96]	@ (800260c <MX_SPI1_Init+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025b6:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025bc:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e8:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025f0:	220a      	movs	r2, #10
 80025f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025f4:	4804      	ldr	r0, [pc, #16]	@ (8002608 <MX_SPI1_Init+0x64>)
 80025f6:	f003 fe6b 	bl	80062d0 <HAL_SPI_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002600:	f7ff ff5c 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000234 	.word	0x20000234
 800260c:	40013000 	.word	0x40013000

08002610 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <HAL_SPI_MspInit+0x84>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d12b      	bne.n	800268a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <HAL_SPI_MspInit+0x88>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	4a17      	ldr	r2, [pc, #92]	@ (8002698 <HAL_SPI_MspInit+0x88>)
 800263c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002640:	6453      	str	r3, [r2, #68]	@ 0x44
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_SPI_MspInit+0x88>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <HAL_SPI_MspInit+0x88>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	4a10      	ldr	r2, [pc, #64]	@ (8002698 <HAL_SPI_MspInit+0x88>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	6313      	str	r3, [r2, #48]	@ 0x30
 800265e:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <HAL_SPI_MspInit+0x88>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800266a:	2338      	movs	r3, #56	@ 0x38
 800266c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	2303      	movs	r3, #3
 8002678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800267a:	2305      	movs	r3, #5
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	4805      	ldr	r0, [pc, #20]	@ (800269c <HAL_SPI_MspInit+0x8c>)
 8002686:	f001 fff7 	bl	8004678 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800268a:	bf00      	nop
 800268c:	3728      	adds	r7, #40	@ 0x28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40013000 	.word	0x40013000
 8002698:	40023800 	.word	0x40023800
 800269c:	40020400 	.word	0x40020400

080026a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <HAL_MspInit+0x4c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	4a0f      	ldr	r2, [pc, #60]	@ (80026ec <HAL_MspInit+0x4c>)
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b6:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <HAL_MspInit+0x4c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_MspInit+0x4c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	4a08      	ldr	r2, [pc, #32]	@ (80026ec <HAL_MspInit+0x4c>)
 80026cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_MspInit+0x4c>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800

080026f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <NMI_Handler+0x4>

080026f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <HardFault_Handler+0x4>

08002700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <MemManage_Handler+0x4>

08002708 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <BusFault_Handler+0x4>

08002710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <UsageFault_Handler+0x4>

08002718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002746:	f001 f8f5 	bl	8003934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002754:	4802      	ldr	r0, [pc, #8]	@ (8002760 <TIM2_IRQHandler+0x10>)
 8002756:	f004 fa10 	bl	8006b7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200002d4 	.word	0x200002d4

08002764 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002768:	4802      	ldr	r0, [pc, #8]	@ (8002774 <DMA2_Stream0_IRQHandler+0x10>)
 800276a:	f001 fd49 	bl	8004200 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000114 	.word	0x20000114

08002778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <SystemInit+0x20>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002782:	4a05      	ldr	r2, [pc, #20]	@ (8002798 <SystemInit+0x20>)
 8002784:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002788:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027a2:	f107 0308 	add.w	r3, r7, #8
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b0:	463b      	mov	r3, r7
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <MX_TIM1_Init+0x98>)
 80027ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002838 <MX_TIM1_Init+0x9c>)
 80027bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80027be:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <MX_TIM1_Init+0x98>)
 80027c0:	2253      	movs	r2, #83	@ 0x53
 80027c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <MX_TIM1_Init+0x98>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <MX_TIM1_Init+0x98>)
 80027cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d2:	4b18      	ldr	r3, [pc, #96]	@ (8002834 <MX_TIM1_Init+0x98>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027d8:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <MX_TIM1_Init+0x98>)
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <MX_TIM1_Init+0x98>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027e4:	4813      	ldr	r0, [pc, #76]	@ (8002834 <MX_TIM1_Init+0x98>)
 80027e6:	f004 f847 	bl	8006878 <HAL_TIM_Base_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80027f0:	f7ff fe64 	bl	80024bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027fa:	f107 0308 	add.w	r3, r7, #8
 80027fe:	4619      	mov	r1, r3
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <MX_TIM1_Init+0x98>)
 8002802:	f004 fb85 	bl	8006f10 <HAL_TIM_ConfigClockSource>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800280c:	f7ff fe56 	bl	80024bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002818:	463b      	mov	r3, r7
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	@ (8002834 <MX_TIM1_Init+0x98>)
 800281e:	f004 ff51 	bl	80076c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002828:	f7ff fe48 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	2000028c 	.word	0x2000028c
 8002838:	40010000 	.word	0x40010000

0800283c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002842:	f107 0308 	add.w	r3, r7, #8
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002850:	463b      	mov	r3, r7
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002858:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <MX_TIM2_Init+0x94>)
 800285a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800285e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002860:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <MX_TIM2_Init+0x94>)
 8002862:	f240 3247 	movw	r2, #839	@ 0x347
 8002866:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <MX_TIM2_Init+0x94>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800286e:	4b18      	ldr	r3, [pc, #96]	@ (80028d0 <MX_TIM2_Init+0x94>)
 8002870:	2263      	movs	r2, #99	@ 0x63
 8002872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002874:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <MX_TIM2_Init+0x94>)
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287a:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <MX_TIM2_Init+0x94>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002880:	4813      	ldr	r0, [pc, #76]	@ (80028d0 <MX_TIM2_Init+0x94>)
 8002882:	f003 fff9 	bl	8006878 <HAL_TIM_Base_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800288c:	f7ff fe16 	bl	80024bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002896:	f107 0308 	add.w	r3, r7, #8
 800289a:	4619      	mov	r1, r3
 800289c:	480c      	ldr	r0, [pc, #48]	@ (80028d0 <MX_TIM2_Init+0x94>)
 800289e:	f004 fb37 	bl	8006f10 <HAL_TIM_ConfigClockSource>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80028a8:	f7ff fe08 	bl	80024bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028b4:	463b      	mov	r3, r7
 80028b6:	4619      	mov	r1, r3
 80028b8:	4805      	ldr	r0, [pc, #20]	@ (80028d0 <MX_TIM2_Init+0x94>)
 80028ba:	f004 ff03 	bl	80076c4 <HAL_TIMEx_MasterConfigSynchronization>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80028c4:	f7ff fdfa 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028c8:	bf00      	nop
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	200002d4 	.word	0x200002d4

080028d4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
 80028e8:	615a      	str	r2, [r3, #20]
 80028ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80028ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002968 <MX_TIM13_Init+0x94>)
 80028ee:	4a1f      	ldr	r2, [pc, #124]	@ (800296c <MX_TIM13_Init+0x98>)
 80028f0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80028f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002968 <MX_TIM13_Init+0x94>)
 80028f4:	f240 3247 	movw	r2, #839	@ 0x347
 80028f8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <MX_TIM13_Init+0x94>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <MX_TIM13_Init+0x94>)
 8002902:	2263      	movs	r2, #99	@ 0x63
 8002904:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002906:	4b18      	ldr	r3, [pc, #96]	@ (8002968 <MX_TIM13_Init+0x94>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290c:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <MX_TIM13_Init+0x94>)
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002912:	4815      	ldr	r0, [pc, #84]	@ (8002968 <MX_TIM13_Init+0x94>)
 8002914:	f003 ffb0 	bl	8006878 <HAL_TIM_Base_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800291e:	f7ff fdcd 	bl	80024bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002922:	4811      	ldr	r0, [pc, #68]	@ (8002968 <MX_TIM13_Init+0x94>)
 8002924:	f004 f8d0 	bl	8006ac8 <HAL_TIM_PWM_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800292e:	f7ff fdc5 	bl	80024bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002932:	2360      	movs	r3, #96	@ 0x60
 8002934:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	2200      	movs	r2, #0
 8002946:	4619      	mov	r1, r3
 8002948:	4807      	ldr	r0, [pc, #28]	@ (8002968 <MX_TIM13_Init+0x94>)
 800294a:	f004 fa1f 	bl	8006d8c <HAL_TIM_PWM_ConfigChannel>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002954:	f7ff fdb2 	bl	80024bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002958:	4803      	ldr	r0, [pc, #12]	@ (8002968 <MX_TIM13_Init+0x94>)
 800295a:	f000 f85b 	bl	8002a14 <HAL_TIM_MspPostInit>

}
 800295e:	bf00      	nop
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2000031c 	.word	0x2000031c
 800296c:	40001c00 	.word	0x40001c00

08002970 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a22      	ldr	r2, [pc, #136]	@ (8002a08 <HAL_TIM_Base_MspInit+0x98>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10e      	bne.n	80029a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_TIM_Base_MspInit+0x9c>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	4a20      	ldr	r2, [pc, #128]	@ (8002a0c <HAL_TIM_Base_MspInit+0x9c>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6453      	str	r3, [r2, #68]	@ 0x44
 8002992:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <HAL_TIM_Base_MspInit+0x9c>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800299e:	e02e      	b.n	80029fe <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a8:	d116      	bne.n	80029d8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <HAL_TIM_Base_MspInit+0x9c>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	4a16      	ldr	r2, [pc, #88]	@ (8002a0c <HAL_TIM_Base_MspInit+0x9c>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ba:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <HAL_TIM_Base_MspInit+0x9c>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	201c      	movs	r0, #28
 80029cc:	f001 fb33 	bl	8004036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029d0:	201c      	movs	r0, #28
 80029d2:	f001 fb4c 	bl	800406e <HAL_NVIC_EnableIRQ>
}
 80029d6:	e012      	b.n	80029fe <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002a10 <HAL_TIM_Base_MspInit+0xa0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10d      	bne.n	80029fe <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_TIM_Base_MspInit+0x9c>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	4a08      	ldr	r2, [pc, #32]	@ (8002a0c <HAL_TIM_Base_MspInit+0x9c>)
 80029ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_TIM_Base_MspInit+0x9c>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40001c00 	.word	0x40001c00

08002a14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a12      	ldr	r2, [pc, #72]	@ (8002a7c <HAL_TIM_MspPostInit+0x68>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d11e      	bne.n	8002a74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <HAL_TIM_MspPostInit+0x6c>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a10      	ldr	r2, [pc, #64]	@ (8002a80 <HAL_TIM_MspPostInit+0x6c>)
 8002a40:	f043 0320 	orr.w	r3, r3, #32
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <HAL_TIM_MspPostInit+0x6c>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002a64:	2309      	movs	r3, #9
 8002a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4805      	ldr	r0, [pc, #20]	@ (8002a84 <HAL_TIM_MspPostInit+0x70>)
 8002a70:	f001 fe02 	bl	8004678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002a74:	bf00      	nop
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40001c00 	.word	0x40001c00
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40021400 	.word	0x40021400

08002a88 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	e025      	b.n	8002ae8 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	da06      	bge.n	8002ab2 <TP_Write_Byte+0x2a>
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002aaa:	4813      	ldr	r0, [pc, #76]	@ (8002af8 <TP_Write_Byte+0x70>)
 8002aac:	f001 ff98 	bl	80049e0 <HAL_GPIO_WritePin>
 8002ab0:	e005      	b.n	8002abe <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ab8:	480f      	ldr	r0, [pc, #60]	@ (8002af8 <TP_Write_Byte+0x70>)
 8002aba:	f001 ff91 	bl	80049e0 <HAL_GPIO_WritePin>
		num<<=1;
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002aca:	480c      	ldr	r0, [pc, #48]	@ (8002afc <TP_Write_Byte+0x74>)
 8002acc:	f001 ff88 	bl	80049e0 <HAL_GPIO_WritePin>
		delay_us(1);
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f7ff fd4d 	bl	8002570 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002adc:	4807      	ldr	r0, [pc, #28]	@ (8002afc <TP_Write_Byte+0x74>)
 8002ade:	f001 ff7f 	bl	80049e0 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b07      	cmp	r3, #7
 8002aec:	d9d6      	bls.n	8002a9c <TP_Write_Byte+0x14>
	}
}
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40020800 	.word	0x40020800
 8002afc:	40021800 	.word	0x40021800

08002b00 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b18:	482f      	ldr	r0, [pc, #188]	@ (8002bd8 <TP_Read_AD+0xd8>)
 8002b1a:	f001 ff61 	bl	80049e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b24:	482d      	ldr	r0, [pc, #180]	@ (8002bdc <TP_Read_AD+0xdc>)
 8002b26:	f001 ff5b 	bl	80049e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2180      	movs	r1, #128	@ 0x80
 8002b2e:	482a      	ldr	r0, [pc, #168]	@ (8002bd8 <TP_Read_AD+0xd8>)
 8002b30:	f001 ff56 	bl	80049e0 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ffa6 	bl	8002a88 <TP_Write_Byte>
	delay_us(6);
 8002b3c:	2006      	movs	r0, #6
 8002b3e:	f7ff fd17 	bl	8002570 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b48:	4823      	ldr	r0, [pc, #140]	@ (8002bd8 <TP_Read_AD+0xd8>)
 8002b4a:	f001 ff49 	bl	80049e0 <HAL_GPIO_WritePin>
	delay_us(1);
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7ff fd0e 	bl	8002570 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002b54:	2201      	movs	r2, #1
 8002b56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b5a:	481f      	ldr	r0, [pc, #124]	@ (8002bd8 <TP_Read_AD+0xd8>)
 8002b5c:	f001 ff40 	bl	80049e0 <HAL_GPIO_WritePin>
	delay_us(1);
 8002b60:	2001      	movs	r0, #1
 8002b62:	f7ff fd05 	bl	8002570 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b6c:	481a      	ldr	r0, [pc, #104]	@ (8002bd8 <TP_Read_AD+0xd8>)
 8002b6e:	f001 ff37 	bl	80049e0 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	e01f      	b.n	8002bb8 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8002b78:	89bb      	ldrh	r3, [r7, #12]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b84:	4814      	ldr	r0, [pc, #80]	@ (8002bd8 <TP_Read_AD+0xd8>)
 8002b86:	f001 ff2b 	bl	80049e0 <HAL_GPIO_WritePin>
		delay_us(1);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7ff fcf0 	bl	8002570 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8002b90:	2201      	movs	r2, #1
 8002b92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b96:	4810      	ldr	r0, [pc, #64]	@ (8002bd8 <TP_Read_AD+0xd8>)
 8002b98:	f001 ff22 	bl	80049e0 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8002b9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ba0:	480e      	ldr	r0, [pc, #56]	@ (8002bdc <TP_Read_AD+0xdc>)
 8002ba2:	f001 ff05 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <TP_Read_AD+0xb2>
 8002bac:	89bb      	ldrh	r3, [r7, #12]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b0f      	cmp	r3, #15
 8002bbc:	d9dc      	bls.n	8002b78 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8002bbe:	89bb      	ldrh	r3, [r7, #12]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	2180      	movs	r1, #128	@ 0x80
 8002bc8:	4803      	ldr	r0, [pc, #12]	@ (8002bd8 <TP_Read_AD+0xd8>)
 8002bca:	f001 ff09 	bl	80049e0 <HAL_GPIO_WritePin>
	return(Num);
 8002bce:	89bb      	ldrh	r3, [r7, #12]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021800 	.word	0x40021800
 8002bdc:	40020800 	.word	0x40020800

08002be0 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b089      	sub	sp, #36	@ 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	83fb      	strh	r3, [r7, #30]
 8002bf2:	e00e      	b.n	8002c12 <TP_Read_XOY+0x32>
 8002bf4:	8bfc      	ldrh	r4, [r7, #30]
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff81 	bl	8002b00 <TP_Read_AD>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	0063      	lsls	r3, r4, #1
 8002c04:	3320      	adds	r3, #32
 8002c06:	443b      	add	r3, r7
 8002c08:	f823 2c14 	strh.w	r2, [r3, #-20]
 8002c0c:	8bfb      	ldrh	r3, [r7, #30]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	83fb      	strh	r3, [r7, #30]
 8002c12:	8bfb      	ldrh	r3, [r7, #30]
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d9ed      	bls.n	8002bf4 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	83fb      	strh	r3, [r7, #30]
 8002c1c:	e035      	b.n	8002c8a <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8002c1e:	8bfb      	ldrh	r3, [r7, #30]
 8002c20:	3301      	adds	r3, #1
 8002c22:	83bb      	strh	r3, [r7, #28]
 8002c24:	e02b      	b.n	8002c7e <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 8002c26:	8bfb      	ldrh	r3, [r7, #30]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	3320      	adds	r3, #32
 8002c2c:	443b      	add	r3, r7
 8002c2e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002c32:	8bbb      	ldrh	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	3320      	adds	r3, #32
 8002c38:	443b      	add	r3, r7
 8002c3a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d91a      	bls.n	8002c78 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 8002c42:	8bfb      	ldrh	r3, [r7, #30]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	3320      	adds	r3, #32
 8002c48:	443b      	add	r3, r7
 8002c4a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002c4e:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8002c50:	8bbb      	ldrh	r3, [r7, #28]
 8002c52:	8bfa      	ldrh	r2, [r7, #30]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	3320      	adds	r3, #32
 8002c58:	443b      	add	r3, r7
 8002c5a:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8002c5e:	0053      	lsls	r3, r2, #1
 8002c60:	3320      	adds	r3, #32
 8002c62:	443b      	add	r3, r7
 8002c64:	460a      	mov	r2, r1
 8002c66:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8002c6a:	8bbb      	ldrh	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	3320      	adds	r3, #32
 8002c70:	443b      	add	r3, r7
 8002c72:	8b3a      	ldrh	r2, [r7, #24]
 8002c74:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8002c78:	8bbb      	ldrh	r3, [r7, #28]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	83bb      	strh	r3, [r7, #28]
 8002c7e:	8bbb      	ldrh	r3, [r7, #28]
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d9d0      	bls.n	8002c26 <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 8002c84:	8bfb      	ldrh	r3, [r7, #30]
 8002c86:	3301      	adds	r3, #1
 8002c88:	83fb      	strh	r3, [r7, #30]
 8002c8a:	8bfb      	ldrh	r3, [r7, #30]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d9c6      	bls.n	8002c1e <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8002c94:	2301      	movs	r3, #1
 8002c96:	83fb      	strh	r3, [r7, #30]
 8002c98:	e00b      	b.n	8002cb2 <TP_Read_XOY+0xd2>
 8002c9a:	8bfb      	ldrh	r3, [r7, #30]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	443b      	add	r3, r7
 8002ca2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002ca6:	8b7b      	ldrh	r3, [r7, #26]
 8002ca8:	4413      	add	r3, r2
 8002caa:	837b      	strh	r3, [r7, #26]
 8002cac:	8bfb      	ldrh	r3, [r7, #30]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	83fb      	strh	r3, [r7, #30]
 8002cb2:	8bfb      	ldrh	r3, [r7, #30]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d9f0      	bls.n	8002c9a <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8002cb8:	8b7b      	ldrh	r3, [r7, #26]
 8002cba:	4a05      	ldr	r2, [pc, #20]	@ (8002cd0 <TP_Read_XOY+0xf0>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	085b      	lsrs	r3, r3, #1
 8002cc2:	833b      	strh	r3, [r7, #24]
	return temp;
 8002cc4:	8b3b      	ldrh	r3, [r7, #24]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	@ 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd90      	pop	{r4, r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	aaaaaaab 	.word	0xaaaaaaab

08002cd4 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8002cde:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <TP_Read_XY+0x3c>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff7c 	bl	8002be0 <TP_Read_XOY>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8002cec:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <TP_Read_XY+0x40>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff75 	bl	8002be0 <TP_Read_XOY>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	89fa      	ldrh	r2, [r7, #14]
 8002cfe:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	89ba      	ldrh	r2, [r7, #12]
 8002d04:	801a      	strh	r2, [r3, #0]
	return 1;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000040 	.word	0x20000040
 8002d14:	20000041 	.word	0x20000041

08002d18 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8002d22:	f107 0212 	add.w	r2, r7, #18
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ffd1 	bl	8002cd4 <TP_Read_XY>
 8002d32:	4603      	mov	r3, r0
 8002d34:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <TP_Read_XY2+0x28>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e049      	b.n	8002dd4 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8002d40:	f107 020e 	add.w	r2, r7, #14
 8002d44:	f107 0310 	add.w	r3, r7, #16
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ffc2 	bl	8002cd4 <TP_Read_XY>
 8002d50:	4603      	mov	r3, r0
 8002d52:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <TP_Read_XY2+0x46>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e03a      	b.n	8002dd4 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8002d5e:	8a3a      	ldrh	r2, [r7, #16]
 8002d60:	8abb      	ldrh	r3, [r7, #20]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d804      	bhi.n	8002d70 <TP_Read_XY2+0x58>
 8002d66:	8a3b      	ldrh	r3, [r7, #16]
 8002d68:	3363      	adds	r3, #99	@ 0x63
 8002d6a:	8aba      	ldrh	r2, [r7, #20]
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	da08      	bge.n	8002d82 <TP_Read_XY2+0x6a>
 8002d70:	8aba      	ldrh	r2, [r7, #20]
 8002d72:	8a3b      	ldrh	r3, [r7, #16]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d82c      	bhi.n	8002dd2 <TP_Read_XY2+0xba>
 8002d78:	8abb      	ldrh	r3, [r7, #20]
 8002d7a:	3363      	adds	r3, #99	@ 0x63
 8002d7c:	8a3a      	ldrh	r2, [r7, #16]
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	db27      	blt.n	8002dd2 <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8002d82:	89fa      	ldrh	r2, [r7, #14]
 8002d84:	8a7b      	ldrh	r3, [r7, #18]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d804      	bhi.n	8002d94 <TP_Read_XY2+0x7c>
 8002d8a:	89fb      	ldrh	r3, [r7, #14]
 8002d8c:	3363      	adds	r3, #99	@ 0x63
 8002d8e:	8a7a      	ldrh	r2, [r7, #18]
 8002d90:	4293      	cmp	r3, r2
 8002d92:	da08      	bge.n	8002da6 <TP_Read_XY2+0x8e>
 8002d94:	8a7a      	ldrh	r2, [r7, #18]
 8002d96:	89fb      	ldrh	r3, [r7, #14]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d81a      	bhi.n	8002dd2 <TP_Read_XY2+0xba>
 8002d9c:	8a7b      	ldrh	r3, [r7, #18]
 8002d9e:	3363      	adds	r3, #99	@ 0x63
 8002da0:	89fa      	ldrh	r2, [r7, #14]
 8002da2:	4293      	cmp	r3, r2
 8002da4:	db15      	blt.n	8002dd2 <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8002da6:	8abb      	ldrh	r3, [r7, #20]
 8002da8:	461a      	mov	r2, r3
 8002daa:	8a3b      	ldrh	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	0fda      	lsrs	r2, r3, #31
 8002db0:	4413      	add	r3, r2
 8002db2:	105b      	asrs	r3, r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8002dba:	8a7b      	ldrh	r3, [r7, #18]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	89fb      	ldrh	r3, [r7, #14]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	0fda      	lsrs	r2, r3, #31
 8002dc4:	4413      	add	r3, r2
 8002dc6:	105b      	asrs	r3, r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	801a      	strh	r2, [r3, #0]
		return 1;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <TP_Read_XY2+0xbc>
	}else return 0;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]
 8002de6:	460b      	mov	r3, r1
 8002de8:	80bb      	strh	r3, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	3b0c      	subs	r3, #12
 8002df2:	b298      	uxth	r0, r3
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	330d      	adds	r3, #13
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	88bc      	ldrh	r4, [r7, #4]
 8002dfc:	88b9      	ldrh	r1, [r7, #4]
 8002dfe:	887b      	ldrh	r3, [r7, #2]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	4623      	mov	r3, r4
 8002e04:	f7fe fd29 	bl	800185a <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8002e08:	88bb      	ldrh	r3, [r7, #4]
 8002e0a:	3b0c      	subs	r3, #12
 8002e0c:	b299      	uxth	r1, r3
 8002e0e:	88bb      	ldrh	r3, [r7, #4]
 8002e10:	330d      	adds	r3, #13
 8002e12:	b29c      	uxth	r4, r3
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	88f8      	ldrh	r0, [r7, #6]
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4623      	mov	r3, r4
 8002e1e:	f7fe fd1c 	bl	800185a <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	3301      	adds	r3, #1
 8002e26:	b298      	uxth	r0, r3
 8002e28:	88bb      	ldrh	r3, [r7, #4]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	4619      	mov	r1, r3
 8002e32:	f7fe fcfb 	bl	800182c <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b298      	uxth	r0, r3
 8002e3c:	88bb      	ldrh	r3, [r7, #4]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	4619      	mov	r1, r3
 8002e46:	f7fe fcf1 	bl	800182c <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b298      	uxth	r0, r3
 8002e50:	88bb      	ldrh	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f7fe fce7 	bl	800182c <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b298      	uxth	r0, r3
 8002e64:	88bb      	ldrh	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7fe fcdd 	bl	800182c <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8002e72:	88f8      	ldrh	r0, [r7, #6]
 8002e74:	88b9      	ldrh	r1, [r7, #4]
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	2306      	movs	r3, #6
 8002e7e:	f7ff f850 	bl	8001f22 <lcd_DrawCircle>
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}
	...

08002e8c <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8002e96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e9a:	4843      	ldr	r0, [pc, #268]	@ (8002fa8 <TP_Scan+0x11c>)
 8002e9c:	f001 fd88 	bl	80049b0 <HAL_GPIO_ReadPin>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d157      	bne.n	8002f56 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d004      	beq.n	8002eb6 <TP_Scan+0x2a>
 8002eac:	493f      	ldr	r1, [pc, #252]	@ (8002fac <TP_Scan+0x120>)
 8002eae:	4840      	ldr	r0, [pc, #256]	@ (8002fb0 <TP_Scan+0x124>)
 8002eb0:	f7ff ff32 	bl	8002d18 <TP_Read_XY2>
 8002eb4:	e03c      	b.n	8002f30 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8002eb6:	493d      	ldr	r1, [pc, #244]	@ (8002fac <TP_Scan+0x120>)
 8002eb8:	483d      	ldr	r0, [pc, #244]	@ (8002fb0 <TP_Scan+0x124>)
 8002eba:	f7ff ff2d 	bl	8002d18 <TP_Read_XY2>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d035      	beq.n	8002f30 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb4 <TP_Scan+0x128>)
 8002ec6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002eca:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb4 <TP_Scan+0x128>)
 8002ecc:	899b      	ldrh	r3, [r3, #12]
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eda:	4b36      	ldr	r3, [pc, #216]	@ (8002fb4 <TP_Scan+0x128>)
 8002edc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002ee0:	ee07 3a90 	vmov	s15, r3
 8002ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef0:	ee17 3a90 	vmov	r3, s15
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb4 <TP_Scan+0x128>)
 8002ef8:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8002efa:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb4 <TP_Scan+0x128>)
 8002efc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002f00:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb4 <TP_Scan+0x128>)
 8002f02:	8adb      	ldrh	r3, [r3, #22]
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f10:	4b28      	ldr	r3, [pc, #160]	@ (8002fb4 <TP_Scan+0x128>)
 8002f12:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f26:	ee17 3a90 	vmov	r3, s15
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b21      	ldr	r3, [pc, #132]	@ (8002fb4 <TP_Scan+0x128>)
 8002f2e:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8002f30:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <TP_Scan+0x128>)
 8002f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f36:	b25b      	sxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db2a      	blt.n	8002f92 <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <TP_Scan+0x128>)
 8002f3e:	22c0      	movs	r2, #192	@ 0xc0
 8002f40:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8002f44:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb4 <TP_Scan+0x128>)
 8002f46:	899a      	ldrh	r2, [r3, #12]
 8002f48:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb4 <TP_Scan+0x128>)
 8002f4a:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8002f4c:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <TP_Scan+0x128>)
 8002f4e:	8ada      	ldrh	r2, [r3, #22]
 8002f50:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <TP_Scan+0x128>)
 8002f52:	83da      	strh	r2, [r3, #30]
 8002f54:	e01d      	b.n	8002f92 <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8002f56:	4b17      	ldr	r3, [pc, #92]	@ (8002fb4 <TP_Scan+0x128>)
 8002f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f5c:	b25b      	sxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	da09      	bge.n	8002f76 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8002f62:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <TP_Scan+0x128>)
 8002f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <TP_Scan+0x128>)
 8002f70:	f883 2020 	strb.w	r2, [r3, #32]
 8002f74:	e00d      	b.n	8002f92 <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8002f76:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb4 <TP_Scan+0x128>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <TP_Scan+0x128>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8002f82:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <TP_Scan+0x128>)
 8002f84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f88:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <TP_Scan+0x128>)
 8002f8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f90:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8002f92:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <TP_Scan+0x128>)
 8002f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f98:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002f9c:	b2db      	uxtb	r3, r3
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	20000022 	.word	0x20000022
 8002fb0:	20000018 	.word	0x20000018
 8002fb4:	2000000c 	.word	0x2000000c

08002fb8 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8002fbc:	220e      	movs	r2, #14
 8002fbe:	4905      	ldr	r1, [pc, #20]	@ (8002fd4 <TP_Save_Adjdata+0x1c>)
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7fe f8a5 	bl	8001110 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	200e      	movs	r0, #14
 8002fca:	f7fe f841 	bl	8001050 <at24c_WriteOneByte>
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000030 	.word	0x20000030

08002fd8 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8002fe2:	200e      	movs	r0, #14
 8002fe4:	f7fe f818 	bl	8001018 <at24c_ReadOneByte>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8002ff2:	220e      	movs	r2, #14
 8002ff4:	4905      	ldr	r1, [pc, #20]	@ (800300c <TP_Get_Adjdata+0x34>)
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7fe f86b 	bl	80010d2 <at24c_Read>
		return 1;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000030 	.word	0x20000030

08003010 <touch_Adjust>:


void touch_Adjust(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08e      	sub	sp, #56	@ 0x38
 8003014:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8003022:	4b5f      	ldr	r3, [pc, #380]	@ (80031a0 <touch_Adjust+0x190>)
 8003024:	881a      	ldrh	r2, [r3, #0]
 8003026:	4b5e      	ldr	r3, [pc, #376]	@ (80031a0 <touch_Adjust+0x190>)
 8003028:	885b      	ldrh	r3, [r3, #2]
 800302a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800302e:	9100      	str	r1, [sp, #0]
 8003030:	2100      	movs	r1, #0
 8003032:	2000      	movs	r0, #0
 8003034:	f7fe fbc4 	bl	80017c0 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8003038:	2300      	movs	r3, #0
 800303a:	9302      	str	r3, [sp, #8]
 800303c:	2310      	movs	r3, #16
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800304a:	4a56      	ldr	r2, [pc, #344]	@ (80031a4 <touch_Adjust+0x194>)
 800304c:	2128      	movs	r1, #40	@ 0x28
 800304e:	2005      	movs	r0, #5
 8003050:	f7fe ffd4 	bl	8001ffc <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8003054:	2300      	movs	r3, #0
 8003056:	9302      	str	r3, [sp, #8]
 8003058:	2310      	movs	r3, #16
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003066:	4a50      	ldr	r2, [pc, #320]	@ (80031a8 <touch_Adjust+0x198>)
 8003068:	2141      	movs	r1, #65	@ 0x41
 800306a:	2005      	movs	r0, #5
 800306c:	f7fe ffc6 	bl	8001ffc <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8003070:	2300      	movs	r3, #0
 8003072:	9302      	str	r3, [sp, #8]
 8003074:	2310      	movs	r3, #16
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003082:	4a4a      	ldr	r2, [pc, #296]	@ (80031ac <touch_Adjust+0x19c>)
 8003084:	215a      	movs	r1, #90	@ 0x5a
 8003086:	2005      	movs	r0, #5
 8003088:	f7fe ffb8 	bl	8001ffc <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 800308c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003090:	2114      	movs	r1, #20
 8003092:	2014      	movs	r0, #20
 8003094:	f7ff fea2 	bl	8002ddc <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8003098:	4b45      	ldr	r3, [pc, #276]	@ (80031b0 <touch_Adjust+0x1a0>)
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 80030a0:	4b43      	ldr	r3, [pc, #268]	@ (80031b0 <touch_Adjust+0x1a0>)
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	625a      	str	r2, [r3, #36]	@ 0x24
	while(1)
	{
		HAL_Delay(50);
 80030a8:	2032      	movs	r0, #50	@ 0x32
 80030aa:	f000 fc63 	bl	8003974 <HAL_Delay>
		tp_dev.scan(1);
 80030ae:	4b40      	ldr	r3, [pc, #256]	@ (80031b0 <touch_Adjust+0x1a0>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2001      	movs	r0, #1
 80030b4:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 80030b6:	4b3e      	ldr	r3, [pc, #248]	@ (80031b0 <touch_Adjust+0x1a0>)
 80030b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80030c0:	2b40      	cmp	r3, #64	@ 0x40
 80030c2:	d1f1      	bne.n	80030a8 <touch_Adjust+0x98>
		{
			tp_dev.sta&=~(1<<6);
 80030c4:	4b3a      	ldr	r3, [pc, #232]	@ (80031b0 <touch_Adjust+0x1a0>)
 80030c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	4b37      	ldr	r3, [pc, #220]	@ (80031b0 <touch_Adjust+0x1a0>)
 80030d2:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 80030d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030da:	4a35      	ldr	r2, [pc, #212]	@ (80031b0 <touch_Adjust+0x1a0>)
 80030dc:	8992      	ldrh	r2, [r2, #12]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	3328      	adds	r3, #40	@ 0x28
 80030e2:	443b      	add	r3, r7
 80030e4:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 80030e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030ec:	4a30      	ldr	r2, [pc, #192]	@ (80031b0 <touch_Adjust+0x1a0>)
 80030ee:	8ad2      	ldrh	r2, [r2, #22]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	3328      	adds	r3, #40	@ 0x28
 80030f4:	443b      	add	r3, r7
 80030f6:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 80030fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030fe:	3301      	adds	r3, #1
 8003100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			switch(cnt)
 8003104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003108:	3b01      	subs	r3, #1
 800310a:	2b03      	cmp	r3, #3
 800310c:	d8cc      	bhi.n	80030a8 <touch_Adjust+0x98>
 800310e:	a201      	add	r2, pc, #4	@ (adr r2, 8003114 <touch_Adjust+0x104>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003125 	.word	0x08003125
 8003118:	08003147 	.word	0x08003147
 800311c:	08003171 	.word	0x08003171
 8003120:	080031b5 	.word	0x080031b5
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8003124:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003128:	2114      	movs	r1, #20
 800312a:	2014      	movs	r0, #20
 800312c:	f7ff fe56 	bl	8002ddc <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8003130:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <touch_Adjust+0x190>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	3b14      	subs	r3, #20
 8003136:	b29b      	uxth	r3, r3
 8003138:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800313c:	2114      	movs	r1, #20
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fe4c 	bl	8002ddc <TP_Drow_Touch_Point>
					break;
 8003144:	e319      	b.n	800377a <touch_Adjust+0x76a>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8003146:	4b16      	ldr	r3, [pc, #88]	@ (80031a0 <touch_Adjust+0x190>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	3b14      	subs	r3, #20
 800314c:	b29b      	uxth	r3, r3
 800314e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003152:	2114      	movs	r1, #20
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fe41 	bl	8002ddc <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 800315a:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <touch_Adjust+0x190>)
 800315c:	885b      	ldrh	r3, [r3, #2]
 800315e:	3b14      	subs	r3, #20
 8003160:	b29b      	uxth	r3, r3
 8003162:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003166:	4619      	mov	r1, r3
 8003168:	2014      	movs	r0, #20
 800316a:	f7ff fe37 	bl	8002ddc <TP_Drow_Touch_Point>
					break;
 800316e:	e304      	b.n	800377a <touch_Adjust+0x76a>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8003170:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <touch_Adjust+0x190>)
 8003172:	885b      	ldrh	r3, [r3, #2]
 8003174:	3b14      	subs	r3, #20
 8003176:	b29b      	uxth	r3, r3
 8003178:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800317c:	4619      	mov	r1, r3
 800317e:	2014      	movs	r0, #20
 8003180:	f7ff fe2c 	bl	8002ddc <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <touch_Adjust+0x190>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	3b14      	subs	r3, #20
 800318a:	b298      	uxth	r0, r3
 800318c:	4b04      	ldr	r3, [pc, #16]	@ (80031a0 <touch_Adjust+0x190>)
 800318e:	885b      	ldrh	r3, [r3, #2]
 8003190:	3b14      	subs	r3, #20
 8003192:	b29b      	uxth	r3, r3
 8003194:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003198:	4619      	mov	r1, r3
 800319a:	f7ff fe1f 	bl	8002ddc <TP_Drow_Touch_Point>
					break;
 800319e:	e2ec      	b.n	800377a <touch_Adjust+0x76a>
 80031a0:	2000021c 	.word	0x2000021c
 80031a4:	08007c14 	.word	0x08007c14
 80031a8:	08007c30 	.word	0x08007c30
 80031ac:	08007c48 	.word	0x08007c48
 80031b0:	2000000c 	.word	0x2000000c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 80031b4:	883b      	ldrh	r3, [r7, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	88bb      	ldrh	r3, [r7, #4]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bfb8      	it	lt
 80031c0:	425b      	neglt	r3, r3
 80031c2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	461a      	mov	r2, r3
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bfb8      	it	lt
 80031d0:	425b      	neglt	r3, r3
 80031d2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	fb03 f303 	mul.w	r3, r3, r3
 80031da:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	fb03 f303 	mul.w	r3, r3, r3
 80031e2:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd f92e 	bl	800044c <__aeabi_ui2d>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	ec43 2b10 	vmov	d0, r2, r3
 80031f8:	f004 fbf6 	bl	80079e8 <sqrt>
 80031fc:	ec53 2b10 	vmov	r2, r3, d0
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	f7fd fc4c 	bl	8000aa0 <__aeabi_d2uiz>
 8003208:	4603      	mov	r3, r0
 800320a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 800320c:	893b      	ldrh	r3, [r7, #8]
 800320e:	461a      	mov	r2, r3
 8003210:	89bb      	ldrh	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	bfb8      	it	lt
 8003218:	425b      	neglt	r3, r3
 800321a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 800321c:	897b      	ldrh	r3, [r7, #10]
 800321e:	461a      	mov	r2, r3
 8003220:	89fb      	ldrh	r3, [r7, #14]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	bfb8      	it	lt
 8003228:	425b      	neglt	r3, r3
 800322a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	fb03 f303 	mul.w	r3, r3, r3
 8003232:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	fb03 f303 	mul.w	r3, r3, r3
 800323a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800323c:	6a3a      	ldr	r2, [r7, #32]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	4413      	add	r3, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f902 	bl	800044c <__aeabi_ui2d>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	ec43 2b10 	vmov	d0, r2, r3
 8003250:	f004 fbca 	bl	80079e8 <sqrt>
 8003254:	ec53 2b10 	vmov	r2, r3, d0
 8003258:	4610      	mov	r0, r2
 800325a:	4619      	mov	r1, r3
 800325c:	f7fd fc20 	bl	8000aa0 <__aeabi_d2uiz>
 8003260:	4603      	mov	r3, r0
 8003262:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003264:	8b7b      	ldrh	r3, [r7, #26]
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800326e:	8b3b      	ldrh	r3, [r7, #24]
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003278:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800327c:	ee16 0a90 	vmov	r0, s13
 8003280:	f7fd f906 	bl	8000490 <__aeabi_f2d>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 800328c:	a384      	add	r3, pc, #528	@ (adr r3, 80034a0 <touch_Adjust+0x490>)
 800328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003292:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003296:	f7fd fbc5 	bl	8000a24 <__aeabi_dcmplt>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10f      	bne.n	80032c0 <touch_Adjust+0x2b0>
 80032a0:	a381      	add	r3, pc, #516	@ (adr r3, 80034a8 <touch_Adjust+0x498>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032aa:	f7fd fbd9 	bl	8000a60 <__aeabi_dcmpgt>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <touch_Adjust+0x2b0>
 80032b4:	8b7b      	ldrh	r3, [r7, #26]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <touch_Adjust+0x2b0>
 80032ba:	8b3b      	ldrh	r3, [r7, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d136      	bne.n	800332e <touch_Adjust+0x31e>
					{
						cnt=0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80032c6:	4b7a      	ldr	r3, [pc, #488]	@ (80034b0 <touch_Adjust+0x4a0>)
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	3b14      	subs	r3, #20
 80032cc:	b298      	uxth	r0, r3
 80032ce:	4b78      	ldr	r3, [pc, #480]	@ (80034b0 <touch_Adjust+0x4a0>)
 80032d0:	885b      	ldrh	r3, [r3, #2]
 80032d2:	3b14      	subs	r3, #20
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032da:	4619      	mov	r1, r3
 80032dc:	f7ff fd7e 	bl	8002ddc <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80032e0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80032e4:	2114      	movs	r1, #20
 80032e6:	2014      	movs	r0, #20
 80032e8:	f7ff fd78 	bl	8002ddc <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80032ec:	2300      	movs	r3, #0
 80032ee:	9302      	str	r3, [sp, #8]
 80032f0:	2310      	movs	r3, #16
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80032fe:	4a6d      	ldr	r2, [pc, #436]	@ (80034b4 <touch_Adjust+0x4a4>)
 8003300:	2128      	movs	r1, #40	@ 0x28
 8003302:	2005      	movs	r0, #5
 8003304:	f7fe fe7a 	bl	8001ffc <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003308:	2300      	movs	r3, #0
 800330a:	9302      	str	r3, [sp, #8]
 800330c:	2310      	movs	r3, #16
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800331a:	4a67      	ldr	r2, [pc, #412]	@ (80034b8 <touch_Adjust+0x4a8>)
 800331c:	213c      	movs	r1, #60	@ 0x3c
 800331e:	2005      	movs	r0, #5
 8003320:	f7fe fe6c 	bl	8001ffc <lcd_ShowStr>
						HAL_Delay(1000);
 8003324:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003328:	f000 fb24 	bl	8003974 <HAL_Delay>
 						continue;
 800332c:	e225      	b.n	800377a <touch_Adjust+0x76a>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 800332e:	883b      	ldrh	r3, [r7, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	893b      	ldrh	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	bfb8      	it	lt
 800333a:	425b      	neglt	r3, r3
 800333c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	461a      	mov	r2, r3
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	bfb8      	it	lt
 800334a:	425b      	neglt	r3, r3
 800334c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	fb03 f303 	mul.w	r3, r3, r3
 8003354:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fb03 f303 	mul.w	r3, r3, r3
 800335c:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800335e:	6a3a      	ldr	r2, [r7, #32]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	4413      	add	r3, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd f871 	bl	800044c <__aeabi_ui2d>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	ec43 2b10 	vmov	d0, r2, r3
 8003372:	f004 fb39 	bl	80079e8 <sqrt>
 8003376:	ec53 2b10 	vmov	r2, r3, d0
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	f7fd fb8f 	bl	8000aa0 <__aeabi_d2uiz>
 8003382:	4603      	mov	r3, r0
 8003384:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8003386:	88bb      	ldrh	r3, [r7, #4]
 8003388:	461a      	mov	r2, r3
 800338a:	89bb      	ldrh	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	bfb8      	it	lt
 8003392:	425b      	neglt	r3, r3
 8003394:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	461a      	mov	r2, r3
 800339a:	89fb      	ldrh	r3, [r7, #14]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bfb8      	it	lt
 80033a2:	425b      	neglt	r3, r3
 80033a4:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	fb03 f303 	mul.w	r3, r3, r3
 80033ac:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fb03 f303 	mul.w	r3, r3, r3
 80033b4:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80033b6:	6a3a      	ldr	r2, [r7, #32]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4413      	add	r3, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd f845 	bl	800044c <__aeabi_ui2d>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	ec43 2b10 	vmov	d0, r2, r3
 80033ca:	f004 fb0d 	bl	80079e8 <sqrt>
 80033ce:	ec53 2b10 	vmov	r2, r3, d0
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	f7fd fb63 	bl	8000aa0 <__aeabi_d2uiz>
 80033da:	4603      	mov	r3, r0
 80033dc:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80033de:	8b7b      	ldrh	r3, [r7, #26]
 80033e0:	ee07 3a90 	vmov	s15, r3
 80033e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033e8:	8b3b      	ldrh	r3, [r7, #24]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033f6:	ee16 0a90 	vmov	r0, s13
 80033fa:	f7fd f849 	bl	8000490 <__aeabi_f2d>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003406:	a326      	add	r3, pc, #152	@ (adr r3, 80034a0 <touch_Adjust+0x490>)
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003410:	f7fd fb08 	bl	8000a24 <__aeabi_dcmplt>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <touch_Adjust+0x41e>
 800341a:	a323      	add	r3, pc, #140	@ (adr r3, 80034a8 <touch_Adjust+0x498>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003424:	f7fd fb1c 	bl	8000a60 <__aeabi_dcmpgt>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d046      	beq.n	80034bc <touch_Adjust+0x4ac>
					{
						cnt=0;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003434:	4b1e      	ldr	r3, [pc, #120]	@ (80034b0 <touch_Adjust+0x4a0>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	3b14      	subs	r3, #20
 800343a:	b298      	uxth	r0, r3
 800343c:	4b1c      	ldr	r3, [pc, #112]	@ (80034b0 <touch_Adjust+0x4a0>)
 800343e:	885b      	ldrh	r3, [r3, #2]
 8003440:	3b14      	subs	r3, #20
 8003442:	b29b      	uxth	r3, r3
 8003444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003448:	4619      	mov	r1, r3
 800344a:	f7ff fcc7 	bl	8002ddc <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 800344e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003452:	2114      	movs	r1, #20
 8003454:	2014      	movs	r0, #20
 8003456:	f7ff fcc1 	bl	8002ddc <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800345a:	2300      	movs	r3, #0
 800345c:	9302      	str	r3, [sp, #8]
 800345e:	2310      	movs	r3, #16
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800346c:	4a11      	ldr	r2, [pc, #68]	@ (80034b4 <touch_Adjust+0x4a4>)
 800346e:	2128      	movs	r1, #40	@ 0x28
 8003470:	2005      	movs	r0, #5
 8003472:	f7fe fdc3 	bl	8001ffc <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003476:	2300      	movs	r3, #0
 8003478:	9302      	str	r3, [sp, #8]
 800347a:	2310      	movs	r3, #16
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003488:	4a0b      	ldr	r2, [pc, #44]	@ (80034b8 <touch_Adjust+0x4a8>)
 800348a:	213c      	movs	r1, #60	@ 0x3c
 800348c:	2005      	movs	r0, #5
 800348e:	f7fe fdb5 	bl	8001ffc <lcd_ShowStr>
						HAL_Delay(1000);
 8003492:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003496:	f000 fa6d 	bl	8003974 <HAL_Delay>
						continue;
 800349a:	e16e      	b.n	800377a <touch_Adjust+0x76a>
 800349c:	f3af 8000 	nop.w
 80034a0:	66666666 	.word	0x66666666
 80034a4:	3fee6666 	.word	0x3fee6666
 80034a8:	cccccccd 	.word	0xcccccccd
 80034ac:	3ff0cccc 	.word	0x3ff0cccc
 80034b0:	2000021c 	.word	0x2000021c
 80034b4:	08007c5c 	.word	0x08007c5c
 80034b8:	08007c7c 	.word	0x08007c7c
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 80034bc:	88bb      	ldrh	r3, [r7, #4]
 80034be:	461a      	mov	r2, r3
 80034c0:	893b      	ldrh	r3, [r7, #8]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bfb8      	it	lt
 80034c8:	425b      	neglt	r3, r3
 80034ca:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	461a      	mov	r2, r3
 80034d0:	897b      	ldrh	r3, [r7, #10]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bfb8      	it	lt
 80034d8:	425b      	neglt	r3, r3
 80034da:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	fb03 f303 	mul.w	r3, r3, r3
 80034e2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	fb03 f303 	mul.w	r3, r3, r3
 80034ea:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80034ec:	6a3a      	ldr	r2, [r7, #32]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fc ffaa 	bl	800044c <__aeabi_ui2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	ec43 2b10 	vmov	d0, r2, r3
 8003500:	f004 fa72 	bl	80079e8 <sqrt>
 8003504:	ec53 2b10 	vmov	r2, r3, d0
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	f7fd fac8 	bl	8000aa0 <__aeabi_d2uiz>
 8003510:	4603      	mov	r3, r0
 8003512:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8003514:	883b      	ldrh	r3, [r7, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	89bb      	ldrh	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	bfb8      	it	lt
 8003520:	425b      	neglt	r3, r3
 8003522:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8003524:	887b      	ldrh	r3, [r7, #2]
 8003526:	461a      	mov	r2, r3
 8003528:	89fb      	ldrh	r3, [r7, #14]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	bfb8      	it	lt
 8003530:	425b      	neglt	r3, r3
 8003532:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	fb03 f303 	mul.w	r3, r3, r3
 800353a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	fb03 f303 	mul.w	r3, r3, r3
 8003542:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003544:	6a3a      	ldr	r2, [r7, #32]
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f7fc ff7e 	bl	800044c <__aeabi_ui2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	ec43 2b10 	vmov	d0, r2, r3
 8003558:	f004 fa46 	bl	80079e8 <sqrt>
 800355c:	ec53 2b10 	vmov	r2, r3, d0
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f7fd fa9c 	bl	8000aa0 <__aeabi_d2uiz>
 8003568:	4603      	mov	r3, r0
 800356a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800356c:	8b7b      	ldrh	r3, [r7, #26]
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003576:	8b3b      	ldrh	r3, [r7, #24]
 8003578:	ee07 3a90 	vmov	s15, r3
 800357c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003580:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003584:	ee16 0a90 	vmov	r0, s13
 8003588:	f7fc ff82 	bl	8000490 <__aeabi_f2d>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003594:	a383      	add	r3, pc, #524	@ (adr r3, 80037a4 <touch_Adjust+0x794>)
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800359e:	f7fd fa41 	bl	8000a24 <__aeabi_dcmplt>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d109      	bne.n	80035bc <touch_Adjust+0x5ac>
 80035a8:	a380      	add	r3, pc, #512	@ (adr r3, 80037ac <touch_Adjust+0x79c>)
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035b2:	f7fd fa55 	bl	8000a60 <__aeabi_dcmpgt>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d036      	beq.n	800362a <touch_Adjust+0x61a>
					{
						cnt=0;
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80035c2:	4b71      	ldr	r3, [pc, #452]	@ (8003788 <touch_Adjust+0x778>)
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	3b14      	subs	r3, #20
 80035c8:	b298      	uxth	r0, r3
 80035ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003788 <touch_Adjust+0x778>)
 80035cc:	885b      	ldrh	r3, [r3, #2]
 80035ce:	3b14      	subs	r3, #20
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035d6:	4619      	mov	r1, r3
 80035d8:	f7ff fc00 	bl	8002ddc <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80035dc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80035e0:	2114      	movs	r1, #20
 80035e2:	2014      	movs	r0, #20
 80035e4:	f7ff fbfa 	bl	8002ddc <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80035e8:	2300      	movs	r3, #0
 80035ea:	9302      	str	r3, [sp, #8]
 80035ec:	2310      	movs	r3, #16
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80035fa:	4a64      	ldr	r2, [pc, #400]	@ (800378c <touch_Adjust+0x77c>)
 80035fc:	2128      	movs	r1, #40	@ 0x28
 80035fe:	2005      	movs	r0, #5
 8003600:	f7fe fcfc 	bl	8001ffc <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003604:	2300      	movs	r3, #0
 8003606:	9302      	str	r3, [sp, #8]
 8003608:	2310      	movs	r3, #16
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003616:	4a5e      	ldr	r2, [pc, #376]	@ (8003790 <touch_Adjust+0x780>)
 8003618:	213c      	movs	r1, #60	@ 0x3c
 800361a:	2005      	movs	r0, #5
 800361c:	f7fe fcee 	bl	8001ffc <lcd_ShowStr>

						HAL_Delay(1000);
 8003620:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003624:	f000 f9a6 	bl	8003974 <HAL_Delay>
 							continue;
 8003628:	e0a7      	b.n	800377a <touch_Adjust+0x76a>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 800362a:	4b57      	ldr	r3, [pc, #348]	@ (8003788 <touch_Adjust+0x778>)
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	3b28      	subs	r3, #40	@ 0x28
 8003630:	ee07 3a90 	vmov	s15, r3
 8003634:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003638:	88bb      	ldrh	r3, [r7, #4]
 800363a:	461a      	mov	r2, r3
 800363c:	883b      	ldrh	r3, [r7, #0]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	ee07 3a90 	vmov	s15, r3
 8003644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800364c:	4b51      	ldr	r3, [pc, #324]	@ (8003794 <touch_Adjust+0x784>)
 800364e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8003652:	4b4d      	ldr	r3, [pc, #308]	@ (8003788 <touch_Adjust+0x778>)
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800365e:	4b4d      	ldr	r3, [pc, #308]	@ (8003794 <touch_Adjust+0x784>)
 8003660:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8003664:	88bb      	ldrh	r3, [r7, #4]
 8003666:	461a      	mov	r2, r3
 8003668:	883b      	ldrh	r3, [r7, #0]
 800366a:	4413      	add	r3, r2
 800366c:	ee07 3a90 	vmov	s15, r3
 8003670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800367c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003680:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003688:	ee17 3a90 	vmov	r3, s15
 800368c:	b21a      	sxth	r2, r3
 800368e:	4b41      	ldr	r3, [pc, #260]	@ (8003794 <touch_Adjust+0x784>)
 8003690:	859a      	strh	r2, [r3, #44]	@ 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8003692:	4b3d      	ldr	r3, [pc, #244]	@ (8003788 <touch_Adjust+0x778>)
 8003694:	885b      	ldrh	r3, [r3, #2]
 8003696:	3b28      	subs	r3, #40	@ 0x28
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036a0:	897b      	ldrh	r3, [r7, #10]
 80036a2:	461a      	mov	r2, r3
 80036a4:	887b      	ldrh	r3, [r7, #2]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036b4:	4b37      	ldr	r3, [pc, #220]	@ (8003794 <touch_Adjust+0x784>)
 80036b6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 80036ba:	4b33      	ldr	r3, [pc, #204]	@ (8003788 <touch_Adjust+0x778>)
 80036bc:	885b      	ldrh	r3, [r3, #2]
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036c6:	4b33      	ldr	r3, [pc, #204]	@ (8003794 <touch_Adjust+0x784>)
 80036c8:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80036cc:	897b      	ldrh	r3, [r7, #10]
 80036ce:	461a      	mov	r2, r3
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	4413      	add	r3, r2
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80036e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f0:	ee17 3a90 	vmov	r3, s15
 80036f4:	b21a      	sxth	r2, r3
 80036f6:	4b27      	ldr	r3, [pc, #156]	@ (8003794 <touch_Adjust+0x784>)
 80036f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80036fa:	4b23      	ldr	r3, [pc, #140]	@ (8003788 <touch_Adjust+0x778>)
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	3b14      	subs	r3, #20
 8003700:	b298      	uxth	r0, r3
 8003702:	4b21      	ldr	r3, [pc, #132]	@ (8003788 <touch_Adjust+0x778>)
 8003704:	885b      	ldrh	r3, [r3, #2]
 8003706:	3b14      	subs	r3, #20
 8003708:	b29b      	uxth	r3, r3
 800370a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800370e:	4619      	mov	r1, r3
 8003710:	f7ff fb64 	bl	8002ddc <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8003714:	2300      	movs	r3, #0
 8003716:	9302      	str	r3, [sp, #8]
 8003718:	2310      	movs	r3, #16
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003726:	4a1c      	ldr	r2, [pc, #112]	@ (8003798 <touch_Adjust+0x788>)
 8003728:	2128      	movs	r1, #40	@ 0x28
 800372a:	2005      	movs	r0, #5
 800372c:	f7fe fc66 	bl	8001ffc <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8003730:	2300      	movs	r3, #0
 8003732:	9302      	str	r3, [sp, #8]
 8003734:	2310      	movs	r3, #16
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003742:	4a16      	ldr	r2, [pc, #88]	@ (800379c <touch_Adjust+0x78c>)
 8003744:	213c      	movs	r1, #60	@ 0x3c
 8003746:	2005      	movs	r0, #5
 8003748:	f7fe fc58 	bl	8001ffc <lcd_ShowStr>
					HAL_Delay(1000);
 800374c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003750:	f000 f910 	bl	8003974 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8003754:	2300      	movs	r3, #0
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	2310      	movs	r3, #16
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003766:	4a0e      	ldr	r2, [pc, #56]	@ (80037a0 <touch_Adjust+0x790>)
 8003768:	2128      	movs	r1, #40	@ 0x28
 800376a:	2005      	movs	r0, #5
 800376c:	f7fe fc46 	bl	8001ffc <lcd_ShowStr>
					TP_Save_Adjdata();
 8003770:	f7ff fc22 	bl	8002fb8 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8003774:	f7ff fc30 	bl	8002fd8 <TP_Get_Adjdata>
					return;
 8003778:	e000      	b.n	800377c <touch_Adjust+0x76c>
		HAL_Delay(50);
 800377a:	e495      	b.n	80030a8 <touch_Adjust+0x98>
			}
		}
 	}
}
 800377c:	3728      	adds	r7, #40	@ 0x28
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	f3af 8000 	nop.w
 8003788:	2000021c 	.word	0x2000021c
 800378c:	08007c5c 	.word	0x08007c5c
 8003790:	08007c7c 	.word	0x08007c7c
 8003794:	2000000c 	.word	0x2000000c
 8003798:	08007c9c 	.word	0x08007c9c
 800379c:	08007cbc 	.word	0x08007cbc
 80037a0:	08007cdc 	.word	0x08007cdc
 80037a4:	66666666 	.word	0x66666666
 80037a8:	3fee6666 	.word	0x3fee6666
 80037ac:	cccccccd 	.word	0xcccccccd
 80037b0:	3ff0cccc 	.word	0x3ff0cccc

080037b4 <touch_init>:

void touch_init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 80037b8:	4904      	ldr	r1, [pc, #16]	@ (80037cc <touch_init+0x18>)
 80037ba:	4805      	ldr	r0, [pc, #20]	@ (80037d0 <touch_init+0x1c>)
 80037bc:	f7ff fa8a 	bl	8002cd4 <TP_Read_XY>
	at24c_init();
 80037c0:	f7fd fc24 	bl	800100c <at24c_init>
	TP_Get_Adjdata();
 80037c4:	f7ff fc08 	bl	8002fd8 <TP_Get_Adjdata>
}
 80037c8:	bf00      	nop
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000022 	.word	0x20000022
 80037d0:	20000018 	.word	0x20000018

080037d4 <touch_Scan>:

void touch_Scan(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 80037d8:	4b02      	ldr	r3, [pc, #8]	@ (80037e4 <touch_Scan+0x10>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2000      	movs	r0, #0
 80037de:	4798      	blx	r3
}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	2000000c 	.word	0x2000000c

080037e8 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 80037ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037f0:	4805      	ldr	r0, [pc, #20]	@ (8003808 <touch_IsTouched+0x20>)
 80037f2:	f001 f8dd 	bl	80049b0 <HAL_GPIO_ReadPin>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
}
 8003802:	4618      	mov	r0, r3
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40020800 	.word	0x40020800

0800380c <touch_GetX>:

uint16_t touch_GetX(){
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8003810:	4b03      	ldr	r3, [pc, #12]	@ (8003820 <touch_GetX+0x14>)
 8003812:	899b      	ldrh	r3, [r3, #12]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	2000000c 	.word	0x2000000c

08003824 <touch_GetY>:

uint16_t touch_GetY(){
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8003828:	4b03      	ldr	r3, [pc, #12]	@ (8003838 <touch_GetY+0x14>)
 800382a:	8adb      	ldrh	r3, [r3, #22]
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	2000000c 	.word	0x2000000c

0800383c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800383c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003840:	480d      	ldr	r0, [pc, #52]	@ (8003878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003842:	490e      	ldr	r1, [pc, #56]	@ (800387c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003844:	4a0e      	ldr	r2, [pc, #56]	@ (8003880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003848:	e002      	b.n	8003850 <LoopCopyDataInit>

0800384a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800384a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800384c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800384e:	3304      	adds	r3, #4

08003850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003854:	d3f9      	bcc.n	800384a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003856:	4a0b      	ldr	r2, [pc, #44]	@ (8003884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003858:	4c0b      	ldr	r4, [pc, #44]	@ (8003888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800385a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800385c:	e001      	b.n	8003862 <LoopFillZerobss>

0800385e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800385e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003860:	3204      	adds	r2, #4

08003862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003864:	d3fb      	bcc.n	800385e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003866:	f7fe ff87 	bl	8002778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800386a:	f004 f899 	bl	80079a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800386e:	f7fe fcb5 	bl	80021dc <main>
  bx  lr    
 8003872:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800387c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8003880:	0800aca4 	.word	0x0800aca4
  ldr r2, =_sbss
 8003884:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8003888:	200004a0 	.word	0x200004a0

0800388c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800388c:	e7fe      	b.n	800388c <ADC_IRQHandler>
	...

08003890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003894:	4b0e      	ldr	r3, [pc, #56]	@ (80038d0 <HAL_Init+0x40>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0d      	ldr	r2, [pc, #52]	@ (80038d0 <HAL_Init+0x40>)
 800389a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800389e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <HAL_Init+0x40>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0a      	ldr	r2, [pc, #40]	@ (80038d0 <HAL_Init+0x40>)
 80038a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038ac:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <HAL_Init+0x40>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a07      	ldr	r2, [pc, #28]	@ (80038d0 <HAL_Init+0x40>)
 80038b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b8:	2003      	movs	r0, #3
 80038ba:	f000 fbb1 	bl	8004020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038be:	200f      	movs	r0, #15
 80038c0:	f000 f808 	bl	80038d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038c4:	f7fe feec 	bl	80026a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023c00 	.word	0x40023c00

080038d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038dc:	4b12      	ldr	r3, [pc, #72]	@ (8003928 <HAL_InitTick+0x54>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b12      	ldr	r3, [pc, #72]	@ (800392c <HAL_InitTick+0x58>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4619      	mov	r1, r3
 80038e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fbc9 	bl	800408a <HAL_SYSTICK_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e00e      	b.n	8003920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b0f      	cmp	r3, #15
 8003906:	d80a      	bhi.n	800391e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003908:	2200      	movs	r2, #0
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003910:	f000 fb91 	bl	8004036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003914:	4a06      	ldr	r2, [pc, #24]	@ (8003930 <HAL_InitTick+0x5c>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000008 	.word	0x20000008
 800392c:	20000048 	.word	0x20000048
 8003930:	20000044 	.word	0x20000044

08003934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003938:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_IncTick+0x20>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <HAL_IncTick+0x24>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4413      	add	r3, r2
 8003944:	4a04      	ldr	r2, [pc, #16]	@ (8003958 <HAL_IncTick+0x24>)
 8003946:	6013      	str	r3, [r2, #0]
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000048 	.word	0x20000048
 8003958:	20000364 	.word	0x20000364

0800395c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return uwTick;
 8003960:	4b03      	ldr	r3, [pc, #12]	@ (8003970 <HAL_GetTick+0x14>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000364 	.word	0x20000364

08003974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800397c:	f7ff ffee 	bl	800395c <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800398c:	d005      	beq.n	800399a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800398e:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <HAL_Delay+0x44>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800399a:	bf00      	nop
 800399c:	f7ff ffde 	bl	800395c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d8f7      	bhi.n	800399c <HAL_Delay+0x28>
  {
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000048 	.word	0x20000048

080039bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e033      	b.n	8003a3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fd fa82 	bl	8000ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d118      	bne.n	8003a2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a02:	f023 0302 	bic.w	r3, r3, #2
 8003a06:	f043 0202 	orr.w	r2, r3, #2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f93a 	bl	8003c88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a2a:	e001      	b.n	8003a30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x1c>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e105      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x228>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d925      	bls.n	8003abc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68d9      	ldr	r1, [r3, #12]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	3b1e      	subs	r3, #30
 8003a86:	2207      	movs	r2, #7
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43da      	mvns	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	400a      	ands	r2, r1
 8003a94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68d9      	ldr	r1, [r3, #12]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4403      	add	r3, r0
 8003aae:	3b1e      	subs	r3, #30
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	e022      	b.n	8003b02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6919      	ldr	r1, [r3, #16]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	400a      	ands	r2, r1
 8003ade:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6919      	ldr	r1, [r3, #16]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	4618      	mov	r0, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4403      	add	r3, r0
 8003af8:	409a      	lsls	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d824      	bhi.n	8003b54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	3b05      	subs	r3, #5
 8003b1c:	221f      	movs	r2, #31
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43da      	mvns	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	400a      	ands	r2, r1
 8003b2a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4618      	mov	r0, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	3b05      	subs	r3, #5
 8003b46:	fa00 f203 	lsl.w	r2, r0, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b52:	e04c      	b.n	8003bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b0c      	cmp	r3, #12
 8003b5a:	d824      	bhi.n	8003ba6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3b23      	subs	r3, #35	@ 0x23
 8003b6e:	221f      	movs	r2, #31
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43da      	mvns	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	3b23      	subs	r3, #35	@ 0x23
 8003b98:	fa00 f203 	lsl.w	r2, r0, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ba4:	e023      	b.n	8003bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3b41      	subs	r3, #65	@ 0x41
 8003bb8:	221f      	movs	r2, #31
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	3b41      	subs	r3, #65	@ 0x41
 8003be2:	fa00 f203 	lsl.w	r2, r0, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bee:	4b22      	ldr	r3, [pc, #136]	@ (8003c78 <HAL_ADC_ConfigChannel+0x234>)
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a21      	ldr	r2, [pc, #132]	@ (8003c7c <HAL_ADC_ConfigChannel+0x238>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d109      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x1cc>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b12      	cmp	r3, #18
 8003c02:	d105      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a19      	ldr	r2, [pc, #100]	@ (8003c7c <HAL_ADC_ConfigChannel+0x238>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d123      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x21e>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d003      	beq.n	8003c2a <HAL_ADC_ConfigChannel+0x1e6>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b11      	cmp	r3, #17
 8003c28:	d11b      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b10      	cmp	r3, #16
 8003c3c:	d111      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c3e:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <HAL_ADC_ConfigChannel+0x23c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a10      	ldr	r2, [pc, #64]	@ (8003c84 <HAL_ADC_ConfigChannel+0x240>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	0c9a      	lsrs	r2, r3, #18
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c54:	e002      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f9      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40012300 	.word	0x40012300
 8003c7c:	40012000 	.word	0x40012000
 8003c80:	20000008 	.word	0x20000008
 8003c84:	431bde83 	.word	0x431bde83

08003c88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c90:	4b79      	ldr	r3, [pc, #484]	@ (8003e78 <ADC_Init+0x1f0>)
 8003c92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	021a      	lsls	r2, r3, #8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6859      	ldr	r1, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1a:	4a58      	ldr	r2, [pc, #352]	@ (8003e7c <ADC_Init+0x1f4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d022      	beq.n	8003d66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6899      	ldr	r1, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	e00f      	b.n	8003d86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0202 	bic.w	r2, r2, #2
 8003d94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6899      	ldr	r1, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7e1b      	ldrb	r3, [r3, #24]
 8003da0:	005a      	lsls	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01b      	beq.n	8003dec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003dd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6859      	ldr	r1, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	3b01      	subs	r3, #1
 8003de0:	035a      	lsls	r2, r3, #13
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	e007      	b.n	8003dfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	051a      	lsls	r2, r3, #20
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6899      	ldr	r1, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e3e:	025a      	lsls	r2, r3, #9
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6899      	ldr	r1, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	029a      	lsls	r2, r3, #10
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40012300 	.word	0x40012300
 8003e7c:	0f000001 	.word	0x0f000001

08003e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	@ (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	60d3      	str	r3, [r2, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 0307 	and.w	r3, r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db0b      	blt.n	8003f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4907      	ldr	r1, [pc, #28]	@ (8003f1c <__NVIC_EnableIRQ+0x38>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	db0a      	blt.n	8003f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	490c      	ldr	r1, [pc, #48]	@ (8003f6c <__NVIC_SetPriority+0x4c>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	0112      	lsls	r2, r2, #4
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	440b      	add	r3, r1
 8003f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f48:	e00a      	b.n	8003f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4908      	ldr	r1, [pc, #32]	@ (8003f70 <__NVIC_SetPriority+0x50>)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3b04      	subs	r3, #4
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	761a      	strb	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b089      	sub	sp, #36	@ 0x24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	bf28      	it	cs
 8003f92:	2304      	movcs	r3, #4
 8003f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d902      	bls.n	8003fa4 <NVIC_EncodePriority+0x30>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3b03      	subs	r3, #3
 8003fa2:	e000      	b.n	8003fa6 <NVIC_EncodePriority+0x32>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43d9      	mvns	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	4313      	orrs	r3, r2
         );
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	@ 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fec:	d301      	bcc.n	8003ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e00f      	b.n	8004012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800401c <SysTick_Config+0x40>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffa:	210f      	movs	r1, #15
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004000:	f7ff ff8e 	bl	8003f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004004:	4b05      	ldr	r3, [pc, #20]	@ (800401c <SysTick_Config+0x40>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400a:	4b04      	ldr	r3, [pc, #16]	@ (800401c <SysTick_Config+0x40>)
 800400c:	2207      	movs	r2, #7
 800400e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	e000e010 	.word	0xe000e010

08004020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff29 	bl	8003e80 <__NVIC_SetPriorityGrouping>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004048:	f7ff ff3e 	bl	8003ec8 <__NVIC_GetPriorityGrouping>
 800404c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7ff ff8e 	bl	8003f74 <NVIC_EncodePriority>
 8004058:	4602      	mov	r2, r0
 800405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff5d 	bl	8003f20 <__NVIC_SetPriority>
}
 8004066:	bf00      	nop
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	4603      	mov	r3, r0
 8004076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff31 	bl	8003ee4 <__NVIC_EnableIRQ>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ffa2 	bl	8003fdc <SysTick_Config>
 8004098:	4603      	mov	r3, r0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040b0:	f7ff fc54 	bl	800395c <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e099      	b.n	80041f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e0:	e00f      	b.n	8004102 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040e2:	f7ff fc3b 	bl	800395c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d908      	bls.n	8004102 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2203      	movs	r2, #3
 80040fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e078      	b.n	80041f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e8      	bne.n	80040e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4b38      	ldr	r3, [pc, #224]	@ (80041fc <HAL_DMA_Init+0x158>)
 800411c:	4013      	ands	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800412e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800413a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004146:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	2b04      	cmp	r3, #4
 800415a:	d107      	bne.n	800416c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004164:	4313      	orrs	r3, r2
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f023 0307 	bic.w	r3, r3, #7
 8004182:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	2b04      	cmp	r3, #4
 8004194:	d117      	bne.n	80041c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00e      	beq.n	80041c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f9e9 	bl	8004580 <DMA_CheckFifoParam>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2240      	movs	r2, #64	@ 0x40
 80041b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80041c2:	2301      	movs	r3, #1
 80041c4:	e016      	b.n	80041f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f9a0 	bl	8004514 <DMA_CalcBaseAndBitshift>
 80041d4:	4603      	mov	r3, r0
 80041d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	223f      	movs	r2, #63	@ 0x3f
 80041de:	409a      	lsls	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	f010803f 	.word	0xf010803f

08004200 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800420c:	4b8e      	ldr	r3, [pc, #568]	@ (8004448 <HAL_DMA_IRQHandler+0x248>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a8e      	ldr	r2, [pc, #568]	@ (800444c <HAL_DMA_IRQHandler+0x24c>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	0a9b      	lsrs	r3, r3, #10
 8004218:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800422a:	2208      	movs	r2, #8
 800422c:	409a      	lsls	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d01a      	beq.n	800426c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d013      	beq.n	800426c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0204 	bic.w	r2, r2, #4
 8004252:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004258:	2208      	movs	r2, #8
 800425a:	409a      	lsls	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004264:	f043 0201 	orr.w	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004270:	2201      	movs	r2, #1
 8004272:	409a      	lsls	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d012      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428e:	2201      	movs	r2, #1
 8004290:	409a      	lsls	r2, r3
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429a:	f043 0202 	orr.w	r2, r3, #2
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a6:	2204      	movs	r2, #4
 80042a8:	409a      	lsls	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d012      	beq.n	80042d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00b      	beq.n	80042d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c4:	2204      	movs	r2, #4
 80042c6:	409a      	lsls	r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d0:	f043 0204 	orr.w	r2, r3, #4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042dc:	2210      	movs	r2, #16
 80042de:	409a      	lsls	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d043      	beq.n	8004370 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d03c      	beq.n	8004370 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fa:	2210      	movs	r2, #16
 80042fc:	409a      	lsls	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d018      	beq.n	8004342 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d108      	bne.n	8004330 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d024      	beq.n	8004370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	4798      	blx	r3
 800432e:	e01f      	b.n	8004370 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01b      	beq.n	8004370 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
 8004340:	e016      	b.n	8004370 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d107      	bne.n	8004360 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0208 	bic.w	r2, r2, #8
 800435e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004374:	2220      	movs	r2, #32
 8004376:	409a      	lsls	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 808f 	beq.w	80044a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 8087 	beq.w	80044a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004396:	2220      	movs	r2, #32
 8004398:	409a      	lsls	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d136      	bne.n	8004418 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0216 	bic.w	r2, r2, #22
 80043b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d103      	bne.n	80043da <HAL_DMA_IRQHandler+0x1da>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0208 	bic.w	r2, r2, #8
 80043e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ee:	223f      	movs	r2, #63	@ 0x3f
 80043f0:	409a      	lsls	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440a:	2b00      	cmp	r3, #0
 800440c:	d07e      	beq.n	800450c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
        }
        return;
 8004416:	e079      	b.n	800450c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01d      	beq.n	8004462 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10d      	bne.n	8004450 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004438:	2b00      	cmp	r3, #0
 800443a:	d031      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
 8004444:	e02c      	b.n	80044a0 <HAL_DMA_IRQHandler+0x2a0>
 8004446:	bf00      	nop
 8004448:	20000008 	.word	0x20000008
 800444c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d023      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4798      	blx	r3
 8004460:	e01e      	b.n	80044a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10f      	bne.n	8004490 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0210 	bic.w	r2, r2, #16
 800447e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d032      	beq.n	800450e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d022      	beq.n	80044fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2205      	movs	r2, #5
 80044b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	3301      	adds	r3, #1
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d307      	bcc.n	80044e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f2      	bne.n	80044cc <HAL_DMA_IRQHandler+0x2cc>
 80044e6:	e000      	b.n	80044ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4798      	blx	r3
 800450a:	e000      	b.n	800450e <HAL_DMA_IRQHandler+0x30e>
        return;
 800450c:	bf00      	nop
    }
  }
}
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	3b10      	subs	r3, #16
 8004524:	4a14      	ldr	r2, [pc, #80]	@ (8004578 <DMA_CalcBaseAndBitshift+0x64>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800452e:	4a13      	ldr	r2, [pc, #76]	@ (800457c <DMA_CalcBaseAndBitshift+0x68>)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d909      	bls.n	8004556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	659a      	str	r2, [r3, #88]	@ 0x58
 8004554:	e007      	b.n	8004566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	aaaaaaab 	.word	0xaaaaaaab
 800457c:	0800ac8c 	.word	0x0800ac8c

08004580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11f      	bne.n	80045da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d856      	bhi.n	800464e <DMA_CheckFifoParam+0xce>
 80045a0:	a201      	add	r2, pc, #4	@ (adr r2, 80045a8 <DMA_CheckFifoParam+0x28>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045cb 	.word	0x080045cb
 80045b0:	080045b9 	.word	0x080045b9
 80045b4:	0800464f 	.word	0x0800464f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d046      	beq.n	8004652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c8:	e043      	b.n	8004652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045d2:	d140      	bne.n	8004656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d8:	e03d      	b.n	8004656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e2:	d121      	bne.n	8004628 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d837      	bhi.n	800465a <DMA_CheckFifoParam+0xda>
 80045ea:	a201      	add	r2, pc, #4	@ (adr r2, 80045f0 <DMA_CheckFifoParam+0x70>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004601 	.word	0x08004601
 80045f4:	08004607 	.word	0x08004607
 80045f8:	08004601 	.word	0x08004601
 80045fc:	08004619 	.word	0x08004619
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      break;
 8004604:	e030      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d025      	beq.n	800465e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004616:	e022      	b.n	800465e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004620:	d11f      	bne.n	8004662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004626:	e01c      	b.n	8004662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d903      	bls.n	8004636 <DMA_CheckFifoParam+0xb6>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d003      	beq.n	800463c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004634:	e018      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
      break;
 800463a:	e015      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00e      	beq.n	8004666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      break;
 800464c:	e00b      	b.n	8004666 <DMA_CheckFifoParam+0xe6>
      break;
 800464e:	bf00      	nop
 8004650:	e00a      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004652:	bf00      	nop
 8004654:	e008      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
 8004658:	e006      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
 800465c:	e004      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;   
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004666:	bf00      	nop
    }
  } 
  
  return status; 
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop

08004678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004678:	b480      	push	{r7}
 800467a:	b089      	sub	sp, #36	@ 0x24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	e16b      	b.n	800496c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004694:	2201      	movs	r2, #1
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4013      	ands	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	f040 815a 	bne.w	8004966 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d005      	beq.n	80046ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d130      	bne.n	800472c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	2203      	movs	r2, #3
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43db      	mvns	r3, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4013      	ands	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004700:	2201      	movs	r2, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 0201 	and.w	r2, r3, #1
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b03      	cmp	r3, #3
 8004736:	d017      	beq.n	8004768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	2203      	movs	r2, #3
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d123      	bne.n	80047bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	08da      	lsrs	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3208      	adds	r2, #8
 800477c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	220f      	movs	r2, #15
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	08da      	lsrs	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3208      	adds	r2, #8
 80047b6:	69b9      	ldr	r1, [r7, #24]
 80047b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	2203      	movs	r2, #3
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4013      	ands	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 0203 	and.w	r2, r3, #3
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80b4 	beq.w	8004966 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	4b60      	ldr	r3, [pc, #384]	@ (8004984 <HAL_GPIO_Init+0x30c>)
 8004804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004806:	4a5f      	ldr	r2, [pc, #380]	@ (8004984 <HAL_GPIO_Init+0x30c>)
 8004808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800480c:	6453      	str	r3, [r2, #68]	@ 0x44
 800480e:	4b5d      	ldr	r3, [pc, #372]	@ (8004984 <HAL_GPIO_Init+0x30c>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800481a:	4a5b      	ldr	r2, [pc, #364]	@ (8004988 <HAL_GPIO_Init+0x310>)
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	3302      	adds	r3, #2
 8004822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	220f      	movs	r2, #15
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43db      	mvns	r3, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a52      	ldr	r2, [pc, #328]	@ (800498c <HAL_GPIO_Init+0x314>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d02b      	beq.n	800489e <HAL_GPIO_Init+0x226>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a51      	ldr	r2, [pc, #324]	@ (8004990 <HAL_GPIO_Init+0x318>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d025      	beq.n	800489a <HAL_GPIO_Init+0x222>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a50      	ldr	r2, [pc, #320]	@ (8004994 <HAL_GPIO_Init+0x31c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d01f      	beq.n	8004896 <HAL_GPIO_Init+0x21e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a4f      	ldr	r2, [pc, #316]	@ (8004998 <HAL_GPIO_Init+0x320>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d019      	beq.n	8004892 <HAL_GPIO_Init+0x21a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a4e      	ldr	r2, [pc, #312]	@ (800499c <HAL_GPIO_Init+0x324>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <HAL_GPIO_Init+0x216>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a4d      	ldr	r2, [pc, #308]	@ (80049a0 <HAL_GPIO_Init+0x328>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00d      	beq.n	800488a <HAL_GPIO_Init+0x212>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a4c      	ldr	r2, [pc, #304]	@ (80049a4 <HAL_GPIO_Init+0x32c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d007      	beq.n	8004886 <HAL_GPIO_Init+0x20e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a4b      	ldr	r2, [pc, #300]	@ (80049a8 <HAL_GPIO_Init+0x330>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d101      	bne.n	8004882 <HAL_GPIO_Init+0x20a>
 800487e:	2307      	movs	r3, #7
 8004880:	e00e      	b.n	80048a0 <HAL_GPIO_Init+0x228>
 8004882:	2308      	movs	r3, #8
 8004884:	e00c      	b.n	80048a0 <HAL_GPIO_Init+0x228>
 8004886:	2306      	movs	r3, #6
 8004888:	e00a      	b.n	80048a0 <HAL_GPIO_Init+0x228>
 800488a:	2305      	movs	r3, #5
 800488c:	e008      	b.n	80048a0 <HAL_GPIO_Init+0x228>
 800488e:	2304      	movs	r3, #4
 8004890:	e006      	b.n	80048a0 <HAL_GPIO_Init+0x228>
 8004892:	2303      	movs	r3, #3
 8004894:	e004      	b.n	80048a0 <HAL_GPIO_Init+0x228>
 8004896:	2302      	movs	r3, #2
 8004898:	e002      	b.n	80048a0 <HAL_GPIO_Init+0x228>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_GPIO_Init+0x228>
 800489e:	2300      	movs	r3, #0
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	f002 0203 	and.w	r2, r2, #3
 80048a6:	0092      	lsls	r2, r2, #2
 80048a8:	4093      	lsls	r3, r2
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b0:	4935      	ldr	r1, [pc, #212]	@ (8004988 <HAL_GPIO_Init+0x310>)
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	089b      	lsrs	r3, r3, #2
 80048b6:	3302      	adds	r3, #2
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048be:	4b3b      	ldr	r3, [pc, #236]	@ (80049ac <HAL_GPIO_Init+0x334>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	43db      	mvns	r3, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4013      	ands	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048e2:	4a32      	ldr	r2, [pc, #200]	@ (80049ac <HAL_GPIO_Init+0x334>)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048e8:	4b30      	ldr	r3, [pc, #192]	@ (80049ac <HAL_GPIO_Init+0x334>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800490c:	4a27      	ldr	r2, [pc, #156]	@ (80049ac <HAL_GPIO_Init+0x334>)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004912:	4b26      	ldr	r3, [pc, #152]	@ (80049ac <HAL_GPIO_Init+0x334>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	43db      	mvns	r3, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4013      	ands	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004936:	4a1d      	ldr	r2, [pc, #116]	@ (80049ac <HAL_GPIO_Init+0x334>)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800493c:	4b1b      	ldr	r3, [pc, #108]	@ (80049ac <HAL_GPIO_Init+0x334>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004960:	4a12      	ldr	r2, [pc, #72]	@ (80049ac <HAL_GPIO_Init+0x334>)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	3301      	adds	r3, #1
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	f67f ae90 	bls.w	8004694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	3724      	adds	r7, #36	@ 0x24
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800
 8004988:	40013800 	.word	0x40013800
 800498c:	40020000 	.word	0x40020000
 8004990:	40020400 	.word	0x40020400
 8004994:	40020800 	.word	0x40020800
 8004998:	40020c00 	.word	0x40020c00
 800499c:	40021000 	.word	0x40021000
 80049a0:	40021400 	.word	0x40021400
 80049a4:	40021800 	.word	0x40021800
 80049a8:	40021c00 	.word	0x40021c00
 80049ac:	40013c00 	.word	0x40013c00

080049b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	e001      	b.n	80049d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
 80049ec:	4613      	mov	r3, r2
 80049ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049f0:	787b      	ldrb	r3, [r7, #1]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049f6:	887a      	ldrh	r2, [r7, #2]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049fc:	e003      	b.n	8004a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	041a      	lsls	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	619a      	str	r2, [r3, #24]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a24:	887a      	ldrh	r2, [r7, #2]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	041a      	lsls	r2, r3, #16
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	43d9      	mvns	r1, r3
 8004a30:	887b      	ldrh	r3, [r7, #2]
 8004a32:	400b      	ands	r3, r1
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	619a      	str	r2, [r3, #24]
}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e12b      	b.n	8004cb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc fdae 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	@ 0x24
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0201 	bic.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004aac:	f001 fbfc 	bl	80062a8 <HAL_RCC_GetPCLK1Freq>
 8004ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4a81      	ldr	r2, [pc, #516]	@ (8004cbc <HAL_I2C_Init+0x274>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d807      	bhi.n	8004acc <HAL_I2C_Init+0x84>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a80      	ldr	r2, [pc, #512]	@ (8004cc0 <HAL_I2C_Init+0x278>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	bf94      	ite	ls
 8004ac4:	2301      	movls	r3, #1
 8004ac6:	2300      	movhi	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e006      	b.n	8004ada <HAL_I2C_Init+0x92>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a7d      	ldr	r2, [pc, #500]	@ (8004cc4 <HAL_I2C_Init+0x27c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	bf94      	ite	ls
 8004ad4:	2301      	movls	r3, #1
 8004ad6:	2300      	movhi	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e0e7      	b.n	8004cb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a78      	ldr	r2, [pc, #480]	@ (8004cc8 <HAL_I2C_Init+0x280>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	0c9b      	lsrs	r3, r3, #18
 8004aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4a6a      	ldr	r2, [pc, #424]	@ (8004cbc <HAL_I2C_Init+0x274>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d802      	bhi.n	8004b1c <HAL_I2C_Init+0xd4>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	e009      	b.n	8004b30 <HAL_I2C_Init+0xe8>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	4a69      	ldr	r2, [pc, #420]	@ (8004ccc <HAL_I2C_Init+0x284>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	3301      	adds	r3, #1
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	495c      	ldr	r1, [pc, #368]	@ (8004cbc <HAL_I2C_Init+0x274>)
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	d819      	bhi.n	8004b84 <HAL_I2C_Init+0x13c>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1e59      	subs	r1, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b5e:	1c59      	adds	r1, r3, #1
 8004b60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b64:	400b      	ands	r3, r1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_I2C_Init+0x138>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1e59      	subs	r1, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b78:	3301      	adds	r3, #1
 8004b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7e:	e051      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004b80:	2304      	movs	r3, #4
 8004b82:	e04f      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d111      	bne.n	8004bb0 <HAL_I2C_Init+0x168>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1e58      	subs	r0, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6859      	ldr	r1, [r3, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	440b      	add	r3, r1
 8004b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e012      	b.n	8004bd6 <HAL_I2C_Init+0x18e>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1e58      	subs	r0, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	0099      	lsls	r1, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_I2C_Init+0x196>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e022      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10e      	bne.n	8004c04 <HAL_I2C_Init+0x1bc>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1e58      	subs	r0, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6859      	ldr	r1, [r3, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	440b      	add	r3, r1
 8004bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c02:	e00f      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	1e58      	subs	r0, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	0099      	lsls	r1, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	6809      	ldr	r1, [r1, #0]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6911      	ldr	r1, [r2, #16]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68d2      	ldr	r2, [r2, #12]
 8004c5e:	4311      	orrs	r1, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	000186a0 	.word	0x000186a0
 8004cc0:	001e847f 	.word	0x001e847f
 8004cc4:	003d08ff 	.word	0x003d08ff
 8004cc8:	431bde83 	.word	0x431bde83
 8004ccc:	10624dd3 	.word	0x10624dd3

08004cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	817b      	strh	r3, [r7, #10]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	813b      	strh	r3, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cea:	f7fe fe37 	bl	800395c <HAL_GetTick>
 8004cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	f040 80d9 	bne.w	8004eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2319      	movs	r3, #25
 8004d04:	2201      	movs	r2, #1
 8004d06:	496d      	ldr	r1, [pc, #436]	@ (8004ebc <HAL_I2C_Mem_Write+0x1ec>)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 fc7f 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
 8004d16:	e0cc      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_I2C_Mem_Write+0x56>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0c5      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d007      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2221      	movs	r2, #33	@ 0x21
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2240      	movs	r2, #64	@ 0x40
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a4d      	ldr	r2, [pc, #308]	@ (8004ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8004d8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d8e:	88f8      	ldrh	r0, [r7, #6]
 8004d90:	893a      	ldrh	r2, [r7, #8]
 8004d92:	8979      	ldrh	r1, [r7, #10]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fab6 	bl	8005310 <I2C_RequestMemoryWrite>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d052      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e081      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fd00 	bl	80057b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06b      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	781a      	ldrb	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d11b      	bne.n	8004e50 <HAL_I2C_Mem_Write+0x180>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d017      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	781a      	ldrb	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1aa      	bne.n	8004dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fcec 	bl	800583a <I2C_WaitOnBTFFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00d      	beq.n	8004e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d107      	bne.n	8004e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e016      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	00100002 	.word	0x00100002
 8004ec0:	ffff0000 	.word	0xffff0000

08004ec4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08c      	sub	sp, #48	@ 0x30
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	817b      	strh	r3, [r7, #10]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	813b      	strh	r3, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ede:	f7fe fd3d 	bl	800395c <HAL_GetTick>
 8004ee2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	f040 8208 	bne.w	8005302 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2319      	movs	r3, #25
 8004ef8:	2201      	movs	r2, #1
 8004efa:	497b      	ldr	r1, [pc, #492]	@ (80050e8 <HAL_I2C_Mem_Read+0x224>)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fb85 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e1fb      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_I2C_Mem_Read+0x56>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e1f4      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d007      	beq.n	8004f40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2222      	movs	r2, #34	@ 0x22
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2240      	movs	r2, #64	@ 0x40
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80050ec <HAL_I2C_Mem_Read+0x228>)
 8004f80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f82:	88f8      	ldrh	r0, [r7, #6]
 8004f84:	893a      	ldrh	r2, [r7, #8]
 8004f86:	8979      	ldrh	r1, [r7, #10]
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4603      	mov	r3, r0
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fa52 	bl	800543c <I2C_RequestMemoryRead>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e1b0      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d113      	bne.n	8004fd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004faa:	2300      	movs	r3, #0
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e184      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d11b      	bne.n	8005012 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e164      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005016:	2b02      	cmp	r3, #2
 8005018:	d11b      	bne.n	8005052 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005028:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	e144      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005068:	e138      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506e:	2b03      	cmp	r3, #3
 8005070:	f200 80f1 	bhi.w	8005256 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005078:	2b01      	cmp	r3, #1
 800507a:	d123      	bne.n	80050c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800507e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fc1b 	bl	80058bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e139      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050c2:	e10b      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d14e      	bne.n	800516a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d2:	2200      	movs	r2, #0
 80050d4:	4906      	ldr	r1, [pc, #24]	@ (80050f0 <HAL_I2C_Mem_Read+0x22c>)
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fa98 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e10e      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
 80050e6:	bf00      	nop
 80050e8:	00100002 	.word	0x00100002
 80050ec:	ffff0000 	.word	0xffff0000
 80050f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005168:	e0b8      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005170:	2200      	movs	r2, #0
 8005172:	4966      	ldr	r1, [pc, #408]	@ (800530c <HAL_I2C_Mem_Read+0x448>)
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fa49 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0bf      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051cc:	2200      	movs	r2, #0
 80051ce:	494f      	ldr	r1, [pc, #316]	@ (800530c <HAL_I2C_Mem_Read+0x448>)
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fa1b 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e091      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005254:	e042      	b.n	80052dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005258:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fb2e 	bl	80058bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e04c      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d118      	bne.n	80052dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f47f aec2 	bne.w	800506a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e000      	b.n	8005304 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005302:	2302      	movs	r3, #2
  }
}
 8005304:	4618      	mov	r0, r3
 8005306:	3728      	adds	r7, #40	@ 0x28
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	00010004 	.word	0x00010004

08005310 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	4608      	mov	r0, r1
 800531a:	4611      	mov	r1, r2
 800531c:	461a      	mov	r2, r3
 800531e:	4603      	mov	r3, r0
 8005320:	817b      	strh	r3, [r7, #10]
 8005322:	460b      	mov	r3, r1
 8005324:	813b      	strh	r3, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005338:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	2200      	movs	r2, #0
 8005342:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f960 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00d      	beq.n	800536e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005360:	d103      	bne.n	800536a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005368:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e05f      	b.n	800542e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800536e:	897b      	ldrh	r3, [r7, #10]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800537c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	6a3a      	ldr	r2, [r7, #32]
 8005382:	492d      	ldr	r1, [pc, #180]	@ (8005438 <I2C_RequestMemoryWrite+0x128>)
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f998 	bl	80056ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e04c      	b.n	800542e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ac:	6a39      	ldr	r1, [r7, #32]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fa02 	bl	80057b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d107      	bne.n	80053d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e02b      	b.n	800542e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053d6:	88fb      	ldrh	r3, [r7, #6]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d105      	bne.n	80053e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053dc:	893b      	ldrh	r3, [r7, #8]
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	611a      	str	r2, [r3, #16]
 80053e6:	e021      	b.n	800542c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053e8:	893b      	ldrh	r3, [r7, #8]
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f8:	6a39      	ldr	r1, [r7, #32]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f9dc 	bl	80057b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00d      	beq.n	8005422 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	2b04      	cmp	r3, #4
 800540c:	d107      	bne.n	800541e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800541c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e005      	b.n	800542e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005422:	893b      	ldrh	r3, [r7, #8]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	00010002 	.word	0x00010002

0800543c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	4608      	mov	r0, r1
 8005446:	4611      	mov	r1, r2
 8005448:	461a      	mov	r2, r3
 800544a:	4603      	mov	r3, r0
 800544c:	817b      	strh	r3, [r7, #10]
 800544e:	460b      	mov	r3, r1
 8005450:	813b      	strh	r3, [r7, #8]
 8005452:	4613      	mov	r3, r2
 8005454:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005464:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005474:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	2200      	movs	r2, #0
 800547e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f8c2 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00d      	beq.n	80054aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800549c:	d103      	bne.n	80054a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0aa      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054aa:	897b      	ldrh	r3, [r7, #10]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	6a3a      	ldr	r2, [r7, #32]
 80054be:	4952      	ldr	r1, [pc, #328]	@ (8005608 <I2C_RequestMemoryRead+0x1cc>)
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f8fa 	bl	80056ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e097      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e8:	6a39      	ldr	r1, [r7, #32]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f964 	bl	80057b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00d      	beq.n	8005512 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d107      	bne.n	800550e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800550c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e076      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d105      	bne.n	8005524 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005518:	893b      	ldrh	r3, [r7, #8]
 800551a:	b2da      	uxtb	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	611a      	str	r2, [r3, #16]
 8005522:	e021      	b.n	8005568 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005524:	893b      	ldrh	r3, [r7, #8]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	b29b      	uxth	r3, r3
 800552a:	b2da      	uxtb	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005534:	6a39      	ldr	r1, [r7, #32]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f93e 	bl	80057b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00d      	beq.n	800555e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	2b04      	cmp	r3, #4
 8005548:	d107      	bne.n	800555a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005558:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e050      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800555e:	893b      	ldrh	r3, [r7, #8]
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556a:	6a39      	ldr	r1, [r7, #32]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f923 	bl	80057b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	2b04      	cmp	r3, #4
 800557e:	d107      	bne.n	8005590 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800558e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e035      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f82b 	bl	800560c <I2C_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00d      	beq.n	80055d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ca:	d103      	bne.n	80055d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e013      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055d8:	897b      	ldrh	r3, [r7, #10]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f043 0301 	orr.w	r3, r3, #1
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	6a3a      	ldr	r2, [r7, #32]
 80055ec:	4906      	ldr	r1, [pc, #24]	@ (8005608 <I2C_RequestMemoryRead+0x1cc>)
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f863 	bl	80056ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	00010002 	.word	0x00010002

0800560c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800561c:	e025      	b.n	800566a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005624:	d021      	beq.n	800566a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005626:	f7fe f999 	bl	800395c <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d302      	bcc.n	800563c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d116      	bne.n	800566a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	f043 0220 	orr.w	r2, r3, #32
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e023      	b.n	80056b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	0c1b      	lsrs	r3, r3, #16
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	d10d      	bne.n	8005690 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	43da      	mvns	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4013      	ands	r3, r2
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	bf0c      	ite	eq
 8005686:	2301      	moveq	r3, #1
 8005688:	2300      	movne	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	e00c      	b.n	80056aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	43da      	mvns	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4013      	ands	r3, r2
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	bf0c      	ite	eq
 80056a2:	2301      	moveq	r3, #1
 80056a4:	2300      	movne	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d0b6      	beq.n	800561e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056c8:	e051      	b.n	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d8:	d123      	bne.n	8005722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	f043 0204 	orr.w	r2, r3, #4
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e046      	b.n	80057b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005728:	d021      	beq.n	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572a:	f7fe f917 	bl	800395c <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d116      	bne.n	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	f043 0220 	orr.w	r2, r3, #32
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e020      	b.n	80057b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d10c      	bne.n	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	43da      	mvns	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	bf14      	ite	ne
 800578a:	2301      	movne	r3, #1
 800578c:	2300      	moveq	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	e00b      	b.n	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	43da      	mvns	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4013      	ands	r3, r2
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d18d      	bne.n	80056ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057c4:	e02d      	b.n	8005822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f8ce 	bl	8005968 <I2C_IsAcknowledgeFailed>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e02d      	b.n	8005832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057dc:	d021      	beq.n	8005822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7fe f8bd 	bl	800395c <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d302      	bcc.n	80057f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d116      	bne.n	8005822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	f043 0220 	orr.w	r2, r3, #32
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e007      	b.n	8005832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582c:	2b80      	cmp	r3, #128	@ 0x80
 800582e:	d1ca      	bne.n	80057c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005846:	e02d      	b.n	80058a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f88d 	bl	8005968 <I2C_IsAcknowledgeFailed>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e02d      	b.n	80058b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800585e:	d021      	beq.n	80058a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005860:	f7fe f87c 	bl	800395c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	429a      	cmp	r2, r3
 800586e:	d302      	bcc.n	8005876 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d116      	bne.n	80058a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	f043 0220 	orr.w	r2, r3, #32
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e007      	b.n	80058b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d1ca      	bne.n	8005848 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058c8:	e042      	b.n	8005950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d119      	bne.n	800590c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0210 	mvn.w	r2, #16
 80058e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e029      	b.n	8005960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590c:	f7fe f826 	bl	800395c <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	429a      	cmp	r2, r3
 800591a:	d302      	bcc.n	8005922 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d116      	bne.n	8005950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e007      	b.n	8005960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595a:	2b40      	cmp	r3, #64	@ 0x40
 800595c:	d1b5      	bne.n	80058ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800597a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800597e:	d11b      	bne.n	80059b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005988:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a4:	f043 0204 	orr.w	r2, r3, #4
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e000      	b.n	80059ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e267      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d075      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059e6:	4b88      	ldr	r3, [pc, #544]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 030c 	and.w	r3, r3, #12
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d00c      	beq.n	8005a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059f2:	4b85      	ldr	r3, [pc, #532]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d112      	bne.n	8005a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059fe:	4b82      	ldr	r3, [pc, #520]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a0a:	d10b      	bne.n	8005a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a0c:	4b7e      	ldr	r3, [pc, #504]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d05b      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x108>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d157      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e242      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a2c:	d106      	bne.n	8005a3c <HAL_RCC_OscConfig+0x74>
 8005a2e:	4b76      	ldr	r3, [pc, #472]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a75      	ldr	r2, [pc, #468]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	e01d      	b.n	8005a78 <HAL_RCC_OscConfig+0xb0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a44:	d10c      	bne.n	8005a60 <HAL_RCC_OscConfig+0x98>
 8005a46:	4b70      	ldr	r3, [pc, #448]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a6f      	ldr	r2, [pc, #444]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	4b6d      	ldr	r3, [pc, #436]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a6c      	ldr	r2, [pc, #432]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e00b      	b.n	8005a78 <HAL_RCC_OscConfig+0xb0>
 8005a60:	4b69      	ldr	r3, [pc, #420]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a68      	ldr	r2, [pc, #416]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	4b66      	ldr	r3, [pc, #408]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a65      	ldr	r2, [pc, #404]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d013      	beq.n	8005aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a80:	f7fd ff6c 	bl	800395c <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a88:	f7fd ff68 	bl	800395c <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b64      	cmp	r3, #100	@ 0x64
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e207      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0f0      	beq.n	8005a88 <HAL_RCC_OscConfig+0xc0>
 8005aa6:	e014      	b.n	8005ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa8:	f7fd ff58 	bl	800395c <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ab0:	f7fd ff54 	bl	800395c <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b64      	cmp	r3, #100	@ 0x64
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e1f3      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac2:	4b51      	ldr	r3, [pc, #324]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_OscConfig+0xe8>
 8005ace:	e000      	b.n	8005ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d063      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ade:	4b4a      	ldr	r3, [pc, #296]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aea:	4b47      	ldr	r3, [pc, #284]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d11c      	bne.n	8005b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005af6:	4b44      	ldr	r3, [pc, #272]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d116      	bne.n	8005b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b02:	4b41      	ldr	r3, [pc, #260]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <HAL_RCC_OscConfig+0x152>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d001      	beq.n	8005b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e1c7      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4937      	ldr	r1, [pc, #220]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b2e:	e03a      	b.n	8005ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d020      	beq.n	8005b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b38:	4b34      	ldr	r3, [pc, #208]	@ (8005c0c <HAL_RCC_OscConfig+0x244>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3e:	f7fd ff0d 	bl	800395c <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b46:	f7fd ff09 	bl	800395c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e1a8      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b58:	4b2b      	ldr	r3, [pc, #172]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0f0      	beq.n	8005b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b64:	4b28      	ldr	r3, [pc, #160]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4925      	ldr	r1, [pc, #148]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	600b      	str	r3, [r1, #0]
 8005b78:	e015      	b.n	8005ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b7a:	4b24      	ldr	r3, [pc, #144]	@ (8005c0c <HAL_RCC_OscConfig+0x244>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b80:	f7fd feec 	bl	800395c <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b88:	f7fd fee8 	bl	800395c <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e187      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d036      	beq.n	8005c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bba:	4b15      	ldr	r3, [pc, #84]	@ (8005c10 <HAL_RCC_OscConfig+0x248>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc0:	f7fd fecc 	bl	800395c <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bc8:	f7fd fec8 	bl	800395c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e167      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bda:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x200>
 8005be6:	e01b      	b.n	8005c20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005be8:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <HAL_RCC_OscConfig+0x248>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bee:	f7fd feb5 	bl	800395c <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bf4:	e00e      	b.n	8005c14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bf6:	f7fd feb1 	bl	800395c <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d907      	bls.n	8005c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e150      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	42470000 	.word	0x42470000
 8005c10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c14:	4b88      	ldr	r3, [pc, #544]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1ea      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8097 	beq.w	8005d5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c32:	4b81      	ldr	r3, [pc, #516]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10f      	bne.n	8005c5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	4b7d      	ldr	r3, [pc, #500]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	4a7c      	ldr	r2, [pc, #496]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c4e:	4b7a      	ldr	r3, [pc, #488]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5e:	4b77      	ldr	r3, [pc, #476]	@ (8005e3c <HAL_RCC_OscConfig+0x474>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d118      	bne.n	8005c9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c6a:	4b74      	ldr	r3, [pc, #464]	@ (8005e3c <HAL_RCC_OscConfig+0x474>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a73      	ldr	r2, [pc, #460]	@ (8005e3c <HAL_RCC_OscConfig+0x474>)
 8005c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c76:	f7fd fe71 	bl	800395c <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7c:	e008      	b.n	8005c90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7e:	f7fd fe6d 	bl	800395c <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e10c      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c90:	4b6a      	ldr	r3, [pc, #424]	@ (8005e3c <HAL_RCC_OscConfig+0x474>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0f0      	beq.n	8005c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d106      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x2ea>
 8005ca4:	4b64      	ldr	r3, [pc, #400]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca8:	4a63      	ldr	r2, [pc, #396]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb0:	e01c      	b.n	8005cec <HAL_RCC_OscConfig+0x324>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b05      	cmp	r3, #5
 8005cb8:	d10c      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x30c>
 8005cba:	4b5f      	ldr	r3, [pc, #380]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cbe:	4a5e      	ldr	r2, [pc, #376]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005cc0:	f043 0304 	orr.w	r3, r3, #4
 8005cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cca:	4a5b      	ldr	r2, [pc, #364]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	f043 0301 	orr.w	r3, r3, #1
 8005cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cd2:	e00b      	b.n	8005cec <HAL_RCC_OscConfig+0x324>
 8005cd4:	4b58      	ldr	r3, [pc, #352]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd8:	4a57      	ldr	r2, [pc, #348]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce0:	4b55      	ldr	r3, [pc, #340]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce4:	4a54      	ldr	r2, [pc, #336]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005ce6:	f023 0304 	bic.w	r3, r3, #4
 8005cea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d015      	beq.n	8005d20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf4:	f7fd fe32 	bl	800395c <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cfa:	e00a      	b.n	8005d12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cfc:	f7fd fe2e 	bl	800395c <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e0cb      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d12:	4b49      	ldr	r3, [pc, #292]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0ee      	beq.n	8005cfc <HAL_RCC_OscConfig+0x334>
 8005d1e:	e014      	b.n	8005d4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d20:	f7fd fe1c 	bl	800395c <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d26:	e00a      	b.n	8005d3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d28:	f7fd fe18 	bl	800395c <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e0b5      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1ee      	bne.n	8005d28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d105      	bne.n	8005d5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d50:	4b39      	ldr	r3, [pc, #228]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d54:	4a38      	ldr	r2, [pc, #224]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80a1 	beq.w	8005ea8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d66:	4b34      	ldr	r3, [pc, #208]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 030c 	and.w	r3, r3, #12
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d05c      	beq.n	8005e2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d141      	bne.n	8005dfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d7a:	4b31      	ldr	r3, [pc, #196]	@ (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d80:	f7fd fdec 	bl	800395c <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d88:	f7fd fde8 	bl	800395c <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e087      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9a:	4b27      	ldr	r3, [pc, #156]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69da      	ldr	r2, [r3, #28]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	019b      	lsls	r3, r3, #6
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbc:	085b      	lsrs	r3, r3, #1
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	041b      	lsls	r3, r3, #16
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc8:	061b      	lsls	r3, r3, #24
 8005dca:	491b      	ldr	r1, [pc, #108]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd6:	f7fd fdc1 	bl	800395c <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dde:	f7fd fdbd 	bl	800395c <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e05c      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df0:	4b11      	ldr	r3, [pc, #68]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f0      	beq.n	8005dde <HAL_RCC_OscConfig+0x416>
 8005dfc:	e054      	b.n	8005ea8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfe:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e04:	f7fd fdaa 	bl	800395c <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e0c:	f7fd fda6 	bl	800395c <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e045      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1e:	4b06      	ldr	r3, [pc, #24]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0x444>
 8005e2a:	e03d      	b.n	8005ea8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d107      	bne.n	8005e44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e038      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	40007000 	.word	0x40007000
 8005e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e44:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb4 <HAL_RCC_OscConfig+0x4ec>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d028      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d121      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d11a      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e74:	4013      	ands	r3, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d111      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8a:	085b      	lsrs	r3, r3, #1
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d107      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d001      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40023800 	.word	0x40023800

08005eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0cc      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ecc:	4b68      	ldr	r3, [pc, #416]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d90c      	bls.n	8005ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eda:	4b65      	ldr	r3, [pc, #404]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee2:	4b63      	ldr	r3, [pc, #396]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d001      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e0b8      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d020      	beq.n	8005f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f0c:	4b59      	ldr	r3, [pc, #356]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	4a58      	ldr	r2, [pc, #352]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f24:	4b53      	ldr	r3, [pc, #332]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	4a52      	ldr	r2, [pc, #328]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f30:	4b50      	ldr	r3, [pc, #320]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	494d      	ldr	r1, [pc, #308]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d044      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d107      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f56:	4b47      	ldr	r3, [pc, #284]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d119      	bne.n	8005f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e07f      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d003      	beq.n	8005f76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d107      	bne.n	8005f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f76:	4b3f      	ldr	r3, [pc, #252]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e06f      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f86:	4b3b      	ldr	r3, [pc, #236]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e067      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f96:	4b37      	ldr	r3, [pc, #220]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f023 0203 	bic.w	r2, r3, #3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	4934      	ldr	r1, [pc, #208]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fa8:	f7fd fcd8 	bl	800395c <HAL_GetTick>
 8005fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fae:	e00a      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb0:	f7fd fcd4 	bl	800395c <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e04f      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 020c 	and.w	r2, r3, #12
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d1eb      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd8:	4b25      	ldr	r3, [pc, #148]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d20c      	bcs.n	8006000 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe6:	4b22      	ldr	r3, [pc, #136]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fee:	4b20      	ldr	r3, [pc, #128]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d001      	beq.n	8006000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e032      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800600c:	4b19      	ldr	r3, [pc, #100]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	4916      	ldr	r1, [pc, #88]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	4313      	orrs	r3, r2
 800601c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800602a:	4b12      	ldr	r3, [pc, #72]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	490e      	ldr	r1, [pc, #56]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 800603a:	4313      	orrs	r3, r2
 800603c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800603e:	f000 f821 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8006042:	4602      	mov	r2, r0
 8006044:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	091b      	lsrs	r3, r3, #4
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	490a      	ldr	r1, [pc, #40]	@ (8006078 <HAL_RCC_ClockConfig+0x1c0>)
 8006050:	5ccb      	ldrb	r3, [r1, r3]
 8006052:	fa22 f303 	lsr.w	r3, r2, r3
 8006056:	4a09      	ldr	r2, [pc, #36]	@ (800607c <HAL_RCC_ClockConfig+0x1c4>)
 8006058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800605a:	4b09      	ldr	r3, [pc, #36]	@ (8006080 <HAL_RCC_ClockConfig+0x1c8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fd fc38 	bl	80038d4 <HAL_InitTick>

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40023c00 	.word	0x40023c00
 8006074:	40023800 	.word	0x40023800
 8006078:	0800ac74 	.word	0x0800ac74
 800607c:	20000008 	.word	0x20000008
 8006080:	20000044 	.word	0x20000044

08006084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006088:	b094      	sub	sp, #80	@ 0x50
 800608a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006090:	2300      	movs	r3, #0
 8006092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006094:	2300      	movs	r3, #0
 8006096:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800609c:	4b79      	ldr	r3, [pc, #484]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 030c 	and.w	r3, r3, #12
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d00d      	beq.n	80060c4 <HAL_RCC_GetSysClockFreq+0x40>
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	f200 80e1 	bhi.w	8006270 <HAL_RCC_GetSysClockFreq+0x1ec>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_RCC_GetSysClockFreq+0x34>
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d003      	beq.n	80060be <HAL_RCC_GetSysClockFreq+0x3a>
 80060b6:	e0db      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060b8:	4b73      	ldr	r3, [pc, #460]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x204>)
 80060ba:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80060bc:	e0db      	b.n	8006276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060be:	4b73      	ldr	r3, [pc, #460]	@ (800628c <HAL_RCC_GetSysClockFreq+0x208>)
 80060c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060c2:	e0d8      	b.n	8006276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060c4:	4b6f      	ldr	r3, [pc, #444]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ce:	4b6d      	ldr	r3, [pc, #436]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d063      	beq.n	80061a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060da:	4b6a      	ldr	r3, [pc, #424]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	099b      	lsrs	r3, r3, #6
 80060e0:	2200      	movs	r2, #0
 80060e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80060e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80060ee:	2300      	movs	r3, #0
 80060f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80060f6:	4622      	mov	r2, r4
 80060f8:	462b      	mov	r3, r5
 80060fa:	f04f 0000 	mov.w	r0, #0
 80060fe:	f04f 0100 	mov.w	r1, #0
 8006102:	0159      	lsls	r1, r3, #5
 8006104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006108:	0150      	lsls	r0, r2, #5
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4621      	mov	r1, r4
 8006110:	1a51      	subs	r1, r2, r1
 8006112:	6139      	str	r1, [r7, #16]
 8006114:	4629      	mov	r1, r5
 8006116:	eb63 0301 	sbc.w	r3, r3, r1
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006128:	4659      	mov	r1, fp
 800612a:	018b      	lsls	r3, r1, #6
 800612c:	4651      	mov	r1, sl
 800612e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006132:	4651      	mov	r1, sl
 8006134:	018a      	lsls	r2, r1, #6
 8006136:	4651      	mov	r1, sl
 8006138:	ebb2 0801 	subs.w	r8, r2, r1
 800613c:	4659      	mov	r1, fp
 800613e:	eb63 0901 	sbc.w	r9, r3, r1
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800614e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006156:	4690      	mov	r8, r2
 8006158:	4699      	mov	r9, r3
 800615a:	4623      	mov	r3, r4
 800615c:	eb18 0303 	adds.w	r3, r8, r3
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	462b      	mov	r3, r5
 8006164:	eb49 0303 	adc.w	r3, r9, r3
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006176:	4629      	mov	r1, r5
 8006178:	024b      	lsls	r3, r1, #9
 800617a:	4621      	mov	r1, r4
 800617c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006180:	4621      	mov	r1, r4
 8006182:	024a      	lsls	r2, r1, #9
 8006184:	4610      	mov	r0, r2
 8006186:	4619      	mov	r1, r3
 8006188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800618a:	2200      	movs	r2, #0
 800618c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800618e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006190:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006194:	f7fa fca4 	bl	8000ae0 <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4613      	mov	r3, r2
 800619e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061a0:	e058      	b.n	8006254 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061a2:	4b38      	ldr	r3, [pc, #224]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	099b      	lsrs	r3, r3, #6
 80061a8:	2200      	movs	r2, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	4611      	mov	r1, r2
 80061ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061b2:	623b      	str	r3, [r7, #32]
 80061b4:	2300      	movs	r3, #0
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061bc:	4642      	mov	r2, r8
 80061be:	464b      	mov	r3, r9
 80061c0:	f04f 0000 	mov.w	r0, #0
 80061c4:	f04f 0100 	mov.w	r1, #0
 80061c8:	0159      	lsls	r1, r3, #5
 80061ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061ce:	0150      	lsls	r0, r2, #5
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4641      	mov	r1, r8
 80061d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80061da:	4649      	mov	r1, r9
 80061dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061f4:	ebb2 040a 	subs.w	r4, r2, sl
 80061f8:	eb63 050b 	sbc.w	r5, r3, fp
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	00eb      	lsls	r3, r5, #3
 8006206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800620a:	00e2      	lsls	r2, r4, #3
 800620c:	4614      	mov	r4, r2
 800620e:	461d      	mov	r5, r3
 8006210:	4643      	mov	r3, r8
 8006212:	18e3      	adds	r3, r4, r3
 8006214:	603b      	str	r3, [r7, #0]
 8006216:	464b      	mov	r3, r9
 8006218:	eb45 0303 	adc.w	r3, r5, r3
 800621c:	607b      	str	r3, [r7, #4]
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800622a:	4629      	mov	r1, r5
 800622c:	028b      	lsls	r3, r1, #10
 800622e:	4621      	mov	r1, r4
 8006230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006234:	4621      	mov	r1, r4
 8006236:	028a      	lsls	r2, r1, #10
 8006238:	4610      	mov	r0, r2
 800623a:	4619      	mov	r1, r3
 800623c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800623e:	2200      	movs	r2, #0
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	61fa      	str	r2, [r7, #28]
 8006244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006248:	f7fa fc4a 	bl	8000ae0 <__aeabi_uldivmod>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4613      	mov	r3, r2
 8006252:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006254:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	0c1b      	lsrs	r3, r3, #16
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	3301      	adds	r3, #1
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006264:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006268:	fbb2 f3f3 	udiv	r3, r2, r3
 800626c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800626e:	e002      	b.n	8006276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006270:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x204>)
 8006272:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006278:	4618      	mov	r0, r3
 800627a:	3750      	adds	r7, #80	@ 0x50
 800627c:	46bd      	mov	sp, r7
 800627e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006282:	bf00      	nop
 8006284:	40023800 	.word	0x40023800
 8006288:	00f42400 	.word	0x00f42400
 800628c:	007a1200 	.word	0x007a1200

08006290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006294:	4b03      	ldr	r3, [pc, #12]	@ (80062a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006296:	681b      	ldr	r3, [r3, #0]
}
 8006298:	4618      	mov	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000008 	.word	0x20000008

080062a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062ac:	f7ff fff0 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062b0:	4602      	mov	r2, r0
 80062b2:	4b05      	ldr	r3, [pc, #20]	@ (80062c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	0a9b      	lsrs	r3, r3, #10
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	4903      	ldr	r1, [pc, #12]	@ (80062cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062be:	5ccb      	ldrb	r3, [r1, r3]
 80062c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40023800 	.word	0x40023800
 80062cc:	0800ac84 	.word	0x0800ac84

080062d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e07b      	b.n	80063da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d108      	bne.n	80062fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062f2:	d009      	beq.n	8006308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	61da      	str	r2, [r3, #28]
 80062fa:	e005      	b.n	8006308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fc f974 	bl	8002610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800633e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638c:	ea42 0103 	orr.w	r1, r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006394:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	f003 0104 	and.w	r1, r3, #4
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ae:	f003 0210 	and.w	r2, r3, #16
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b088      	sub	sp, #32
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	603b      	str	r3, [r7, #0]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_SPI_Transmit+0x22>
 8006400:	2302      	movs	r3, #2
 8006402:	e126      	b.n	8006652 <HAL_SPI_Transmit+0x270>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800640c:	f7fd faa6 	bl	800395c <HAL_GetTick>
 8006410:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b01      	cmp	r3, #1
 8006420:	d002      	beq.n	8006428 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006422:	2302      	movs	r3, #2
 8006424:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006426:	e10b      	b.n	8006640 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <HAL_SPI_Transmit+0x52>
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006438:	e102      	b.n	8006640 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2203      	movs	r2, #3
 800643e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	88fa      	ldrh	r2, [r7, #6]
 8006452:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	88fa      	ldrh	r2, [r7, #6]
 8006458:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006480:	d10f      	bne.n	80064a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006490:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	d007      	beq.n	80064c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064c8:	d14b      	bne.n	8006562 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_SPI_Transmit+0xf6>
 80064d2:	8afb      	ldrh	r3, [r7, #22]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d13e      	bne.n	8006556 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064dc:	881a      	ldrh	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e8:	1c9a      	adds	r2, r3, #2
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064fc:	e02b      	b.n	8006556 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b02      	cmp	r3, #2
 800650a:	d112      	bne.n	8006532 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006510:	881a      	ldrh	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651c:	1c9a      	adds	r2, r3, #2
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006526:	b29b      	uxth	r3, r3
 8006528:	3b01      	subs	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006530:	e011      	b.n	8006556 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006532:	f7fd fa13 	bl	800395c <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d803      	bhi.n	800654a <HAL_SPI_Transmit+0x168>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006548:	d102      	bne.n	8006550 <HAL_SPI_Transmit+0x16e>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006554:	e074      	b.n	8006640 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1ce      	bne.n	80064fe <HAL_SPI_Transmit+0x11c>
 8006560:	e04c      	b.n	80065fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_SPI_Transmit+0x18e>
 800656a:	8afb      	ldrh	r3, [r7, #22]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d140      	bne.n	80065f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	330c      	adds	r3, #12
 800657a:	7812      	ldrb	r2, [r2, #0]
 800657c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006596:	e02c      	b.n	80065f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d113      	bne.n	80065ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	330c      	adds	r3, #12
 80065b0:	7812      	ldrb	r2, [r2, #0]
 80065b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	86da      	strh	r2, [r3, #54]	@ 0x36
 80065cc:	e011      	b.n	80065f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ce:	f7fd f9c5 	bl	800395c <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d803      	bhi.n	80065e6 <HAL_SPI_Transmit+0x204>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065e4:	d102      	bne.n	80065ec <HAL_SPI_Transmit+0x20a>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065f0:	e026      	b.n	8006640 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1cd      	bne.n	8006598 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 f8b3 	bl	800676c <SPI_EndRxTxTransaction>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2220      	movs	r2, #32
 8006610:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800661a:	2300      	movs	r3, #0
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e000      	b.n	8006640 <HAL_SPI_Transmit+0x25e>
  }

error:
 800663e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006650:	7ffb      	ldrb	r3, [r7, #31]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3720      	adds	r7, #32
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	4613      	mov	r3, r2
 800666a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800666c:	f7fd f976 	bl	800395c <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	4413      	add	r3, r2
 800667a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800667c:	f7fd f96e 	bl	800395c <HAL_GetTick>
 8006680:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006682:	4b39      	ldr	r3, [pc, #228]	@ (8006768 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	015b      	lsls	r3, r3, #5
 8006688:	0d1b      	lsrs	r3, r3, #20
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	fb02 f303 	mul.w	r3, r2, r3
 8006690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006692:	e054      	b.n	800673e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800669a:	d050      	beq.n	800673e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800669c:	f7fd f95e 	bl	800395c <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d902      	bls.n	80066b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d13d      	bne.n	800672e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066ca:	d111      	bne.n	80066f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066d4:	d004      	beq.n	80066e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066de:	d107      	bne.n	80066f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f8:	d10f      	bne.n	800671a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e017      	b.n	800675e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	3b01      	subs	r3, #1
 800673c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4013      	ands	r3, r2
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	bf0c      	ite	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	2300      	movne	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	429a      	cmp	r2, r3
 800675a:	d19b      	bne.n	8006694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000008 	.word	0x20000008

0800676c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af02      	add	r7, sp, #8
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006778:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <SPI_EndRxTxTransaction+0x7c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1b      	ldr	r2, [pc, #108]	@ (80067ec <SPI_EndRxTxTransaction+0x80>)
 800677e:	fba2 2303 	umull	r2, r3, r2, r3
 8006782:	0d5b      	lsrs	r3, r3, #21
 8006784:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006788:	fb02 f303 	mul.w	r3, r2, r3
 800678c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006796:	d112      	bne.n	80067be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2200      	movs	r2, #0
 80067a0:	2180      	movs	r1, #128	@ 0x80
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f7ff ff5a 	bl	800665c <SPI_WaitFlagStateUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d016      	beq.n	80067dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b2:	f043 0220 	orr.w	r2, r3, #32
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e00f      	b.n	80067de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d4:	2b80      	cmp	r3, #128	@ 0x80
 80067d6:	d0f2      	beq.n	80067be <SPI_EndRxTxTransaction+0x52>
 80067d8:	e000      	b.n	80067dc <SPI_EndRxTxTransaction+0x70>
        break;
 80067da:	bf00      	nop
  }

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000008 	.word	0x20000008
 80067ec:	165e9f81 	.word	0x165e9f81

080067f0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e034      	b.n	8006870 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7fa fd8a 	bl	8001334 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3308      	adds	r3, #8
 8006828:	4619      	mov	r1, r3
 800682a:	4610      	mov	r0, r2
 800682c:	f000 ffda 	bl	80077e4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	461a      	mov	r2, r3
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	f001 f824 	bl	8007888 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6858      	ldr	r0, [r3, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	f001 f859 	bl	8007904 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	6892      	ldr	r2, [r2, #8]
 800685a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	6892      	ldr	r2, [r2, #8]
 8006866:	f041 0101 	orr.w	r1, r1, #1
 800686a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e041      	b.n	800690e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7fc f866 	bl	8002970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	4610      	mov	r0, r2
 80068b8:	f000 fc1a 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	d001      	beq.n	8006930 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e046      	b.n	80069be <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a23      	ldr	r2, [pc, #140]	@ (80069cc <HAL_TIM_Base_Start+0xb4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d022      	beq.n	8006988 <HAL_TIM_Base_Start+0x70>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694a:	d01d      	beq.n	8006988 <HAL_TIM_Base_Start+0x70>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1f      	ldr	r2, [pc, #124]	@ (80069d0 <HAL_TIM_Base_Start+0xb8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d018      	beq.n	8006988 <HAL_TIM_Base_Start+0x70>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1e      	ldr	r2, [pc, #120]	@ (80069d4 <HAL_TIM_Base_Start+0xbc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <HAL_TIM_Base_Start+0x70>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1c      	ldr	r2, [pc, #112]	@ (80069d8 <HAL_TIM_Base_Start+0xc0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00e      	beq.n	8006988 <HAL_TIM_Base_Start+0x70>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1b      	ldr	r2, [pc, #108]	@ (80069dc <HAL_TIM_Base_Start+0xc4>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d009      	beq.n	8006988 <HAL_TIM_Base_Start+0x70>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a19      	ldr	r2, [pc, #100]	@ (80069e0 <HAL_TIM_Base_Start+0xc8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <HAL_TIM_Base_Start+0x70>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a18      	ldr	r2, [pc, #96]	@ (80069e4 <HAL_TIM_Base_Start+0xcc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d111      	bne.n	80069ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b06      	cmp	r3, #6
 8006998:	d010      	beq.n	80069bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0201 	orr.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069aa:	e007      	b.n	80069bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40010000 	.word	0x40010000
 80069d0:	40000400 	.word	0x40000400
 80069d4:	40000800 	.word	0x40000800
 80069d8:	40000c00 	.word	0x40000c00
 80069dc:	40010400 	.word	0x40010400
 80069e0:	40014000 	.word	0x40014000
 80069e4:	40001800 	.word	0x40001800

080069e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d001      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e04e      	b.n	8006a9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a23      	ldr	r2, [pc, #140]	@ (8006aac <HAL_TIM_Base_Start_IT+0xc4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d022      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2a:	d01d      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d018      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d013      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00e      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8006abc <HAL_TIM_Base_Start_IT+0xd4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d009      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a19      	ldr	r2, [pc, #100]	@ (8006ac0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d004      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a18      	ldr	r2, [pc, #96]	@ (8006ac4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d111      	bne.n	8006a8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b06      	cmp	r3, #6
 8006a78:	d010      	beq.n	8006a9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f042 0201 	orr.w	r2, r2, #1
 8006a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8a:	e007      	b.n	8006a9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0201 	orr.w	r2, r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40010000 	.word	0x40010000
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40000c00 	.word	0x40000c00
 8006abc:	40010400 	.word	0x40010400
 8006ac0:	40014000 	.word	0x40014000
 8006ac4:	40001800 	.word	0x40001800

08006ac8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e041      	b.n	8006b5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f839 	bl	8006b66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f000 faf2 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d122      	bne.n	8006bd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d11b      	bne.n	8006bd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f06f 0202 	mvn.w	r2, #2
 8006ba6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	f003 0303 	and.w	r3, r3, #3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fa78 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006bc2:	e005      	b.n	8006bd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fa6a 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fa7b 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d122      	bne.n	8006c2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d11b      	bne.n	8006c2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f06f 0204 	mvn.w	r2, #4
 8006bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fa4e 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006c16:	e005      	b.n	8006c24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fa40 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa51 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d122      	bne.n	8006c7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d11b      	bne.n	8006c7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f06f 0208 	mvn.w	r2, #8
 8006c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2204      	movs	r2, #4
 8006c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	f003 0303 	and.w	r3, r3, #3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fa24 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006c6a:	e005      	b.n	8006c78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fa16 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fa27 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	f003 0310 	and.w	r3, r3, #16
 8006c88:	2b10      	cmp	r3, #16
 8006c8a:	d122      	bne.n	8006cd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f003 0310 	and.w	r3, r3, #16
 8006c96:	2b10      	cmp	r3, #16
 8006c98:	d11b      	bne.n	8006cd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f06f 0210 	mvn.w	r2, #16
 8006ca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2208      	movs	r2, #8
 8006ca8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f9fa 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006cbe:	e005      	b.n	8006ccc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f9ec 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f9fd 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d10e      	bne.n	8006cfe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d107      	bne.n	8006cfe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f06f 0201 	mvn.w	r2, #1
 8006cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7fb fc0f 	bl	800251c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d08:	2b80      	cmp	r3, #128	@ 0x80
 8006d0a:	d10e      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d16:	2b80      	cmp	r3, #128	@ 0x80
 8006d18:	d107      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fd53 	bl	80077d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d34:	2b40      	cmp	r3, #64	@ 0x40
 8006d36:	d10e      	bne.n	8006d56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d42:	2b40      	cmp	r3, #64	@ 0x40
 8006d44:	d107      	bne.n	8006d56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f9c2 	bl	80070da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f003 0320 	and.w	r3, r3, #32
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d10e      	bne.n	8006d82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d107      	bne.n	8006d82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f06f 0220 	mvn.w	r2, #32
 8006d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fd1d 	bl	80077bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e0ae      	b.n	8006f08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b0c      	cmp	r3, #12
 8006db6:	f200 809f 	bhi.w	8006ef8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006dba:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc0:	08006df5 	.word	0x08006df5
 8006dc4:	08006ef9 	.word	0x08006ef9
 8006dc8:	08006ef9 	.word	0x08006ef9
 8006dcc:	08006ef9 	.word	0x08006ef9
 8006dd0:	08006e35 	.word	0x08006e35
 8006dd4:	08006ef9 	.word	0x08006ef9
 8006dd8:	08006ef9 	.word	0x08006ef9
 8006ddc:	08006ef9 	.word	0x08006ef9
 8006de0:	08006e77 	.word	0x08006e77
 8006de4:	08006ef9 	.word	0x08006ef9
 8006de8:	08006ef9 	.word	0x08006ef9
 8006dec:	08006ef9 	.word	0x08006ef9
 8006df0:	08006eb7 	.word	0x08006eb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fa18 	bl	8007230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0208 	orr.w	r2, r2, #8
 8006e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0204 	bic.w	r2, r2, #4
 8006e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6999      	ldr	r1, [r3, #24]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	691a      	ldr	r2, [r3, #16]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	619a      	str	r2, [r3, #24]
      break;
 8006e32:	e064      	b.n	8006efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fa68 	bl	8007310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6999      	ldr	r1, [r3, #24]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	021a      	lsls	r2, r3, #8
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	619a      	str	r2, [r3, #24]
      break;
 8006e74:	e043      	b.n	8006efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fabd 	bl	80073fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0208 	orr.w	r2, r2, #8
 8006e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0204 	bic.w	r2, r2, #4
 8006ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69d9      	ldr	r1, [r3, #28]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	61da      	str	r2, [r3, #28]
      break;
 8006eb4:	e023      	b.n	8006efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fb11 	bl	80074e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69da      	ldr	r2, [r3, #28]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69d9      	ldr	r1, [r3, #28]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	021a      	lsls	r2, r3, #8
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	61da      	str	r2, [r3, #28]
      break;
 8006ef6:	e002      	b.n	8006efe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	75fb      	strb	r3, [r7, #23]
      break;
 8006efc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_TIM_ConfigClockSource+0x1c>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e0b4      	b.n	8007096 <HAL_TIM_ConfigClockSource+0x186>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f64:	d03e      	beq.n	8006fe4 <HAL_TIM_ConfigClockSource+0xd4>
 8006f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f6a:	f200 8087 	bhi.w	800707c <HAL_TIM_ConfigClockSource+0x16c>
 8006f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f72:	f000 8086 	beq.w	8007082 <HAL_TIM_ConfigClockSource+0x172>
 8006f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f7a:	d87f      	bhi.n	800707c <HAL_TIM_ConfigClockSource+0x16c>
 8006f7c:	2b70      	cmp	r3, #112	@ 0x70
 8006f7e:	d01a      	beq.n	8006fb6 <HAL_TIM_ConfigClockSource+0xa6>
 8006f80:	2b70      	cmp	r3, #112	@ 0x70
 8006f82:	d87b      	bhi.n	800707c <HAL_TIM_ConfigClockSource+0x16c>
 8006f84:	2b60      	cmp	r3, #96	@ 0x60
 8006f86:	d050      	beq.n	800702a <HAL_TIM_ConfigClockSource+0x11a>
 8006f88:	2b60      	cmp	r3, #96	@ 0x60
 8006f8a:	d877      	bhi.n	800707c <HAL_TIM_ConfigClockSource+0x16c>
 8006f8c:	2b50      	cmp	r3, #80	@ 0x50
 8006f8e:	d03c      	beq.n	800700a <HAL_TIM_ConfigClockSource+0xfa>
 8006f90:	2b50      	cmp	r3, #80	@ 0x50
 8006f92:	d873      	bhi.n	800707c <HAL_TIM_ConfigClockSource+0x16c>
 8006f94:	2b40      	cmp	r3, #64	@ 0x40
 8006f96:	d058      	beq.n	800704a <HAL_TIM_ConfigClockSource+0x13a>
 8006f98:	2b40      	cmp	r3, #64	@ 0x40
 8006f9a:	d86f      	bhi.n	800707c <HAL_TIM_ConfigClockSource+0x16c>
 8006f9c:	2b30      	cmp	r3, #48	@ 0x30
 8006f9e:	d064      	beq.n	800706a <HAL_TIM_ConfigClockSource+0x15a>
 8006fa0:	2b30      	cmp	r3, #48	@ 0x30
 8006fa2:	d86b      	bhi.n	800707c <HAL_TIM_ConfigClockSource+0x16c>
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d060      	beq.n	800706a <HAL_TIM_ConfigClockSource+0x15a>
 8006fa8:	2b20      	cmp	r3, #32
 8006faa:	d867      	bhi.n	800707c <HAL_TIM_ConfigClockSource+0x16c>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d05c      	beq.n	800706a <HAL_TIM_ConfigClockSource+0x15a>
 8006fb0:	2b10      	cmp	r3, #16
 8006fb2:	d05a      	beq.n	800706a <HAL_TIM_ConfigClockSource+0x15a>
 8006fb4:	e062      	b.n	800707c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6899      	ldr	r1, [r3, #8]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f000 fb5d 	bl	8007684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	609a      	str	r2, [r3, #8]
      break;
 8006fe2:	e04f      	b.n	8007084 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6818      	ldr	r0, [r3, #0]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	6899      	ldr	r1, [r3, #8]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f000 fb46 	bl	8007684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007006:	609a      	str	r2, [r3, #8]
      break;
 8007008:	e03c      	b.n	8007084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	6859      	ldr	r1, [r3, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	461a      	mov	r2, r3
 8007018:	f000 faba 	bl	8007590 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2150      	movs	r1, #80	@ 0x50
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fb13 	bl	800764e <TIM_ITRx_SetConfig>
      break;
 8007028:	e02c      	b.n	8007084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6818      	ldr	r0, [r3, #0]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	6859      	ldr	r1, [r3, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	461a      	mov	r2, r3
 8007038:	f000 fad9 	bl	80075ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2160      	movs	r1, #96	@ 0x60
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fb03 	bl	800764e <TIM_ITRx_SetConfig>
      break;
 8007048:	e01c      	b.n	8007084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6818      	ldr	r0, [r3, #0]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	6859      	ldr	r1, [r3, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	461a      	mov	r2, r3
 8007058:	f000 fa9a 	bl	8007590 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2140      	movs	r1, #64	@ 0x40
 8007062:	4618      	mov	r0, r3
 8007064:	f000 faf3 	bl	800764e <TIM_ITRx_SetConfig>
      break;
 8007068:	e00c      	b.n	8007084 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4619      	mov	r1, r3
 8007074:	4610      	mov	r0, r2
 8007076:	f000 faea 	bl	800764e <TIM_ITRx_SetConfig>
      break;
 800707a:	e003      	b.n	8007084 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]
      break;
 8007080:	e000      	b.n	8007084 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
	...

080070f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a40      	ldr	r2, [pc, #256]	@ (8007204 <TIM_Base_SetConfig+0x114>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d013      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710e:	d00f      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a3d      	ldr	r2, [pc, #244]	@ (8007208 <TIM_Base_SetConfig+0x118>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00b      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a3c      	ldr	r2, [pc, #240]	@ (800720c <TIM_Base_SetConfig+0x11c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d007      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a3b      	ldr	r2, [pc, #236]	@ (8007210 <TIM_Base_SetConfig+0x120>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a3a      	ldr	r2, [pc, #232]	@ (8007214 <TIM_Base_SetConfig+0x124>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d108      	bne.n	8007142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a2f      	ldr	r2, [pc, #188]	@ (8007204 <TIM_Base_SetConfig+0x114>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d02b      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007150:	d027      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a2c      	ldr	r2, [pc, #176]	@ (8007208 <TIM_Base_SetConfig+0x118>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d023      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a2b      	ldr	r2, [pc, #172]	@ (800720c <TIM_Base_SetConfig+0x11c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d01f      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a2a      	ldr	r2, [pc, #168]	@ (8007210 <TIM_Base_SetConfig+0x120>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d01b      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a29      	ldr	r2, [pc, #164]	@ (8007214 <TIM_Base_SetConfig+0x124>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d017      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a28      	ldr	r2, [pc, #160]	@ (8007218 <TIM_Base_SetConfig+0x128>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d013      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a27      	ldr	r2, [pc, #156]	@ (800721c <TIM_Base_SetConfig+0x12c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00f      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a26      	ldr	r2, [pc, #152]	@ (8007220 <TIM_Base_SetConfig+0x130>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00b      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a25      	ldr	r2, [pc, #148]	@ (8007224 <TIM_Base_SetConfig+0x134>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d007      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a24      	ldr	r2, [pc, #144]	@ (8007228 <TIM_Base_SetConfig+0x138>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d003      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a23      	ldr	r2, [pc, #140]	@ (800722c <TIM_Base_SetConfig+0x13c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d108      	bne.n	80071b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a0a      	ldr	r2, [pc, #40]	@ (8007204 <TIM_Base_SetConfig+0x114>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_Base_SetConfig+0xf8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007214 <TIM_Base_SetConfig+0x124>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d103      	bne.n	80071f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	615a      	str	r2, [r3, #20]
}
 80071f6:	bf00      	nop
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40010000 	.word	0x40010000
 8007208:	40000400 	.word	0x40000400
 800720c:	40000800 	.word	0x40000800
 8007210:	40000c00 	.word	0x40000c00
 8007214:	40010400 	.word	0x40010400
 8007218:	40014000 	.word	0x40014000
 800721c:	40014400 	.word	0x40014400
 8007220:	40014800 	.word	0x40014800
 8007224:	40001800 	.word	0x40001800
 8007228:	40001c00 	.word	0x40001c00
 800722c:	40002000 	.word	0x40002000

08007230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f023 0201 	bic.w	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800725e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f023 0302 	bic.w	r3, r3, #2
 8007278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a20      	ldr	r2, [pc, #128]	@ (8007308 <TIM_OC1_SetConfig+0xd8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_OC1_SetConfig+0x64>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a1f      	ldr	r2, [pc, #124]	@ (800730c <TIM_OC1_SetConfig+0xdc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d10c      	bne.n	80072ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f023 0308 	bic.w	r3, r3, #8
 800729a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f023 0304 	bic.w	r3, r3, #4
 80072ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a15      	ldr	r2, [pc, #84]	@ (8007308 <TIM_OC1_SetConfig+0xd8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d003      	beq.n	80072be <TIM_OC1_SetConfig+0x8e>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a14      	ldr	r2, [pc, #80]	@ (800730c <TIM_OC1_SetConfig+0xdc>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d111      	bne.n	80072e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	621a      	str	r2, [r3, #32]
}
 80072fc:	bf00      	nop
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40010000 	.word	0x40010000
 800730c:	40010400 	.word	0x40010400

08007310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f023 0210 	bic.w	r2, r3, #16
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800733e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f023 0320 	bic.w	r3, r3, #32
 800735a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	4313      	orrs	r3, r2
 8007366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a22      	ldr	r2, [pc, #136]	@ (80073f4 <TIM_OC2_SetConfig+0xe4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <TIM_OC2_SetConfig+0x68>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a21      	ldr	r2, [pc, #132]	@ (80073f8 <TIM_OC2_SetConfig+0xe8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d10d      	bne.n	8007394 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800737e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007392:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a17      	ldr	r2, [pc, #92]	@ (80073f4 <TIM_OC2_SetConfig+0xe4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d003      	beq.n	80073a4 <TIM_OC2_SetConfig+0x94>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a16      	ldr	r2, [pc, #88]	@ (80073f8 <TIM_OC2_SetConfig+0xe8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d113      	bne.n	80073cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	4313      	orrs	r3, r2
 80073be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	621a      	str	r2, [r3, #32]
}
 80073e6:	bf00      	nop
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40010000 	.word	0x40010000
 80073f8:	40010400 	.word	0x40010400

080073fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800742a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a21      	ldr	r2, [pc, #132]	@ (80074dc <TIM_OC3_SetConfig+0xe0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d003      	beq.n	8007462 <TIM_OC3_SetConfig+0x66>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a20      	ldr	r2, [pc, #128]	@ (80074e0 <TIM_OC3_SetConfig+0xe4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d10d      	bne.n	800747e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	021b      	lsls	r3, r3, #8
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800747c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a16      	ldr	r2, [pc, #88]	@ (80074dc <TIM_OC3_SetConfig+0xe0>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d003      	beq.n	800748e <TIM_OC3_SetConfig+0x92>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a15      	ldr	r2, [pc, #84]	@ (80074e0 <TIM_OC3_SetConfig+0xe4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d113      	bne.n	80074b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800749c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	621a      	str	r2, [r3, #32]
}
 80074d0:	bf00      	nop
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	40010000 	.word	0x40010000
 80074e0:	40010400 	.word	0x40010400

080074e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800751a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800752e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	031b      	lsls	r3, r3, #12
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4313      	orrs	r3, r2
 800753a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a12      	ldr	r2, [pc, #72]	@ (8007588 <TIM_OC4_SetConfig+0xa4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_OC4_SetConfig+0x68>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a11      	ldr	r2, [pc, #68]	@ (800758c <TIM_OC4_SetConfig+0xa8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d109      	bne.n	8007560 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	019b      	lsls	r3, r3, #6
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	621a      	str	r2, [r3, #32]
}
 800757a:	bf00      	nop
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40010000 	.word	0x40010000
 800758c:	40010400 	.word	0x40010400

08007590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	f023 0201 	bic.w	r2, r3, #1
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f023 030a 	bic.w	r3, r3, #10
 80075cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	621a      	str	r2, [r3, #32]
}
 80075e2:	bf00      	nop
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b087      	sub	sp, #28
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	f023 0210 	bic.w	r2, r3, #16
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	031b      	lsls	r3, r3, #12
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	4313      	orrs	r3, r2
 8007622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800762a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	4313      	orrs	r3, r2
 8007634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	621a      	str	r2, [r3, #32]
}
 8007642:	bf00      	nop
 8007644:	371c      	adds	r7, #28
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800764e:	b480      	push	{r7}
 8007650:	b085      	sub	sp, #20
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4313      	orrs	r3, r2
 800766c:	f043 0307 	orr.w	r3, r3, #7
 8007670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	609a      	str	r2, [r3, #8]
}
 8007678:	bf00      	nop
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800769e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	021a      	lsls	r2, r3, #8
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	609a      	str	r2, [r3, #8]
}
 80076b8:	bf00      	nop
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076d8:	2302      	movs	r3, #2
 80076da:	e05a      	b.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a21      	ldr	r2, [pc, #132]	@ (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d022      	beq.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007728:	d01d      	beq.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a1d      	ldr	r2, [pc, #116]	@ (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d018      	beq.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a1b      	ldr	r2, [pc, #108]	@ (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1a      	ldr	r2, [pc, #104]	@ (80077ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00e      	beq.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a18      	ldr	r2, [pc, #96]	@ (80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d009      	beq.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a17      	ldr	r2, [pc, #92]	@ (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d004      	beq.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a15      	ldr	r2, [pc, #84]	@ (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d10c      	bne.n	8007780 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800776c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	4313      	orrs	r3, r2
 8007776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40010000 	.word	0x40010000
 80077a4:	40000400 	.word	0x40000400
 80077a8:	40000800 	.word	0x40000800
 80077ac:	40000c00 	.word	0x40000c00
 80077b0:	40010400 	.word	0x40010400
 80077b4:	40014000 	.word	0x40014000
 80077b8:	40001800 	.word	0x40001800

080077bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4b20      	ldr	r3, [pc, #128]	@ (8007884 <FSMC_NORSRAM_Init+0xa0>)
 8007802:	4013      	ands	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800780e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007814:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800781a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007820:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007826:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800782c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007832:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8007838:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 800783e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8007844:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 800784a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8007850:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	2b08      	cmp	r3, #8
 800785e:	d103      	bne.n	8007868 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007866:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	fff00080 	.word	0xfff00080

08007888 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80078aa:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80078b6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80078be:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80078c6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80078d0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	3b02      	subs	r3, #2
 80078d8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80078da:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80078e0:	4313      	orrs	r3, r2
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6979      	ldr	r1, [r7, #20]
 80078f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
	...

08007904 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800791c:	d122      	bne.n	8007964 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007926:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	4b15      	ldr	r3, [pc, #84]	@ (8007980 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800792c:	4013      	ands	r3, r2
 800792e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800793a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007942:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800794a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007950:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	4313      	orrs	r3, r2
 8007956:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	6979      	ldr	r1, [r7, #20]
 800795e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007962:	e005      	b.n	8007970 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800796c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	cff00000 	.word	0xcff00000

08007984 <memset>:
 8007984:	4402      	add	r2, r0
 8007986:	4603      	mov	r3, r0
 8007988:	4293      	cmp	r3, r2
 800798a:	d100      	bne.n	800798e <memset+0xa>
 800798c:	4770      	bx	lr
 800798e:	f803 1b01 	strb.w	r1, [r3], #1
 8007992:	e7f9      	b.n	8007988 <memset+0x4>

08007994 <__errno>:
 8007994:	4b01      	ldr	r3, [pc, #4]	@ (800799c <__errno+0x8>)
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	2000004c 	.word	0x2000004c

080079a0 <__libc_init_array>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	4d0d      	ldr	r5, [pc, #52]	@ (80079d8 <__libc_init_array+0x38>)
 80079a4:	4c0d      	ldr	r4, [pc, #52]	@ (80079dc <__libc_init_array+0x3c>)
 80079a6:	1b64      	subs	r4, r4, r5
 80079a8:	10a4      	asrs	r4, r4, #2
 80079aa:	2600      	movs	r6, #0
 80079ac:	42a6      	cmp	r6, r4
 80079ae:	d109      	bne.n	80079c4 <__libc_init_array+0x24>
 80079b0:	4d0b      	ldr	r5, [pc, #44]	@ (80079e0 <__libc_init_array+0x40>)
 80079b2:	4c0c      	ldr	r4, [pc, #48]	@ (80079e4 <__libc_init_array+0x44>)
 80079b4:	f000 f91e 	bl	8007bf4 <_init>
 80079b8:	1b64      	subs	r4, r4, r5
 80079ba:	10a4      	asrs	r4, r4, #2
 80079bc:	2600      	movs	r6, #0
 80079be:	42a6      	cmp	r6, r4
 80079c0:	d105      	bne.n	80079ce <__libc_init_array+0x2e>
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c8:	4798      	blx	r3
 80079ca:	3601      	adds	r6, #1
 80079cc:	e7ee      	b.n	80079ac <__libc_init_array+0xc>
 80079ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d2:	4798      	blx	r3
 80079d4:	3601      	adds	r6, #1
 80079d6:	e7f2      	b.n	80079be <__libc_init_array+0x1e>
 80079d8:	0800ac9c 	.word	0x0800ac9c
 80079dc:	0800ac9c 	.word	0x0800ac9c
 80079e0:	0800ac9c 	.word	0x0800ac9c
 80079e4:	0800aca0 	.word	0x0800aca0

080079e8 <sqrt>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	ed2d 8b02 	vpush	{d8}
 80079ee:	ec55 4b10 	vmov	r4, r5, d0
 80079f2:	f000 f825 	bl	8007a40 <__ieee754_sqrt>
 80079f6:	4622      	mov	r2, r4
 80079f8:	462b      	mov	r3, r5
 80079fa:	4620      	mov	r0, r4
 80079fc:	4629      	mov	r1, r5
 80079fe:	eeb0 8a40 	vmov.f32	s16, s0
 8007a02:	eef0 8a60 	vmov.f32	s17, s1
 8007a06:	f7f9 f835 	bl	8000a74 <__aeabi_dcmpun>
 8007a0a:	b990      	cbnz	r0, 8007a32 <sqrt+0x4a>
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4620      	mov	r0, r4
 8007a12:	4629      	mov	r1, r5
 8007a14:	f7f9 f806 	bl	8000a24 <__aeabi_dcmplt>
 8007a18:	b158      	cbz	r0, 8007a32 <sqrt+0x4a>
 8007a1a:	f7ff ffbb 	bl	8007994 <__errno>
 8007a1e:	2321      	movs	r3, #33	@ 0x21
 8007a20:	6003      	str	r3, [r0, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	4610      	mov	r0, r2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f7f8 feb3 	bl	8000794 <__aeabi_ddiv>
 8007a2e:	ec41 0b18 	vmov	d8, r0, r1
 8007a32:	eeb0 0a48 	vmov.f32	s0, s16
 8007a36:	eef0 0a68 	vmov.f32	s1, s17
 8007a3a:	ecbd 8b02 	vpop	{d8}
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}

08007a40 <__ieee754_sqrt>:
 8007a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	4a68      	ldr	r2, [pc, #416]	@ (8007be8 <__ieee754_sqrt+0x1a8>)
 8007a46:	ec55 4b10 	vmov	r4, r5, d0
 8007a4a:	43aa      	bics	r2, r5
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	4621      	mov	r1, r4
 8007a50:	d110      	bne.n	8007a74 <__ieee754_sqrt+0x34>
 8007a52:	4622      	mov	r2, r4
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f7f8 fd72 	bl	8000540 <__aeabi_dmul>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4620      	mov	r0, r4
 8007a62:	4629      	mov	r1, r5
 8007a64:	f7f8 fbb6 	bl	80001d4 <__adddf3>
 8007a68:	4604      	mov	r4, r0
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	ec45 4b10 	vmov	d0, r4, r5
 8007a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	dc0e      	bgt.n	8007a96 <__ieee754_sqrt+0x56>
 8007a78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007a7c:	4322      	orrs	r2, r4
 8007a7e:	d0f5      	beq.n	8007a6c <__ieee754_sqrt+0x2c>
 8007a80:	b19d      	cbz	r5, 8007aaa <__ieee754_sqrt+0x6a>
 8007a82:	4622      	mov	r2, r4
 8007a84:	4620      	mov	r0, r4
 8007a86:	4629      	mov	r1, r5
 8007a88:	f7f8 fba2 	bl	80001d0 <__aeabi_dsub>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	f7f8 fe80 	bl	8000794 <__aeabi_ddiv>
 8007a94:	e7e8      	b.n	8007a68 <__ieee754_sqrt+0x28>
 8007a96:	152a      	asrs	r2, r5, #20
 8007a98:	d115      	bne.n	8007ac6 <__ieee754_sqrt+0x86>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e009      	b.n	8007ab2 <__ieee754_sqrt+0x72>
 8007a9e:	0acb      	lsrs	r3, r1, #11
 8007aa0:	3a15      	subs	r2, #21
 8007aa2:	0549      	lsls	r1, r1, #21
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0fa      	beq.n	8007a9e <__ieee754_sqrt+0x5e>
 8007aa8:	e7f7      	b.n	8007a9a <__ieee754_sqrt+0x5a>
 8007aaa:	462a      	mov	r2, r5
 8007aac:	e7fa      	b.n	8007aa4 <__ieee754_sqrt+0x64>
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	02dc      	lsls	r4, r3, #11
 8007ab4:	d5fb      	bpl.n	8007aae <__ieee754_sqrt+0x6e>
 8007ab6:	1e44      	subs	r4, r0, #1
 8007ab8:	1b12      	subs	r2, r2, r4
 8007aba:	f1c0 0420 	rsb	r4, r0, #32
 8007abe:	fa21 f404 	lsr.w	r4, r1, r4
 8007ac2:	4323      	orrs	r3, r4
 8007ac4:	4081      	lsls	r1, r0
 8007ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ad2:	07d2      	lsls	r2, r2, #31
 8007ad4:	bf5c      	itt	pl
 8007ad6:	005b      	lslpl	r3, r3, #1
 8007ad8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007ae0:	bf58      	it	pl
 8007ae2:	0049      	lslpl	r1, r1, #1
 8007ae4:	2600      	movs	r6, #0
 8007ae6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007aea:	106d      	asrs	r5, r5, #1
 8007aec:	0049      	lsls	r1, r1, #1
 8007aee:	2016      	movs	r0, #22
 8007af0:	4632      	mov	r2, r6
 8007af2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007af6:	1917      	adds	r7, r2, r4
 8007af8:	429f      	cmp	r7, r3
 8007afa:	bfde      	ittt	le
 8007afc:	193a      	addle	r2, r7, r4
 8007afe:	1bdb      	suble	r3, r3, r7
 8007b00:	1936      	addle	r6, r6, r4
 8007b02:	0fcf      	lsrs	r7, r1, #31
 8007b04:	3801      	subs	r0, #1
 8007b06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007b0a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007b0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007b12:	d1f0      	bne.n	8007af6 <__ieee754_sqrt+0xb6>
 8007b14:	4604      	mov	r4, r0
 8007b16:	2720      	movs	r7, #32
 8007b18:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	eb00 0e0c 	add.w	lr, r0, ip
 8007b22:	db02      	blt.n	8007b2a <__ieee754_sqrt+0xea>
 8007b24:	d113      	bne.n	8007b4e <__ieee754_sqrt+0x10e>
 8007b26:	458e      	cmp	lr, r1
 8007b28:	d811      	bhi.n	8007b4e <__ieee754_sqrt+0x10e>
 8007b2a:	f1be 0f00 	cmp.w	lr, #0
 8007b2e:	eb0e 000c 	add.w	r0, lr, ip
 8007b32:	da42      	bge.n	8007bba <__ieee754_sqrt+0x17a>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	db40      	blt.n	8007bba <__ieee754_sqrt+0x17a>
 8007b38:	f102 0801 	add.w	r8, r2, #1
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	458e      	cmp	lr, r1
 8007b40:	bf88      	it	hi
 8007b42:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8007b46:	eba1 010e 	sub.w	r1, r1, lr
 8007b4a:	4464      	add	r4, ip
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007b52:	3f01      	subs	r7, #1
 8007b54:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007b58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007b5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007b60:	d1dc      	bne.n	8007b1c <__ieee754_sqrt+0xdc>
 8007b62:	4319      	orrs	r1, r3
 8007b64:	d01b      	beq.n	8007b9e <__ieee754_sqrt+0x15e>
 8007b66:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007bec <__ieee754_sqrt+0x1ac>
 8007b6a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007bf0 <__ieee754_sqrt+0x1b0>
 8007b6e:	e9da 0100 	ldrd	r0, r1, [sl]
 8007b72:	e9db 2300 	ldrd	r2, r3, [fp]
 8007b76:	f7f8 fb2b 	bl	80001d0 <__aeabi_dsub>
 8007b7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4640      	mov	r0, r8
 8007b84:	4649      	mov	r1, r9
 8007b86:	f7f8 ff57 	bl	8000a38 <__aeabi_dcmple>
 8007b8a:	b140      	cbz	r0, 8007b9e <__ieee754_sqrt+0x15e>
 8007b8c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8007b90:	e9da 0100 	ldrd	r0, r1, [sl]
 8007b94:	e9db 2300 	ldrd	r2, r3, [fp]
 8007b98:	d111      	bne.n	8007bbe <__ieee754_sqrt+0x17e>
 8007b9a:	3601      	adds	r6, #1
 8007b9c:	463c      	mov	r4, r7
 8007b9e:	1072      	asrs	r2, r6, #1
 8007ba0:	0863      	lsrs	r3, r4, #1
 8007ba2:	07f1      	lsls	r1, r6, #31
 8007ba4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007ba8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007bac:	bf48      	it	mi
 8007bae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007bb2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	e756      	b.n	8007a68 <__ieee754_sqrt+0x28>
 8007bba:	4690      	mov	r8, r2
 8007bbc:	e7be      	b.n	8007b3c <__ieee754_sqrt+0xfc>
 8007bbe:	f7f8 fb09 	bl	80001d4 <__adddf3>
 8007bc2:	e9da 8900 	ldrd	r8, r9, [sl]
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4640      	mov	r0, r8
 8007bcc:	4649      	mov	r1, r9
 8007bce:	f7f8 ff29 	bl	8000a24 <__aeabi_dcmplt>
 8007bd2:	b120      	cbz	r0, 8007bde <__ieee754_sqrt+0x19e>
 8007bd4:	1ca0      	adds	r0, r4, #2
 8007bd6:	bf08      	it	eq
 8007bd8:	3601      	addeq	r6, #1
 8007bda:	3402      	adds	r4, #2
 8007bdc:	e7df      	b.n	8007b9e <__ieee754_sqrt+0x15e>
 8007bde:	1c63      	adds	r3, r4, #1
 8007be0:	f023 0401 	bic.w	r4, r3, #1
 8007be4:	e7db      	b.n	8007b9e <__ieee754_sqrt+0x15e>
 8007be6:	bf00      	nop
 8007be8:	7ff00000 	.word	0x7ff00000
 8007bec:	200000a8 	.word	0x200000a8
 8007bf0:	200000a0 	.word	0x200000a0

08007bf4 <_init>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	bf00      	nop
 8007bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfa:	bc08      	pop	{r3}
 8007bfc:	469e      	mov	lr, r3
 8007bfe:	4770      	bx	lr

08007c00 <_fini>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	bf00      	nop
 8007c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c06:	bc08      	pop	{r3}
 8007c08:	469e      	mov	lr, r3
 8007c0a:	4770      	bx	lr
