
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006374  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003018  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009514  08009514  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08009514  08009514  00019514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800951c  0800951c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800951c  0800951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009520  08009520  00019520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08009524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          00000200  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000228  20000228  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e5f  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003169  00000000  00000000  00035eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00039020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001108  00000000  00000000  0003a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023102  00000000  00000000  0003b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e18  00000000  00000000  0005e4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf901  00000000  00000000  000752ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00144bbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bf0  00000000  00000000  00144c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080064e4 	.word	0x080064e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080064e4 	.word	0x080064e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2108      	movs	r1, #8
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <button_init+0x14>)
 80004ca:	f002 ff39 	bl	8003340 <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <button_Scan>:

void button_Scan(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2108      	movs	r1, #8
 80004e2:	482f      	ldr	r0, [pc, #188]	; (80005a0 <button_Scan+0xc8>)
 80004e4:	f002 ff2c 	bl	8003340 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2108      	movs	r1, #8
 80004ec:	482c      	ldr	r0, [pc, #176]	; (80005a0 <button_Scan+0xc8>)
 80004ee:	f002 ff27 	bl	8003340 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f2:	230a      	movs	r3, #10
 80004f4:	2202      	movs	r2, #2
 80004f6:	492b      	ldr	r1, [pc, #172]	; (80005a4 <button_Scan+0xcc>)
 80004f8:	482b      	ldr	r0, [pc, #172]	; (80005a8 <button_Scan+0xd0>)
 80004fa:	f004 fe4e 	bl	800519a <HAL_SPI_Receive>
	  int button_index = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000506:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	e03f      	b.n	800058e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db06      	blt.n	8000522 <button_Scan+0x4a>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b03      	cmp	r3, #3
 8000518:	dc03      	bgt.n	8000522 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e018      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b03      	cmp	r3, #3
 8000526:	dd07      	ble.n	8000538 <button_Scan+0x60>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b07      	cmp	r3, #7
 800052c:	dc04      	bgt.n	8000538 <button_Scan+0x60>
			  button_index = 7 - i;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f1c3 0307 	rsb	r3, r3, #7
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	e00d      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dd06      	ble.n	800054c <button_Scan+0x74>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0b      	cmp	r3, #11
 8000542:	dc03      	bgt.n	800054c <button_Scan+0x74>
			  button_index = i + 4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3304      	adds	r3, #4
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e003      	b.n	8000554 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f1c3 0317 	rsb	r3, r3, #23
 8000552:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <button_Scan+0xcc>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	897b      	ldrh	r3, [r7, #10]
 800055a:	4013      	ands	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d005      	beq.n	800056e <button_Scan+0x96>
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <button_Scan+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2100      	movs	r1, #0
 8000568:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800056c:	e009      	b.n	8000582 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <button_Scan+0xd4>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000576:	3301      	adds	r3, #1
 8000578:	b299      	uxth	r1, r3
 800057a:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <button_Scan+0xd4>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000582:	897b      	ldrh	r3, [r7, #10]
 8000584:	085b      	lsrs	r3, r3, #1
 8000586:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	ddbc      	ble.n	800050e <button_Scan+0x36>
	  }
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	20000044 	.word	0x20000044
 80005a8:	20000184 	.word	0x20000184
 80005ac:	20000074 	.word	0x20000074

080005b0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005b4:	201e      	movs	r0, #30
 80005b6:	f002 fb31 	bl	8002c1c <DEC2BCD>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <ds3231_init+0x80>)
 80005c0:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005c2:	2016      	movs	r0, #22
 80005c4:	f002 fb2a 	bl	8002c1c <DEC2BCD>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <ds3231_init+0x80>)
 80005ce:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005d0:	2015      	movs	r0, #21
 80005d2:	f002 fb23 	bl	8002c1c <DEC2BCD>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <ds3231_init+0x80>)
 80005dc:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005de:	2006      	movs	r0, #6
 80005e0:	f002 fb1c 	bl	8002c1c <DEC2BCD>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <ds3231_init+0x80>)
 80005ea:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005ec:	200f      	movs	r0, #15
 80005ee:	f002 fb15 	bl	8002c1c <DEC2BCD>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <ds3231_init+0x80>)
 80005f8:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80005fa:	2009      	movs	r0, #9
 80005fc:	f002 fb0e 	bl	8002c1c <DEC2BCD>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <ds3231_init+0x80>)
 8000606:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000608:	2017      	movs	r0, #23
 800060a:	f002 fb07 	bl	8002c1c <DEC2BCD>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <ds3231_init+0x80>)
 8000614:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000616:	2332      	movs	r3, #50	; 0x32
 8000618:	2203      	movs	r2, #3
 800061a:	21d0      	movs	r1, #208	; 0xd0
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <ds3231_init+0x84>)
 800061e:	f003 fb0d 	bl	8003c3c <HAL_I2C_IsDeviceReady>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d000      	beq.n	800062a <ds3231_init+0x7a>
		while(1);
 8000628:	e7fe      	b.n	8000628 <ds3231_init+0x78>
	};
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000009c 	.word	0x2000009c
 8000634:	200000f4 	.word	0x200000f4

08000638 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af04      	add	r7, sp, #16
 800063e:	4603      	mov	r3, r0
 8000640:	460a      	mov	r2, r1
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	4613      	mov	r3, r2
 8000646:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fae6 	bl	8002c1c <DEC2BCD>
 8000650:	4603      	mov	r3, r0
 8000652:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	b29a      	uxth	r2, r3
 8000658:	230a      	movs	r3, #10
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	2301      	movs	r3, #1
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	f107 030f 	add.w	r3, r7, #15
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	21d0      	movs	r1, #208	; 0xd0
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <ds3231_Write+0x40>)
 800066c:	f002 ffc6 	bl	80035fc <HAL_I2C_Mem_Write>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000f4 	.word	0x200000f4

0800067c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000682:	230a      	movs	r3, #10
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	2307      	movs	r3, #7
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <ds3231_ReadTime+0xa4>)
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	2200      	movs	r2, #0
 8000692:	21d0      	movs	r1, #208	; 0xd0
 8000694:	4823      	ldr	r0, [pc, #140]	; (8000724 <ds3231_ReadTime+0xa8>)
 8000696:	f003 f8ab 	bl	80037f0 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <ds3231_ReadTime+0xa4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 faa2 	bl	8002be8 <BCD2DEC>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <ds3231_ReadTime+0xac>)
 80006aa:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006ae:	785b      	ldrb	r3, [r3, #1]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fa99 	bl	8002be8 <BCD2DEC>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <ds3231_ReadTime+0xb0>)
 80006bc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fa90 	bl	8002be8 <BCD2DEC>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <ds3231_ReadTime+0xb4>)
 80006ce:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006d2:	78db      	ldrb	r3, [r3, #3]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fa87 	bl	8002be8 <BCD2DEC>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <ds3231_ReadTime+0xb8>)
 80006e0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fa7e 	bl	8002be8 <BCD2DEC>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <ds3231_ReadTime+0xbc>)
 80006f2:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006f6:	795b      	ldrb	r3, [r3, #5]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fa75 	bl	8002be8 <BCD2DEC>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <ds3231_ReadTime+0xc0>)
 8000704:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <ds3231_ReadTime+0xa4>)
 8000708:	799b      	ldrb	r3, [r3, #6]
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fa6c 	bl	8002be8 <BCD2DEC>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <ds3231_ReadTime+0xc4>)
 8000716:	701a      	strb	r2, [r3, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000009c 	.word	0x2000009c
 8000724:	200000f4 	.word	0x200000f4
 8000728:	20000094 	.word	0x20000094
 800072c:	20000096 	.word	0x20000096
 8000730:	20000099 	.word	0x20000099
 8000734:	20000098 	.word	0x20000098
 8000738:	20000097 	.word	0x20000097
 800073c:	2000009a 	.word	0x2000009a
 8000740:	20000095 	.word	0x20000095

08000744 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	; 0x38
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]
 800076e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000770:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_FSMC_Init+0xec>)
 8000772:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000776:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000778:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_FSMC_Init+0xec>)
 800077a:	4a2e      	ldr	r2, [pc, #184]	; (8000834 <MX_FSMC_Init+0xf0>)
 800077c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_FSMC_Init+0xec>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000784:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_FSMC_Init+0xec>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_FSMC_Init+0xec>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <MX_FSMC_Init+0xec>)
 8000792:	2210      	movs	r2, #16
 8000794:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_FSMC_Init+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MX_FSMC_Init+0xec>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_FSMC_Init+0xec>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_FSMC_Init+0xec>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_FSMC_Init+0xec>)
 80007b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_FSMC_Init+0xec>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_FSMC_Init+0xec>)
 80007be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_FSMC_Init+0xec>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_FSMC_Init+0xec>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_FSMC_Init+0xec>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007d6:	230f      	movs	r3, #15
 80007d8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007da:	230f      	movs	r3, #15
 80007dc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007de:	233c      	movs	r3, #60	; 0x3c
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007e6:	2310      	movs	r3, #16
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007ea:	2311      	movs	r3, #17
 80007ec:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007ee:	2300      	movs	r3, #0
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007f2:	2308      	movs	r3, #8
 80007f4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007f6:	230f      	movs	r3, #15
 80007f8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007fa:	2309      	movs	r3, #9
 80007fc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000802:	2310      	movs	r3, #16
 8000804:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000806:	2311      	movs	r3, #17
 8000808:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800080e:	463a      	mov	r2, r7
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_FSMC_Init+0xec>)
 8000818:	f005 f8a2 	bl	8005960 <HAL_SRAM_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000822:	f002 f82d 	bl	8002880 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000826:	bf00      	nop
 8000828:	3738      	adds	r7, #56	; 0x38
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000a4 	.word	0x200000a4
 8000834:	a0000104 	.word	0xa0000104

08000838 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <HAL_FSMC_MspInit+0x88>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d131      	bne.n	80008b8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <HAL_FSMC_MspInit+0x88>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <HAL_FSMC_MspInit+0x8c>)
 8000860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <HAL_FSMC_MspInit+0x8c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6393      	str	r3, [r2, #56]	; 0x38
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <HAL_FSMC_MspInit+0x8c>)
 800086c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000876:	f64f 7388 	movw	r3, #65416	; 0xff88
 800087a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000888:	230c      	movs	r3, #12
 800088a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <HAL_FSMC_MspInit+0x90>)
 8000892:	f002 fbb9 	bl	8003008 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000896:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800089a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008a8:	230c      	movs	r3, #12
 80008aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4806      	ldr	r0, [pc, #24]	; (80008cc <HAL_FSMC_MspInit+0x94>)
 80008b2:	f002 fba9 	bl	8003008 <HAL_GPIO_Init>
 80008b6:	e000      	b.n	80008ba <HAL_FSMC_MspInit+0x82>
    return;
 80008b8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000048 	.word	0x20000048
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40020c00 	.word	0x40020c00

080008d0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008d8:	f7ff ffae 	bl	8000838 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b6f      	ldr	r3, [pc, #444]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a6e      	ldr	r2, [pc, #440]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000904:	f043 0310 	orr.w	r3, r3, #16
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b6c      	ldr	r3, [pc, #432]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0310 	and.w	r3, r3, #16
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b68      	ldr	r3, [pc, #416]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a67      	ldr	r2, [pc, #412]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b65      	ldr	r3, [pc, #404]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b61      	ldr	r3, [pc, #388]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a60      	ldr	r2, [pc, #384]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b5e      	ldr	r3, [pc, #376]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a59      	ldr	r2, [pc, #356]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b57      	ldr	r3, [pc, #348]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b53      	ldr	r3, [pc, #332]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a52      	ldr	r2, [pc, #328]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b50      	ldr	r3, [pc, #320]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b4c      	ldr	r3, [pc, #304]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a4b      	ldr	r2, [pc, #300]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b49      	ldr	r3, [pc, #292]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b45      	ldr	r3, [pc, #276]	; (8000abc <MX_GPIO_Init+0x1d8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a44      	ldr	r2, [pc, #272]	; (8000abc <MX_GPIO_Init+0x1d8>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b42      	ldr	r3, [pc, #264]	; (8000abc <MX_GPIO_Init+0x1d8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2170      	movs	r1, #112	; 0x70
 80009c2:	483f      	ldr	r0, [pc, #252]	; (8000ac0 <MX_GPIO_Init+0x1dc>)
 80009c4:	f002 fcbc 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ce:	483d      	ldr	r0, [pc, #244]	; (8000ac4 <MX_GPIO_Init+0x1e0>)
 80009d0:	f002 fcb6 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2140      	movs	r1, #64	; 0x40
 80009d8:	483b      	ldr	r0, [pc, #236]	; (8000ac8 <MX_GPIO_Init+0x1e4>)
 80009da:	f002 fcb1 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e4:	4839      	ldr	r0, [pc, #228]	; (8000acc <MX_GPIO_Init+0x1e8>)
 80009e6:	f002 fcab 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2108      	movs	r1, #8
 80009ee:	4838      	ldr	r0, [pc, #224]	; (8000ad0 <MX_GPIO_Init+0x1ec>)
 80009f0:	f002 fca6 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009f4:	2370      	movs	r3, #112	; 0x70
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	482d      	ldr	r0, [pc, #180]	; (8000ac0 <MX_GPIO_Init+0x1dc>)
 8000a0c:	f002 fafc 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4826      	ldr	r0, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0x1e0>)
 8000a2a:	f002 faed 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a2e:	23c0      	movs	r3, #192	; 0xc0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4822      	ldr	r0, [pc, #136]	; (8000acc <MX_GPIO_Init+0x1e8>)
 8000a42:	f002 fae1 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a46:	2330      	movs	r3, #48	; 0x30
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <MX_GPIO_Init+0x1e0>)
 8000a5a:	f002 fad5 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a5e:	2340      	movs	r3, #64	; 0x40
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000a76:	f002 fac7 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	480e      	ldr	r0, [pc, #56]	; (8000acc <MX_GPIO_Init+0x1e8>)
 8000a94:	f002 fab8 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <MX_GPIO_Init+0x1ec>)
 8000ab0:	f002 faaa 	bl	8003008 <HAL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3730      	adds	r7, #48	; 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40021800 	.word	0x40021800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <MX_I2C1_Init+0x54>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x58>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b12:	f002 fc2f 	bl	8003374 <HAL_I2C_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b1c:	f001 feb0 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200000f4 	.word	0x200000f4
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	000186a0 	.word	0x000186a0

08000b30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_I2C_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12b      	bne.n	8000baa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b6e:	23c0      	movs	r3, #192	; 0xc0
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b72:	2312      	movs	r3, #18
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <HAL_I2C_MspInit+0x8c>)
 8000b8a:	f002 fa3d 	bl	8003008 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <LCD_WR_REG+0x1c>)
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	8013      	strh	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	600ffffe 	.word	0x600ffffe

08000be0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <LCD_WR_DATA+0x1c>)
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	8053      	strh	r3, [r2, #2]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	600ffffe 	.word	0x600ffffe

08000c00 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <LCD_RD_DATA+0x20>)
 8000c08:	885b      	ldrh	r3, [r3, #2]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	b29b      	uxth	r3, r3
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	600ffffe 	.word	0x600ffffe

08000c24 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	4611      	mov	r1, r2
 8000c30:	461a      	mov	r2, r3
 8000c32:	4623      	mov	r3, r4
 8000c34:	80fb      	strh	r3, [r7, #6]
 8000c36:	4603      	mov	r3, r0
 8000c38:	80bb      	strh	r3, [r7, #4]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	807b      	strh	r3, [r7, #2]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c42:	202a      	movs	r0, #42	; 0x2a
 8000c44:	f7ff ffbc 	bl	8000bc0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ffc6 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffc0 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ffba 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ffb4 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c78:	202b      	movs	r0, #43	; 0x2b
 8000c7a:	f7ff ffa1 	bl	8000bc0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c7e:	88bb      	ldrh	r3, [r7, #4]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ffab 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ffa5 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000c96:	883b      	ldrh	r3, [r7, #0]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff9f 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff99 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cae:	202c      	movs	r0, #44	; 0x2c
 8000cb0:	f7ff ff86 	bl	8000bc0 <LCD_WR_REG>
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd90      	pop	{r4, r7, pc}

08000cbc <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <lcd_Clear+0x70>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <lcd_Clear+0x70>)
 8000ce0:	885b      	ldrh	r3, [r3, #2]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff ff9b 	bl	8000c24 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	81fb      	strh	r3, [r7, #14]
 8000cf2:	e011      	b.n	8000d18 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	81bb      	strh	r3, [r7, #12]
 8000cf8:	e006      	b.n	8000d08 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff6f 	bl	8000be0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d02:	89bb      	ldrh	r3, [r7, #12]
 8000d04:	3301      	adds	r3, #1
 8000d06:	81bb      	strh	r3, [r7, #12]
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <lcd_Clear+0x70>)
 8000d0a:	885b      	ldrh	r3, [r3, #2]
 8000d0c:	89ba      	ldrh	r2, [r7, #12]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3f3      	bcc.n	8000cfa <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	3301      	adds	r3, #1
 8000d16:	81fb      	strh	r3, [r7, #14]
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <lcd_Clear+0x70>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	89fa      	ldrh	r2, [r7, #14]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3e8      	bcc.n	8000cf4 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000148 	.word	0x20000148

08000d30 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000d42:	88bb      	ldrh	r3, [r7, #4]
 8000d44:	88fa      	ldrh	r2, [r7, #6]
 8000d46:	88b9      	ldrh	r1, [r7, #4]
 8000d48:	88f8      	ldrh	r0, [r7, #6]
 8000d4a:	f7ff ff6b 	bl	8000c24 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff45 	bl	8000be0 <LCD_WR_DATA>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4604      	mov	r4, r0
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4623      	mov	r3, r4
 8000d70:	80fb      	strh	r3, [r7, #6]
 8000d72:	4603      	mov	r3, r0
 8000d74:	80bb      	strh	r3, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000d86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf14      	ite	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	2300      	moveq	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	fb12 f303 	smulbb	r3, r2, r3
 8000db6:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	3b20      	subs	r3, #32
 8000dbc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b29c      	uxth	r4, r3
 8000dcc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	88b9      	ldrh	r1, [r7, #4]
 8000dde:	88f8      	ldrh	r0, [r7, #6]
 8000de0:	4622      	mov	r2, r4
 8000de2:	f7ff ff1f 	bl	8000c24 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	827b      	strh	r3, [r7, #18]
 8000dea:	e07a      	b.n	8000ee2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000dec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000df0:	2b0c      	cmp	r3, #12
 8000df2:	d028      	beq.n	8000e46 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000df4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000df8:	2b10      	cmp	r3, #16
 8000dfa:	d108      	bne.n	8000e0e <lcd_ShowChar+0xae>
 8000dfc:	78fa      	ldrb	r2, [r7, #3]
 8000dfe:	8a7b      	ldrh	r3, [r7, #18]
 8000e00:	493c      	ldr	r1, [pc, #240]	; (8000ef4 <lcd_ShowChar+0x194>)
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	440a      	add	r2, r1
 8000e06:	4413      	add	r3, r2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	75fb      	strb	r3, [r7, #23]
 8000e0c:	e01b      	b.n	8000e46 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000e0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e12:	2b18      	cmp	r3, #24
 8000e14:	d10b      	bne.n	8000e2e <lcd_ShowChar+0xce>
 8000e16:	78fa      	ldrb	r2, [r7, #3]
 8000e18:	8a79      	ldrh	r1, [r7, #18]
 8000e1a:	4837      	ldr	r0, [pc, #220]	; (8000ef8 <lcd_ShowChar+0x198>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	4403      	add	r3, r0
 8000e26:	440b      	add	r3, r1
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	75fb      	strb	r3, [r7, #23]
 8000e2c:	e00b      	b.n	8000e46 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000e2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e32:	2b20      	cmp	r3, #32
 8000e34:	d15a      	bne.n	8000eec <lcd_ShowChar+0x18c>
 8000e36:	78fa      	ldrb	r2, [r7, #3]
 8000e38:	8a7b      	ldrh	r3, [r7, #18]
 8000e3a:	4930      	ldr	r1, [pc, #192]	; (8000efc <lcd_ShowChar+0x19c>)
 8000e3c:	0192      	lsls	r2, r2, #6
 8000e3e:	440a      	add	r2, r1
 8000e40:	4413      	add	r3, r2
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	75bb      	strb	r3, [r7, #22]
 8000e4a:	e044      	b.n	8000ed6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000e4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d120      	bne.n	8000e96 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000e54:	7dfa      	ldrb	r2, [r7, #23]
 8000e56:	7dbb      	ldrb	r3, [r7, #22]
 8000e58:	fa42 f303 	asr.w	r3, r2, r3
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d004      	beq.n	8000e6e <lcd_ShowChar+0x10e>
 8000e64:	883b      	ldrh	r3, [r7, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff feba 	bl	8000be0 <LCD_WR_DATA>
 8000e6c:	e003      	b.n	8000e76 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000e6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff feb5 	bl	8000be0 <LCD_WR_DATA>
				m++;
 8000e76:	7d7b      	ldrb	r3, [r7, #21]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000e7c:	7d7b      	ldrb	r3, [r7, #21]
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e84:	fb02 f201 	mul.w	r2, r2, r1
 8000e88:	1a9b      	subs	r3, r3, r2
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d11f      	bne.n	8000ed0 <lcd_ShowChar+0x170>
				{
					m=0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	757b      	strb	r3, [r7, #21]
					break;
 8000e94:	e022      	b.n	8000edc <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000e96:	7dfa      	ldrb	r2, [r7, #23]
 8000e98:	7dbb      	ldrb	r3, [r7, #22]
 8000e9a:	fa42 f303 	asr.w	r3, r2, r3
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d005      	beq.n	8000eb2 <lcd_ShowChar+0x152>
 8000ea6:	883a      	ldrh	r2, [r7, #0]
 8000ea8:	88b9      	ldrh	r1, [r7, #4]
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff3f 	bl	8000d30 <lcd_DrawPoint>
				x++;
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000eb8:	88fa      	ldrh	r2, [r7, #6]
 8000eba:	8a3b      	ldrh	r3, [r7, #16]
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d105      	bne.n	8000ed0 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000ec4:	8a3b      	ldrh	r3, [r7, #16]
 8000ec6:	80fb      	strh	r3, [r7, #6]
					y++;
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	80bb      	strh	r3, [r7, #4]
					break;
 8000ece:	e005      	b.n	8000edc <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000ed0:	7dbb      	ldrb	r3, [r7, #22]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	75bb      	strb	r3, [r7, #22]
 8000ed6:	7dbb      	ldrb	r3, [r7, #22]
 8000ed8:	2b07      	cmp	r3, #7
 8000eda:	d9b7      	bls.n	8000e4c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000edc:	8a7b      	ldrh	r3, [r7, #18]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	827b      	strh	r3, [r7, #18]
 8000ee2:	8a7a      	ldrh	r2, [r7, #18]
 8000ee4:	89bb      	ldrh	r3, [r7, #12]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d380      	bcc.n	8000dec <lcd_ShowChar+0x8c>
 8000eea:	e000      	b.n	8000eee <lcd_ShowChar+0x18e>
		else return;
 8000eec:	bf00      	nop
				}
			}
		}
	}
}
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	0800657c 	.word	0x0800657c
 8000ef8:	08006b6c 	.word	0x08006b6c
 8000efc:	08007d3c 	.word	0x08007d3c

08000f00 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	460a      	mov	r2, r1
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f14:	e004      	b.n	8000f20 <mypow+0x20>
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	fb02 f303 	mul.w	r3, r2, r3
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	1e5a      	subs	r2, r3, #1
 8000f24:	71ba      	strb	r2, [r7, #6]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f5      	bne.n	8000f16 <mypow+0x16>
	return result;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4623      	mov	r3, r4
 8000f48:	80fb      	strh	r3, [r7, #6]
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80bb      	strh	r3, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	807b      	strh	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f5e:	085b      	lsrs	r3, r3, #1
 8000f60:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e059      	b.n	800101c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000f68:	887c      	ldrh	r4, [r7, #2]
 8000f6a:	787a      	ldrb	r2, [r7, #1]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3b01      	subs	r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f7ff ffc1 	bl	8000f00 <mypow>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	fbb4 f1f3 	udiv	r1, r4, r3
 8000f84:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <lcd_ShowIntNum+0xf8>)
 8000f86:	fba3 2301 	umull	r2, r3, r3, r1
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	1aca      	subs	r2, r1, r3
 8000f96:	4613      	mov	r3, r2
 8000f98:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d121      	bne.n	8000fe4 <lcd_ShowIntNum+0xac>
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	787b      	ldrb	r3, [r7, #1]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	da1c      	bge.n	8000fe4 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000faa:	7b3b      	ldrb	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d117      	bne.n	8000fe0 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	7b7b      	ldrb	r3, [r7, #13]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	fb12 f303 	smulbb	r3, r2, r3
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b298      	uxth	r0, r3
 8000fc4:	8c3a      	ldrh	r2, [r7, #32]
 8000fc6:	88b9      	ldrh	r1, [r7, #4]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	2220      	movs	r2, #32
 8000fda:	f7ff fec1 	bl	8000d60 <lcd_ShowChar>
				continue;
 8000fde:	e01a      	b.n	8001016 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	7b7b      	ldrb	r3, [r7, #13]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	fb12 f303 	smulbb	r3, r2, r3
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b298      	uxth	r0, r3
 8000ff8:	7b3b      	ldrb	r3, [r7, #12]
 8000ffa:	3330      	adds	r3, #48	; 0x30
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	8c3c      	ldrh	r4, [r7, #32]
 8001000:	88b9      	ldrh	r1, [r7, #4]
 8001002:	2300      	movs	r3, #0
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	4623      	mov	r3, r4
 8001012:	f7ff fea5 	bl	8000d60 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	3301      	adds	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	787b      	ldrb	r3, [r7, #1]
 8001020:	429a      	cmp	r2, r3
 8001022:	d3a1      	bcc.n	8000f68 <lcd_ShowIntNum+0x30>
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	cccccccd 	.word	0xcccccccd

08001034 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	b2db      	uxtb	r3, r3
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <lcd_SetDir+0x44>)
 8001050:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001054:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <lcd_SetDir+0x44>)
 8001058:	22f0      	movs	r2, #240	; 0xf0
 800105a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800105c:	e006      	b.n	800106c <lcd_SetDir+0x38>
		lcddev.width=240;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <lcd_SetDir+0x44>)
 8001060:	22f0      	movs	r2, #240	; 0xf0
 8001062:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <lcd_SetDir+0x44>)
 8001066:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800106a:	805a      	strh	r2, [r3, #2]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20000148 	.word	0x20000148

0800107c <lcd_init>:


void lcd_init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001086:	48aa      	ldr	r0, [pc, #680]	; (8001330 <lcd_init+0x2b4>)
 8001088:	f002 f95a 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800108c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001090:	f001 fe84 	bl	8002d9c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109a:	48a5      	ldr	r0, [pc, #660]	; (8001330 <lcd_init+0x2b4>)
 800109c:	f002 f950 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a4:	f001 fe7a 	bl	8002d9c <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff ffc3 	bl	8001034 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80010ae:	20d3      	movs	r0, #211	; 0xd3
 80010b0:	f7ff fd86 	bl	8000bc0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80010b4:	f7ff fda4 	bl	8000c00 <LCD_RD_DATA>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b9d      	ldr	r3, [pc, #628]	; (8001334 <lcd_init+0x2b8>)
 80010be:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010c0:	f7ff fd9e 	bl	8000c00 <LCD_RD_DATA>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b9a      	ldr	r3, [pc, #616]	; (8001334 <lcd_init+0x2b8>)
 80010ca:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010cc:	f7ff fd98 	bl	8000c00 <LCD_RD_DATA>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b97      	ldr	r3, [pc, #604]	; (8001334 <lcd_init+0x2b8>)
 80010d6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80010d8:	4b96      	ldr	r3, [pc, #600]	; (8001334 <lcd_init+0x2b8>)
 80010da:	889b      	ldrh	r3, [r3, #4]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b94      	ldr	r3, [pc, #592]	; (8001334 <lcd_init+0x2b8>)
 80010e2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80010e4:	f7ff fd8c 	bl	8000c00 <LCD_RD_DATA>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b91      	ldr	r3, [pc, #580]	; (8001334 <lcd_init+0x2b8>)
 80010ee:	889b      	ldrh	r3, [r3, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b8f      	ldr	r3, [pc, #572]	; (8001334 <lcd_init+0x2b8>)
 80010f6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80010f8:	20cf      	movs	r0, #207	; 0xcf
 80010fa:	f7ff fd61 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fd6e 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001104:	20c1      	movs	r0, #193	; 0xc1
 8001106:	f7ff fd6b 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800110a:	2030      	movs	r0, #48	; 0x30
 800110c:	f7ff fd68 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001110:	20ed      	movs	r0, #237	; 0xed
 8001112:	f7ff fd55 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001116:	2064      	movs	r0, #100	; 0x64
 8001118:	f7ff fd62 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800111c:	2003      	movs	r0, #3
 800111e:	f7ff fd5f 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001122:	2012      	movs	r0, #18
 8001124:	f7ff fd5c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001128:	2081      	movs	r0, #129	; 0x81
 800112a:	f7ff fd59 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800112e:	20e8      	movs	r0, #232	; 0xe8
 8001130:	f7ff fd46 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001134:	2085      	movs	r0, #133	; 0x85
 8001136:	f7ff fd53 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800113a:	2010      	movs	r0, #16
 800113c:	f7ff fd50 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001140:	207a      	movs	r0, #122	; 0x7a
 8001142:	f7ff fd4d 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001146:	20cb      	movs	r0, #203	; 0xcb
 8001148:	f7ff fd3a 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800114c:	2039      	movs	r0, #57	; 0x39
 800114e:	f7ff fd47 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001152:	202c      	movs	r0, #44	; 0x2c
 8001154:	f7ff fd44 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff fd41 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800115e:	2034      	movs	r0, #52	; 0x34
 8001160:	f7ff fd3e 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff fd3b 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800116a:	20f7      	movs	r0, #247	; 0xf7
 800116c:	f7ff fd28 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001170:	2020      	movs	r0, #32
 8001172:	f7ff fd35 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001176:	20ea      	movs	r0, #234	; 0xea
 8001178:	f7ff fd22 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fd2f 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fd2c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001188:	20c0      	movs	r0, #192	; 0xc0
 800118a:	f7ff fd19 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800118e:	201b      	movs	r0, #27
 8001190:	f7ff fd26 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001194:	20c1      	movs	r0, #193	; 0xc1
 8001196:	f7ff fd13 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff fd20 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80011a0:	20c5      	movs	r0, #197	; 0xc5
 80011a2:	f7ff fd0d 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80011a6:	2030      	movs	r0, #48	; 0x30
 80011a8:	f7ff fd1a 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80011ac:	2030      	movs	r0, #48	; 0x30
 80011ae:	f7ff fd17 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011b2:	20c7      	movs	r0, #199	; 0xc7
 80011b4:	f7ff fd04 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011b8:	20b7      	movs	r0, #183	; 0xb7
 80011ba:	f7ff fd11 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011be:	2036      	movs	r0, #54	; 0x36
 80011c0:	f7ff fcfe 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80011c4:	2008      	movs	r0, #8
 80011c6:	f7ff fd0b 	bl	8000be0 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80011ca:	203a      	movs	r0, #58	; 0x3a
 80011cc:	f7ff fcf8 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80011d0:	2055      	movs	r0, #85	; 0x55
 80011d2:	f7ff fd05 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80011d6:	20b1      	movs	r0, #177	; 0xb1
 80011d8:	f7ff fcf2 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fcff 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80011e2:	201a      	movs	r0, #26
 80011e4:	f7ff fcfc 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80011e8:	20b6      	movs	r0, #182	; 0xb6
 80011ea:	f7ff fce9 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80011ee:	200a      	movs	r0, #10
 80011f0:	f7ff fcf6 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80011f4:	20a2      	movs	r0, #162	; 0xa2
 80011f6:	f7ff fcf3 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80011fa:	20f2      	movs	r0, #242	; 0xf2
 80011fc:	f7ff fce0 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fced 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001206:	2026      	movs	r0, #38	; 0x26
 8001208:	f7ff fcda 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fce7 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001212:	20e0      	movs	r0, #224	; 0xe0
 8001214:	f7ff fcd4 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001218:	200f      	movs	r0, #15
 800121a:	f7ff fce1 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800121e:	202a      	movs	r0, #42	; 0x2a
 8001220:	f7ff fcde 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001224:	2028      	movs	r0, #40	; 0x28
 8001226:	f7ff fcdb 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800122a:	2008      	movs	r0, #8
 800122c:	f7ff fcd8 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001230:	200e      	movs	r0, #14
 8001232:	f7ff fcd5 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001236:	2008      	movs	r0, #8
 8001238:	f7ff fcd2 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800123c:	2054      	movs	r0, #84	; 0x54
 800123e:	f7ff fccf 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001242:	20a9      	movs	r0, #169	; 0xa9
 8001244:	f7ff fccc 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001248:	2043      	movs	r0, #67	; 0x43
 800124a:	f7ff fcc9 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800124e:	200a      	movs	r0, #10
 8001250:	f7ff fcc6 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001254:	200f      	movs	r0, #15
 8001256:	f7ff fcc3 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff fcc0 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fcbd 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fcba 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff fcb7 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001272:	20e1      	movs	r0, #225	; 0xe1
 8001274:	f7ff fca4 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff fcb1 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800127e:	2015      	movs	r0, #21
 8001280:	f7ff fcae 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001284:	2017      	movs	r0, #23
 8001286:	f7ff fcab 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800128a:	2007      	movs	r0, #7
 800128c:	f7ff fca8 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001290:	2011      	movs	r0, #17
 8001292:	f7ff fca5 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001296:	2006      	movs	r0, #6
 8001298:	f7ff fca2 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800129c:	202b      	movs	r0, #43	; 0x2b
 800129e:	f7ff fc9f 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80012a2:	2056      	movs	r0, #86	; 0x56
 80012a4:	f7ff fc9c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80012a8:	203c      	movs	r0, #60	; 0x3c
 80012aa:	f7ff fc99 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80012ae:	2005      	movs	r0, #5
 80012b0:	f7ff fc96 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012b4:	2010      	movs	r0, #16
 80012b6:	f7ff fc93 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012ba:	200f      	movs	r0, #15
 80012bc:	f7ff fc90 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012c0:	203f      	movs	r0, #63	; 0x3f
 80012c2:	f7ff fc8d 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012c6:	203f      	movs	r0, #63	; 0x3f
 80012c8:	f7ff fc8a 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012cc:	200f      	movs	r0, #15
 80012ce:	f7ff fc87 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80012d2:	202b      	movs	r0, #43	; 0x2b
 80012d4:	f7ff fc74 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff fc81 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff fc7e 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fc7b 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80012ea:	203f      	movs	r0, #63	; 0x3f
 80012ec:	f7ff fc78 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80012f0:	202a      	movs	r0, #42	; 0x2a
 80012f2:	f7ff fc65 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fc72 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff fc6f 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff fc6c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001308:	20ef      	movs	r0, #239	; 0xef
 800130a:	f7ff fc69 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800130e:	2011      	movs	r0, #17
 8001310:	f7ff fc56 	bl	8000bc0 <LCD_WR_REG>
	HAL_Delay(120);
 8001314:	2078      	movs	r0, #120	; 0x78
 8001316:	f001 fd41 	bl	8002d9c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800131a:	2029      	movs	r0, #41	; 0x29
 800131c:	f7ff fc50 	bl	8000bc0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001326:	4804      	ldr	r0, [pc, #16]	; (8001338 <lcd_init+0x2bc>)
 8001328:	f002 f80a 	bl	8003340 <HAL_GPIO_WritePin>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40020800 	.word	0x40020800
 8001334:	20000148 	.word	0x20000148
 8001338:	40020000 	.word	0x40020000

0800133c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b08b      	sub	sp, #44	; 0x2c
 8001340:	af04      	add	r7, sp, #16
 8001342:	60ba      	str	r2, [r7, #8]
 8001344:	461a      	mov	r2, r3
 8001346:	4603      	mov	r3, r0
 8001348:	81fb      	strh	r3, [r7, #14]
 800134a:	460b      	mov	r3, r1
 800134c:	81bb      	strh	r3, [r7, #12]
 800134e:	4613      	mov	r3, r2
 8001350:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800135a:	e048      	b.n	80013ee <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d145      	bne.n	80013ee <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001362:	89fa      	ldrh	r2, [r7, #14]
 8001364:	4b26      	ldr	r3, [pc, #152]	; (8001400 <lcd_ShowStr+0xc4>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	1acb      	subs	r3, r1, r3
 8001374:	429a      	cmp	r2, r3
 8001376:	dc3f      	bgt.n	80013f8 <lcd_ShowStr+0xbc>
 8001378:	89ba      	ldrh	r2, [r7, #12]
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <lcd_ShowStr+0xc4>)
 800137c:	885b      	ldrh	r3, [r3, #2]
 800137e:	4619      	mov	r1, r3
 8001380:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001384:	1acb      	subs	r3, r1, r3
 8001386:	429a      	cmp	r2, r3
 8001388:	dc36      	bgt.n	80013f8 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b80      	cmp	r3, #128	; 0x80
 8001390:	d902      	bls.n	8001398 <lcd_ShowStr+0x5c>
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
 8001396:	e02a      	b.n	80013ee <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b0d      	cmp	r3, #13
 800139e:	d10b      	bne.n	80013b8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80013a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	89bb      	ldrh	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80013ac:	8abb      	ldrh	r3, [r7, #20]
 80013ae:	81fb      	strh	r3, [r7, #14]
					str++;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3301      	adds	r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	e017      	b.n	80013e8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	88fc      	ldrh	r4, [r7, #6]
 80013be:	89b9      	ldrh	r1, [r7, #12]
 80013c0:	89f8      	ldrh	r0, [r7, #14]
 80013c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	4623      	mov	r3, r4
 80013d4:	f7ff fcc4 	bl	8000d60 <lcd_ShowChar>
					x+=sizey/2;
 80013d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013dc:	085b      	lsrs	r3, r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	89fb      	ldrh	r3, [r7, #14]
 80013e4:	4413      	add	r3, r2
 80013e6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	3301      	adds	r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1b2      	bne.n	800135c <lcd_ShowStr+0x20>
 80013f6:	e000      	b.n	80013fa <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80013f8:	bf00      	nop
			}
		}
	}
}
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	20000148 	.word	0x20000148

08001404 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001408:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <led7_Scan+0x104>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <led7_Scan+0x104>)
 8001412:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001414:	4b3d      	ldr	r3, [pc, #244]	; (800150c <led7_Scan+0x108>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a3d      	ldr	r2, [pc, #244]	; (8001510 <led7_Scan+0x10c>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b21a      	sxth	r2, r3
 8001420:	4b39      	ldr	r3, [pc, #228]	; (8001508 <led7_Scan+0x104>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b21b      	sxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b21b      	sxth	r3, r3
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b36      	ldr	r3, [pc, #216]	; (8001508 <led7_Scan+0x104>)
 800142e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001430:	4b36      	ldr	r3, [pc, #216]	; (800150c <led7_Scan+0x108>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d847      	bhi.n	80014c8 <led7_Scan+0xc4>
 8001438:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <led7_Scan+0x3c>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001451 	.word	0x08001451
 8001444:	0800146f 	.word	0x0800146f
 8001448:	0800148d 	.word	0x0800148d
 800144c:	080014ab 	.word	0x080014ab
	case 0:
		spi_buffer |= 0x00b0;
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <led7_Scan+0x104>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <led7_Scan+0x104>)
 800145c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <led7_Scan+0x104>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <led7_Scan+0x104>)
 800146a:	801a      	strh	r2, [r3, #0]
		break;
 800146c:	e02d      	b.n	80014ca <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <led7_Scan+0x104>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <led7_Scan+0x104>)
 800147a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <led7_Scan+0x104>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	f023 0320 	bic.w	r3, r3, #32
 8001484:	b29a      	uxth	r2, r3
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <led7_Scan+0x104>)
 8001488:	801a      	strh	r2, [r3, #0]
		break;
 800148a:	e01e      	b.n	80014ca <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <led7_Scan+0x104>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <led7_Scan+0x104>)
 8001498:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <led7_Scan+0x104>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	f023 0310 	bic.w	r3, r3, #16
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <led7_Scan+0x104>)
 80014a6:	801a      	strh	r2, [r3, #0]
		break;
 80014a8:	e00f      	b.n	80014ca <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <led7_Scan+0x104>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <led7_Scan+0x104>)
 80014b6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <led7_Scan+0x104>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <led7_Scan+0x104>)
 80014c4:	801a      	strh	r2, [r3, #0]
		break;
 80014c6:	e000      	b.n	80014ca <led7_Scan+0xc6>
	default:
		break;
 80014c8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <led7_Scan+0x108>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	425a      	negs	r2, r3
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	bf58      	it	pl
 80014dc:	4253      	negpl	r3, r2
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <led7_Scan+0x108>)
 80014e0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2140      	movs	r1, #64	; 0x40
 80014e6:	480b      	ldr	r0, [pc, #44]	; (8001514 <led7_Scan+0x110>)
 80014e8:	f001 ff2a 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80014ec:	2301      	movs	r3, #1
 80014ee:	2202      	movs	r2, #2
 80014f0:	4905      	ldr	r1, [pc, #20]	; (8001508 <led7_Scan+0x104>)
 80014f2:	4809      	ldr	r0, [pc, #36]	; (8001518 <led7_Scan+0x114>)
 80014f4:	f003 fd15 	bl	8004f22 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <led7_Scan+0x110>)
 80014fe:	f001 ff1f 	bl	8003340 <HAL_GPIO_WritePin>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000004 	.word	0x20000004
 800150c:	2000004c 	.word	0x2000004c
 8001510:	20000000 	.word	0x20000000
 8001514:	40021800 	.word	0x40021800
 8001518:	20000184 	.word	0x20000184

0800151c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001520:	f001 fbca 	bl	8002cb8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001524:	f000 f824 	bl	8001570 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001528:	f7ff f9dc 	bl	80008e4 <MX_GPIO_Init>
	MX_TIM2_Init();
 800152c:	f001 faea 	bl	8002b04 <MX_TIM2_Init>
	MX_SPI1_Init();
 8001530:	f001 f9fc 	bl	800292c <MX_SPI1_Init>
	MX_FSMC_Init();
 8001534:	f7ff f906 	bl	8000744 <MX_FSMC_Init>
	MX_I2C1_Init();
 8001538:	f7ff facc 	bl	8000ad4 <MX_I2C1_Init>
//	MX_TIM4_Init();
	/* USER CODE BEGIN 2 */
	system_init();
 800153c:	f000 f882 	bl	8001644 <system_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	lcd_Clear(BLACK);
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fbbb 	bl	8000cbc <lcd_Clear>
	UpdateTime();// update the curret time
 8001546:	f000 f89d 	bl	8001684 <UpdateTime>

	while (1) {
		while (!timer2_flag);
 800154a:	bf00      	nop
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <main+0x50>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0fb      	beq.n	800154c <main+0x30>
		timer2_flag = 0;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <main+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	801a      	strh	r2, [r3, #0]
		ds3231_ReadTime();
 800155a:	f7ff f88f 	bl	800067c <ds3231_ReadTime>
		button_Scan();
 800155e:	f7fe ffbb 	bl	80004d8 <button_Scan>
        fsm();
 8001562:	f001 f867 	bl	8002634 <fsm>
        displayScreen();
 8001566:	f000 fd5f 	bl	8002028 <displayScreen>
		while (!timer2_flag);
 800156a:	e7ee      	b.n	800154a <main+0x2e>
 800156c:	2000006c 	.word	0x2000006c

08001570 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b094      	sub	sp, #80	; 0x50
 8001574:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	2230      	movs	r2, #48	; 0x30
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f004 ffa8 	bl	80064d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <SystemClock_Config+0xcc>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <SystemClock_Config+0xcc>)
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a2:	6413      	str	r3, [r2, #64]	; 0x40
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <SystemClock_Config+0xcc>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <SystemClock_Config+0xd0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a21      	ldr	r2, [pc, #132]	; (8001640 <SystemClock_Config+0xd0>)
 80015ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <SystemClock_Config+0xd0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015cc:	2302      	movs	r3, #2
 80015ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d4:	2310      	movs	r3, #16
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d8:	2302      	movs	r3, #2
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015dc:	2300      	movs	r3, #0
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80015e0:	2308      	movs	r3, #8
 80015e2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80015e4:	23a8      	movs	r3, #168	; 0xa8
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80015ec:	2304      	movs	r3, #4
 80015ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 ffab 	bl	8004550 <HAL_RCC_OscConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0x94>
		Error_Handler();
 8001600:	f001 f93e 	bl	8002880 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001604:	230f      	movs	r3, #15
 8001606:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001608:	2302      	movs	r3, #2
 800160a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001610:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001614:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001616:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800161a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2105      	movs	r1, #5
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fa0c 	bl	8004a40 <HAL_RCC_ClockConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0xc2>
		Error_Handler();
 800162e:	f001 f927 	bl	8002880 <Error_Handler>
	}
}
 8001632:	bf00      	nop
 8001634:	3750      	adds	r7, #80	; 0x50
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40007000 	.word	0x40007000

08001644 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2120      	movs	r1, #32
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <system_init+0x3c>)
 800164e:	f001 fe77 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	480a      	ldr	r0, [pc, #40]	; (8001680 <system_init+0x3c>)
 8001658:	f001 fe72 	bl	8003340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2110      	movs	r1, #16
 8001660:	4807      	ldr	r0, [pc, #28]	; (8001680 <system_init+0x3c>)
 8001662:	f001 fe6d 	bl	8003340 <HAL_GPIO_WritePin>

	button_init ();
 8001666:	f7fe ff2b 	bl	80004c0 <button_init>
	lcd_init();
 800166a:	f7ff fd07 	bl	800107c <lcd_init>
	ds3231_init();
 800166e:	f7fe ff9f 	bl	80005b0 <ds3231_init>

	timer_init();
 8001672:	f001 f90b 	bl	800288c <timer_init>
	setTimer2(50);
 8001676:	2032      	movs	r0, #50	; 0x32
 8001678:	f001 f912 	bl	80028a0 <setTimer2>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000

08001684 <UpdateTime>:

void UpdateTime() {// update the current time
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 8001688:	2118      	movs	r1, #24
 800168a:	2006      	movs	r0, #6
 800168c:	f7fe ffd4 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 8001690:	210b      	movs	r1, #11
 8001692:	2005      	movs	r0, #5
 8001694:	f7fe ffd0 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 15);
 8001698:	210f      	movs	r1, #15
 800169a:	2004      	movs	r0, #4
 800169c:	f7fe ffcc 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 80016a0:	2106      	movs	r1, #6
 80016a2:	2003      	movs	r0, #3
 80016a4:	f7fe ffc8 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 9);
 80016a8:	2109      	movs	r1, #9
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7fe ffc4 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7fe ffc0 	bl	8000638 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 0);
 80016b8:	2100      	movs	r1, #0
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7fe ffbc 	bl	8000638 <ds3231_Write>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <displayHour>:

void displayHour(int num, int isBlink) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af04      	add	r7, sp, #16
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	if(isBlink){
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d04f      	beq.n	8001774 <displayHour+0xb0>
	    timeBlink = (timeBlink + 1)%10;
 80016d4:	4b40      	ldr	r3, [pc, #256]	; (80017d8 <displayHour+0x114>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	1c59      	adds	r1, r3, #1
 80016da:	4b40      	ldr	r3, [pc, #256]	; (80017dc <displayHour+0x118>)
 80016dc:	fb83 2301 	smull	r2, r3, r3, r1
 80016e0:	109a      	asrs	r2, r3, #2
 80016e2:	17cb      	asrs	r3, r1, #31
 80016e4:	1ad2      	subs	r2, r2, r3
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	1aca      	subs	r2, r1, r3
 80016f0:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <displayHour+0x114>)
 80016f2:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 80016f4:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <displayHour+0x114>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	dc0d      	bgt.n	8001718 <displayHour+0x54>
	    	lcd_ShowStr(70, 100, "  ", GREEN, BLACK, 24, 0);
 80016fc:	2300      	movs	r3, #0
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	2318      	movs	r3, #24
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2300      	movs	r3, #0
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800170c:	4a34      	ldr	r2, [pc, #208]	; (80017e0 <displayHour+0x11c>)
 800170e:	2164      	movs	r1, #100	; 0x64
 8001710:	2046      	movs	r0, #70	; 0x46
 8001712:	f7ff fe13 	bl	800133c <lcd_ShowStr>
	}
	else {
		lcd_ShowIntNum(70, 100, num/10, 1, GREEN, BLACK, 24);
		lcd_ShowIntNum(83, 100, num%10, 1, GREEN, BLACK, 24);
	}
}
 8001716:	e05a      	b.n	80017ce <displayHour+0x10a>
			lcd_ShowIntNum(70, 100, num/10, 1, GREEN, BLACK, 24);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a30      	ldr	r2, [pc, #192]	; (80017dc <displayHour+0x118>)
 800171c:	fb82 1203 	smull	r1, r2, r2, r3
 8001720:	1092      	asrs	r2, r2, #2
 8001722:	17db      	asrs	r3, r3, #31
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	b29a      	uxth	r2, r3
 8001728:	2318      	movs	r3, #24
 800172a:	9302      	str	r3, [sp, #8]
 800172c:	2300      	movs	r3, #0
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2301      	movs	r3, #1
 8001738:	2164      	movs	r1, #100	; 0x64
 800173a:	2046      	movs	r0, #70	; 0x46
 800173c:	f7ff fbfc 	bl	8000f38 <lcd_ShowIntNum>
			lcd_ShowIntNum(83, 100, num%10, 1, GREEN, BLACK, 24);
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4b26      	ldr	r3, [pc, #152]	; (80017dc <displayHour+0x118>)
 8001744:	fb83 1302 	smull	r1, r3, r3, r2
 8001748:	1099      	asrs	r1, r3, #2
 800174a:	17d3      	asrs	r3, r2, #31
 800174c:	1ac9      	subs	r1, r1, r3
 800174e:	460b      	mov	r3, r1
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	1ad1      	subs	r1, r2, r3
 8001758:	b28a      	uxth	r2, r1
 800175a:	2318      	movs	r3, #24
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2300      	movs	r3, #0
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	2164      	movs	r1, #100	; 0x64
 800176c:	2053      	movs	r0, #83	; 0x53
 800176e:	f7ff fbe3 	bl	8000f38 <lcd_ShowIntNum>
}
 8001772:	e02c      	b.n	80017ce <displayHour+0x10a>
		lcd_ShowIntNum(70, 100, num/10, 1, GREEN, BLACK, 24);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a19      	ldr	r2, [pc, #100]	; (80017dc <displayHour+0x118>)
 8001778:	fb82 1203 	smull	r1, r2, r2, r3
 800177c:	1092      	asrs	r2, r2, #2
 800177e:	17db      	asrs	r3, r3, #31
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	b29a      	uxth	r2, r3
 8001784:	2318      	movs	r3, #24
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	2300      	movs	r3, #0
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2301      	movs	r3, #1
 8001794:	2164      	movs	r1, #100	; 0x64
 8001796:	2046      	movs	r0, #70	; 0x46
 8001798:	f7ff fbce 	bl	8000f38 <lcd_ShowIntNum>
		lcd_ShowIntNum(83, 100, num%10, 1, GREEN, BLACK, 24);
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <displayHour+0x118>)
 80017a0:	fb83 1302 	smull	r1, r3, r3, r2
 80017a4:	1099      	asrs	r1, r3, #2
 80017a6:	17d3      	asrs	r3, r2, #31
 80017a8:	1ac9      	subs	r1, r1, r3
 80017aa:	460b      	mov	r3, r1
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	1ad1      	subs	r1, r2, r3
 80017b4:	b28a      	uxth	r2, r1
 80017b6:	2318      	movs	r3, #24
 80017b8:	9302      	str	r3, [sp, #8]
 80017ba:	2300      	movs	r3, #0
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2301      	movs	r3, #1
 80017c6:	2164      	movs	r1, #100	; 0x64
 80017c8:	2053      	movs	r0, #83	; 0x53
 80017ca:	f7ff fbb5 	bl	8000f38 <lcd_ShowIntNum>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000068 	.word	0x20000068
 80017dc:	66666667 	.word	0x66666667
 80017e0:	080064fc 	.word	0x080064fc

080017e4 <displayMin>:

void displayMin(int num, int isBlink) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af04      	add	r7, sp, #16
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
	lcd_ShowChar(96, 100, ':', GREEN, BLACK, 24, 0);
 80017ee:	2300      	movs	r3, #0
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	2318      	movs	r3, #24
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	2300      	movs	r3, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017fe:	223a      	movs	r2, #58	; 0x3a
 8001800:	2164      	movs	r1, #100	; 0x64
 8001802:	2060      	movs	r0, #96	; 0x60
 8001804:	f7ff faac 	bl	8000d60 <lcd_ShowChar>
	if (isBlink) {
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d04f      	beq.n	80018ae <displayMin+0xca>
	    timeBlink = (timeBlink + 1)%10;
 800180e:	4b40      	ldr	r3, [pc, #256]	; (8001910 <displayMin+0x12c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <displayMin+0x130>)
 8001816:	fb83 2301 	smull	r2, r3, r3, r1
 800181a:	109a      	asrs	r2, r3, #2
 800181c:	17cb      	asrs	r3, r1, #31
 800181e:	1ad2      	subs	r2, r2, r3
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	1aca      	subs	r2, r1, r3
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <displayMin+0x12c>)
 800182c:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 800182e:	4b38      	ldr	r3, [pc, #224]	; (8001910 <displayMin+0x12c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b04      	cmp	r3, #4
 8001834:	dc0d      	bgt.n	8001852 <displayMin+0x6e>
	    	lcd_ShowStr(110, 100, "  ", GREEN, BLACK, 24, 0);
 8001836:	2300      	movs	r3, #0
 8001838:	9302      	str	r3, [sp, #8]
 800183a:	2318      	movs	r3, #24
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	2300      	movs	r3, #0
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001846:	4a34      	ldr	r2, [pc, #208]	; (8001918 <displayMin+0x134>)
 8001848:	2164      	movs	r1, #100	; 0x64
 800184a:	206e      	movs	r0, #110	; 0x6e
 800184c:	f7ff fd76 	bl	800133c <lcd_ShowStr>
	else {
    	lcd_ShowIntNum(110, 100, num/10, 1, GREEN, BLACK, 24);
    	lcd_ShowIntNum(123, 100, num%10, 1, GREEN, BLACK, 24);
	}

}
 8001850:	e05a      	b.n	8001908 <displayMin+0x124>
	    	lcd_ShowIntNum(110, 100, num/10, 1, GREEN, BLACK, 24);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <displayMin+0x130>)
 8001856:	fb82 1203 	smull	r1, r2, r2, r3
 800185a:	1092      	asrs	r2, r2, #2
 800185c:	17db      	asrs	r3, r3, #31
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b29a      	uxth	r2, r3
 8001862:	2318      	movs	r3, #24
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	2300      	movs	r3, #0
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	2164      	movs	r1, #100	; 0x64
 8001874:	206e      	movs	r0, #110	; 0x6e
 8001876:	f7ff fb5f 	bl	8000f38 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(123, 100, num%10, 1, GREEN, BLACK, 24);
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <displayMin+0x130>)
 800187e:	fb83 1302 	smull	r1, r3, r3, r2
 8001882:	1099      	asrs	r1, r3, #2
 8001884:	17d3      	asrs	r3, r2, #31
 8001886:	1ac9      	subs	r1, r1, r3
 8001888:	460b      	mov	r3, r1
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	1ad1      	subs	r1, r2, r3
 8001892:	b28a      	uxth	r2, r1
 8001894:	2318      	movs	r3, #24
 8001896:	9302      	str	r3, [sp, #8]
 8001898:	2300      	movs	r3, #0
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2301      	movs	r3, #1
 80018a4:	2164      	movs	r1, #100	; 0x64
 80018a6:	207b      	movs	r0, #123	; 0x7b
 80018a8:	f7ff fb46 	bl	8000f38 <lcd_ShowIntNum>
}
 80018ac:	e02c      	b.n	8001908 <displayMin+0x124>
    	lcd_ShowIntNum(110, 100, num/10, 1, GREEN, BLACK, 24);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a18      	ldr	r2, [pc, #96]	; (8001914 <displayMin+0x130>)
 80018b2:	fb82 1203 	smull	r1, r2, r2, r3
 80018b6:	1092      	asrs	r2, r2, #2
 80018b8:	17db      	asrs	r3, r3, #31
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	b29a      	uxth	r2, r3
 80018be:	2318      	movs	r3, #24
 80018c0:	9302      	str	r3, [sp, #8]
 80018c2:	2300      	movs	r3, #0
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2301      	movs	r3, #1
 80018ce:	2164      	movs	r1, #100	; 0x64
 80018d0:	206e      	movs	r0, #110	; 0x6e
 80018d2:	f7ff fb31 	bl	8000f38 <lcd_ShowIntNum>
    	lcd_ShowIntNum(123, 100, num%10, 1, GREEN, BLACK, 24);
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <displayMin+0x130>)
 80018da:	fb83 1302 	smull	r1, r3, r3, r2
 80018de:	1099      	asrs	r1, r3, #2
 80018e0:	17d3      	asrs	r3, r2, #31
 80018e2:	1ac9      	subs	r1, r1, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	1ad1      	subs	r1, r2, r3
 80018ee:	b28a      	uxth	r2, r1
 80018f0:	2318      	movs	r3, #24
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	2300      	movs	r3, #0
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2301      	movs	r3, #1
 8001900:	2164      	movs	r1, #100	; 0x64
 8001902:	207b      	movs	r0, #123	; 0x7b
 8001904:	f7ff fb18 	bl	8000f38 <lcd_ShowIntNum>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000068 	.word	0x20000068
 8001914:	66666667 	.word	0x66666667
 8001918:	080064fc 	.word	0x080064fc

0800191c <displaySec>:

void displaySec(int num, int isBlink) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af04      	add	r7, sp, #16
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
	lcd_ShowChar(136, 100, ':', GREEN, BLACK, 24, 0);
 8001926:	2300      	movs	r3, #0
 8001928:	9302      	str	r3, [sp, #8]
 800192a:	2318      	movs	r3, #24
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2300      	movs	r3, #0
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001936:	223a      	movs	r2, #58	; 0x3a
 8001938:	2164      	movs	r1, #100	; 0x64
 800193a:	2088      	movs	r0, #136	; 0x88
 800193c:	f7ff fa10 	bl	8000d60 <lcd_ShowChar>
	if (isBlink) {
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d04f      	beq.n	80019e6 <displaySec+0xca>
	    timeBlink = (timeBlink + 1)%10;
 8001946:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <displaySec+0x12c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1c59      	adds	r1, r3, #1
 800194c:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <displaySec+0x130>)
 800194e:	fb83 2301 	smull	r2, r3, r3, r1
 8001952:	109a      	asrs	r2, r3, #2
 8001954:	17cb      	asrs	r3, r1, #31
 8001956:	1ad2      	subs	r2, r2, r3
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	1aca      	subs	r2, r1, r3
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <displaySec+0x12c>)
 8001964:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <displaySec+0x12c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b04      	cmp	r3, #4
 800196c:	dc0d      	bgt.n	800198a <displaySec+0x6e>
	    	lcd_ShowStr(150, 100, "  ", GREEN, BLACK, 24, 0);
 800196e:	2300      	movs	r3, #0
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	2318      	movs	r3, #24
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	2300      	movs	r3, #0
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800197e:	4a34      	ldr	r2, [pc, #208]	; (8001a50 <displaySec+0x134>)
 8001980:	2164      	movs	r1, #100	; 0x64
 8001982:	2096      	movs	r0, #150	; 0x96
 8001984:	f7ff fcda 	bl	800133c <lcd_ShowStr>
	}
	else {
    	lcd_ShowIntNum(150, 100, num/10, 1, GREEN, BLACK, 24);
    	lcd_ShowIntNum(163, 100, num%10, 1, GREEN, BLACK, 24);
	}
}
 8001988:	e05a      	b.n	8001a40 <displaySec+0x124>
	    	lcd_ShowIntNum(150, 100, num/10, 1, GREEN, BLACK, 24);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <displaySec+0x130>)
 800198e:	fb82 1203 	smull	r1, r2, r2, r3
 8001992:	1092      	asrs	r2, r2, #2
 8001994:	17db      	asrs	r3, r3, #31
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	b29a      	uxth	r2, r3
 800199a:	2318      	movs	r3, #24
 800199c:	9302      	str	r3, [sp, #8]
 800199e:	2300      	movs	r3, #0
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2301      	movs	r3, #1
 80019aa:	2164      	movs	r1, #100	; 0x64
 80019ac:	2096      	movs	r0, #150	; 0x96
 80019ae:	f7ff fac3 	bl	8000f38 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(163, 100, num%10, 1, GREEN, BLACK, 24);
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <displaySec+0x130>)
 80019b6:	fb83 1302 	smull	r1, r3, r3, r2
 80019ba:	1099      	asrs	r1, r3, #2
 80019bc:	17d3      	asrs	r3, r2, #31
 80019be:	1ac9      	subs	r1, r1, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	1ad1      	subs	r1, r2, r3
 80019ca:	b28a      	uxth	r2, r1
 80019cc:	2318      	movs	r3, #24
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	2164      	movs	r1, #100	; 0x64
 80019de:	20a3      	movs	r0, #163	; 0xa3
 80019e0:	f7ff faaa 	bl	8000f38 <lcd_ShowIntNum>
}
 80019e4:	e02c      	b.n	8001a40 <displaySec+0x124>
    	lcd_ShowIntNum(150, 100, num/10, 1, GREEN, BLACK, 24);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <displaySec+0x130>)
 80019ea:	fb82 1203 	smull	r1, r2, r2, r3
 80019ee:	1092      	asrs	r2, r2, #2
 80019f0:	17db      	asrs	r3, r3, #31
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	2318      	movs	r3, #24
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	2300      	movs	r3, #0
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2301      	movs	r3, #1
 8001a06:	2164      	movs	r1, #100	; 0x64
 8001a08:	2096      	movs	r0, #150	; 0x96
 8001a0a:	f7ff fa95 	bl	8000f38 <lcd_ShowIntNum>
    	lcd_ShowIntNum(163, 100, num%10, 1, GREEN, BLACK, 24);
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <displaySec+0x130>)
 8001a12:	fb83 1302 	smull	r1, r3, r3, r2
 8001a16:	1099      	asrs	r1, r3, #2
 8001a18:	17d3      	asrs	r3, r2, #31
 8001a1a:	1ac9      	subs	r1, r1, r3
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	1ad1      	subs	r1, r2, r3
 8001a26:	b28a      	uxth	r2, r1
 8001a28:	2318      	movs	r3, #24
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2301      	movs	r3, #1
 8001a38:	2164      	movs	r1, #100	; 0x64
 8001a3a:	20a3      	movs	r0, #163	; 0xa3
 8001a3c:	f7ff fa7c 	bl	8000f38 <lcd_ShowIntNum>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000068 	.word	0x20000068
 8001a4c:	66666667 	.word	0x66666667
 8001a50:	080064fc 	.word	0x080064fc

08001a54 <convertDay>:

void convertDay(int num) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	2b06      	cmp	r3, #6
 8001a62:	d873      	bhi.n	8001b4c <convertDay+0xf8>
 8001a64:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <convertDay+0x18>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001a89 	.word	0x08001a89
 8001a70:	08001aa5 	.word	0x08001aa5
 8001a74:	08001ac1 	.word	0x08001ac1
 8001a78:	08001add 	.word	0x08001add
 8001a7c:	08001af9 	.word	0x08001af9
 8001a80:	08001b15 	.word	0x08001b15
 8001a84:	08001b31 	.word	0x08001b31
	switch(num)
	{
		case 1:
			lcd_ShowStr(20, 130, "SUN", YELLOW, BLACK, 24, 0);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	2318      	movs	r3, #24
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	2300      	movs	r3, #0
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a98:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <convertDay+0x100>)
 8001a9a:	2182      	movs	r1, #130	; 0x82
 8001a9c:	2014      	movs	r0, #20
 8001a9e:	f7ff fc4d 	bl	800133c <lcd_ShowStr>
			break;
 8001aa2:	e053      	b.n	8001b4c <convertDay+0xf8>
		case 2:
			lcd_ShowStr(20, 130, "MON", YELLOW, BLACK, 24, 0);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	2318      	movs	r3, #24
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	2300      	movs	r3, #0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ab4:	4a28      	ldr	r2, [pc, #160]	; (8001b58 <convertDay+0x104>)
 8001ab6:	2182      	movs	r1, #130	; 0x82
 8001ab8:	2014      	movs	r0, #20
 8001aba:	f7ff fc3f 	bl	800133c <lcd_ShowStr>
			break;
 8001abe:	e045      	b.n	8001b4c <convertDay+0xf8>
		case 3:
			lcd_ShowStr(20, 130, "TUE", YELLOW, BLACK, 24, 0);
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9302      	str	r3, [sp, #8]
 8001ac4:	2318      	movs	r3, #24
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ad0:	4a22      	ldr	r2, [pc, #136]	; (8001b5c <convertDay+0x108>)
 8001ad2:	2182      	movs	r1, #130	; 0x82
 8001ad4:	2014      	movs	r0, #20
 8001ad6:	f7ff fc31 	bl	800133c <lcd_ShowStr>
			break;
 8001ada:	e037      	b.n	8001b4c <convertDay+0xf8>
		case 4:
			lcd_ShowStr(20, 130, "WED", YELLOW, BLACK, 24, 0);
 8001adc:	2300      	movs	r3, #0
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	2318      	movs	r3, #24
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001aec:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <convertDay+0x10c>)
 8001aee:	2182      	movs	r1, #130	; 0x82
 8001af0:	2014      	movs	r0, #20
 8001af2:	f7ff fc23 	bl	800133c <lcd_ShowStr>
			break;
 8001af6:	e029      	b.n	8001b4c <convertDay+0xf8>
		case 5:
			lcd_ShowStr(20, 130, "THU", YELLOW, BLACK, 24, 0);
 8001af8:	2300      	movs	r3, #0
 8001afa:	9302      	str	r3, [sp, #8]
 8001afc:	2318      	movs	r3, #24
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2300      	movs	r3, #0
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b08:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <convertDay+0x110>)
 8001b0a:	2182      	movs	r1, #130	; 0x82
 8001b0c:	2014      	movs	r0, #20
 8001b0e:	f7ff fc15 	bl	800133c <lcd_ShowStr>
			break;
 8001b12:	e01b      	b.n	8001b4c <convertDay+0xf8>
		case 6:
			lcd_ShowStr(20, 130, "FRI", YELLOW, BLACK, 24, 0);
 8001b14:	2300      	movs	r3, #0
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	2318      	movs	r3, #24
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b24:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <convertDay+0x114>)
 8001b26:	2182      	movs	r1, #130	; 0x82
 8001b28:	2014      	movs	r0, #20
 8001b2a:	f7ff fc07 	bl	800133c <lcd_ShowStr>
			break;
 8001b2e:	e00d      	b.n	8001b4c <convertDay+0xf8>
		case 7:
			lcd_ShowStr(20, 130, "SAT", YELLOW, BLACK, 24, 0);
 8001b30:	2300      	movs	r3, #0
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	2318      	movs	r3, #24
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <convertDay+0x118>)
 8001b42:	2182      	movs	r1, #130	; 0x82
 8001b44:	2014      	movs	r0, #20
 8001b46:	f7ff fbf9 	bl	800133c <lcd_ShowStr>
			break;
 8001b4a:	bf00      	nop
	}
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	08006500 	.word	0x08006500
 8001b58:	08006504 	.word	0x08006504
 8001b5c:	08006508 	.word	0x08006508
 8001b60:	0800650c 	.word	0x0800650c
 8001b64:	08006510 	.word	0x08006510
 8001b68:	08006514 	.word	0x08006514
 8001b6c:	08006518 	.word	0x08006518

08001b70 <displayDay>:
void displayDay(int num, int isBlink) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d025      	beq.n	8001bcc <displayDay+0x5c>
	    timeBlink = (timeBlink + 1)%10;
 8001b80:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <displayDay+0x6c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	1c59      	adds	r1, r3, #1
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <displayDay+0x70>)
 8001b88:	fb83 2301 	smull	r2, r3, r3, r1
 8001b8c:	109a      	asrs	r2, r3, #2
 8001b8e:	17cb      	asrs	r3, r1, #31
 8001b90:	1ad2      	subs	r2, r2, r3
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	1aca      	subs	r2, r1, r3
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <displayDay+0x6c>)
 8001b9e:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <displayDay+0x6c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	dc0d      	bgt.n	8001bc4 <displayDay+0x54>
	    	lcd_ShowStr(20, 130, "   ", GREEN, BLACK, 24, 0);
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	2318      	movs	r3, #24
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <displayDay+0x74>)
 8001bba:	2182      	movs	r1, #130	; 0x82
 8001bbc:	2014      	movs	r0, #20
 8001bbe:	f7ff fbbd 	bl	800133c <lcd_ShowStr>
	    else {
	    	convertDay(num);
	    }
	}
	else convertDay(num);
}
 8001bc2:	e006      	b.n	8001bd2 <displayDay+0x62>
	    	convertDay(num);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff45 	bl	8001a54 <convertDay>
}
 8001bca:	e002      	b.n	8001bd2 <displayDay+0x62>
	else convertDay(num);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff41 	bl	8001a54 <convertDay>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000068 	.word	0x20000068
 8001be0:	66666667 	.word	0x66666667
 8001be4:	0800651c 	.word	0x0800651c

08001be8 <displayDate>:

void displayDate(int num, int isBlink) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af04      	add	r7, sp, #16
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d030      	beq.n	8001c5a <displayDate+0x72>
	    timeBlink = (timeBlink + 1)%10;
 8001bf8:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <displayDate+0x98>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	1c59      	adds	r1, r3, #1
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <displayDate+0x9c>)
 8001c00:	fb83 2301 	smull	r2, r3, r3, r1
 8001c04:	109a      	asrs	r2, r3, #2
 8001c06:	17cb      	asrs	r3, r1, #31
 8001c08:	1ad2      	subs	r2, r2, r3
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	1aca      	subs	r2, r1, r3
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <displayDate+0x98>)
 8001c16:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <displayDate+0x98>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	dc0d      	bgt.n	8001c3c <displayDate+0x54>
	    	lcd_ShowStr(70, 130, "  ", GREEN, BLACK, 24, 0);
 8001c20:	2300      	movs	r3, #0
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	2318      	movs	r3, #24
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c30:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <displayDate+0xa0>)
 8001c32:	2182      	movs	r1, #130	; 0x82
 8001c34:	2046      	movs	r0, #70	; 0x46
 8001c36:	f7ff fb81 	bl	800133c <lcd_ShowStr>
	    }
	}
	else {
    		lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
	}
}
 8001c3a:	e01c      	b.n	8001c76 <displayDate+0x8e>
	    	lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	2318      	movs	r3, #24
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2302      	movs	r3, #2
 8001c50:	2182      	movs	r1, #130	; 0x82
 8001c52:	2046      	movs	r0, #70	; 0x46
 8001c54:	f7ff f970 	bl	8000f38 <lcd_ShowIntNum>
}
 8001c58:	e00d      	b.n	8001c76 <displayDate+0x8e>
    		lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	2318      	movs	r3, #24
 8001c60:	9302      	str	r3, [sp, #8]
 8001c62:	2300      	movs	r3, #0
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	2182      	movs	r1, #130	; 0x82
 8001c70:	2046      	movs	r0, #70	; 0x46
 8001c72:	f7ff f961 	bl	8000f38 <lcd_ShowIntNum>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000068 	.word	0x20000068
 8001c84:	66666667 	.word	0x66666667
 8001c88:	080064fc 	.word	0x080064fc

08001c8c <convertMonth>:

void convertMonth(int num) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af04      	add	r7, sp, #16
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	2b0b      	cmp	r3, #11
 8001c9a:	f200 80c3 	bhi.w	8001e24 <convertMonth+0x198>
 8001c9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <convertMonth+0x18>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001cd5 	.word	0x08001cd5
 8001ca8:	08001cf1 	.word	0x08001cf1
 8001cac:	08001d0d 	.word	0x08001d0d
 8001cb0:	08001d29 	.word	0x08001d29
 8001cb4:	08001d45 	.word	0x08001d45
 8001cb8:	08001d61 	.word	0x08001d61
 8001cbc:	08001d7d 	.word	0x08001d7d
 8001cc0:	08001d99 	.word	0x08001d99
 8001cc4:	08001db5 	.word	0x08001db5
 8001cc8:	08001dd1 	.word	0x08001dd1
 8001ccc:	08001ded 	.word	0x08001ded
 8001cd0:	08001e09 	.word	0x08001e09
    switch(num)
    {
        case 1:
        	lcd_ShowStr(105, 130, "JAN", YELLOW, BLACK, 24, 0);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	2318      	movs	r3, #24
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ce4:	4a51      	ldr	r2, [pc, #324]	; (8001e2c <convertMonth+0x1a0>)
 8001ce6:	2182      	movs	r1, #130	; 0x82
 8001ce8:	2069      	movs	r0, #105	; 0x69
 8001cea:	f7ff fb27 	bl	800133c <lcd_ShowStr>
            break;
 8001cee:	e099      	b.n	8001e24 <convertMonth+0x198>
        case 2:
        	lcd_ShowStr(105, 130, "FEB", YELLOW, BLACK, 24, 0);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9302      	str	r3, [sp, #8]
 8001cf4:	2318      	movs	r3, #24
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d00:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <convertMonth+0x1a4>)
 8001d02:	2182      	movs	r1, #130	; 0x82
 8001d04:	2069      	movs	r0, #105	; 0x69
 8001d06:	f7ff fb19 	bl	800133c <lcd_ShowStr>
            break;
 8001d0a:	e08b      	b.n	8001e24 <convertMonth+0x198>
        case 3:
        	lcd_ShowStr(105, 130, "MAR", YELLOW, BLACK, 24, 0);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	2318      	movs	r3, #24
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2300      	movs	r3, #0
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d1c:	4a45      	ldr	r2, [pc, #276]	; (8001e34 <convertMonth+0x1a8>)
 8001d1e:	2182      	movs	r1, #130	; 0x82
 8001d20:	2069      	movs	r0, #105	; 0x69
 8001d22:	f7ff fb0b 	bl	800133c <lcd_ShowStr>
            break;
 8001d26:	e07d      	b.n	8001e24 <convertMonth+0x198>
        case 4:
        	lcd_ShowStr(105, 130, "APR", YELLOW, BLACK, 24, 0);
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9302      	str	r3, [sp, #8]
 8001d2c:	2318      	movs	r3, #24
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d38:	4a3f      	ldr	r2, [pc, #252]	; (8001e38 <convertMonth+0x1ac>)
 8001d3a:	2182      	movs	r1, #130	; 0x82
 8001d3c:	2069      	movs	r0, #105	; 0x69
 8001d3e:	f7ff fafd 	bl	800133c <lcd_ShowStr>
            break;
 8001d42:	e06f      	b.n	8001e24 <convertMonth+0x198>
        case 5:
        	lcd_ShowStr(105, 130, "MAY", YELLOW, BLACK, 24, 0);
 8001d44:	2300      	movs	r3, #0
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	2318      	movs	r3, #24
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d54:	4a39      	ldr	r2, [pc, #228]	; (8001e3c <convertMonth+0x1b0>)
 8001d56:	2182      	movs	r1, #130	; 0x82
 8001d58:	2069      	movs	r0, #105	; 0x69
 8001d5a:	f7ff faef 	bl	800133c <lcd_ShowStr>
            break;
 8001d5e:	e061      	b.n	8001e24 <convertMonth+0x198>
        case 6:
        	lcd_ShowStr(105, 130, "JUN", YELLOW, BLACK, 24, 0);
 8001d60:	2300      	movs	r3, #0
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	2318      	movs	r3, #24
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d70:	4a33      	ldr	r2, [pc, #204]	; (8001e40 <convertMonth+0x1b4>)
 8001d72:	2182      	movs	r1, #130	; 0x82
 8001d74:	2069      	movs	r0, #105	; 0x69
 8001d76:	f7ff fae1 	bl	800133c <lcd_ShowStr>
            break;
 8001d7a:	e053      	b.n	8001e24 <convertMonth+0x198>
        case 7:
        	lcd_ShowStr(105, 130, "JUL", YELLOW, BLACK, 24, 0);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	2318      	movs	r3, #24
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	2300      	movs	r3, #0
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d8c:	4a2d      	ldr	r2, [pc, #180]	; (8001e44 <convertMonth+0x1b8>)
 8001d8e:	2182      	movs	r1, #130	; 0x82
 8001d90:	2069      	movs	r0, #105	; 0x69
 8001d92:	f7ff fad3 	bl	800133c <lcd_ShowStr>
            break;
 8001d96:	e045      	b.n	8001e24 <convertMonth+0x198>
        case 8:
        	lcd_ShowStr(105, 130, "AUG", YELLOW, BLACK, 24, 0);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9302      	str	r3, [sp, #8]
 8001d9c:	2318      	movs	r3, #24
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	2300      	movs	r3, #0
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <convertMonth+0x1bc>)
 8001daa:	2182      	movs	r1, #130	; 0x82
 8001dac:	2069      	movs	r0, #105	; 0x69
 8001dae:	f7ff fac5 	bl	800133c <lcd_ShowStr>
            break;
 8001db2:	e037      	b.n	8001e24 <convertMonth+0x198>
        case 9:
        	lcd_ShowStr(105, 130, "SEP", YELLOW, BLACK, 24, 0);
 8001db4:	2300      	movs	r3, #0
 8001db6:	9302      	str	r3, [sp, #8]
 8001db8:	2318      	movs	r3, #24
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001dc4:	4a21      	ldr	r2, [pc, #132]	; (8001e4c <convertMonth+0x1c0>)
 8001dc6:	2182      	movs	r1, #130	; 0x82
 8001dc8:	2069      	movs	r0, #105	; 0x69
 8001dca:	f7ff fab7 	bl	800133c <lcd_ShowStr>
            break;
 8001dce:	e029      	b.n	8001e24 <convertMonth+0x198>
        case 10:
        	lcd_ShowStr(105, 130, "OCT", YELLOW, BLACK, 24, 0);
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9302      	str	r3, [sp, #8]
 8001dd4:	2318      	movs	r3, #24
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001de0:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <convertMonth+0x1c4>)
 8001de2:	2182      	movs	r1, #130	; 0x82
 8001de4:	2069      	movs	r0, #105	; 0x69
 8001de6:	f7ff faa9 	bl	800133c <lcd_ShowStr>
            break;
 8001dea:	e01b      	b.n	8001e24 <convertMonth+0x198>
        case 11:
        	lcd_ShowStr(105, 130, "NOV", YELLOW, BLACK, 24, 0);
 8001dec:	2300      	movs	r3, #0
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	2318      	movs	r3, #24
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	2300      	movs	r3, #0
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <convertMonth+0x1c8>)
 8001dfe:	2182      	movs	r1, #130	; 0x82
 8001e00:	2069      	movs	r0, #105	; 0x69
 8001e02:	f7ff fa9b 	bl	800133c <lcd_ShowStr>
            break;
 8001e06:	e00d      	b.n	8001e24 <convertMonth+0x198>
        case 12:
        	lcd_ShowStr(105, 130, "DEC", YELLOW, BLACK, 24, 0);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	2318      	movs	r3, #24
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	2300      	movs	r3, #0
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e18:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <convertMonth+0x1cc>)
 8001e1a:	2182      	movs	r1, #130	; 0x82
 8001e1c:	2069      	movs	r0, #105	; 0x69
 8001e1e:	f7ff fa8d 	bl	800133c <lcd_ShowStr>
            break;
 8001e22:	bf00      	nop
    }
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	08006520 	.word	0x08006520
 8001e30:	08006524 	.word	0x08006524
 8001e34:	08006528 	.word	0x08006528
 8001e38:	0800652c 	.word	0x0800652c
 8001e3c:	08006530 	.word	0x08006530
 8001e40:	08006534 	.word	0x08006534
 8001e44:	08006538 	.word	0x08006538
 8001e48:	0800653c 	.word	0x0800653c
 8001e4c:	08006540 	.word	0x08006540
 8001e50:	08006544 	.word	0x08006544
 8001e54:	08006548 	.word	0x08006548
 8001e58:	0800654c 	.word	0x0800654c

08001e5c <displayMonth>:
void displayMonth(int num, int isBlink) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af04      	add	r7, sp, #16
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d025      	beq.n	8001eb8 <displayMonth+0x5c>
	    timeBlink = (timeBlink + 1)%10;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <displayMonth+0x6c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	1c59      	adds	r1, r3, #1
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <displayMonth+0x70>)
 8001e74:	fb83 2301 	smull	r2, r3, r3, r1
 8001e78:	109a      	asrs	r2, r3, #2
 8001e7a:	17cb      	asrs	r3, r1, #31
 8001e7c:	1ad2      	subs	r2, r2, r3
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	1aca      	subs	r2, r1, r3
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <displayMonth+0x6c>)
 8001e8a:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <displayMonth+0x6c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	dc0d      	bgt.n	8001eb0 <displayMonth+0x54>
	    	lcd_ShowStr(105, 130, "   ", GREEN, BLACK, 24, 0);
 8001e94:	2300      	movs	r3, #0
 8001e96:	9302      	str	r3, [sp, #8]
 8001e98:	2318      	movs	r3, #24
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <displayMonth+0x74>)
 8001ea6:	2182      	movs	r1, #130	; 0x82
 8001ea8:	2069      	movs	r0, #105	; 0x69
 8001eaa:	f7ff fa47 	bl	800133c <lcd_ShowStr>
	    }
	}
	else {
		convertMonth(num);
	}
}
 8001eae:	e006      	b.n	8001ebe <displayMonth+0x62>
	    	convertMonth(num);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff feeb 	bl	8001c8c <convertMonth>
}
 8001eb6:	e002      	b.n	8001ebe <displayMonth+0x62>
		convertMonth(num);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fee7 	bl	8001c8c <convertMonth>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000068 	.word	0x20000068
 8001ecc:	66666667 	.word	0x66666667
 8001ed0:	0800651c 	.word	0x0800651c

08001ed4 <displayYear>:

void displayYear(int num, int isBlink) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af04      	add	r7, sp, #16
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d05c      	beq.n	8001f9e <displayYear+0xca>
	    timeBlink = (timeBlink + 1)%10;
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <displayYear+0x148>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	1c59      	adds	r1, r3, #1
 8001eea:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <displayYear+0x14c>)
 8001eec:	fb83 2301 	smull	r2, r3, r3, r1
 8001ef0:	109a      	asrs	r2, r3, #2
 8001ef2:	17cb      	asrs	r3, r1, #31
 8001ef4:	1ad2      	subs	r2, r2, r3
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	1aca      	subs	r2, r1, r3
 8001f00:	4b46      	ldr	r3, [pc, #280]	; (800201c <displayYear+0x148>)
 8001f02:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001f04:	4b45      	ldr	r3, [pc, #276]	; (800201c <displayYear+0x148>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	dc0d      	bgt.n	8001f28 <displayYear+0x54>
	    	lcd_ShowStr(150, 130, "    ", GREEN, BLACK, 24, 0);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	2318      	movs	r3, #24
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	2300      	movs	r3, #0
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f1c:	4a41      	ldr	r2, [pc, #260]	; (8002024 <displayYear+0x150>)
 8001f1e:	2182      	movs	r1, #130	; 0x82
 8001f20:	2096      	movs	r0, #150	; 0x96
 8001f22:	f7ff fa0b 	bl	800133c <lcd_ShowStr>
	else {
    	lcd_ShowIntNum(150, 130, 20, 2, YELLOW, BLACK, 24);
    	lcd_ShowIntNum(176, 130, num/10, 1, YELLOW, BLACK, 24);
    	lcd_ShowIntNum(189, 130, num%10, 1, YELLOW, BLACK, 24);
	}
}
 8001f26:	e074      	b.n	8002012 <displayYear+0x13e>
	    	lcd_ShowIntNum(150, 130, 20, 2, YELLOW, BLACK, 24);
 8001f28:	2318      	movs	r3, #24
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2302      	movs	r3, #2
 8001f38:	2214      	movs	r2, #20
 8001f3a:	2182      	movs	r1, #130	; 0x82
 8001f3c:	2096      	movs	r0, #150	; 0x96
 8001f3e:	f7fe fffb 	bl	8000f38 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(176, 130, num/10, 1, YELLOW, BLACK, 24);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a36      	ldr	r2, [pc, #216]	; (8002020 <displayYear+0x14c>)
 8001f46:	fb82 1203 	smull	r1, r2, r2, r3
 8001f4a:	1092      	asrs	r2, r2, #2
 8001f4c:	17db      	asrs	r3, r3, #31
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	2318      	movs	r3, #24
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	2300      	movs	r3, #0
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2301      	movs	r3, #1
 8001f62:	2182      	movs	r1, #130	; 0x82
 8001f64:	20b0      	movs	r0, #176	; 0xb0
 8001f66:	f7fe ffe7 	bl	8000f38 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(189, 130, num%10, 1, YELLOW, BLACK, 24);
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <displayYear+0x14c>)
 8001f6e:	fb83 1302 	smull	r1, r3, r3, r2
 8001f72:	1099      	asrs	r1, r3, #2
 8001f74:	17d3      	asrs	r3, r2, #31
 8001f76:	1ac9      	subs	r1, r1, r3
 8001f78:	460b      	mov	r3, r1
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	1ad1      	subs	r1, r2, r3
 8001f82:	b28a      	uxth	r2, r1
 8001f84:	2318      	movs	r3, #24
 8001f86:	9302      	str	r3, [sp, #8]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2301      	movs	r3, #1
 8001f94:	2182      	movs	r1, #130	; 0x82
 8001f96:	20bd      	movs	r0, #189	; 0xbd
 8001f98:	f7fe ffce 	bl	8000f38 <lcd_ShowIntNum>
}
 8001f9c:	e039      	b.n	8002012 <displayYear+0x13e>
    	lcd_ShowIntNum(150, 130, 20, 2, YELLOW, BLACK, 24);
 8001f9e:	2318      	movs	r3, #24
 8001fa0:	9302      	str	r3, [sp, #8]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2302      	movs	r3, #2
 8001fae:	2214      	movs	r2, #20
 8001fb0:	2182      	movs	r1, #130	; 0x82
 8001fb2:	2096      	movs	r0, #150	; 0x96
 8001fb4:	f7fe ffc0 	bl	8000f38 <lcd_ShowIntNum>
    	lcd_ShowIntNum(176, 130, num/10, 1, YELLOW, BLACK, 24);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a19      	ldr	r2, [pc, #100]	; (8002020 <displayYear+0x14c>)
 8001fbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001fc0:	1092      	asrs	r2, r2, #2
 8001fc2:	17db      	asrs	r3, r3, #31
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	2318      	movs	r3, #24
 8001fca:	9302      	str	r3, [sp, #8]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	2182      	movs	r1, #130	; 0x82
 8001fda:	20b0      	movs	r0, #176	; 0xb0
 8001fdc:	f7fe ffac 	bl	8000f38 <lcd_ShowIntNum>
    	lcd_ShowIntNum(189, 130, num%10, 1, YELLOW, BLACK, 24);
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <displayYear+0x14c>)
 8001fe4:	fb83 1302 	smull	r1, r3, r3, r2
 8001fe8:	1099      	asrs	r1, r3, #2
 8001fea:	17d3      	asrs	r3, r2, #31
 8001fec:	1ac9      	subs	r1, r1, r3
 8001fee:	460b      	mov	r3, r1
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	1ad1      	subs	r1, r2, r3
 8001ff8:	b28a      	uxth	r2, r1
 8001ffa:	2318      	movs	r3, #24
 8001ffc:	9302      	str	r3, [sp, #8]
 8001ffe:	2300      	movs	r3, #0
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2301      	movs	r3, #1
 800200a:	2182      	movs	r1, #130	; 0x82
 800200c:	20bd      	movs	r0, #189	; 0xbd
 800200e:	f7fe ff93 	bl	8000f38 <lcd_ShowIntNum>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000068 	.word	0x20000068
 8002020:	66666667 	.word	0x66666667
 8002024:	08006550 	.word	0x08006550

08002028 <displayScreen>:

void displayScreen()
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af04      	add	r7, sp, #16
	if (status == NORMAL) {
 800202e:	4ba4      	ldr	r3, [pc, #656]	; (80022c0 <displayScreen+0x298>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d12a      	bne.n	800208c <displayScreen+0x64>
		displayHour(ds3231_hours,0);
 8002036:	4ba3      	ldr	r3, [pc, #652]	; (80022c4 <displayScreen+0x29c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fb41 	bl	80016c4 <displayHour>
		displayMin(ds3231_min,0);
 8002042:	4ba1      	ldr	r3, [pc, #644]	; (80022c8 <displayScreen+0x2a0>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fbcb 	bl	80017e4 <displayMin>
		displaySec(ds3231_sec,0);
 800204e:	4b9f      	ldr	r3, [pc, #636]	; (80022cc <displayScreen+0x2a4>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fc61 	bl	800191c <displaySec>
		displayDay(ds3231_day,0);
 800205a:	4b9d      	ldr	r3, [pc, #628]	; (80022d0 <displayScreen+0x2a8>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fd85 	bl	8001b70 <displayDay>
		displayDate(ds3231_date,0);
 8002066:	4b9b      	ldr	r3, [pc, #620]	; (80022d4 <displayScreen+0x2ac>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fdbb 	bl	8001be8 <displayDate>
		displayMonth(ds3231_month,0);
 8002072:	4b99      	ldr	r3, [pc, #612]	; (80022d8 <displayScreen+0x2b0>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff feef 	bl	8001e5c <displayMonth>
		displayYear(ds3231_year,0);
 800207e:	4b97      	ldr	r3, [pc, #604]	; (80022dc <displayScreen+0x2b4>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff25 	bl	8001ed4 <displayYear>
 800208a:	e167      	b.n	800235c <displayScreen+0x334>
	}
	else {
		if (statusModifying == SET_HOUR) {
 800208c:	4b94      	ldr	r3, [pc, #592]	; (80022e0 <displayScreen+0x2b8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d12a      	bne.n	80020ea <displayScreen+0xc2>
			displayHour(hourTemp,1);
 8002094:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <displayScreen+0x2bc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fb12 	bl	80016c4 <displayHour>
			displayMin(minTemp,0);
 80020a0:	4b91      	ldr	r3, [pc, #580]	; (80022e8 <displayScreen+0x2c0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fb9c 	bl	80017e4 <displayMin>
			displaySec(secTemp,0);
 80020ac:	4b8f      	ldr	r3, [pc, #572]	; (80022ec <displayScreen+0x2c4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fc32 	bl	800191c <displaySec>
			displayDay(dayTemp,0);
 80020b8:	4b8d      	ldr	r3, [pc, #564]	; (80022f0 <displayScreen+0x2c8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fd56 	bl	8001b70 <displayDay>
			displayDate(dateTemp,0);
 80020c4:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <displayScreen+0x2cc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fd8c 	bl	8001be8 <displayDate>
			displayMonth(monthTemp,0);
 80020d0:	4b89      	ldr	r3, [pc, #548]	; (80022f8 <displayScreen+0x2d0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fec0 	bl	8001e5c <displayMonth>
			displayYear(yearTemp,0);
 80020dc:	4b87      	ldr	r3, [pc, #540]	; (80022fc <displayScreen+0x2d4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fef6 	bl	8001ed4 <displayYear>
 80020e8:	e138      	b.n	800235c <displayScreen+0x334>
		}

		else if (statusModifying == SET_MIN) {
 80020ea:	4b7d      	ldr	r3, [pc, #500]	; (80022e0 <displayScreen+0x2b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d12a      	bne.n	8002148 <displayScreen+0x120>
			displayHour(hourTemp,0);
 80020f2:	4b7c      	ldr	r3, [pc, #496]	; (80022e4 <displayScreen+0x2bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fae3 	bl	80016c4 <displayHour>
			displayMin(minTemp,1);
 80020fe:	4b7a      	ldr	r3, [pc, #488]	; (80022e8 <displayScreen+0x2c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2101      	movs	r1, #1
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fb6d 	bl	80017e4 <displayMin>
			displaySec(secTemp,0);
 800210a:	4b78      	ldr	r3, [pc, #480]	; (80022ec <displayScreen+0x2c4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fc03 	bl	800191c <displaySec>
			displayDay(dayTemp,0);
 8002116:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <displayScreen+0x2c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fd27 	bl	8001b70 <displayDay>
			displayDate(dateTemp,0);
 8002122:	4b74      	ldr	r3, [pc, #464]	; (80022f4 <displayScreen+0x2cc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fd5d 	bl	8001be8 <displayDate>
			displayMonth(monthTemp,0);
 800212e:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <displayScreen+0x2d0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fe91 	bl	8001e5c <displayMonth>
			displayYear(yearTemp,0);
 800213a:	4b70      	ldr	r3, [pc, #448]	; (80022fc <displayScreen+0x2d4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fec7 	bl	8001ed4 <displayYear>
 8002146:	e109      	b.n	800235c <displayScreen+0x334>
		}

		else if (statusModifying == SET_SEC) {
 8002148:	4b65      	ldr	r3, [pc, #404]	; (80022e0 <displayScreen+0x2b8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b09      	cmp	r3, #9
 800214e:	d12a      	bne.n	80021a6 <displayScreen+0x17e>
			displayHour(hourTemp,0);
 8002150:	4b64      	ldr	r3, [pc, #400]	; (80022e4 <displayScreen+0x2bc>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fab4 	bl	80016c4 <displayHour>
			displayMin(minTemp,0);
 800215c:	4b62      	ldr	r3, [pc, #392]	; (80022e8 <displayScreen+0x2c0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fb3e 	bl	80017e4 <displayMin>
			displaySec(secTemp,1);
 8002168:	4b60      	ldr	r3, [pc, #384]	; (80022ec <displayScreen+0x2c4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fbd4 	bl	800191c <displaySec>
			displayDay(dayTemp,0);
 8002174:	4b5e      	ldr	r3, [pc, #376]	; (80022f0 <displayScreen+0x2c8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fcf8 	bl	8001b70 <displayDay>
			displayDate(dateTemp,0);
 8002180:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <displayScreen+0x2cc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fd2e 	bl	8001be8 <displayDate>
			displayMonth(monthTemp,0);
 800218c:	4b5a      	ldr	r3, [pc, #360]	; (80022f8 <displayScreen+0x2d0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fe62 	bl	8001e5c <displayMonth>
			displayYear(yearTemp,0);
 8002198:	4b58      	ldr	r3, [pc, #352]	; (80022fc <displayScreen+0x2d4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fe98 	bl	8001ed4 <displayYear>
 80021a4:	e0da      	b.n	800235c <displayScreen+0x334>
		}

		else if (statusModifying == SET_DAY) {
 80021a6:	4b4e      	ldr	r3, [pc, #312]	; (80022e0 <displayScreen+0x2b8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d12a      	bne.n	8002204 <displayScreen+0x1dc>
			displayHour(hourTemp,0);
 80021ae:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <displayScreen+0x2bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fa85 	bl	80016c4 <displayHour>
			displayMin(minTemp,0);
 80021ba:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <displayScreen+0x2c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fb0f 	bl	80017e4 <displayMin>
			displaySec(secTemp,0);
 80021c6:	4b49      	ldr	r3, [pc, #292]	; (80022ec <displayScreen+0x2c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fba5 	bl	800191c <displaySec>
			displayDay(dayTemp,1);
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <displayScreen+0x2c8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fcc9 	bl	8001b70 <displayDay>
			displayDate(dateTemp,0);
 80021de:	4b45      	ldr	r3, [pc, #276]	; (80022f4 <displayScreen+0x2cc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fcff 	bl	8001be8 <displayDate>
			displayMonth(monthTemp,0);
 80021ea:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <displayScreen+0x2d0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fe33 	bl	8001e5c <displayMonth>
			displayYear(yearTemp,0);
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <displayScreen+0x2d4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fe69 	bl	8001ed4 <displayYear>
 8002202:	e0ab      	b.n	800235c <displayScreen+0x334>
		}

		else if (statusModifying == SET_DATE) {
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <displayScreen+0x2b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d12a      	bne.n	8002262 <displayScreen+0x23a>
			displayHour(hourTemp,0);
 800220c:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <displayScreen+0x2bc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fa56 	bl	80016c4 <displayHour>
			displayMin(minTemp,0);
 8002218:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <displayScreen+0x2c0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fae0 	bl	80017e4 <displayMin>
			displaySec(secTemp,0);
 8002224:	4b31      	ldr	r3, [pc, #196]	; (80022ec <displayScreen+0x2c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fb76 	bl	800191c <displaySec>
			displayDay(dayTemp,0);
 8002230:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <displayScreen+0x2c8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fc9a 	bl	8001b70 <displayDay>
			displayDate(dateTemp,1);
 800223c:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <displayScreen+0x2cc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fcd0 	bl	8001be8 <displayDate>
			displayMonth(monthTemp,0);
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <displayScreen+0x2d0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fe04 	bl	8001e5c <displayMonth>
			displayYear(yearTemp,0);
 8002254:	4b29      	ldr	r3, [pc, #164]	; (80022fc <displayScreen+0x2d4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fe3a 	bl	8001ed4 <displayYear>
 8002260:	e07c      	b.n	800235c <displayScreen+0x334>
		}

		else if (statusModifying == SET_MONTH) {
 8002262:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <displayScreen+0x2b8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b05      	cmp	r3, #5
 8002268:	d14a      	bne.n	8002300 <displayScreen+0x2d8>
			displayHour(hourTemp,0);
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <displayScreen+0x2bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fa27 	bl	80016c4 <displayHour>
			displayMin(minTemp,0);
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <displayScreen+0x2c0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fab1 	bl	80017e4 <displayMin>
			displaySec(secTemp,0);
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <displayScreen+0x2c4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fb47 	bl	800191c <displaySec>
			displayDay(dayTemp,0);
 800228e:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <displayScreen+0x2c8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fc6b 	bl	8001b70 <displayDay>
			displayDate(dateTemp,0);
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <displayScreen+0x2cc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fca1 	bl	8001be8 <displayDate>
			displayMonth(monthTemp,1);
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <displayScreen+0x2d0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fdd5 	bl	8001e5c <displayMonth>
			displayYear(yearTemp,0);
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <displayScreen+0x2d4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fe0b 	bl	8001ed4 <displayYear>
 80022be:	e04d      	b.n	800235c <displayScreen+0x334>
 80022c0:	20000050 	.word	0x20000050
 80022c4:	20000099 	.word	0x20000099
 80022c8:	20000096 	.word	0x20000096
 80022cc:	20000094 	.word	0x20000094
 80022d0:	20000098 	.word	0x20000098
 80022d4:	20000097 	.word	0x20000097
 80022d8:	2000009a 	.word	0x2000009a
 80022dc:	20000095 	.word	0x20000095
 80022e0:	20000008 	.word	0x20000008
 80022e4:	20000054 	.word	0x20000054
 80022e8:	20000058 	.word	0x20000058
 80022ec:	2000005c 	.word	0x2000005c
 80022f0:	2000000c 	.word	0x2000000c
 80022f4:	20000010 	.word	0x20000010
 80022f8:	20000014 	.word	0x20000014
 80022fc:	20000060 	.word	0x20000060
		}

		else if (statusModifying == SET_YEAR) {
 8002300:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <displayScreen+0x3d4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b06      	cmp	r3, #6
 8002306:	d129      	bne.n	800235c <displayScreen+0x334>
			displayHour(hourTemp,0);
 8002308:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <displayScreen+0x3d8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f9d8 	bl	80016c4 <displayHour>
			displayMin(minTemp,0);
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <displayScreen+0x3dc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fa62 	bl	80017e4 <displayMin>
			displaySec(secTemp,0);
 8002320:	4b39      	ldr	r3, [pc, #228]	; (8002408 <displayScreen+0x3e0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff faf8 	bl	800191c <displaySec>
			displayDay(dayTemp,0);
 800232c:	4b37      	ldr	r3, [pc, #220]	; (800240c <displayScreen+0x3e4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fc1c 	bl	8001b70 <displayDay>
			displayDate(dateTemp,0);
 8002338:	4b35      	ldr	r3, [pc, #212]	; (8002410 <displayScreen+0x3e8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fc52 	bl	8001be8 <displayDate>
			displayMonth(monthTemp,0);
 8002344:	4b33      	ldr	r3, [pc, #204]	; (8002414 <displayScreen+0x3ec>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fd86 	bl	8001e5c <displayMonth>
			displayYear(yearTemp,1);
 8002350:	4b31      	ldr	r3, [pc, #196]	; (8002418 <displayScreen+0x3f0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fdbc 	bl	8001ed4 <displayYear>
		}
	}
	//displayState
	if (status == NORMAL) {
 800235c:	4b2f      	ldr	r3, [pc, #188]	; (800241c <displayScreen+0x3f4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10d      	bne.n	8002380 <displayScreen+0x358>
		lcd_ShowStr(20, 160, "1.NOR", YELLOW, BLACK, 24, 0);
 8002364:	2300      	movs	r3, #0
 8002366:	9302      	str	r3, [sp, #8]
 8002368:	2318      	movs	r3, #24
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	2300      	movs	r3, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002374:	4a2a      	ldr	r2, [pc, #168]	; (8002420 <displayScreen+0x3f8>)
 8002376:	21a0      	movs	r1, #160	; 0xa0
 8002378:	2014      	movs	r0, #20
 800237a:	f7fe ffdf 	bl	800133c <lcd_ShowStr>
 800237e:	e01e      	b.n	80023be <displayScreen+0x396>
	}
	else if (status == MODIFY_TIME) {
 8002380:	4b26      	ldr	r3, [pc, #152]	; (800241c <displayScreen+0x3f4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b07      	cmp	r3, #7
 8002386:	d10d      	bne.n	80023a4 <displayScreen+0x37c>
		lcd_ShowStr(20, 160, "2.MOD", YELLOW, BLACK, 24, 0);
 8002388:	2300      	movs	r3, #0
 800238a:	9302      	str	r3, [sp, #8]
 800238c:	2318      	movs	r3, #24
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	2300      	movs	r3, #0
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002398:	4a22      	ldr	r2, [pc, #136]	; (8002424 <displayScreen+0x3fc>)
 800239a:	21a0      	movs	r1, #160	; 0xa0
 800239c:	2014      	movs	r0, #20
 800239e:	f7fe ffcd 	bl	800133c <lcd_ShowStr>
 80023a2:	e00c      	b.n	80023be <displayScreen+0x396>
	}
	else {
		lcd_ShowStr(20, 160, "3.ALR", YELLOW, BLACK, 24, 0);
 80023a4:	2300      	movs	r3, #0
 80023a6:	9302      	str	r3, [sp, #8]
 80023a8:	2318      	movs	r3, #24
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	2300      	movs	r3, #0
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <displayScreen+0x400>)
 80023b6:	21a0      	movs	r1, #160	; 0xa0
 80023b8:	2014      	movs	r0, #20
 80023ba:	f7fe ffbf 	bl	800133c <lcd_ShowStr>
	}
	if (ds3231_hours == hourAlarm && ds3231_min == minAlarm) {
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <displayScreen+0x404>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <displayScreen+0x408>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d113      	bne.n	80023f4 <displayScreen+0x3cc>
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <displayScreen+0x40c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <displayScreen+0x410>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d10c      	bne.n	80023f4 <displayScreen+0x3cc>
		lcd_ShowStr(20, 190, "CHING CHONG", RED, BLACK, 24, 0);
 80023da:	2300      	movs	r3, #0
 80023dc:	9302      	str	r3, [sp, #8]
 80023de:	2318      	movs	r3, #24
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2300      	movs	r3, #0
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023ea:	4a14      	ldr	r2, [pc, #80]	; (800243c <displayScreen+0x414>)
 80023ec:	21be      	movs	r1, #190	; 0xbe
 80023ee:	2014      	movs	r0, #20
 80023f0:	f7fe ffa4 	bl	800133c <lcd_ShowStr>
	}

}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000008 	.word	0x20000008
 8002400:	20000054 	.word	0x20000054
 8002404:	20000058 	.word	0x20000058
 8002408:	2000005c 	.word	0x2000005c
 800240c:	2000000c 	.word	0x2000000c
 8002410:	20000010 	.word	0x20000010
 8002414:	20000014 	.word	0x20000014
 8002418:	20000060 	.word	0x20000060
 800241c:	20000050 	.word	0x20000050
 8002420:	08006558 	.word	0x08006558
 8002424:	08006560 	.word	0x08006560
 8002428:	08006568 	.word	0x08006568
 800242c:	20000099 	.word	0x20000099
 8002430:	20000018 	.word	0x20000018
 8002434:	20000096 	.word	0x20000096
 8002438:	20000064 	.word	0x20000064
 800243c:	08006570 	.word	0x08006570

08002440 <modifyTimeFsm>:

void modifyTimeFsm() {
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
	switch(statusModifying){
 8002444:	4b56      	ldr	r3, [pc, #344]	; (80025a0 <modifyTimeFsm+0x160>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3b01      	subs	r3, #1
 800244a:	2b08      	cmp	r3, #8
 800244c:	f200 8094 	bhi.w	8002578 <modifyTimeFsm+0x138>
 8002450:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <modifyTimeFsm+0x18>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	0800247d 	.word	0x0800247d
 800245c:	080024a1 	.word	0x080024a1
 8002460:	080024e9 	.word	0x080024e9
 8002464:	0800250d 	.word	0x0800250d
 8002468:	08002531 	.word	0x08002531
 800246c:	08002555 	.word	0x08002555
 8002470:	08002579 	.word	0x08002579
 8002474:	08002579 	.word	0x08002579
 8002478:	080024c5 	.word	0x080024c5
		case SET_HOUR:
			setHour();
 800247c:	f000 f958 	bl	8002730 <setHour>
			if(IsButtonSave()) {
 8002480:	f000 f946 	bl	8002710 <IsButtonSave>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d07a      	beq.n	8002580 <modifyTimeFsm+0x140>
				ds3231_Write(ADDRESS_HOUR, hourTemp);
 800248a:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <modifyTimeFsm+0x164>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	4619      	mov	r1, r3
 8002492:	2002      	movs	r0, #2
 8002494:	f7fe f8d0 	bl	8000638 <ds3231_Write>
				statusModifying = SET_MIN;
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <modifyTimeFsm+0x160>)
 800249a:	2202      	movs	r2, #2
 800249c:	601a      	str	r2, [r3, #0]
			}
			break;
 800249e:	e06f      	b.n	8002580 <modifyTimeFsm+0x140>

		case SET_MIN:
			setMin();
 80024a0:	f000 f95e 	bl	8002760 <setMin>
			if(IsButtonSave()) {
 80024a4:	f000 f934 	bl	8002710 <IsButtonSave>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d06a      	beq.n	8002584 <modifyTimeFsm+0x144>
				ds3231_Write(ADDRESS_MIN, minTemp);
 80024ae:	4b3e      	ldr	r3, [pc, #248]	; (80025a8 <modifyTimeFsm+0x168>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	4619      	mov	r1, r3
 80024b6:	2001      	movs	r0, #1
 80024b8:	f7fe f8be 	bl	8000638 <ds3231_Write>
				statusModifying = SET_SEC;
 80024bc:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <modifyTimeFsm+0x160>)
 80024be:	2209      	movs	r2, #9
 80024c0:	601a      	str	r2, [r3, #0]
			}
			break;
 80024c2:	e05f      	b.n	8002584 <modifyTimeFsm+0x144>

		case SET_SEC:
			setSec();
 80024c4:	f000 f964 	bl	8002790 <setSec>
			if(IsButtonSave()) {
 80024c8:	f000 f922 	bl	8002710 <IsButtonSave>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d05a      	beq.n	8002588 <modifyTimeFsm+0x148>
				ds3231_Write(ADDRESS_SEC, secTemp);
 80024d2:	4b36      	ldr	r3, [pc, #216]	; (80025ac <modifyTimeFsm+0x16c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4619      	mov	r1, r3
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe f8ac 	bl	8000638 <ds3231_Write>
				statusModifying = SET_DAY;
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <modifyTimeFsm+0x160>)
 80024e2:	2203      	movs	r2, #3
 80024e4:	601a      	str	r2, [r3, #0]
			}
			break;
 80024e6:	e04f      	b.n	8002588 <modifyTimeFsm+0x148>

		case SET_DAY:
			setDay();
 80024e8:	f000 f96a 	bl	80027c0 <setDay>
			if(IsButtonSave()) {
 80024ec:	f000 f910 	bl	8002710 <IsButtonSave>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d04a      	beq.n	800258c <modifyTimeFsm+0x14c>
				ds3231_Write(ADDRESS_DAY, dayTemp);
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <modifyTimeFsm+0x170>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	4619      	mov	r1, r3
 80024fe:	2003      	movs	r0, #3
 8002500:	f7fe f89a 	bl	8000638 <ds3231_Write>
				statusModifying = SET_DATE;
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <modifyTimeFsm+0x160>)
 8002506:	2204      	movs	r2, #4
 8002508:	601a      	str	r2, [r3, #0]
			}
			break;
 800250a:	e03f      	b.n	800258c <modifyTimeFsm+0x14c>

		case SET_DATE:
			setDate();
 800250c:	f000 f970 	bl	80027f0 <setDate>
			if(IsButtonSave()) {
 8002510:	f000 f8fe 	bl	8002710 <IsButtonSave>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d03a      	beq.n	8002590 <modifyTimeFsm+0x150>
				ds3231_Write(ADDRESS_DATE, dateTemp);
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <modifyTimeFsm+0x174>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4619      	mov	r1, r3
 8002522:	2004      	movs	r0, #4
 8002524:	f7fe f888 	bl	8000638 <ds3231_Write>
				statusModifying = SET_MONTH;
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <modifyTimeFsm+0x160>)
 800252a:	2205      	movs	r2, #5
 800252c:	601a      	str	r2, [r3, #0]
			}
			break;
 800252e:	e02f      	b.n	8002590 <modifyTimeFsm+0x150>

		case SET_MONTH:
			setMonth();
 8002530:	f000 f976 	bl	8002820 <setMonth>
			if(IsButtonSave()) {
 8002534:	f000 f8ec 	bl	8002710 <IsButtonSave>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d02a      	beq.n	8002594 <modifyTimeFsm+0x154>
				ds3231_Write(ADDRESS_MONTH, monthTemp);
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <modifyTimeFsm+0x178>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	4619      	mov	r1, r3
 8002546:	2005      	movs	r0, #5
 8002548:	f7fe f876 	bl	8000638 <ds3231_Write>
				statusModifying = SET_YEAR;
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <modifyTimeFsm+0x160>)
 800254e:	2206      	movs	r2, #6
 8002550:	601a      	str	r2, [r3, #0]
			}
			break;
 8002552:	e01f      	b.n	8002594 <modifyTimeFsm+0x154>

		case SET_YEAR:
			setYear();
 8002554:	f000 f97c 	bl	8002850 <setYear>
			if(IsButtonSave()) {
 8002558:	f000 f8da 	bl	8002710 <IsButtonSave>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01a      	beq.n	8002598 <modifyTimeFsm+0x158>
				ds3231_Write(ADDRESS_YEAR, yearTemp);
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <modifyTimeFsm+0x17c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	4619      	mov	r1, r3
 800256a:	2006      	movs	r0, #6
 800256c:	f7fe f864 	bl	8000638 <ds3231_Write>
				statusModifying = IDLE;
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <modifyTimeFsm+0x160>)
 8002572:	2207      	movs	r2, #7
 8002574:	601a      	str	r2, [r3, #0]
			}
			break;
 8002576:	e00f      	b.n	8002598 <modifyTimeFsm+0x158>


		default:
			statusModifying = IDLE;
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <modifyTimeFsm+0x160>)
 800257a:	2207      	movs	r2, #7
 800257c:	601a      	str	r2, [r3, #0]
			break;
 800257e:	e00c      	b.n	800259a <modifyTimeFsm+0x15a>
			break;
 8002580:	bf00      	nop
 8002582:	e00a      	b.n	800259a <modifyTimeFsm+0x15a>
			break;
 8002584:	bf00      	nop
 8002586:	e008      	b.n	800259a <modifyTimeFsm+0x15a>
			break;
 8002588:	bf00      	nop
 800258a:	e006      	b.n	800259a <modifyTimeFsm+0x15a>
			break;
 800258c:	bf00      	nop
 800258e:	e004      	b.n	800259a <modifyTimeFsm+0x15a>
			break;
 8002590:	bf00      	nop
 8002592:	e002      	b.n	800259a <modifyTimeFsm+0x15a>
			break;
 8002594:	bf00      	nop
 8002596:	e000      	b.n	800259a <modifyTimeFsm+0x15a>
			break;
 8002598:	bf00      	nop
	}
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000008 	.word	0x20000008
 80025a4:	20000054 	.word	0x20000054
 80025a8:	20000058 	.word	0x20000058
 80025ac:	2000005c 	.word	0x2000005c
 80025b0:	2000000c 	.word	0x2000000c
 80025b4:	20000010 	.word	0x20000010
 80025b8:	20000014 	.word	0x20000014
 80025bc:	20000060 	.word	0x20000060

080025c0 <modifyAlarmFsm>:

void modifyAlarmFsm(){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	switch(statusModifying) {
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <modifyAlarmFsm+0x60>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d002      	beq.n	80025d2 <modifyAlarmFsm+0x12>
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d00f      	beq.n	80025f0 <modifyAlarmFsm+0x30>
 80025d0:	e01d      	b.n	800260e <modifyAlarmFsm+0x4e>
		case SET_HOUR:
			setHour();
 80025d2:	f000 f8ad 	bl	8002730 <setHour>
			if(IsButtonSave()) {
 80025d6:	f000 f89b 	bl	8002710 <IsButtonSave>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01a      	beq.n	8002616 <modifyAlarmFsm+0x56>
				hourAlarm = hourTemp;
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <modifyAlarmFsm+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a10      	ldr	r2, [pc, #64]	; (8002628 <modifyAlarmFsm+0x68>)
 80025e6:	6013      	str	r3, [r2, #0]
				statusModifying = SET_MIN;
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <modifyAlarmFsm+0x60>)
 80025ea:	2202      	movs	r2, #2
 80025ec:	601a      	str	r2, [r3, #0]
			}
			break;
 80025ee:	e012      	b.n	8002616 <modifyAlarmFsm+0x56>

		case SET_MIN:
			setMin();
 80025f0:	f000 f8b6 	bl	8002760 <setMin>
			if(IsButtonSave()) {
 80025f4:	f000 f88c 	bl	8002710 <IsButtonSave>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <modifyAlarmFsm+0x5a>
				minAlarm = minTemp;
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <modifyAlarmFsm+0x6c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a0b      	ldr	r2, [pc, #44]	; (8002630 <modifyAlarmFsm+0x70>)
 8002604:	6013      	str	r3, [r2, #0]
				statusModifying = SET_HOUR;
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <modifyAlarmFsm+0x60>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
			}
			break;
 800260c:	e005      	b.n	800261a <modifyAlarmFsm+0x5a>

		default:
			statusModifying = SET_HOUR;
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <modifyAlarmFsm+0x60>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]
			break;
 8002614:	e002      	b.n	800261c <modifyAlarmFsm+0x5c>
			break;
 8002616:	bf00      	nop
 8002618:	e000      	b.n	800261c <modifyAlarmFsm+0x5c>
			break;
 800261a:	bf00      	nop
	}
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000008 	.word	0x20000008
 8002624:	20000054 	.word	0x20000054
 8002628:	20000018 	.word	0x20000018
 800262c:	20000058 	.word	0x20000058
 8002630:	20000064 	.word	0x20000064

08002634 <fsm>:

void fsm()
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
    switch(status)
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <fsm+0x7c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b08      	cmp	r3, #8
 800263e:	d020      	beq.n	8002682 <fsm+0x4e>
 8002640:	2b08      	cmp	r3, #8
 8002642:	dc29      	bgt.n	8002698 <fsm+0x64>
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <fsm+0x1a>
 8002648:	2b07      	cmp	r3, #7
 800264a:	d00c      	beq.n	8002666 <fsm+0x32>
 800264c:	e024      	b.n	8002698 <fsm+0x64>
    {
        case NORMAL:
            if(IsButtonMode()) {
 800264e:	f000 f833 	bl	80026b8 <IsButtonMode>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d023      	beq.n	80026a0 <fsm+0x6c>
                status = MODIFY_TIME;
 8002658:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <fsm+0x7c>)
 800265a:	2207      	movs	r2, #7
 800265c:	601a      	str	r2, [r3, #0]
            	statusModifying = SET_HOUR;
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <fsm+0x80>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]
            }
            break;
 8002664:	e01c      	b.n	80026a0 <fsm+0x6c>
        case MODIFY_TIME:
            modifyTimeFsm();
 8002666:	f7ff feeb 	bl	8002440 <modifyTimeFsm>
            if(IsButtonMode()) {
 800266a:	f000 f825 	bl	80026b8 <IsButtonMode>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d017      	beq.n	80026a4 <fsm+0x70>
                status = MODIFY_ALARM;
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <fsm+0x7c>)
 8002676:	2208      	movs	r2, #8
 8002678:	601a      	str	r2, [r3, #0]
                statusModifying = SET_HOUR;
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <fsm+0x80>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]
            }
            break;
 8002680:	e010      	b.n	80026a4 <fsm+0x70>
        case MODIFY_ALARM:
            modifyAlarmFsm();
 8002682:	f7ff ff9d 	bl	80025c0 <modifyAlarmFsm>
            if(IsButtonMode())
 8002686:	f000 f817 	bl	80026b8 <IsButtonMode>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <fsm+0x74>
                status = NORMAL;
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <fsm+0x7c>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
            break;
 8002696:	e007      	b.n	80026a8 <fsm+0x74>
        default:
            status = NORMAL;
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <fsm+0x7c>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
            break;
 800269e:	e004      	b.n	80026aa <fsm+0x76>
            break;
 80026a0:	bf00      	nop
 80026a2:	e002      	b.n	80026aa <fsm+0x76>
            break;
 80026a4:	bf00      	nop
 80026a6:	e000      	b.n	80026aa <fsm+0x76>
            break;
 80026a8:	bf00      	nop
    }
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000050 	.word	0x20000050
 80026b4:	20000008 	.word	0x20000008

080026b8 <IsButtonMode>:
//button change mode
unsigned char IsButtonMode()
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
    if (button_count[0] == 1)
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <IsButtonMode+0x1c>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <IsButtonMode+0x10>
        return 1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <IsButtonMode+0x12>
    else
        return 0;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	20000074 	.word	0x20000074

080026d8 <IsButtonUp>:

//increase parameter
unsigned char IsButtonUp()
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
	if ((button_count[3] == 1) || (button_count[3] >= 40 && button_count[3] % 4 == 0))
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <IsButtonUp+0x34>)
 80026de:	88db      	ldrh	r3, [r3, #6]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d00a      	beq.n	80026fa <IsButtonUp+0x22>
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <IsButtonUp+0x34>)
 80026e6:	88db      	ldrh	r3, [r3, #6]
 80026e8:	2b27      	cmp	r3, #39	; 0x27
 80026ea:	d908      	bls.n	80026fe <IsButtonUp+0x26>
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <IsButtonUp+0x34>)
 80026ee:	88db      	ldrh	r3, [r3, #6]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <IsButtonUp+0x26>
        return 1;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <IsButtonUp+0x28>
    else
        return 0;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000074 	.word	0x20000074

08002710 <IsButtonSave>:

//save parameter
unsigned char IsButtonSave()
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
    if (button_count[12] == 1)
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <IsButtonSave+0x1c>)
 8002716:	8b1b      	ldrh	r3, [r3, #24]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <IsButtonSave+0x10>
        return 1;
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <IsButtonSave+0x12>
    else
        return 0;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	20000074 	.word	0x20000074

08002730 <setHour>:

void setHour()
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
    if(IsButtonUp())
 8002734:	f7ff ffd0 	bl	80026d8 <IsButtonUp>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <setHour+0x26>
    {
        hourTemp++;
 800273e:	4b07      	ldr	r3, [pc, #28]	; (800275c <setHour+0x2c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	4a05      	ldr	r2, [pc, #20]	; (800275c <setHour+0x2c>)
 8002746:	6013      	str	r3, [r2, #0]
        if(hourTemp > 23)
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <setHour+0x2c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b17      	cmp	r3, #23
 800274e:	dd02      	ble.n	8002756 <setHour+0x26>
            hourTemp = 0;
 8002750:	4b02      	ldr	r3, [pc, #8]	; (800275c <setHour+0x2c>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
    }
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000054 	.word	0x20000054

08002760 <setMin>:

void setMin()
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
    if(IsButtonUp())
 8002764:	f7ff ffb8 	bl	80026d8 <IsButtonUp>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <setMin+0x26>
    {
        minTemp++;
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <setMin+0x2c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3301      	adds	r3, #1
 8002774:	4a05      	ldr	r2, [pc, #20]	; (800278c <setMin+0x2c>)
 8002776:	6013      	str	r3, [r2, #0]
        if(minTemp > 59)
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <setMin+0x2c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b3b      	cmp	r3, #59	; 0x3b
 800277e:	dd02      	ble.n	8002786 <setMin+0x26>
            minTemp = 0;
 8002780:	4b02      	ldr	r3, [pc, #8]	; (800278c <setMin+0x2c>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
    }
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000058 	.word	0x20000058

08002790 <setSec>:

void setSec()
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 8002794:	f7ff ffa0 	bl	80026d8 <IsButtonUp>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <setSec+0x26>
    {
        secTemp++;
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <setSec+0x2c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4a05      	ldr	r2, [pc, #20]	; (80027bc <setSec+0x2c>)
 80027a6:	6013      	str	r3, [r2, #0]
        if(secTemp > 59)
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <setSec+0x2c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b3b      	cmp	r3, #59	; 0x3b
 80027ae:	dd02      	ble.n	80027b6 <setSec+0x26>
            secTemp = 0;
 80027b0:	4b02      	ldr	r3, [pc, #8]	; (80027bc <setSec+0x2c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    }
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000005c 	.word	0x2000005c

080027c0 <setDay>:

void setDay()
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 80027c4:	f7ff ff88 	bl	80026d8 <IsButtonUp>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <setDay+0x26>
    {
        dayTemp++;
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <setDay+0x2c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	4a05      	ldr	r2, [pc, #20]	; (80027ec <setDay+0x2c>)
 80027d6:	6013      	str	r3, [r2, #0]
        if(dayTemp > 7)
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <setDay+0x2c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b07      	cmp	r3, #7
 80027de:	dd02      	ble.n	80027e6 <setDay+0x26>
            dayTemp = 1;
 80027e0:	4b02      	ldr	r3, [pc, #8]	; (80027ec <setDay+0x2c>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
    }
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2000000c 	.word	0x2000000c

080027f0 <setDate>:

void setDate()
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 80027f4:	f7ff ff70 	bl	80026d8 <IsButtonUp>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <setDate+0x26>
    {
        dateTemp++;
 80027fe:	4b07      	ldr	r3, [pc, #28]	; (800281c <setDate+0x2c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	4a05      	ldr	r2, [pc, #20]	; (800281c <setDate+0x2c>)
 8002806:	6013      	str	r3, [r2, #0]
        if(dateTemp > 31)
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <setDate+0x2c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b1f      	cmp	r3, #31
 800280e:	dd02      	ble.n	8002816 <setDate+0x26>
            dateTemp = 1;
 8002810:	4b02      	ldr	r3, [pc, #8]	; (800281c <setDate+0x2c>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]
    }
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000010 	.word	0x20000010

08002820 <setMonth>:

void setMonth()
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 8002824:	f7ff ff58 	bl	80026d8 <IsButtonUp>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <setMonth+0x26>
    {
        monthTemp++;
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <setMonth+0x2c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	4a05      	ldr	r2, [pc, #20]	; (800284c <setMonth+0x2c>)
 8002836:	6013      	str	r3, [r2, #0]
        if(monthTemp > 12)
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <setMonth+0x2c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	dd02      	ble.n	8002846 <setMonth+0x26>
            monthTemp = 1;
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <setMonth+0x2c>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]
    }
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000014 	.word	0x20000014

08002850 <setYear>:

void setYear()
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 8002854:	f7ff ff40 	bl	80026d8 <IsButtonUp>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <setYear+0x26>
    {
        yearTemp++;
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <setYear+0x2c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3301      	adds	r3, #1
 8002864:	4a05      	ldr	r2, [pc, #20]	; (800287c <setYear+0x2c>)
 8002866:	6013      	str	r3, [r2, #0]
        if(yearTemp > 99)
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <setYear+0x2c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b63      	cmp	r3, #99	; 0x63
 800286e:	dd02      	ble.n	8002876 <setYear+0x26>
            yearTemp = 0;
 8002870:	4b02      	ldr	r3, [pc, #8]	; (800287c <setYear+0x2c>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
    }
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000060 	.word	0x20000060

08002880 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002884:	b672      	cpsid	i
}
 8002886:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002888:	e7fe      	b.n	8002888 <Error_Handler+0x8>
	...

0800288c <timer_init>:

uint16_t timer2_flag = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <timer_init+0x10>)
 8002892:	f003 f8f9 	bl	8005a88 <HAL_TIM_Base_Start_IT>
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200001dc 	.word	0x200001dc

080028a0 <setTimer2>:

void setTimer2(uint16_t duration){
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <setTimer2+0x2c>)
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <setTimer2+0x2c>)
 80028b2:	881a      	ldrh	r2, [r3, #0]
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <setTimer2+0x30>)
 80028b6:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <setTimer2+0x34>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	801a      	strh	r2, [r3, #0]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000070 	.word	0x20000070
 80028d0:	2000006e 	.word	0x2000006e
 80028d4:	2000006c 	.word	0x2000006c

080028d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e8:	d116      	bne.n	8002918 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d010      	beq.n	8002914 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80028fc:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 8002906:	4b07      	ldr	r3, [pc, #28]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002908:	2201      	movs	r2, #1
 800290a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800290e:	881a      	ldrh	r2, [r3, #0]
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002912:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002914:	f7fe fd76 	bl	8001404 <led7_Scan>
	}
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	2000006e 	.word	0x2000006e
 8002924:	2000006c 	.word	0x2000006c
 8002928:	20000070 	.word	0x20000070

0800292c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <MX_SPI1_Init+0x64>)
 8002932:	4a18      	ldr	r2, [pc, #96]	; (8002994 <MX_SPI1_Init+0x68>)
 8002934:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <MX_SPI1_Init+0x64>)
 8002938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800293c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <MX_SPI1_Init+0x64>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <MX_SPI1_Init+0x64>)
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <MX_SPI1_Init+0x64>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <MX_SPI1_Init+0x64>)
 8002952:	2200      	movs	r2, #0
 8002954:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <MX_SPI1_Init+0x64>)
 8002958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800295c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <MX_SPI1_Init+0x64>)
 8002960:	2200      	movs	r2, #0
 8002962:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <MX_SPI1_Init+0x64>)
 8002966:	2200      	movs	r2, #0
 8002968:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <MX_SPI1_Init+0x64>)
 800296c:	2200      	movs	r2, #0
 800296e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <MX_SPI1_Init+0x64>)
 8002972:	2200      	movs	r2, #0
 8002974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <MX_SPI1_Init+0x64>)
 8002978:	220a      	movs	r2, #10
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800297c:	4804      	ldr	r0, [pc, #16]	; (8002990 <MX_SPI1_Init+0x64>)
 800297e:	f002 fa47 	bl	8004e10 <HAL_SPI_Init>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002988:	f7ff ff7a 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000184 	.word	0x20000184
 8002994:	40013000 	.word	0x40013000

08002998 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_SPI_MspInit+0x84>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d12b      	bne.n	8002a12 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <HAL_SPI_MspInit+0x88>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <HAL_SPI_MspInit+0x88>)
 80029c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029c8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_SPI_MspInit+0x88>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_SPI_MspInit+0x88>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <HAL_SPI_MspInit+0x88>)
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_SPI_MspInit+0x88>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80029f2:	2338      	movs	r3, #56	; 0x38
 80029f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fe:	2303      	movs	r3, #3
 8002a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a02:	2305      	movs	r3, #5
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4805      	ldr	r0, [pc, #20]	; (8002a24 <HAL_SPI_MspInit+0x8c>)
 8002a0e:	f000 fafb 	bl	8003008 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a12:	bf00      	nop
 8002a14:	3728      	adds	r7, #40	; 0x28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40013000 	.word	0x40013000
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40020400 	.word	0x40020400

08002a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_MspInit+0x4c>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <NMI_Handler+0x4>

08002a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a82:	e7fe      	b.n	8002a82 <HardFault_Handler+0x4>

08002a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <MemManage_Handler+0x4>

08002a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <BusFault_Handler+0x4>

08002a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <UsageFault_Handler+0x4>

08002a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac4:	f000 f94a 	bl	8002d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}

08002acc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <TIM2_IRQHandler+0x10>)
 8002ad2:	f003 f849 	bl	8005b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200001dc 	.word	0x200001dc

08002ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <SystemInit+0x20>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <SystemInit+0x20>)
 8002aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b18:	463b      	mov	r3, r7
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b20:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <MX_TIM2_Init+0x94>)
 8002b22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <MX_TIM2_Init+0x94>)
 8002b2a:	f240 3247 	movw	r2, #839	; 0x347
 8002b2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <MX_TIM2_Init+0x94>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <MX_TIM2_Init+0x94>)
 8002b38:	2263      	movs	r2, #99	; 0x63
 8002b3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3c:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <MX_TIM2_Init+0x94>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <MX_TIM2_Init+0x94>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b48:	4813      	ldr	r0, [pc, #76]	; (8002b98 <MX_TIM2_Init+0x94>)
 8002b4a:	f002 ff4d 	bl	80059e8 <HAL_TIM_Base_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b54:	f7ff fe94 	bl	8002880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	4619      	mov	r1, r3
 8002b64:	480c      	ldr	r0, [pc, #48]	; (8002b98 <MX_TIM2_Init+0x94>)
 8002b66:	f003 f907 	bl	8005d78 <HAL_TIM_ConfigClockSource>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b70:	f7ff fe86 	bl	8002880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b74:	2300      	movs	r3, #0
 8002b76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4805      	ldr	r0, [pc, #20]	; (8002b98 <MX_TIM2_Init+0x94>)
 8002b82:	f003 fb23 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002b8c:	f7ff fe78 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b90:	bf00      	nop
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200001dc 	.word	0x200001dc

08002b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d115      	bne.n	8002bda <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_TIM_Base_MspInit+0x48>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_TIM_Base_MspInit+0x48>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_TIM_Base_MspInit+0x48>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	201c      	movs	r0, #28
 8002bd0:	f000 f9e3 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bd4:	201c      	movs	r0, #28
 8002bd6:	f000 f9fc 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800

08002be8 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	0092      	lsls	r2, r2, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b2db      	uxtb	r3, r3
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <DEC2BCD+0x44>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	08db      	lsrs	r3, r3, #3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	b258      	sxtb	r0, r3
 8002c36:	79fa      	ldrb	r2, [r7, #7]
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <DEC2BCD+0x44>)
 8002c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c3e:	08d9      	lsrs	r1, r3, #3
 8002c40:	460b      	mov	r3, r1
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	4303      	orrs	r3, r0
 8002c50:	b25b      	sxtb	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	cccccccd 	.word	0xcccccccd

08002c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c68:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c6a:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c70:	e002      	b.n	8002c78 <LoopCopyDataInit>

08002c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c76:	3304      	adds	r3, #4

08002c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c7c:	d3f9      	bcc.n	8002c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c80:	4c0b      	ldr	r4, [pc, #44]	; (8002cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c84:	e001      	b.n	8002c8a <LoopFillZerobss>

08002c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c88:	3204      	adds	r2, #4

08002c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c8c:	d3fb      	bcc.n	8002c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c8e:	f7ff ff27 	bl	8002ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c92:	f003 fbfb 	bl	800648c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c96:	f7fe fc41 	bl	800151c <main>
  bx  lr    
 8002c9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002ca8:	08009524 	.word	0x08009524
  ldr r2, =_sbss
 8002cac:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002cb0:	20000228 	.word	0x20000228

08002cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <ADC_IRQHandler>
	...

08002cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_Init+0x40>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <HAL_Init+0x40>)
 8002cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_Init+0x40>)
 8002cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_Init+0x40>)
 8002cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f94f 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce6:	200f      	movs	r0, #15
 8002ce8:	f000 f808 	bl	8002cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7ff fe9c 	bl	8002a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023c00 	.word	0x40023c00

08002cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_InitTick+0x54>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_InitTick+0x58>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f967 	bl	8002fee <HAL_SYSTICK_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00e      	b.n	8002d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d80a      	bhi.n	8002d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d30:	2200      	movs	r2, #0
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f000 f92f 	bl	8002f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <HAL_InitTick+0x5c>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	2000001c 	.word	0x2000001c
 8002d54:	20000024 	.word	0x20000024
 8002d58:	20000020 	.word	0x20000020

08002d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x20>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_IncTick+0x24>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_IncTick+0x24>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000024 	.word	0x20000024
 8002d80:	20000224 	.word	0x20000224

08002d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return uwTick;
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_GetTick+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000224 	.word	0x20000224

08002d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff ffee 	bl	8002d84 <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d005      	beq.n	8002dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <HAL_Delay+0x44>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc2:	bf00      	nop
 8002dc4:	f7ff ffde 	bl	8002d84 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d8f7      	bhi.n	8002dc4 <HAL_Delay+0x28>
  {
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000024 	.word	0x20000024

08002de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e00:	4013      	ands	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e16:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	60d3      	str	r3, [r2, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <__NVIC_GetPriorityGrouping+0x18>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	f003 0307 	and.w	r3, r3, #7
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db0b      	blt.n	8002e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	4907      	ldr	r1, [pc, #28]	; (8002e80 <__NVIC_EnableIRQ+0x38>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2001      	movs	r0, #1
 8002e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000e100 	.word	0xe000e100

08002e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	490c      	ldr	r1, [pc, #48]	; (8002ed0 <__NVIC_SetPriority+0x4c>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eac:	e00a      	b.n	8002ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <__NVIC_SetPriority+0x50>)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	761a      	strb	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000e100 	.word	0xe000e100
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf28      	it	cs
 8002ef6:	2304      	movcs	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d902      	bls.n	8002f08 <NVIC_EncodePriority+0x30>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3b03      	subs	r3, #3
 8002f06:	e000      	b.n	8002f0a <NVIC_EncodePriority+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	4313      	orrs	r3, r2
         );
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	; 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d301      	bcc.n	8002f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <SysTick_Config+0x40>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f7ff ff8e 	bl	8002e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <SysTick_Config+0x40>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <SysTick_Config+0x40>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff29 	bl	8002de4 <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fac:	f7ff ff3e 	bl	8002e2c <__NVIC_GetPriorityGrouping>
 8002fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ff8e 	bl	8002ed8 <NVIC_EncodePriority>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff5d 	bl	8002e84 <__NVIC_SetPriority>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff31 	bl	8002e48 <__NVIC_EnableIRQ>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffa2 	bl	8002f40 <SysTick_Config>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e16b      	b.n	80032fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003024:	2201      	movs	r2, #1
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	429a      	cmp	r2, r3
 800303e:	f040 815a 	bne.w	80032f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d005      	beq.n	800305a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003056:	2b02      	cmp	r3, #2
 8003058:	d130      	bne.n	80030bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003090:	2201      	movs	r2, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 0201 	and.w	r2, r3, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d017      	beq.n	80030f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d123      	bne.n	800314c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	08da      	lsrs	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3208      	adds	r2, #8
 800310c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	220f      	movs	r2, #15
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	08da      	lsrs	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3208      	adds	r2, #8
 8003146:	69b9      	ldr	r1, [r7, #24]
 8003148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0203 	and.w	r2, r3, #3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80b4 	beq.w	80032f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b60      	ldr	r3, [pc, #384]	; (8003314 <HAL_GPIO_Init+0x30c>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	4a5f      	ldr	r2, [pc, #380]	; (8003314 <HAL_GPIO_Init+0x30c>)
 8003198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_GPIO_Init+0x30c>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031aa:	4a5b      	ldr	r2, [pc, #364]	; (8003318 <HAL_GPIO_Init+0x310>)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	220f      	movs	r2, #15
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a52      	ldr	r2, [pc, #328]	; (800331c <HAL_GPIO_Init+0x314>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d02b      	beq.n	800322e <HAL_GPIO_Init+0x226>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a51      	ldr	r2, [pc, #324]	; (8003320 <HAL_GPIO_Init+0x318>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d025      	beq.n	800322a <HAL_GPIO_Init+0x222>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a50      	ldr	r2, [pc, #320]	; (8003324 <HAL_GPIO_Init+0x31c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01f      	beq.n	8003226 <HAL_GPIO_Init+0x21e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a4f      	ldr	r2, [pc, #316]	; (8003328 <HAL_GPIO_Init+0x320>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d019      	beq.n	8003222 <HAL_GPIO_Init+0x21a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4e      	ldr	r2, [pc, #312]	; (800332c <HAL_GPIO_Init+0x324>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_GPIO_Init+0x216>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4d      	ldr	r2, [pc, #308]	; (8003330 <HAL_GPIO_Init+0x328>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00d      	beq.n	800321a <HAL_GPIO_Init+0x212>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4c      	ldr	r2, [pc, #304]	; (8003334 <HAL_GPIO_Init+0x32c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d007      	beq.n	8003216 <HAL_GPIO_Init+0x20e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4b      	ldr	r2, [pc, #300]	; (8003338 <HAL_GPIO_Init+0x330>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d101      	bne.n	8003212 <HAL_GPIO_Init+0x20a>
 800320e:	2307      	movs	r3, #7
 8003210:	e00e      	b.n	8003230 <HAL_GPIO_Init+0x228>
 8003212:	2308      	movs	r3, #8
 8003214:	e00c      	b.n	8003230 <HAL_GPIO_Init+0x228>
 8003216:	2306      	movs	r3, #6
 8003218:	e00a      	b.n	8003230 <HAL_GPIO_Init+0x228>
 800321a:	2305      	movs	r3, #5
 800321c:	e008      	b.n	8003230 <HAL_GPIO_Init+0x228>
 800321e:	2304      	movs	r3, #4
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x228>
 8003222:	2303      	movs	r3, #3
 8003224:	e004      	b.n	8003230 <HAL_GPIO_Init+0x228>
 8003226:	2302      	movs	r3, #2
 8003228:	e002      	b.n	8003230 <HAL_GPIO_Init+0x228>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_GPIO_Init+0x228>
 800322e:	2300      	movs	r3, #0
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f002 0203 	and.w	r2, r2, #3
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	4093      	lsls	r3, r2
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003240:	4935      	ldr	r1, [pc, #212]	; (8003318 <HAL_GPIO_Init+0x310>)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800324e:	4b3b      	ldr	r3, [pc, #236]	; (800333c <HAL_GPIO_Init+0x334>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003272:	4a32      	ldr	r2, [pc, #200]	; (800333c <HAL_GPIO_Init+0x334>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003278:	4b30      	ldr	r3, [pc, #192]	; (800333c <HAL_GPIO_Init+0x334>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800329c:	4a27      	ldr	r2, [pc, #156]	; (800333c <HAL_GPIO_Init+0x334>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032a2:	4b26      	ldr	r3, [pc, #152]	; (800333c <HAL_GPIO_Init+0x334>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032c6:	4a1d      	ldr	r2, [pc, #116]	; (800333c <HAL_GPIO_Init+0x334>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_GPIO_Init+0x334>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032f0:	4a12      	ldr	r2, [pc, #72]	; (800333c <HAL_GPIO_Init+0x334>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	f67f ae90 	bls.w	8003024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3724      	adds	r7, #36	; 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40013800 	.word	0x40013800
 800331c:	40020000 	.word	0x40020000
 8003320:	40020400 	.word	0x40020400
 8003324:	40020800 	.word	0x40020800
 8003328:	40020c00 	.word	0x40020c00
 800332c:	40021000 	.word	0x40021000
 8003330:	40021400 	.word	0x40021400
 8003334:	40021800 	.word	0x40021800
 8003338:	40021c00 	.word	0x40021c00
 800333c:	40013c00 	.word	0x40013c00

08003340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
 800334c:	4613      	mov	r3, r2
 800334e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003350:	787b      	ldrb	r3, [r7, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800335c:	e003      	b.n	8003366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e12b      	b.n	80035de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd fbc8 	bl	8000b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033d8:	f001 fd06 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 80033dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a81      	ldr	r2, [pc, #516]	; (80035e8 <HAL_I2C_Init+0x274>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d807      	bhi.n	80033f8 <HAL_I2C_Init+0x84>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a80      	ldr	r2, [pc, #512]	; (80035ec <HAL_I2C_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e006      	b.n	8003406 <HAL_I2C_Init+0x92>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a7d      	ldr	r2, [pc, #500]	; (80035f0 <HAL_I2C_Init+0x27c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bf94      	ite	ls
 8003400:	2301      	movls	r3, #1
 8003402:	2300      	movhi	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0e7      	b.n	80035de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a78      	ldr	r2, [pc, #480]	; (80035f4 <HAL_I2C_Init+0x280>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0c9b      	lsrs	r3, r3, #18
 8003418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a6a      	ldr	r2, [pc, #424]	; (80035e8 <HAL_I2C_Init+0x274>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d802      	bhi.n	8003448 <HAL_I2C_Init+0xd4>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	e009      	b.n	800345c <HAL_I2C_Init+0xe8>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	4a69      	ldr	r2, [pc, #420]	; (80035f8 <HAL_I2C_Init+0x284>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	3301      	adds	r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	430b      	orrs	r3, r1
 8003462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800346e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	495c      	ldr	r1, [pc, #368]	; (80035e8 <HAL_I2C_Init+0x274>)
 8003478:	428b      	cmp	r3, r1
 800347a:	d819      	bhi.n	80034b0 <HAL_I2C_Init+0x13c>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e59      	subs	r1, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fbb1 f3f3 	udiv	r3, r1, r3
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003490:	400b      	ands	r3, r1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_I2C_Init+0x138>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e59      	subs	r1, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034aa:	e051      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 80034ac:	2304      	movs	r3, #4
 80034ae:	e04f      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d111      	bne.n	80034dc <HAL_I2C_Init+0x168>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1e58      	subs	r0, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e012      	b.n	8003502 <HAL_I2C_Init+0x18e>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e58      	subs	r0, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	0099      	lsls	r1, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Init+0x196>
 8003506:	2301      	movs	r3, #1
 8003508:	e022      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10e      	bne.n	8003530 <HAL_I2C_Init+0x1bc>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e58      	subs	r0, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	440b      	add	r3, r1
 8003520:	fbb0 f3f3 	udiv	r3, r0, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800352e:	e00f      	b.n	8003550 <HAL_I2C_Init+0x1dc>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e58      	subs	r0, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	0099      	lsls	r1, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	fbb0 f3f3 	udiv	r3, r0, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	6809      	ldr	r1, [r1, #0]
 8003554:	4313      	orrs	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800357e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6911      	ldr	r1, [r2, #16]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68d2      	ldr	r2, [r2, #12]
 800358a:	4311      	orrs	r1, r2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	430b      	orrs	r3, r1
 8003592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	000186a0 	.word	0x000186a0
 80035ec:	001e847f 	.word	0x001e847f
 80035f0:	003d08ff 	.word	0x003d08ff
 80035f4:	431bde83 	.word	0x431bde83
 80035f8:	10624dd3 	.word	0x10624dd3

080035fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4603      	mov	r3, r0
 800360c:	817b      	strh	r3, [r7, #10]
 800360e:	460b      	mov	r3, r1
 8003610:	813b      	strh	r3, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003616:	f7ff fbb5 	bl	8002d84 <HAL_GetTick>
 800361a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b20      	cmp	r3, #32
 8003626:	f040 80d9 	bne.w	80037dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2319      	movs	r3, #25
 8003630:	2201      	movs	r2, #1
 8003632:	496d      	ldr	r1, [pc, #436]	; (80037e8 <HAL_I2C_Mem_Write+0x1ec>)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fdad 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003640:	2302      	movs	r3, #2
 8003642:	e0cc      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_I2C_Mem_Write+0x56>
 800364e:	2302      	movs	r3, #2
 8003650:	e0c5      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d007      	beq.n	8003678 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003686:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2221      	movs	r2, #33	; 0x21
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a4d      	ldr	r2, [pc, #308]	; (80037ec <HAL_I2C_Mem_Write+0x1f0>)
 80036b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ba:	88f8      	ldrh	r0, [r7, #6]
 80036bc:	893a      	ldrh	r2, [r7, #8]
 80036be:	8979      	ldrh	r1, [r7, #10]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4603      	mov	r3, r0
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fbe4 	bl	8003e98 <I2C_RequestMemoryWrite>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d052      	beq.n	800377c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e081      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fe2e 	bl	8004340 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d107      	bne.n	8003702 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003700:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e06b      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b04      	cmp	r3, #4
 8003742:	d11b      	bne.n	800377c <HAL_I2C_Mem_Write+0x180>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	d017      	beq.n	800377c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1aa      	bne.n	80036da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fe1a 	bl	80043c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00d      	beq.n	80037b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	2b04      	cmp	r3, #4
 800379a:	d107      	bne.n	80037ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e016      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	00100002 	.word	0x00100002
 80037ec:	ffff0000 	.word	0xffff0000

080037f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	4608      	mov	r0, r1
 80037fa:	4611      	mov	r1, r2
 80037fc:	461a      	mov	r2, r3
 80037fe:	4603      	mov	r3, r0
 8003800:	817b      	strh	r3, [r7, #10]
 8003802:	460b      	mov	r3, r1
 8003804:	813b      	strh	r3, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800380a:	f7ff fabb 	bl	8002d84 <HAL_GetTick>
 800380e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b20      	cmp	r3, #32
 800381a:	f040 8208 	bne.w	8003c2e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2319      	movs	r3, #25
 8003824:	2201      	movs	r2, #1
 8003826:	497b      	ldr	r1, [pc, #492]	; (8003a14 <HAL_I2C_Mem_Read+0x224>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fcb3 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
 8003836:	e1fb      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_I2C_Mem_Read+0x56>
 8003842:	2302      	movs	r3, #2
 8003844:	e1f4      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	d007      	beq.n	800386c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800387a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2222      	movs	r2, #34	; 0x22
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2240      	movs	r2, #64	; 0x40
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800389c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a5b      	ldr	r2, [pc, #364]	; (8003a18 <HAL_I2C_Mem_Read+0x228>)
 80038ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ae:	88f8      	ldrh	r0, [r7, #6]
 80038b0:	893a      	ldrh	r2, [r7, #8]
 80038b2:	8979      	ldrh	r1, [r7, #10]
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	4603      	mov	r3, r0
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fb80 	bl	8003fc4 <I2C_RequestMemoryRead>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e1b0      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d113      	bne.n	80038fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d6:	2300      	movs	r3, #0
 80038d8:	623b      	str	r3, [r7, #32]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	623b      	str	r3, [r7, #32]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	623b      	str	r3, [r7, #32]
 80038ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e184      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	2b01      	cmp	r3, #1
 8003904:	d11b      	bne.n	800393e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e164      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	2b02      	cmp	r3, #2
 8003944:	d11b      	bne.n	800397e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003954:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003964:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	e144      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003994:	e138      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	2b03      	cmp	r3, #3
 800399c:	f200 80f1 	bhi.w	8003b82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d123      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fd49 	bl	8004444 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e139      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ee:	e10b      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d14e      	bne.n	8003a96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	2200      	movs	r2, #0
 8003a00:	4906      	ldr	r1, [pc, #24]	; (8003a1c <HAL_I2C_Mem_Read+0x22c>)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fbc6 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e10e      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
 8003a12:	bf00      	nop
 8003a14:	00100002 	.word	0x00100002
 8003a18:	ffff0000 	.word	0xffff0000
 8003a1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a94:	e0b8      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4966      	ldr	r1, [pc, #408]	; (8003c38 <HAL_I2C_Mem_Read+0x448>)
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fb77 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0bf      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	2200      	movs	r2, #0
 8003afa:	494f      	ldr	r1, [pc, #316]	; (8003c38 <HAL_I2C_Mem_Read+0x448>)
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fb49 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e091      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b80:	e042      	b.n	8003c08 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fc5c 	bl	8004444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e04c      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d118      	bne.n	8003c08 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f47f aec2 	bne.w	8003996 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3728      	adds	r7, #40	; 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	00010004 	.word	0x00010004

08003c3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c4c:	f7ff f89a 	bl	8002d84 <HAL_GetTick>
 8003c50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	f040 8111 	bne.w	8003e86 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2319      	movs	r3, #25
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4988      	ldr	r1, [pc, #544]	; (8003e90 <HAL_I2C_IsDeviceReady+0x254>)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fa90 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e104      	b.n	8003e88 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_I2C_IsDeviceReady+0x50>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e0fd      	b.n	8003e88 <HAL_I2C_IsDeviceReady+0x24c>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d007      	beq.n	8003cb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2224      	movs	r2, #36	; 0x24
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a70      	ldr	r2, [pc, #448]	; (8003e94 <HAL_I2C_IsDeviceReady+0x258>)
 8003cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fa4e 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0c:	d103      	bne.n	8003d16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e0b6      	b.n	8003e88 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d1a:	897b      	ldrh	r3, [r7, #10]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7ff f82b 	bl	8002d84 <HAL_GetTick>
 8003d2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d54:	bf0c      	ite	eq
 8003d56:	2301      	moveq	r3, #1
 8003d58:	2300      	movne	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d5e:	e025      	b.n	8003dac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d60:	f7ff f810 	bl	8002d84 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d302      	bcc.n	8003d76 <HAL_I2C_IsDeviceReady+0x13a>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	22a0      	movs	r2, #160	; 0xa0
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2ba0      	cmp	r3, #160	; 0xa0
 8003db6:	d005      	beq.n	8003dc4 <HAL_I2C_IsDeviceReady+0x188>
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <HAL_I2C_IsDeviceReady+0x188>
 8003dbe:	7dbb      	ldrb	r3, [r7, #22]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0cd      	beq.n	8003d60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d129      	bne.n	8003e2e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	2319      	movs	r3, #25
 8003e06:	2201      	movs	r2, #1
 8003e08:	4921      	ldr	r1, [pc, #132]	; (8003e90 <HAL_I2C_IsDeviceReady+0x254>)
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f9c2 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e036      	b.n	8003e88 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e02c      	b.n	8003e88 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2319      	movs	r3, #25
 8003e4e:	2201      	movs	r2, #1
 8003e50:	490f      	ldr	r1, [pc, #60]	; (8003e90 <HAL_I2C_IsDeviceReady+0x254>)
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f99e 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e012      	b.n	8003e88 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	3301      	adds	r3, #1
 8003e66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	f4ff af32 	bcc.w	8003cd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
  }
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	00100002 	.word	0x00100002
 8003e94:	ffff0000 	.word	0xffff0000

08003e98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	817b      	strh	r3, [r7, #10]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	813b      	strh	r3, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f960 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee8:	d103      	bne.n	8003ef2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e05f      	b.n	8003fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ef6:	897b      	ldrh	r3, [r7, #10]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	492d      	ldr	r1, [pc, #180]	; (8003fc0 <I2C_RequestMemoryWrite+0x128>)
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f998 	bl	8004242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e04c      	b.n	8003fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	6a39      	ldr	r1, [r7, #32]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 fa02 	bl	8004340 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d107      	bne.n	8003f5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e02b      	b.n	8003fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d105      	bne.n	8003f70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f64:	893b      	ldrh	r3, [r7, #8]
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	611a      	str	r2, [r3, #16]
 8003f6e:	e021      	b.n	8003fb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f70:	893b      	ldrh	r3, [r7, #8]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f80:	6a39      	ldr	r1, [r7, #32]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f9dc 	bl	8004340 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d107      	bne.n	8003fa6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e005      	b.n	8003fb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003faa:	893b      	ldrh	r3, [r7, #8]
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	00010002 	.word	0x00010002

08003fc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	4608      	mov	r0, r1
 8003fce:	4611      	mov	r1, r2
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	817b      	strh	r3, [r7, #10]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	813b      	strh	r3, [r7, #8]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	2200      	movs	r2, #0
 8004006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f8c2 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00d      	beq.n	8004032 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004024:	d103      	bne.n	800402e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e0aa      	b.n	8004188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004032:	897b      	ldrh	r3, [r7, #10]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004040:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	4952      	ldr	r1, [pc, #328]	; (8004190 <I2C_RequestMemoryRead+0x1cc>)
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f8fa 	bl	8004242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e097      	b.n	8004188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800406e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004070:	6a39      	ldr	r1, [r7, #32]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f964 	bl	8004340 <I2C_WaitOnTXEFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00d      	beq.n	800409a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	2b04      	cmp	r3, #4
 8004084:	d107      	bne.n	8004096 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004094:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e076      	b.n	8004188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d105      	bne.n	80040ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040a0:	893b      	ldrh	r3, [r7, #8]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]
 80040aa:	e021      	b.n	80040f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040ac:	893b      	ldrh	r3, [r7, #8]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	6a39      	ldr	r1, [r7, #32]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f93e 	bl	8004340 <I2C_WaitOnTXEFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d107      	bne.n	80040e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e050      	b.n	8004188 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040e6:	893b      	ldrh	r3, [r7, #8]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f2:	6a39      	ldr	r1, [r7, #32]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f923 	bl	8004340 <I2C_WaitOnTXEFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2b04      	cmp	r3, #4
 8004106:	d107      	bne.n	8004118 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e035      	b.n	8004188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800412a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	2200      	movs	r2, #0
 8004134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f82b 	bl	8004194 <I2C_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00d      	beq.n	8004160 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004152:	d103      	bne.n	800415c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e013      	b.n	8004188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004160:	897b      	ldrh	r3, [r7, #10]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	b2da      	uxtb	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	6a3a      	ldr	r2, [r7, #32]
 8004174:	4906      	ldr	r1, [pc, #24]	; (8004190 <I2C_RequestMemoryRead+0x1cc>)
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f863 	bl	8004242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	00010002 	.word	0x00010002

08004194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041a4:	e025      	b.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d021      	beq.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fe fde9 	bl	8002d84 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d116      	bne.n	80041f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e023      	b.n	800423a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d10d      	bne.n	8004218 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	43da      	mvns	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4013      	ands	r3, r2
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	bf0c      	ite	eq
 800420e:	2301      	moveq	r3, #1
 8004210:	2300      	movne	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	e00c      	b.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	43da      	mvns	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4013      	ands	r3, r2
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf0c      	ite	eq
 800422a:	2301      	moveq	r3, #1
 800422c:	2300      	movne	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	429a      	cmp	r2, r3
 8004236:	d0b6      	beq.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004250:	e051      	b.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004260:	d123      	bne.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004270:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800427a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f043 0204 	orr.w	r2, r3, #4
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e046      	b.n	8004338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d021      	beq.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b2:	f7fe fd67 	bl	8002d84 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d302      	bcc.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d116      	bne.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e020      	b.n	8004338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d10c      	bne.n	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	43da      	mvns	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	bf14      	ite	ne
 8004312:	2301      	movne	r3, #1
 8004314:	2300      	moveq	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	e00b      	b.n	8004332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	43da      	mvns	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf14      	ite	ne
 800432c:	2301      	movne	r3, #1
 800432e:	2300      	moveq	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d18d      	bne.n	8004252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800434c:	e02d      	b.n	80043aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f8ce 	bl	80044f0 <I2C_IsAcknowledgeFailed>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e02d      	b.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d021      	beq.n	80043aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fe fd0d 	bl	8002d84 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d116      	bne.n	80043aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f043 0220 	orr.w	r2, r3, #32
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e007      	b.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d1ca      	bne.n	800434e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ce:	e02d      	b.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f88d 	bl	80044f0 <I2C_IsAcknowledgeFailed>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e02d      	b.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	d021      	beq.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e8:	f7fe fccc 	bl	8002d84 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d116      	bne.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e007      	b.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b04      	cmp	r3, #4
 8004438:	d1ca      	bne.n	80043d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004450:	e042      	b.n	80044d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b10      	cmp	r3, #16
 800445e:	d119      	bne.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0210 	mvn.w	r2, #16
 8004468:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e029      	b.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004494:	f7fe fc76 	bl	8002d84 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e007      	b.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d1b5      	bne.n	8004452 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004506:	d11b      	bne.n	8004540 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004510:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f043 0204 	orr.w	r2, r3, #4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e264      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d075      	beq.n	800465a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800456e:	4ba3      	ldr	r3, [pc, #652]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	2b04      	cmp	r3, #4
 8004578:	d00c      	beq.n	8004594 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457a:	4ba0      	ldr	r3, [pc, #640]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004582:	2b08      	cmp	r3, #8
 8004584:	d112      	bne.n	80045ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004586:	4b9d      	ldr	r3, [pc, #628]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800458e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004592:	d10b      	bne.n	80045ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	4b99      	ldr	r3, [pc, #612]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d05b      	beq.n	8004658 <HAL_RCC_OscConfig+0x108>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d157      	bne.n	8004658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e23f      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b4:	d106      	bne.n	80045c4 <HAL_RCC_OscConfig+0x74>
 80045b6:	4b91      	ldr	r3, [pc, #580]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a90      	ldr	r2, [pc, #576]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e01d      	b.n	8004600 <HAL_RCC_OscConfig+0xb0>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x98>
 80045ce:	4b8b      	ldr	r3, [pc, #556]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a8a      	ldr	r2, [pc, #552]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b88      	ldr	r3, [pc, #544]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a87      	ldr	r2, [pc, #540]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e00b      	b.n	8004600 <HAL_RCC_OscConfig+0xb0>
 80045e8:	4b84      	ldr	r3, [pc, #528]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a83      	ldr	r2, [pc, #524]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80045ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4b81      	ldr	r3, [pc, #516]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a80      	ldr	r2, [pc, #512]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80045fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fe fbbc 	bl	8002d84 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004610:	f7fe fbb8 	bl	8002d84 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e204      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	4b76      	ldr	r3, [pc, #472]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0xc0>
 800462e:	e014      	b.n	800465a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7fe fba8 	bl	8002d84 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004638:	f7fe fba4 	bl	8002d84 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e1f0      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	4b6c      	ldr	r3, [pc, #432]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0xe8>
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d063      	beq.n	800472e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004666:	4b65      	ldr	r3, [pc, #404]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00b      	beq.n	800468a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004672:	4b62      	ldr	r3, [pc, #392]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800467a:	2b08      	cmp	r3, #8
 800467c:	d11c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467e:	4b5f      	ldr	r3, [pc, #380]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d116      	bne.n	80046b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468a:	4b5c      	ldr	r3, [pc, #368]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_RCC_OscConfig+0x152>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d001      	beq.n	80046a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e1c4      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a2:	4b56      	ldr	r3, [pc, #344]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4952      	ldr	r1, [pc, #328]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b6:	e03a      	b.n	800472e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c0:	4b4f      	ldr	r3, [pc, #316]	; (8004800 <HAL_RCC_OscConfig+0x2b0>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fe fb5d 	bl	8002d84 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ce:	f7fe fb59 	bl	8002d84 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e1a5      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e0:	4b46      	ldr	r3, [pc, #280]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ec:	4b43      	ldr	r3, [pc, #268]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4940      	ldr	r1, [pc, #256]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	600b      	str	r3, [r1, #0]
 8004700:	e015      	b.n	800472e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004702:	4b3f      	ldr	r3, [pc, #252]	; (8004800 <HAL_RCC_OscConfig+0x2b0>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fe fb3c 	bl	8002d84 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004710:	f7fe fb38 	bl	8002d84 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e184      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	4b36      	ldr	r3, [pc, #216]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d030      	beq.n	800479c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004742:	4b30      	ldr	r3, [pc, #192]	; (8004804 <HAL_RCC_OscConfig+0x2b4>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fe fb1c 	bl	8002d84 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004750:	f7fe fb18 	bl	8002d84 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e164      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	4b26      	ldr	r3, [pc, #152]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 8004764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x200>
 800476e:	e015      	b.n	800479c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004770:	4b24      	ldr	r3, [pc, #144]	; (8004804 <HAL_RCC_OscConfig+0x2b4>)
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004776:	f7fe fb05 	bl	8002d84 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800477e:	f7fe fb01 	bl	8002d84 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e14d      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 8004792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f0      	bne.n	800477e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80a0 	beq.w	80048ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a0e      	ldr	r2, [pc, #56]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d6:	2301      	movs	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047da:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_OscConfig+0x2b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d121      	bne.n	800482a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e6:	4b08      	ldr	r3, [pc, #32]	; (8004808 <HAL_RCC_OscConfig+0x2b8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a07      	ldr	r2, [pc, #28]	; (8004808 <HAL_RCC_OscConfig+0x2b8>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f2:	f7fe fac7 	bl	8002d84 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	e011      	b.n	800481e <HAL_RCC_OscConfig+0x2ce>
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	42470000 	.word	0x42470000
 8004804:	42470e80 	.word	0x42470e80
 8004808:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480c:	f7fe faba 	bl	8002d84 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e106      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481e:	4b85      	ldr	r3, [pc, #532]	; (8004a34 <HAL_RCC_OscConfig+0x4e4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d106      	bne.n	8004840 <HAL_RCC_OscConfig+0x2f0>
 8004832:	4b81      	ldr	r3, [pc, #516]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004836:	4a80      	ldr	r2, [pc, #512]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	6713      	str	r3, [r2, #112]	; 0x70
 800483e:	e01c      	b.n	800487a <HAL_RCC_OscConfig+0x32a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b05      	cmp	r3, #5
 8004846:	d10c      	bne.n	8004862 <HAL_RCC_OscConfig+0x312>
 8004848:	4b7b      	ldr	r3, [pc, #492]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	4a7a      	ldr	r2, [pc, #488]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 800484e:	f043 0304 	orr.w	r3, r3, #4
 8004852:	6713      	str	r3, [r2, #112]	; 0x70
 8004854:	4b78      	ldr	r3, [pc, #480]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	4a77      	ldr	r2, [pc, #476]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6713      	str	r3, [r2, #112]	; 0x70
 8004860:	e00b      	b.n	800487a <HAL_RCC_OscConfig+0x32a>
 8004862:	4b75      	ldr	r3, [pc, #468]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	4a74      	ldr	r2, [pc, #464]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 8004868:	f023 0301 	bic.w	r3, r3, #1
 800486c:	6713      	str	r3, [r2, #112]	; 0x70
 800486e:	4b72      	ldr	r3, [pc, #456]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	4a71      	ldr	r2, [pc, #452]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 8004874:	f023 0304 	bic.w	r3, r3, #4
 8004878:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d015      	beq.n	80048ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004882:	f7fe fa7f 	bl	8002d84 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004888:	e00a      	b.n	80048a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488a:	f7fe fa7b 	bl	8002d84 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	f241 3288 	movw	r2, #5000	; 0x1388
 8004898:	4293      	cmp	r3, r2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e0c5      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a0:	4b65      	ldr	r3, [pc, #404]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0ee      	beq.n	800488a <HAL_RCC_OscConfig+0x33a>
 80048ac:	e014      	b.n	80048d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ae:	f7fe fa69 	bl	8002d84 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fe fa65 	bl	8002d84 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e0af      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048cc:	4b5a      	ldr	r3, [pc, #360]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1ee      	bne.n	80048b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d105      	bne.n	80048ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048de:	4b56      	ldr	r3, [pc, #344]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	4a55      	ldr	r2, [pc, #340]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 80048e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 809b 	beq.w	8004a2a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f4:	4b50      	ldr	r3, [pc, #320]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d05c      	beq.n	80049ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2b02      	cmp	r3, #2
 8004906:	d141      	bne.n	800498c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004908:	4b4c      	ldr	r3, [pc, #304]	; (8004a3c <HAL_RCC_OscConfig+0x4ec>)
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490e:	f7fe fa39 	bl	8002d84 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004916:	f7fe fa35 	bl	8002d84 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e081      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004928:	4b43      	ldr	r3, [pc, #268]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	019b      	lsls	r3, r3, #6
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	3b01      	subs	r3, #1
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	061b      	lsls	r3, r3, #24
 8004958:	4937      	ldr	r1, [pc, #220]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 800495a:	4313      	orrs	r3, r2
 800495c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800495e:	4b37      	ldr	r3, [pc, #220]	; (8004a3c <HAL_RCC_OscConfig+0x4ec>)
 8004960:	2201      	movs	r2, #1
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fe fa0e 	bl	8002d84 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496c:	f7fe fa0a 	bl	8002d84 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e056      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497e:	4b2e      	ldr	r3, [pc, #184]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0x41c>
 800498a:	e04e      	b.n	8004a2a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498c:	4b2b      	ldr	r3, [pc, #172]	; (8004a3c <HAL_RCC_OscConfig+0x4ec>)
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004992:	f7fe f9f7 	bl	8002d84 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499a:	f7fe f9f3 	bl	8002d84 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e03f      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ac:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f0      	bne.n	800499a <HAL_RCC_OscConfig+0x44a>
 80049b8:	e037      	b.n	8004a2a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e032      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <HAL_RCC_OscConfig+0x4e8>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d028      	beq.n	8004a26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d121      	bne.n	8004a26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d11a      	bne.n	8004a26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049f6:	4013      	ands	r3, r2
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d111      	bne.n	8004a26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d107      	bne.n	8004a26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d001      	beq.n	8004a2a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40007000 	.word	0x40007000
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	42470060 	.word	0x42470060

08004a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0cc      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a54:	4b68      	ldr	r3, [pc, #416]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d90c      	bls.n	8004a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a62:	4b65      	ldr	r3, [pc, #404]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6a:	4b63      	ldr	r3, [pc, #396]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0b8      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a94:	4b59      	ldr	r3, [pc, #356]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a58      	ldr	r2, [pc, #352]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aac:	4b53      	ldr	r3, [pc, #332]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	4a52      	ldr	r2, [pc, #328]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab8:	4b50      	ldr	r3, [pc, #320]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	494d      	ldr	r1, [pc, #308]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d044      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d107      	bne.n	8004aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	4b47      	ldr	r3, [pc, #284]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d119      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e07f      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d003      	beq.n	8004afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d107      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afe:	4b3f      	ldr	r3, [pc, #252]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e06f      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0e:	4b3b      	ldr	r3, [pc, #236]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e067      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b1e:	4b37      	ldr	r3, [pc, #220]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f023 0203 	bic.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4934      	ldr	r1, [pc, #208]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b30:	f7fe f928 	bl	8002d84 <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b36:	e00a      	b.n	8004b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b38:	f7fe f924 	bl	8002d84 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e04f      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4e:	4b2b      	ldr	r3, [pc, #172]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 020c 	and.w	r2, r3, #12
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d1eb      	bne.n	8004b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b60:	4b25      	ldr	r3, [pc, #148]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d20c      	bcs.n	8004b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b22      	ldr	r3, [pc, #136]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	4b20      	ldr	r3, [pc, #128]	; (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e032      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b94:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4916      	ldr	r1, [pc, #88]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	490e      	ldr	r1, [pc, #56]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bc6:	f000 f821 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	490a      	ldr	r1, [pc, #40]	; (8004c00 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd8:	5ccb      	ldrb	r3, [r1, r3]
 8004bda:	fa22 f303 	lsr.w	r3, r2, r3
 8004bde:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004be2:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <HAL_RCC_ClockConfig+0x1c8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe f888 	bl	8002cfc <HAL_InitTick>

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023c00 	.word	0x40023c00
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	080094fc 	.word	0x080094fc
 8004c04:	2000001c 	.word	0x2000001c
 8004c08:	20000020 	.word	0x20000020

08004c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c24:	4b67      	ldr	r3, [pc, #412]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 030c 	and.w	r3, r3, #12
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d00d      	beq.n	8004c4c <HAL_RCC_GetSysClockFreq+0x40>
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	f200 80bd 	bhi.w	8004db0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x34>
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d003      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c3e:	e0b7      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c40:	4b61      	ldr	r3, [pc, #388]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c42:	60bb      	str	r3, [r7, #8]
       break;
 8004c44:	e0b7      	b.n	8004db6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c46:	4b61      	ldr	r3, [pc, #388]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004c48:	60bb      	str	r3, [r7, #8]
      break;
 8004c4a:	e0b4      	b.n	8004db6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c4c:	4b5d      	ldr	r3, [pc, #372]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c56:	4b5b      	ldr	r3, [pc, #364]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d04d      	beq.n	8004cfe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c62:	4b58      	ldr	r3, [pc, #352]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c72:	f04f 0100 	mov.w	r1, #0
 8004c76:	ea02 0800 	and.w	r8, r2, r0
 8004c7a:	ea03 0901 	and.w	r9, r3, r1
 8004c7e:	4640      	mov	r0, r8
 8004c80:	4649      	mov	r1, r9
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	014b      	lsls	r3, r1, #5
 8004c8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c90:	0142      	lsls	r2, r0, #5
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	ebb0 0008 	subs.w	r0, r0, r8
 8004c9a:	eb61 0109 	sbc.w	r1, r1, r9
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	018b      	lsls	r3, r1, #6
 8004ca8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cac:	0182      	lsls	r2, r0, #6
 8004cae:	1a12      	subs	r2, r2, r0
 8004cb0:	eb63 0301 	sbc.w	r3, r3, r1
 8004cb4:	f04f 0000 	mov.w	r0, #0
 8004cb8:	f04f 0100 	mov.w	r1, #0
 8004cbc:	00d9      	lsls	r1, r3, #3
 8004cbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cc2:	00d0      	lsls	r0, r2, #3
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	eb12 0208 	adds.w	r2, r2, r8
 8004ccc:	eb43 0309 	adc.w	r3, r3, r9
 8004cd0:	f04f 0000 	mov.w	r0, #0
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	0259      	lsls	r1, r3, #9
 8004cda:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004cde:	0250      	lsls	r0, r2, #9
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	f7fb fa6a 	bl	80001c8 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e04a      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cfe:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	099b      	lsrs	r3, r3, #6
 8004d04:	461a      	mov	r2, r3
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d0e:	f04f 0100 	mov.w	r1, #0
 8004d12:	ea02 0400 	and.w	r4, r2, r0
 8004d16:	ea03 0501 	and.w	r5, r3, r1
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	014b      	lsls	r3, r1, #5
 8004d28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d2c:	0142      	lsls	r2, r0, #5
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	1b00      	subs	r0, r0, r4
 8004d34:	eb61 0105 	sbc.w	r1, r1, r5
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	018b      	lsls	r3, r1, #6
 8004d42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d46:	0182      	lsls	r2, r0, #6
 8004d48:	1a12      	subs	r2, r2, r0
 8004d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d4e:	f04f 0000 	mov.w	r0, #0
 8004d52:	f04f 0100 	mov.w	r1, #0
 8004d56:	00d9      	lsls	r1, r3, #3
 8004d58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d5c:	00d0      	lsls	r0, r2, #3
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	1912      	adds	r2, r2, r4
 8004d64:	eb45 0303 	adc.w	r3, r5, r3
 8004d68:	f04f 0000 	mov.w	r0, #0
 8004d6c:	f04f 0100 	mov.w	r1, #0
 8004d70:	0299      	lsls	r1, r3, #10
 8004d72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d76:	0290      	lsls	r0, r2, #10
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	f7fb fa1e 	bl	80001c8 <__aeabi_uldivmod>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4613      	mov	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	0c1b      	lsrs	r3, r3, #16
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	3301      	adds	r3, #1
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dac:	60bb      	str	r3, [r7, #8]
      break;
 8004dae:	e002      	b.n	8004db6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004db2:	60bb      	str	r3, [r7, #8]
      break;
 8004db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004db6:	68bb      	ldr	r3, [r7, #8]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	00f42400 	.word	0x00f42400
 8004dcc:	007a1200 	.word	0x007a1200

08004dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd4:	4b03      	ldr	r3, [pc, #12]	; (8004de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	2000001c 	.word	0x2000001c

08004de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dec:	f7ff fff0 	bl	8004dd0 <HAL_RCC_GetHCLKFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	0a9b      	lsrs	r3, r3, #10
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4903      	ldr	r1, [pc, #12]	; (8004e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dfe:	5ccb      	ldrb	r3, [r1, r3]
 8004e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	0800950c 	.word	0x0800950c

08004e10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e07b      	b.n	8004f1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d108      	bne.n	8004e3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e32:	d009      	beq.n	8004e48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	61da      	str	r2, [r3, #28]
 8004e3a:	e005      	b.n	8004e48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fd fd98 	bl	8002998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	ea42 0103 	orr.w	r1, r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	f003 0104 	and.w	r1, r3, #4
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	f003 0210 	and.w	r2, r3, #16
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b088      	sub	sp, #32
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_SPI_Transmit+0x22>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e126      	b.n	8005192 <HAL_SPI_Transmit+0x270>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f4c:	f7fd ff1a 	bl	8002d84 <HAL_GetTick>
 8004f50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d002      	beq.n	8004f68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
 8004f64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f66:	e10b      	b.n	8005180 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <HAL_SPI_Transmit+0x52>
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f78:	e102      	b.n	8005180 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	88fa      	ldrh	r2, [r7, #6]
 8004f92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	88fa      	ldrh	r2, [r7, #6]
 8004f98:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc0:	d10f      	bne.n	8004fe2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fe0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d007      	beq.n	8005000 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ffe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005008:	d14b      	bne.n	80050a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_SPI_Transmit+0xf6>
 8005012:	8afb      	ldrh	r3, [r7, #22]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d13e      	bne.n	8005096 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	881a      	ldrh	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	1c9a      	adds	r2, r3, #2
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800503c:	e02b      	b.n	8005096 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d112      	bne.n	8005072 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	881a      	ldrh	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	1c9a      	adds	r2, r3, #2
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005070:	e011      	b.n	8005096 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005072:	f7fd fe87 	bl	8002d84 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d803      	bhi.n	800508a <HAL_SPI_Transmit+0x168>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005088:	d102      	bne.n	8005090 <HAL_SPI_Transmit+0x16e>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005094:	e074      	b.n	8005180 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1ce      	bne.n	800503e <HAL_SPI_Transmit+0x11c>
 80050a0:	e04c      	b.n	800513c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_SPI_Transmit+0x18e>
 80050aa:	8afb      	ldrh	r3, [r7, #22]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d140      	bne.n	8005132 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80050d6:	e02c      	b.n	8005132 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d113      	bne.n	800510e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	330c      	adds	r3, #12
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	86da      	strh	r2, [r3, #54]	; 0x36
 800510c:	e011      	b.n	8005132 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510e:	f7fd fe39 	bl	8002d84 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d803      	bhi.n	8005126 <HAL_SPI_Transmit+0x204>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005124:	d102      	bne.n	800512c <HAL_SPI_Transmit+0x20a>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005130:	e026      	b.n	8005180 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1cd      	bne.n	80050d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	6839      	ldr	r1, [r7, #0]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 fbcb 	bl	80058dc <SPI_EndRxTxTransaction>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800515a:	2300      	movs	r3, #0
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e000      	b.n	8005180 <HAL_SPI_Transmit+0x25e>
  }

error:
 800517e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005190:	7ffb      	ldrb	r3, [r7, #31]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b088      	sub	sp, #32
 800519e:	af02      	add	r7, sp, #8
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	603b      	str	r3, [r7, #0]
 80051a6:	4613      	mov	r3, r2
 80051a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b6:	d112      	bne.n	80051de <HAL_SPI_Receive+0x44>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10e      	bne.n	80051de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2204      	movs	r2, #4
 80051c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	4613      	mov	r3, r2
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f8f1 	bl	80053bc <HAL_SPI_TransmitReceive>
 80051da:	4603      	mov	r3, r0
 80051dc:	e0ea      	b.n	80053b4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_SPI_Receive+0x52>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e0e3      	b.n	80053b4 <HAL_SPI_Receive+0x21a>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051f4:	f7fd fdc6 	bl	8002d84 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b01      	cmp	r3, #1
 8005204:	d002      	beq.n	800520c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005206:	2302      	movs	r3, #2
 8005208:	75fb      	strb	r3, [r7, #23]
    goto error;
 800520a:	e0ca      	b.n	80053a2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_SPI_Receive+0x7e>
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800521c:	e0c1      	b.n	80053a2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2204      	movs	r2, #4
 8005222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	88fa      	ldrh	r2, [r7, #6]
 8005236:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	88fa      	ldrh	r2, [r7, #6]
 800523c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005264:	d10f      	bne.n	8005286 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005274:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005284:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b40      	cmp	r3, #64	; 0x40
 8005292:	d007      	beq.n	80052a4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d162      	bne.n	8005372 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052ac:	e02e      	b.n	800530c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d115      	bne.n	80052e8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f103 020c 	add.w	r2, r3, #12
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	7812      	ldrb	r2, [r2, #0]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052e6:	e011      	b.n	800530c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052e8:	f7fd fd4c 	bl	8002d84 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d803      	bhi.n	8005300 <HAL_SPI_Receive+0x166>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fe:	d102      	bne.n	8005306 <HAL_SPI_Receive+0x16c>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	75fb      	strb	r3, [r7, #23]
          goto error;
 800530a:	e04a      	b.n	80053a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1cb      	bne.n	80052ae <HAL_SPI_Receive+0x114>
 8005316:	e031      	b.n	800537c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d113      	bne.n	800534e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	b292      	uxth	r2, r2
 8005332:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	1c9a      	adds	r2, r3, #2
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800534c:	e011      	b.n	8005372 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800534e:	f7fd fd19 	bl	8002d84 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d803      	bhi.n	8005366 <HAL_SPI_Receive+0x1cc>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005364:	d102      	bne.n	800536c <HAL_SPI_Receive+0x1d2>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005370:	e017      	b.n	80053a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1cd      	bne.n	8005318 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 fa45 	bl	8005810 <SPI_EndRxTransaction>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	75fb      	strb	r3, [r7, #23]
 800539e:	e000      	b.n	80053a2 <HAL_SPI_Receive+0x208>
  }

error :
 80053a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08c      	sub	sp, #48	; 0x30
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053ca:	2301      	movs	r3, #1
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_SPI_TransmitReceive+0x26>
 80053de:	2302      	movs	r3, #2
 80053e0:	e18a      	b.n	80056f8 <HAL_SPI_TransmitReceive+0x33c>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ea:	f7fd fccb 	bl	8002d84 <HAL_GetTick>
 80053ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005400:	887b      	ldrh	r3, [r7, #2]
 8005402:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005404:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005408:	2b01      	cmp	r3, #1
 800540a:	d00f      	beq.n	800542c <HAL_SPI_TransmitReceive+0x70>
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005412:	d107      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d103      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x68>
 800541c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005420:	2b04      	cmp	r3, #4
 8005422:	d003      	beq.n	800542c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005424:	2302      	movs	r3, #2
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800542a:	e15b      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_SPI_TransmitReceive+0x82>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_SPI_TransmitReceive+0x82>
 8005438:	887b      	ldrh	r3, [r7, #2]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005444:	e14e      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b04      	cmp	r3, #4
 8005450:	d003      	beq.n	800545a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2205      	movs	r2, #5
 8005456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	887a      	ldrh	r2, [r7, #2]
 800546a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	887a      	ldrh	r2, [r7, #2]
 8005470:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	887a      	ldrh	r2, [r7, #2]
 800547c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	887a      	ldrh	r2, [r7, #2]
 8005482:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d007      	beq.n	80054ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b6:	d178      	bne.n	80055aa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0x10a>
 80054c0:	8b7b      	ldrh	r3, [r7, #26]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d166      	bne.n	8005594 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	881a      	ldrh	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	1c9a      	adds	r2, r3, #2
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ea:	e053      	b.n	8005594 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d11b      	bne.n	8005532 <HAL_SPI_TransmitReceive+0x176>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d016      	beq.n	8005532 <HAL_SPI_TransmitReceive+0x176>
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d113      	bne.n	8005532 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	881a      	ldrh	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	1c9a      	adds	r2, r3, #2
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d119      	bne.n	8005574 <HAL_SPI_TransmitReceive+0x1b8>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d014      	beq.n	8005574 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	b292      	uxth	r2, r2
 8005556:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	1c9a      	adds	r2, r3, #2
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005570:	2301      	movs	r3, #1
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005574:	f7fd fc06 	bl	8002d84 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005580:	429a      	cmp	r2, r3
 8005582:	d807      	bhi.n	8005594 <HAL_SPI_TransmitReceive+0x1d8>
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558a:	d003      	beq.n	8005594 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005592:	e0a7      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1a6      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x130>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1a1      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x130>
 80055a8:	e07c      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_TransmitReceive+0x1fc>
 80055b2:	8b7b      	ldrh	r3, [r7, #26]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d16b      	bne.n	8005690 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	7812      	ldrb	r2, [r2, #0]
 80055c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055de:	e057      	b.n	8005690 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d11c      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x26c>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d017      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x26c>
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d114      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	330c      	adds	r3, #12
 8005608:	7812      	ldrb	r2, [r2, #0]
 800560a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b01      	cmp	r3, #1
 8005634:	d119      	bne.n	800566a <HAL_SPI_TransmitReceive+0x2ae>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d014      	beq.n	800566a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005666:	2301      	movs	r3, #1
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800566a:	f7fd fb8b 	bl	8002d84 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005676:	429a      	cmp	r2, r3
 8005678:	d803      	bhi.n	8005682 <HAL_SPI_TransmitReceive+0x2c6>
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d102      	bne.n	8005688 <HAL_SPI_TransmitReceive+0x2cc>
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	2b00      	cmp	r3, #0
 8005686:	d103      	bne.n	8005690 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800568e:	e029      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1a2      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x224>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d19d      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f917 	bl	80058dc <SPI_EndRxTxTransaction>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d006      	beq.n	80056c2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80056c0:	e010      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10b      	bne.n	80056e2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	e000      	b.n	80056e4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80056e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3730      	adds	r7, #48	; 0x30
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005710:	f7fd fb38 	bl	8002d84 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	4413      	add	r3, r2
 800571e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005720:	f7fd fb30 	bl	8002d84 <HAL_GetTick>
 8005724:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005726:	4b39      	ldr	r3, [pc, #228]	; (800580c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	015b      	lsls	r3, r3, #5
 800572c:	0d1b      	lsrs	r3, r3, #20
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	fb02 f303 	mul.w	r3, r2, r3
 8005734:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005736:	e054      	b.n	80057e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573e:	d050      	beq.n	80057e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005740:	f7fd fb20 	bl	8002d84 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	429a      	cmp	r2, r3
 800574e:	d902      	bls.n	8005756 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d13d      	bne.n	80057d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005764:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800576e:	d111      	bne.n	8005794 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005778:	d004      	beq.n	8005784 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005782:	d107      	bne.n	8005794 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005792:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579c:	d10f      	bne.n	80057be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e017      	b.n	8005802 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	3b01      	subs	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d19b      	bne.n	8005738 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	2000001c 	.word	0x2000001c

08005810 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005824:	d111      	bne.n	800584a <SPI_EndRxTransaction+0x3a>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582e:	d004      	beq.n	800583a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005838:	d107      	bne.n	800584a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005848:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005852:	d12a      	bne.n	80058aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585c:	d012      	beq.n	8005884 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	2180      	movs	r1, #128	; 0x80
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f7ff ff49 	bl	8005700 <SPI_WaitFlagStateUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d02d      	beq.n	80058d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	f043 0220 	orr.w	r2, r3, #32
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e026      	b.n	80058d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2200      	movs	r2, #0
 800588c:	2101      	movs	r1, #1
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f7ff ff36 	bl	8005700 <SPI_WaitFlagStateUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01a      	beq.n	80058d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589e:	f043 0220 	orr.w	r2, r3, #32
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e013      	b.n	80058d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2200      	movs	r2, #0
 80058b2:	2101      	movs	r1, #1
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff ff23 	bl	8005700 <SPI_WaitFlagStateUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	f043 0220 	orr.w	r2, r3, #32
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e000      	b.n	80058d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058e8:	4b1b      	ldr	r3, [pc, #108]	; (8005958 <SPI_EndRxTxTransaction+0x7c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1b      	ldr	r2, [pc, #108]	; (800595c <SPI_EndRxTxTransaction+0x80>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	0d5b      	lsrs	r3, r3, #21
 80058f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058f8:	fb02 f303 	mul.w	r3, r2, r3
 80058fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005906:	d112      	bne.n	800592e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	2180      	movs	r1, #128	; 0x80
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7ff fef4 	bl	8005700 <SPI_WaitFlagStateUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d016      	beq.n	800594c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	f043 0220 	orr.w	r2, r3, #32
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e00f      	b.n	800594e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	3b01      	subs	r3, #1
 8005938:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005944:	2b80      	cmp	r3, #128	; 0x80
 8005946:	d0f2      	beq.n	800592e <SPI_EndRxTxTransaction+0x52>
 8005948:	e000      	b.n	800594c <SPI_EndRxTxTransaction+0x70>
        break;
 800594a:	bf00      	nop
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	2000001c 	.word	0x2000001c
 800595c:	165e9f81 	.word	0x165e9f81

08005960 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e034      	b.n	80059e0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7fa ffa0 	bl	80008d0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3308      	adds	r3, #8
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f000 fca6 	bl	80062ec <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	461a      	mov	r2, r3
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	f000 fcf0 	bl	8006390 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6858      	ldr	r0, [r3, #4]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	f000 fd25 	bl	800640c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	6892      	ldr	r2, [r2, #8]
 80059ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	6892      	ldr	r2, [r2, #8]
 80059d6:	f041 0101 	orr.w	r1, r1, #1
 80059da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e041      	b.n	8005a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fd f8c4 	bl	8002b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f000 fa96 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d001      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e04e      	b.n	8005b3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a23      	ldr	r2, [pc, #140]	; (8005b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d022      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aca:	d01d      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d018      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1e      	ldr	r2, [pc, #120]	; (8005b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00e      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d111      	bne.n	8005b2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b06      	cmp	r3, #6
 8005b18:	d010      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0201 	orr.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2a:	e007      	b.n	8005b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	40010000 	.word	0x40010000
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40000c00 	.word	0x40000c00
 8005b5c:	40010400 	.word	0x40010400
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40001800 	.word	0x40001800

08005b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d122      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0202 	mvn.w	r2, #2
 8005b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f9b5 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e005      	b.n	8005bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9a7 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f9b8 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d122      	bne.n	8005c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d11b      	bne.n	8005c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0204 	mvn.w	r2, #4
 8005be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2202      	movs	r2, #2
 8005bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f98b 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005c04:	e005      	b.n	8005c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f97d 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f98e 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d122      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0208 	mvn.w	r2, #8
 8005c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2204      	movs	r2, #4
 8005c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f961 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f953 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f964 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0310 	and.w	r3, r3, #16
 8005c76:	2b10      	cmp	r3, #16
 8005c78:	d122      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d11b      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0210 	mvn.w	r2, #16
 8005c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2208      	movs	r2, #8
 8005c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f937 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005cac:	e005      	b.n	8005cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f929 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f93a 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d10e      	bne.n	8005cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d107      	bne.n	8005cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0201 	mvn.w	r2, #1
 8005ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fc fdf6 	bl	80028d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf6:	2b80      	cmp	r3, #128	; 0x80
 8005cf8:	d10e      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d04:	2b80      	cmp	r3, #128	; 0x80
 8005d06:	d107      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fae0 	bl	80062d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d10e      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d30:	2b40      	cmp	r3, #64	; 0x40
 8005d32:	d107      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f8ff 	bl	8005f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d10e      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0220 	mvn.w	r2, #32
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 faaa 	bl	80062c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIM_ConfigClockSource+0x1c>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e0b4      	b.n	8005efe <HAL_TIM_ConfigClockSource+0x186>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dcc:	d03e      	beq.n	8005e4c <HAL_TIM_ConfigClockSource+0xd4>
 8005dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd2:	f200 8087 	bhi.w	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dda:	f000 8086 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x172>
 8005dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de2:	d87f      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005de4:	2b70      	cmp	r3, #112	; 0x70
 8005de6:	d01a      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0xa6>
 8005de8:	2b70      	cmp	r3, #112	; 0x70
 8005dea:	d87b      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dec:	2b60      	cmp	r3, #96	; 0x60
 8005dee:	d050      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x11a>
 8005df0:	2b60      	cmp	r3, #96	; 0x60
 8005df2:	d877      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005df4:	2b50      	cmp	r3, #80	; 0x50
 8005df6:	d03c      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0xfa>
 8005df8:	2b50      	cmp	r3, #80	; 0x50
 8005dfa:	d873      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	d058      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	d86f      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e04:	2b30      	cmp	r3, #48	; 0x30
 8005e06:	d064      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e08:	2b30      	cmp	r3, #48	; 0x30
 8005e0a:	d86b      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d060      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	d867      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d05c      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e18:	2b10      	cmp	r3, #16
 8005e1a:	d05a      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e1c:	e062      	b.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6899      	ldr	r1, [r3, #8]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f000 f9ad 	bl	800618c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	609a      	str	r2, [r3, #8]
      break;
 8005e4a:	e04f      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	6899      	ldr	r1, [r3, #8]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f000 f996 	bl	800618c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e6e:	609a      	str	r2, [r3, #8]
      break;
 8005e70:	e03c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	6859      	ldr	r1, [r3, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f000 f90a 	bl	8006098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2150      	movs	r1, #80	; 0x50
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f963 	bl	8006156 <TIM_ITRx_SetConfig>
      break;
 8005e90:	e02c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	6859      	ldr	r1, [r3, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f000 f929 	bl	80060f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2160      	movs	r1, #96	; 0x60
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 f953 	bl	8006156 <TIM_ITRx_SetConfig>
      break;
 8005eb0:	e01c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6859      	ldr	r1, [r3, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f000 f8ea 	bl	8006098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2140      	movs	r1, #64	; 0x40
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 f943 	bl	8006156 <TIM_ITRx_SetConfig>
      break;
 8005ed0:	e00c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f000 f93a 	bl	8006156 <TIM_ITRx_SetConfig>
      break;
 8005ee2:	e003      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee8:	e000      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a40      	ldr	r2, [pc, #256]	; (800606c <TIM_Base_SetConfig+0x114>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d00f      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3d      	ldr	r2, [pc, #244]	; (8006070 <TIM_Base_SetConfig+0x118>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3c      	ldr	r2, [pc, #240]	; (8006074 <TIM_Base_SetConfig+0x11c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a3b      	ldr	r2, [pc, #236]	; (8006078 <TIM_Base_SetConfig+0x120>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a3a      	ldr	r2, [pc, #232]	; (800607c <TIM_Base_SetConfig+0x124>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d108      	bne.n	8005faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2f      	ldr	r2, [pc, #188]	; (800606c <TIM_Base_SetConfig+0x114>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d02b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb8:	d027      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2c      	ldr	r2, [pc, #176]	; (8006070 <TIM_Base_SetConfig+0x118>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d023      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2b      	ldr	r2, [pc, #172]	; (8006074 <TIM_Base_SetConfig+0x11c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01f      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a2a      	ldr	r2, [pc, #168]	; (8006078 <TIM_Base_SetConfig+0x120>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a29      	ldr	r2, [pc, #164]	; (800607c <TIM_Base_SetConfig+0x124>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d017      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a28      	ldr	r2, [pc, #160]	; (8006080 <TIM_Base_SetConfig+0x128>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a27      	ldr	r2, [pc, #156]	; (8006084 <TIM_Base_SetConfig+0x12c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00f      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a26      	ldr	r2, [pc, #152]	; (8006088 <TIM_Base_SetConfig+0x130>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a25      	ldr	r2, [pc, #148]	; (800608c <TIM_Base_SetConfig+0x134>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d007      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a24      	ldr	r2, [pc, #144]	; (8006090 <TIM_Base_SetConfig+0x138>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d003      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a23      	ldr	r2, [pc, #140]	; (8006094 <TIM_Base_SetConfig+0x13c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d108      	bne.n	800601c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a0a      	ldr	r2, [pc, #40]	; (800606c <TIM_Base_SetConfig+0x114>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0c      	ldr	r2, [pc, #48]	; (800607c <TIM_Base_SetConfig+0x124>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d103      	bne.n	8006058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	615a      	str	r2, [r3, #20]
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40010000 	.word	0x40010000
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40010400 	.word	0x40010400
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800
 800608c:	40001800 	.word	0x40001800
 8006090:	40001c00 	.word	0x40001c00
 8006094:	40002000 	.word	0x40002000

08006098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f023 0201 	bic.w	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f023 030a 	bic.w	r3, r3, #10
 80060d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b087      	sub	sp, #28
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f023 0210 	bic.w	r2, r3, #16
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	031b      	lsls	r3, r3, #12
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006132:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	f043 0307 	orr.w	r3, r3, #7
 8006178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	609a      	str	r2, [r3, #8]
}
 8006180:	bf00      	nop
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	021a      	lsls	r2, r3, #8
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	609a      	str	r2, [r3, #8]
}
 80061c0:	bf00      	nop
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e05a      	b.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d022      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006230:	d01d      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1d      	ldr	r2, [pc, #116]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d018      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a17      	ldr	r2, [pc, #92]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10c      	bne.n	8006288 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	4313      	orrs	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40010000 	.word	0x40010000
 80062ac:	40000400 	.word	0x40000400
 80062b0:	40000800 	.word	0x40000800
 80062b4:	40000c00 	.word	0x40000c00
 80062b8:	40010400 	.word	0x40010400
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40001800 	.word	0x40001800

080062c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006304:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4b20      	ldr	r3, [pc, #128]	; (800638c <FSMC_NORSRAM_Init+0xa0>)
 800630a:	4013      	ands	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006316:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800631c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006322:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006328:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800632e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006334:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800633a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006340:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006346:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800634c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006352:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006358:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d103      	bne.n	8006370 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800636e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68f9      	ldr	r1, [r7, #12]
 8006378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	fff00080 	.word	0xfff00080

08006390 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063aa:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80063b2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80063be:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80063c6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80063ce:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80063d8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	3b02      	subs	r3, #2
 80063e0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80063e2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80063e8:	4313      	orrs	r3, r2
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6979      	ldr	r1, [r7, #20]
 80063f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	371c      	adds	r7, #28
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
	...

0800640c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006424:	d122      	bne.n	800646c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006434:	4013      	ands	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006442:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800644a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006452:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006458:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6979      	ldr	r1, [r7, #20]
 8006466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800646a:	e005      	b.n	8006478 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	cff00000 	.word	0xcff00000

0800648c <__libc_init_array>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4d0d      	ldr	r5, [pc, #52]	; (80064c4 <__libc_init_array+0x38>)
 8006490:	4c0d      	ldr	r4, [pc, #52]	; (80064c8 <__libc_init_array+0x3c>)
 8006492:	1b64      	subs	r4, r4, r5
 8006494:	10a4      	asrs	r4, r4, #2
 8006496:	2600      	movs	r6, #0
 8006498:	42a6      	cmp	r6, r4
 800649a:	d109      	bne.n	80064b0 <__libc_init_array+0x24>
 800649c:	4d0b      	ldr	r5, [pc, #44]	; (80064cc <__libc_init_array+0x40>)
 800649e:	4c0c      	ldr	r4, [pc, #48]	; (80064d0 <__libc_init_array+0x44>)
 80064a0:	f000 f820 	bl	80064e4 <_init>
 80064a4:	1b64      	subs	r4, r4, r5
 80064a6:	10a4      	asrs	r4, r4, #2
 80064a8:	2600      	movs	r6, #0
 80064aa:	42a6      	cmp	r6, r4
 80064ac:	d105      	bne.n	80064ba <__libc_init_array+0x2e>
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b4:	4798      	blx	r3
 80064b6:	3601      	adds	r6, #1
 80064b8:	e7ee      	b.n	8006498 <__libc_init_array+0xc>
 80064ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80064be:	4798      	blx	r3
 80064c0:	3601      	adds	r6, #1
 80064c2:	e7f2      	b.n	80064aa <__libc_init_array+0x1e>
 80064c4:	0800951c 	.word	0x0800951c
 80064c8:	0800951c 	.word	0x0800951c
 80064cc:	0800951c 	.word	0x0800951c
 80064d0:	08009520 	.word	0x08009520

080064d4 <memset>:
 80064d4:	4402      	add	r2, r0
 80064d6:	4603      	mov	r3, r0
 80064d8:	4293      	cmp	r3, r2
 80064da:	d100      	bne.n	80064de <memset+0xa>
 80064dc:	4770      	bx	lr
 80064de:	f803 1b01 	strb.w	r1, [r3], #1
 80064e2:	e7f9      	b.n	80064d8 <memset+0x4>

080064e4 <_init>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr

080064f0 <_fini>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	bf00      	nop
 80064f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f6:	bc08      	pop	{r3}
 80064f8:	469e      	mov	lr, r3
 80064fa:	4770      	bx	lr
