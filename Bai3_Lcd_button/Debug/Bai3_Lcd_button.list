
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003008  08004fb4  08004fb4  00005fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fbc  08007fbc  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007fbc  08007fbc  00008fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc4  08007fc4  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc4  08007fc4  00008fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc8  08007fc8  00008fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007fcc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          000002a8  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000314  20000314  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1da  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d3b  00000000  00000000  00018276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  0001afb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6c  00000000  00000000  0001bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c4b  00000000  00000000  0001ca2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b66  00000000  00000000  0003f677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd711  00000000  00000000  000521dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f8ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041b8  00000000  00000000  0011f934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00123aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f9c 	.word	0x08004f9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004f9c 	.word	0x08004f9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	2108      	movs	r1, #8
 8000578:	4802      	ldr	r0, [pc, #8]	@ (8000584 <button_init+0x14>)
 800057a:	f002 f8b3 	bl	80026e4 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40020c00 	.word	0x40020c00

08000588 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	482f      	ldr	r0, [pc, #188]	@ (8000650 <button_Scan+0xc8>)
 8000594:	f002 f8a6 	bl	80026e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	2108      	movs	r1, #8
 800059c:	482c      	ldr	r0, [pc, #176]	@ (8000650 <button_Scan+0xc8>)
 800059e:	f002 f8a1 	bl	80026e4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005a2:	230a      	movs	r3, #10
 80005a4:	2202      	movs	r2, #2
 80005a6:	492b      	ldr	r1, [pc, #172]	@ (8000654 <button_Scan+0xcc>)
 80005a8:	482b      	ldr	r0, [pc, #172]	@ (8000658 <button_Scan+0xd0>)
 80005aa:	f002 fede 	bl	800336a <HAL_SPI_Receive>
	  int button_index = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005b6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e03f      	b.n	800063e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db06      	blt.n	80005d2 <button_Scan+0x4a>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	dc03      	bgt.n	80005d2 <button_Scan+0x4a>
			  button_index = i + 4;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3304      	adds	r3, #4
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e018      	b.n	8000604 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	dd07      	ble.n	80005e8 <button_Scan+0x60>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	dc04      	bgt.n	80005e8 <button_Scan+0x60>
			  button_index = 7 - i;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f1c3 0307 	rsb	r3, r3, #7
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e00d      	b.n	8000604 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b07      	cmp	r3, #7
 80005ec:	dd06      	ble.n	80005fc <button_Scan+0x74>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b0b      	cmp	r3, #11
 80005f2:	dc03      	bgt.n	80005fc <button_Scan+0x74>
			  button_index = i + 4;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3304      	adds	r3, #4
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e003      	b.n	8000604 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f1c3 0317 	rsb	r3, r3, #23
 8000602:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <button_Scan+0xcc>)
 8000606:	881a      	ldrh	r2, [r3, #0]
 8000608:	897b      	ldrh	r3, [r7, #10]
 800060a:	4013      	ands	r3, r2
 800060c:	b29b      	uxth	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d005      	beq.n	800061e <button_Scan+0x96>
 8000612:	4a12      	ldr	r2, [pc, #72]	@ (800065c <button_Scan+0xd4>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2100      	movs	r1, #0
 8000618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800061c:	e009      	b.n	8000632 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800061e:	4a0f      	ldr	r2, [pc, #60]	@ (800065c <button_Scan+0xd4>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000626:	3301      	adds	r3, #1
 8000628:	b299      	uxth	r1, r3
 800062a:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <button_Scan+0xd4>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000632:	897b      	ldrh	r3, [r7, #10]
 8000634:	085b      	lsrs	r3, r3, #1
 8000636:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	ddbc      	ble.n	80005be <button_Scan+0x36>
	  }
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020c00 	.word	0x40020c00
 8000654:	200000a8 	.word	0x200000a8
 8000658:	20000110 	.word	0x20000110
 800065c:	20000088 	.word	0x20000088

08000660 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	@ 0x38
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]
 800068a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800068c:	4b2f      	ldr	r3, [pc, #188]	@ (800074c <MX_FSMC_Init+0xec>)
 800068e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000692:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000694:	4b2d      	ldr	r3, [pc, #180]	@ (800074c <MX_FSMC_Init+0xec>)
 8000696:	4a2e      	ldr	r2, [pc, #184]	@ (8000750 <MX_FSMC_Init+0xf0>)
 8000698:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800069a:	4b2c      	ldr	r3, [pc, #176]	@ (800074c <MX_FSMC_Init+0xec>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80006a0:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <MX_FSMC_Init+0xec>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80006a6:	4b29      	ldr	r3, [pc, #164]	@ (800074c <MX_FSMC_Init+0xec>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <MX_FSMC_Init+0xec>)
 80006ae:	2210      	movs	r2, #16
 80006b0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80006b2:	4b26      	ldr	r3, [pc, #152]	@ (800074c <MX_FSMC_Init+0xec>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <MX_FSMC_Init+0xec>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80006be:	4b23      	ldr	r3, [pc, #140]	@ (800074c <MX_FSMC_Init+0xec>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80006c4:	4b21      	ldr	r3, [pc, #132]	@ (800074c <MX_FSMC_Init+0xec>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <MX_FSMC_Init+0xec>)
 80006cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <MX_FSMC_Init+0xec>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <MX_FSMC_Init+0xec>)
 80006da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006de:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_FSMC_Init+0xec>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	@ (800074c <MX_FSMC_Init+0xec>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80006ec:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_FSMC_Init+0xec>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80006f2:	230f      	movs	r3, #15
 80006f4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80006f6:	230f      	movs	r3, #15
 80006f8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80006fa:	233c      	movs	r3, #60	@ 0x3c
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000702:	2310      	movs	r3, #16
 8000704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000706:	2311      	movs	r3, #17
 8000708:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800070a:	2300      	movs	r3, #0
 800070c:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800070e:	2308      	movs	r3, #8
 8000710:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000712:	230f      	movs	r3, #15
 8000714:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000716:	2309      	movs	r3, #9
 8000718:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800071e:	2310      	movs	r3, #16
 8000720:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000722:	2311      	movs	r3, #17
 8000724:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800072a:	463a      	mov	r2, r7
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4806      	ldr	r0, [pc, #24]	@ (800074c <MX_FSMC_Init+0xec>)
 8000734:	f003 f9fc 	bl	8003b30 <HAL_SRAM_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800073e:	f001 f83b 	bl	80017b8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000742:	bf00      	nop
 8000744:	3738      	adds	r7, #56	@ 0x38
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000ac 	.word	0x200000ac
 8000750:	a0000104 	.word	0xa0000104

08000754 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <HAL_FSMC_MspInit+0x88>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d131      	bne.n	80007d4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <HAL_FSMC_MspInit+0x88>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <HAL_FSMC_MspInit+0x8c>)
 800077c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800077e:	4a18      	ldr	r2, [pc, #96]	@ (80007e0 <HAL_FSMC_MspInit+0x8c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6393      	str	r3, [r2, #56]	@ 0x38
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <HAL_FSMC_MspInit+0x8c>)
 8000788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000792:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000796:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007a4:	230c      	movs	r3, #12
 80007a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <HAL_FSMC_MspInit+0x90>)
 80007ae:	f001 fdfd 	bl	80023ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007b2:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80007b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007c4:	230c      	movs	r3, #12
 80007c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <HAL_FSMC_MspInit+0x94>)
 80007ce:	f001 fded 	bl	80023ac <HAL_GPIO_Init>
 80007d2:	e000      	b.n	80007d6 <HAL_FSMC_MspInit+0x82>
    return;
 80007d4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000fc 	.word	0x200000fc
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40020c00 	.word	0x40020c00

080007ec <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80007f4:	f7ff ffae 	bl	8000754 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	@ 0x30
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	4b6f      	ldr	r3, [pc, #444]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a6e      	ldr	r2, [pc, #440]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b6c      	ldr	r3, [pc, #432]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	4b68      	ldr	r3, [pc, #416]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a67      	ldr	r2, [pc, #412]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b65      	ldr	r3, [pc, #404]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b61      	ldr	r3, [pc, #388]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a60      	ldr	r2, [pc, #384]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b5e      	ldr	r3, [pc, #376]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b5a      	ldr	r3, [pc, #360]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a59      	ldr	r2, [pc, #356]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b57      	ldr	r3, [pc, #348]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b53      	ldr	r3, [pc, #332]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a52      	ldr	r2, [pc, #328]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b50      	ldr	r3, [pc, #320]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b4c      	ldr	r3, [pc, #304]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a4b      	ldr	r2, [pc, #300]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b49      	ldr	r3, [pc, #292]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b45      	ldr	r3, [pc, #276]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a44      	ldr	r2, [pc, #272]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b42      	ldr	r3, [pc, #264]	@ (80009d8 <MX_GPIO_Init+0x1d8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2170      	movs	r1, #112	@ 0x70
 80008de:	483f      	ldr	r0, [pc, #252]	@ (80009dc <MX_GPIO_Init+0x1dc>)
 80008e0:	f001 ff00 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ea:	483d      	ldr	r0, [pc, #244]	@ (80009e0 <MX_GPIO_Init+0x1e0>)
 80008ec:	f001 fefa 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2140      	movs	r1, #64	@ 0x40
 80008f4:	483b      	ldr	r0, [pc, #236]	@ (80009e4 <MX_GPIO_Init+0x1e4>)
 80008f6:	f001 fef5 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000900:	4839      	ldr	r0, [pc, #228]	@ (80009e8 <MX_GPIO_Init+0x1e8>)
 8000902:	f001 feef 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	4838      	ldr	r0, [pc, #224]	@ (80009ec <MX_GPIO_Init+0x1ec>)
 800090c:	f001 feea 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000910:	2370      	movs	r3, #112	@ 0x70
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	482d      	ldr	r0, [pc, #180]	@ (80009dc <MX_GPIO_Init+0x1dc>)
 8000928:	f001 fd40 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800092c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4826      	ldr	r0, [pc, #152]	@ (80009e0 <MX_GPIO_Init+0x1e0>)
 8000946:	f001 fd31 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800094a:	23c0      	movs	r3, #192	@ 0xc0
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4822      	ldr	r0, [pc, #136]	@ (80009e8 <MX_GPIO_Init+0x1e8>)
 800095e:	f001 fd25 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000962:	2330      	movs	r3, #48	@ 0x30
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	481a      	ldr	r0, [pc, #104]	@ (80009e0 <MX_GPIO_Init+0x1e0>)
 8000976:	f001 fd19 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800097a:	2340      	movs	r3, #64	@ 0x40
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4814      	ldr	r0, [pc, #80]	@ (80009e4 <MX_GPIO_Init+0x1e4>)
 8000992:	f001 fd0b 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000996:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	480e      	ldr	r0, [pc, #56]	@ (80009e8 <MX_GPIO_Init+0x1e8>)
 80009b0:	f001 fcfc 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80009b4:	2308      	movs	r3, #8
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4808      	ldr	r0, [pc, #32]	@ (80009ec <MX_GPIO_Init+0x1ec>)
 80009cc:	f001 fcee 	bl	80023ac <HAL_GPIO_Init>

}
 80009d0:	bf00      	nop
 80009d2:	3730      	adds	r7, #48	@ 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40021800 	.word	0x40021800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020c00 	.word	0x40020c00

080009f0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <LCD_WR_REG+0x1c>)
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	8013      	strh	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	600ffffe 	.word	0x600ffffe

08000a10 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <LCD_WR_DATA+0x1c>)
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	8053      	strh	r3, [r2, #2]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	600ffffe 	.word	0x600ffffe

08000a30 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <LCD_RD_DATA+0x20>)
 8000a38:	885b      	ldrh	r3, [r3, #2]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	b29b      	uxth	r3, r3
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	600ffffe 	.word	0x600ffffe

08000a54 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	4608      	mov	r0, r1
 8000a5e:	4611      	mov	r1, r2
 8000a60:	461a      	mov	r2, r3
 8000a62:	4623      	mov	r3, r4
 8000a64:	80fb      	strh	r3, [r7, #6]
 8000a66:	4603      	mov	r3, r0
 8000a68:	80bb      	strh	r3, [r7, #4]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	807b      	strh	r3, [r7, #2]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000a72:	202a      	movs	r0, #42	@ 0x2a
 8000a74:	f7ff ffbc 	bl	80009f0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	0a1b      	lsrs	r3, r3, #8
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ffc6 	bl	8000a10 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ffc0 	bl	8000a10 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000a90:	887b      	ldrh	r3, [r7, #2]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ffba 	bl	8000a10 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000a9c:	887b      	ldrh	r3, [r7, #2]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ffb4 	bl	8000a10 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000aa8:	202b      	movs	r0, #43	@ 0x2b
 8000aaa:	f7ff ffa1 	bl	80009f0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000aae:	88bb      	ldrh	r3, [r7, #4]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ffab 	bl	8000a10 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000aba:	88bb      	ldrh	r3, [r7, #4]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ffa5 	bl	8000a10 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000ac6:	883b      	ldrh	r3, [r7, #0]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff9f 	bl	8000a10 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ad2:	883b      	ldrh	r3, [r7, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff99 	bl	8000a10 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000ade:	202c      	movs	r0, #44	@ 0x2c
 8000ae0:	f7ff ff86 	bl	80009f0 <LCD_WR_REG>
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}

08000aec <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <lcd_Clear+0x60>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <lcd_Clear+0x60>)
 8000b00:	885b      	ldrh	r3, [r3, #2]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff ffa3 	bl	8000a54 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	81fb      	strh	r3, [r7, #14]
 8000b12:	e011      	b.n	8000b38 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	81bb      	strh	r3, [r7, #12]
 8000b18:	e006      	b.n	8000b28 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff77 	bl	8000a10 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	3301      	adds	r3, #1
 8000b26:	81bb      	strh	r3, [r7, #12]
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <lcd_Clear+0x60>)
 8000b2a:	885b      	ldrh	r3, [r3, #2]
 8000b2c:	89ba      	ldrh	r2, [r7, #12]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d3f3      	bcc.n	8000b1a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000b32:	89fb      	ldrh	r3, [r7, #14]
 8000b34:	3301      	adds	r3, #1
 8000b36:	81fb      	strh	r3, [r7, #14]
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <lcd_Clear+0x60>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	89fa      	ldrh	r2, [r7, #14]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d3e8      	bcc.n	8000b14 <lcd_Clear+0x28>
		}
	}
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000100 	.word	0x20000100

08000b50 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4604      	mov	r4, r0
 8000b58:	4608      	mov	r0, r1
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4623      	mov	r3, r4
 8000b60:	80fb      	strh	r3, [r7, #6]
 8000b62:	4603      	mov	r3, r0
 8000b64:	80bb      	strh	r3, [r7, #4]
 8000b66:	460b      	mov	r3, r1
 8000b68:	807b      	strh	r3, [r7, #2]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	883b      	ldrh	r3, [r7, #0]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	88b9      	ldrh	r1, [r7, #4]
 8000b7c:	88f8      	ldrh	r0, [r7, #6]
 8000b7e:	f7ff ff69 	bl	8000a54 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	81fb      	strh	r3, [r7, #14]
 8000b86:	e010      	b.n	8000baa <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	81bb      	strh	r3, [r7, #12]
 8000b8c:	e006      	b.n	8000b9c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000b8e:	8c3b      	ldrh	r3, [r7, #32]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff3d 	bl	8000a10 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000b96:	89bb      	ldrh	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	81bb      	strh	r3, [r7, #12]
 8000b9c:	89ba      	ldrh	r2, [r7, #12]
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d3f4      	bcc.n	8000b8e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	81fb      	strh	r3, [r7, #14]
 8000baa:	89fa      	ldrh	r2, [r7, #14]
 8000bac:	883b      	ldrh	r3, [r7, #0]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d3ea      	bcc.n	8000b88 <lcd_Fill+0x38>
		}
	}
}
 8000bb2:	bf00      	nop
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd90      	pop	{r4, r7, pc}

08000bbc <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	80bb      	strh	r3, [r7, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	88fa      	ldrh	r2, [r7, #6]
 8000bd2:	88b9      	ldrh	r1, [r7, #4]
 8000bd4:	88f8      	ldrh	r0, [r7, #6]
 8000bd6:	f7ff ff3d 	bl	8000a54 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff17 	bl	8000a10 <LCD_WR_DATA>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8000bea:	b590      	push	{r4, r7, lr}
 8000bec:	b08d      	sub	sp, #52	@ 0x34
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4623      	mov	r3, r4
 8000bfa:	80fb      	strh	r3, [r7, #6]
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	80bb      	strh	r3, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]
 8000c04:	4613      	mov	r3, r2
 8000c06:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8000c10:	887a      	ldrh	r2, [r7, #2]
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8000c18:	883a      	ldrh	r2, [r7, #0]
 8000c1a:	88bb      	ldrh	r3, [r7, #4]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	dd02      	ble.n	8000c34 <lcd_DrawLine+0x4a>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e00b      	b.n	8000c4c <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <lcd_DrawLine+0x56>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e005      	b.n	8000c4c <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	6a3b      	ldr	r3, [r7, #32]
 8000c48:	425b      	negs	r3, r3
 8000c4a:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	dd02      	ble.n	8000c58 <lcd_DrawLine+0x6e>
 8000c52:	2301      	movs	r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	e00b      	b.n	8000c70 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d102      	bne.n	8000c64 <lcd_DrawLine+0x7a>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	e005      	b.n	8000c70 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8000c70:	6a3a      	ldr	r2, [r7, #32]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dd02      	ble.n	8000c7e <lcd_DrawLine+0x94>
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	e001      	b.n	8000c82 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000c86:	e02b      	b.n	8000ce0 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	b291      	uxth	r1, r2
 8000c90:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff91 	bl	8000bbc <lcd_DrawPoint>
		xerr+=delta_x;
 8000c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 8000ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 8000caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dd07      	ble.n	8000cc2 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8000cb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8000cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	dd07      	ble.n	8000cda <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8000cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8000cda:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cdc:	3301      	adds	r3, #1
 8000cde:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000ce0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dacf      	bge.n	8000c88 <lcd_DrawLine+0x9e>
		}
	}
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3734      	adds	r7, #52	@ 0x34
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd90      	pop	{r4, r7, pc}

08000cf2 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8000cf2:	b590      	push	{r4, r7, lr}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af02      	add	r7, sp, #8
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4623      	mov	r3, r4
 8000d02:	80fb      	strh	r3, [r7, #6]
 8000d04:	4603      	mov	r3, r0
 8000d06:	80bb      	strh	r3, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8000d10:	88bc      	ldrh	r4, [r7, #4]
 8000d12:	887a      	ldrh	r2, [r7, #2]
 8000d14:	88b9      	ldrh	r1, [r7, #4]
 8000d16:	88f8      	ldrh	r0, [r7, #6]
 8000d18:	8b3b      	ldrh	r3, [r7, #24]
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	4623      	mov	r3, r4
 8000d1e:	f7ff ff64 	bl	8000bea <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8000d22:	883c      	ldrh	r4, [r7, #0]
 8000d24:	88fa      	ldrh	r2, [r7, #6]
 8000d26:	88b9      	ldrh	r1, [r7, #4]
 8000d28:	88f8      	ldrh	r0, [r7, #6]
 8000d2a:	8b3b      	ldrh	r3, [r7, #24]
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	4623      	mov	r3, r4
 8000d30:	f7ff ff5b 	bl	8000bea <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8000d34:	883c      	ldrh	r4, [r7, #0]
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	8839      	ldrh	r1, [r7, #0]
 8000d3a:	88f8      	ldrh	r0, [r7, #6]
 8000d3c:	8b3b      	ldrh	r3, [r7, #24]
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	4623      	mov	r3, r4
 8000d42:	f7ff ff52 	bl	8000bea <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8000d46:	883c      	ldrh	r4, [r7, #0]
 8000d48:	887a      	ldrh	r2, [r7, #2]
 8000d4a:	88b9      	ldrh	r1, [r7, #4]
 8000d4c:	8878      	ldrh	r0, [r7, #2]
 8000d4e:	8b3b      	ldrh	r3, [r7, #24]
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4623      	mov	r3, r4
 8000d54:	f7ff ff49 	bl	8000bea <lcd_DrawLine>
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd90      	pop	{r4, r7, pc}

08000d60 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4604      	mov	r4, r0
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4623      	mov	r3, r4
 8000d70:	80fb      	strh	r3, [r7, #6]
 8000d72:	4603      	mov	r3, r0
 8000d74:	80bb      	strh	r3, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000d86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf14      	ite	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	2300      	moveq	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	fb12 f303 	smulbb	r3, r2, r3
 8000db6:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	3b20      	subs	r3, #32
 8000dbc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b29c      	uxth	r4, r3
 8000dcc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	88b9      	ldrh	r1, [r7, #4]
 8000dde:	88f8      	ldrh	r0, [r7, #6]
 8000de0:	4622      	mov	r2, r4
 8000de2:	f7ff fe37 	bl	8000a54 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	827b      	strh	r3, [r7, #18]
 8000dea:	e07a      	b.n	8000ee2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000dec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000df0:	2b0c      	cmp	r3, #12
 8000df2:	d028      	beq.n	8000e46 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000df4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000df8:	2b10      	cmp	r3, #16
 8000dfa:	d108      	bne.n	8000e0e <lcd_ShowChar+0xae>
 8000dfc:	78fa      	ldrb	r2, [r7, #3]
 8000dfe:	8a7b      	ldrh	r3, [r7, #18]
 8000e00:	493c      	ldr	r1, [pc, #240]	@ (8000ef4 <lcd_ShowChar+0x194>)
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	440a      	add	r2, r1
 8000e06:	4413      	add	r3, r2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	75fb      	strb	r3, [r7, #23]
 8000e0c:	e01b      	b.n	8000e46 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000e0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e12:	2b18      	cmp	r3, #24
 8000e14:	d10b      	bne.n	8000e2e <lcd_ShowChar+0xce>
 8000e16:	78fa      	ldrb	r2, [r7, #3]
 8000e18:	8a79      	ldrh	r1, [r7, #18]
 8000e1a:	4837      	ldr	r0, [pc, #220]	@ (8000ef8 <lcd_ShowChar+0x198>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	4403      	add	r3, r0
 8000e26:	440b      	add	r3, r1
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	75fb      	strb	r3, [r7, #23]
 8000e2c:	e00b      	b.n	8000e46 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000e2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e32:	2b20      	cmp	r3, #32
 8000e34:	d15a      	bne.n	8000eec <lcd_ShowChar+0x18c>
 8000e36:	78fa      	ldrb	r2, [r7, #3]
 8000e38:	8a7b      	ldrh	r3, [r7, #18]
 8000e3a:	4930      	ldr	r1, [pc, #192]	@ (8000efc <lcd_ShowChar+0x19c>)
 8000e3c:	0192      	lsls	r2, r2, #6
 8000e3e:	440a      	add	r2, r1
 8000e40:	4413      	add	r3, r2
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	75bb      	strb	r3, [r7, #22]
 8000e4a:	e044      	b.n	8000ed6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000e4c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d120      	bne.n	8000e96 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000e54:	7dfa      	ldrb	r2, [r7, #23]
 8000e56:	7dbb      	ldrb	r3, [r7, #22]
 8000e58:	fa42 f303 	asr.w	r3, r2, r3
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d004      	beq.n	8000e6e <lcd_ShowChar+0x10e>
 8000e64:	883b      	ldrh	r3, [r7, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fdd2 	bl	8000a10 <LCD_WR_DATA>
 8000e6c:	e003      	b.n	8000e76 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000e6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fdcd 	bl	8000a10 <LCD_WR_DATA>
				m++;
 8000e76:	7d7b      	ldrb	r3, [r7, #21]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000e7c:	7d7b      	ldrb	r3, [r7, #21]
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e84:	fb01 f202 	mul.w	r2, r1, r2
 8000e88:	1a9b      	subs	r3, r3, r2
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d11f      	bne.n	8000ed0 <lcd_ShowChar+0x170>
				{
					m=0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	757b      	strb	r3, [r7, #21]
					break;
 8000e94:	e022      	b.n	8000edc <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000e96:	7dfa      	ldrb	r2, [r7, #23]
 8000e98:	7dbb      	ldrb	r3, [r7, #22]
 8000e9a:	fa42 f303 	asr.w	r3, r2, r3
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d005      	beq.n	8000eb2 <lcd_ShowChar+0x152>
 8000ea6:	883a      	ldrh	r2, [r7, #0]
 8000ea8:	88b9      	ldrh	r1, [r7, #4]
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe85 	bl	8000bbc <lcd_DrawPoint>
				x++;
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000eb8:	88fa      	ldrh	r2, [r7, #6]
 8000eba:	8a3b      	ldrh	r3, [r7, #16]
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d105      	bne.n	8000ed0 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000ec4:	8a3b      	ldrh	r3, [r7, #16]
 8000ec6:	80fb      	strh	r3, [r7, #6]
					y++;
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	80bb      	strh	r3, [r7, #4]
					break;
 8000ece:	e005      	b.n	8000edc <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000ed0:	7dbb      	ldrb	r3, [r7, #22]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	75bb      	strb	r3, [r7, #22]
 8000ed6:	7dbb      	ldrb	r3, [r7, #22]
 8000ed8:	2b07      	cmp	r3, #7
 8000eda:	d9b7      	bls.n	8000e4c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000edc:	8a7b      	ldrh	r3, [r7, #18]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	827b      	strh	r3, [r7, #18]
 8000ee2:	8a7a      	ldrh	r2, [r7, #18]
 8000ee4:	89bb      	ldrh	r3, [r7, #12]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d380      	bcc.n	8000dec <lcd_ShowChar+0x8c>
 8000eea:	e000      	b.n	8000eee <lcd_ShowChar+0x18e>
		else return;
 8000eec:	bf00      	nop
				}
			}
		}
	}
}
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	08004ff8 	.word	0x08004ff8
 8000ef8:	080055e8 	.word	0x080055e8
 8000efc:	080067b8 	.word	0x080067b8

08000f00 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <lcd_SetDir+0x44>)
 8000f1c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f20:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <lcd_SetDir+0x44>)
 8000f24:	22f0      	movs	r2, #240	@ 0xf0
 8000f26:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000f28:	e006      	b.n	8000f38 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <lcd_SetDir+0x44>)
 8000f2c:	22f0      	movs	r2, #240	@ 0xf0
 8000f2e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <lcd_SetDir+0x44>)
 8000f32:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f36:	805a      	strh	r2, [r3, #2]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	20000100 	.word	0x20000100

08000f48 <lcd_init>:


void lcd_init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f52:	48aa      	ldr	r0, [pc, #680]	@ (80011fc <lcd_init+0x2b4>)
 8000f54:	f001 fbc6 	bl	80026e4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f5c:	f001 f8f0 	bl	8002140 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f66:	48a5      	ldr	r0, [pc, #660]	@ (80011fc <lcd_init+0x2b4>)
 8000f68:	f001 fbbc 	bl	80026e4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f70:	f001 f8e6 	bl	8002140 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff ffc3 	bl	8000f00 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000f7a:	20d3      	movs	r0, #211	@ 0xd3
 8000f7c:	f7ff fd38 	bl	80009f0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000f80:	f7ff fd56 	bl	8000a30 <LCD_RD_DATA>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b9d      	ldr	r3, [pc, #628]	@ (8001200 <lcd_init+0x2b8>)
 8000f8a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000f8c:	f7ff fd50 	bl	8000a30 <LCD_RD_DATA>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b9a      	ldr	r3, [pc, #616]	@ (8001200 <lcd_init+0x2b8>)
 8000f96:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000f98:	f7ff fd4a 	bl	8000a30 <LCD_RD_DATA>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b97      	ldr	r3, [pc, #604]	@ (8001200 <lcd_init+0x2b8>)
 8000fa2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000fa4:	4b96      	ldr	r3, [pc, #600]	@ (8001200 <lcd_init+0x2b8>)
 8000fa6:	889b      	ldrh	r3, [r3, #4]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b94      	ldr	r3, [pc, #592]	@ (8001200 <lcd_init+0x2b8>)
 8000fae:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000fb0:	f7ff fd3e 	bl	8000a30 <LCD_RD_DATA>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b91      	ldr	r3, [pc, #580]	@ (8001200 <lcd_init+0x2b8>)
 8000fba:	889b      	ldrh	r3, [r3, #4]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	4b8f      	ldr	r3, [pc, #572]	@ (8001200 <lcd_init+0x2b8>)
 8000fc2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000fc4:	20cf      	movs	r0, #207	@ 0xcf
 8000fc6:	f7ff fd13 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fd20 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000fd0:	20c1      	movs	r0, #193	@ 0xc1
 8000fd2:	f7ff fd1d 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000fd6:	2030      	movs	r0, #48	@ 0x30
 8000fd8:	f7ff fd1a 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000fdc:	20ed      	movs	r0, #237	@ 0xed
 8000fde:	f7ff fd07 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000fe2:	2064      	movs	r0, #100	@ 0x64
 8000fe4:	f7ff fd14 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f7ff fd11 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000fee:	2012      	movs	r0, #18
 8000ff0:	f7ff fd0e 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000ff4:	2081      	movs	r0, #129	@ 0x81
 8000ff6:	f7ff fd0b 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000ffa:	20e8      	movs	r0, #232	@ 0xe8
 8000ffc:	f7ff fcf8 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001000:	2085      	movs	r0, #133	@ 0x85
 8001002:	f7ff fd05 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001006:	2010      	movs	r0, #16
 8001008:	f7ff fd02 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800100c:	207a      	movs	r0, #122	@ 0x7a
 800100e:	f7ff fcff 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001012:	20cb      	movs	r0, #203	@ 0xcb
 8001014:	f7ff fcec 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001018:	2039      	movs	r0, #57	@ 0x39
 800101a:	f7ff fcf9 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800101e:	202c      	movs	r0, #44	@ 0x2c
 8001020:	f7ff fcf6 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fcf3 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800102a:	2034      	movs	r0, #52	@ 0x34
 800102c:	f7ff fcf0 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001030:	2002      	movs	r0, #2
 8001032:	f7ff fced 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001036:	20f7      	movs	r0, #247	@ 0xf7
 8001038:	f7ff fcda 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800103c:	2020      	movs	r0, #32
 800103e:	f7ff fce7 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001042:	20ea      	movs	r0, #234	@ 0xea
 8001044:	f7ff fcd4 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fce1 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff fcde 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001054:	20c0      	movs	r0, #192	@ 0xc0
 8001056:	f7ff fccb 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800105a:	201b      	movs	r0, #27
 800105c:	f7ff fcd8 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001060:	20c1      	movs	r0, #193	@ 0xc1
 8001062:	f7ff fcc5 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001066:	2001      	movs	r0, #1
 8001068:	f7ff fcd2 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800106c:	20c5      	movs	r0, #197	@ 0xc5
 800106e:	f7ff fcbf 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001072:	2030      	movs	r0, #48	@ 0x30
 8001074:	f7ff fccc 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001078:	2030      	movs	r0, #48	@ 0x30
 800107a:	f7ff fcc9 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800107e:	20c7      	movs	r0, #199	@ 0xc7
 8001080:	f7ff fcb6 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001084:	20b7      	movs	r0, #183	@ 0xb7
 8001086:	f7ff fcc3 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800108a:	2036      	movs	r0, #54	@ 0x36
 800108c:	f7ff fcb0 	bl	80009f0 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001090:	2008      	movs	r0, #8
 8001092:	f7ff fcbd 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001096:	203a      	movs	r0, #58	@ 0x3a
 8001098:	f7ff fcaa 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800109c:	2055      	movs	r0, #85	@ 0x55
 800109e:	f7ff fcb7 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80010a2:	20b1      	movs	r0, #177	@ 0xb1
 80010a4:	f7ff fca4 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fcb1 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80010ae:	201a      	movs	r0, #26
 80010b0:	f7ff fcae 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80010b4:	20b6      	movs	r0, #182	@ 0xb6
 80010b6:	f7ff fc9b 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80010ba:	200a      	movs	r0, #10
 80010bc:	f7ff fca8 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80010c0:	20a2      	movs	r0, #162	@ 0xa2
 80010c2:	f7ff fca5 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80010c6:	20f2      	movs	r0, #242	@ 0xf2
 80010c8:	f7ff fc92 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff fc9f 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80010d2:	2026      	movs	r0, #38	@ 0x26
 80010d4:	f7ff fc8c 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff fc99 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80010de:	20e0      	movs	r0, #224	@ 0xe0
 80010e0:	f7ff fc86 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80010e4:	200f      	movs	r0, #15
 80010e6:	f7ff fc93 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80010ea:	202a      	movs	r0, #42	@ 0x2a
 80010ec:	f7ff fc90 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80010f0:	2028      	movs	r0, #40	@ 0x28
 80010f2:	f7ff fc8d 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80010f6:	2008      	movs	r0, #8
 80010f8:	f7ff fc8a 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80010fc:	200e      	movs	r0, #14
 80010fe:	f7ff fc87 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001102:	2008      	movs	r0, #8
 8001104:	f7ff fc84 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001108:	2054      	movs	r0, #84	@ 0x54
 800110a:	f7ff fc81 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800110e:	20a9      	movs	r0, #169	@ 0xa9
 8001110:	f7ff fc7e 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001114:	2043      	movs	r0, #67	@ 0x43
 8001116:	f7ff fc7b 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800111a:	200a      	movs	r0, #10
 800111c:	f7ff fc78 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001120:	200f      	movs	r0, #15
 8001122:	f7ff fc75 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fc72 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff fc6f 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fc6c 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff fc69 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800113e:	20e1      	movs	r0, #225	@ 0xe1
 8001140:	f7ff fc56 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fc63 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800114a:	2015      	movs	r0, #21
 800114c:	f7ff fc60 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001150:	2017      	movs	r0, #23
 8001152:	f7ff fc5d 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001156:	2007      	movs	r0, #7
 8001158:	f7ff fc5a 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800115c:	2011      	movs	r0, #17
 800115e:	f7ff fc57 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001162:	2006      	movs	r0, #6
 8001164:	f7ff fc54 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001168:	202b      	movs	r0, #43	@ 0x2b
 800116a:	f7ff fc51 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800116e:	2056      	movs	r0, #86	@ 0x56
 8001170:	f7ff fc4e 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001174:	203c      	movs	r0, #60	@ 0x3c
 8001176:	f7ff fc4b 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800117a:	2005      	movs	r0, #5
 800117c:	f7ff fc48 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001180:	2010      	movs	r0, #16
 8001182:	f7ff fc45 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001186:	200f      	movs	r0, #15
 8001188:	f7ff fc42 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800118c:	203f      	movs	r0, #63	@ 0x3f
 800118e:	f7ff fc3f 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001192:	203f      	movs	r0, #63	@ 0x3f
 8001194:	f7ff fc3c 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001198:	200f      	movs	r0, #15
 800119a:	f7ff fc39 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800119e:	202b      	movs	r0, #43	@ 0x2b
 80011a0:	f7ff fc26 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff fc33 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fc30 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff fc2d 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80011b6:	203f      	movs	r0, #63	@ 0x3f
 80011b8:	f7ff fc2a 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80011bc:	202a      	movs	r0, #42	@ 0x2a
 80011be:	f7ff fc17 	bl	80009f0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fc24 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fc21 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff fc1e 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80011d4:	20ef      	movs	r0, #239	@ 0xef
 80011d6:	f7ff fc1b 	bl	8000a10 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80011da:	2011      	movs	r0, #17
 80011dc:	f7ff fc08 	bl	80009f0 <LCD_WR_REG>
	HAL_Delay(120);
 80011e0:	2078      	movs	r0, #120	@ 0x78
 80011e2:	f000 ffad 	bl	8002140 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80011e6:	2029      	movs	r0, #41	@ 0x29
 80011e8:	f7ff fc02 	bl	80009f0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80011ec:	2201      	movs	r2, #1
 80011ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f2:	4804      	ldr	r0, [pc, #16]	@ (8001204 <lcd_init+0x2bc>)
 80011f4:	f001 fa76 	bl	80026e4 <HAL_GPIO_WritePin>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40020800 	.word	0x40020800
 8001200:	20000100 	.word	0x20000100
 8001204:	40020000 	.word	0x40020000

08001208 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	b29b      	uxth	r3, r3
 800121e:	4413      	add	r3, r2
 8001220:	b298      	uxth	r0, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	b29a      	uxth	r2, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4413      	add	r3, r2
 800122c:	b29b      	uxth	r3, r3
 800122e:	8b3a      	ldrh	r2, [r7, #24]
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fcc3 	bl	8000bbc <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	b29b      	uxth	r3, r3
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b298      	uxth	r0, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	b29a      	uxth	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b29b      	uxth	r3, r3
 800124e:	8b3a      	ldrh	r2, [r7, #24]
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fcb3 	bl	8000bbc <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	b298      	uxth	r0, r3
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	b29a      	uxth	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	8b3a      	ldrh	r2, [r7, #24]
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fca3 	bl	8000bbc <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	b29a      	uxth	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	b29b      	uxth	r3, r3
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	b298      	uxth	r0, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	b29a      	uxth	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	b29b      	uxth	r3, r3
 800128e:	8b3a      	ldrh	r2, [r7, #24]
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fc93 	bl	8000bbc <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	b29a      	uxth	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	4413      	add	r3, r2
 80012a0:	b298      	uxth	r0, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	8b3a      	ldrh	r2, [r7, #24]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fc83 	bl	8000bbc <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b298      	uxth	r0, r3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	8b3a      	ldrh	r2, [r7, #24]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f7ff fc73 	bl	8000bbc <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4413      	add	r3, r2
 80012e0:	b298      	uxth	r0, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	8b3a      	ldrh	r2, [r7, #24]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fc63 	bl	8000bbc <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	b298      	uxth	r0, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	b29b      	uxth	r3, r3
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	8b3a      	ldrh	r2, [r7, #24]
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc53 	bl	8000bbc <lcd_DrawPoint>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b08a      	sub	sp, #40	@ 0x28
 8001322:	af02      	add	r7, sp, #8
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	f1c3 0303 	rsb	r3, r3, #3
 800133e:	613b      	str	r3, [r7, #16]


	if (fill)
 8001340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001342:	2b00      	cmp	r3, #0
 8001344:	d04f      	beq.n	80013e6 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001346:	e029      	b.n	800139c <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e00a      	b.n	8001364 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f7ff ff55 	bl	8001208 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	429a      	cmp	r2, r3
 800136a:	ddf0      	ble.n	800134e <lcd_DrawCircle+0x30>

			if (d < 0) {
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	da06      	bge.n	8001380 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	009a      	lsls	r2, r3, #2
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4413      	add	r3, r2
 800137a:	3306      	adds	r3, #6
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	e00a      	b.n	8001396 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	009a      	lsls	r2, r3, #2
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4413      	add	r3, r2
 800138c:	330a      	adds	r3, #10
 800138e:	613b      	str	r3, [r7, #16]
				y--;
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	3b01      	subs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3301      	adds	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	ddd1      	ble.n	8001348 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80013a4:	e023      	b.n	80013ee <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff ff29 	bl	8001208 <_draw_circle_8>
			if (d < 0) {
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da06      	bge.n	80013ca <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	009a      	lsls	r2, r3, #2
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4413      	add	r3, r2
 80013c4:	3306      	adds	r3, #6
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	e00a      	b.n	80013e0 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	009a      	lsls	r2, r3, #2
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4413      	add	r3, r2
 80013d6:	330a      	adds	r3, #10
 80013d8:	613b      	str	r3, [r7, #16]
				y--;
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	3b01      	subs	r3, #1
 80013de:	61bb      	str	r3, [r7, #24]
			x++;
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	3301      	adds	r3, #1
 80013e4:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	dddb      	ble.n	80013a6 <lcd_DrawCircle+0x88>
}
 80013ee:	bf00      	nop
 80013f0:	3720      	adds	r7, #32
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b08b      	sub	sp, #44	@ 0x2c
 80013fc:	af04      	add	r7, sp, #16
 80013fe:	60ba      	str	r2, [r7, #8]
 8001400:	461a      	mov	r2, r3
 8001402:	4603      	mov	r3, r0
 8001404:	81fb      	strh	r3, [r7, #14]
 8001406:	460b      	mov	r3, r1
 8001408:	81bb      	strh	r3, [r7, #12]
 800140a:	4613      	mov	r3, r2
 800140c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001416:	e048      	b.n	80014aa <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d145      	bne.n	80014aa <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800141e:	89fa      	ldrh	r2, [r7, #14]
 8001420:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <lcd_ShowStr+0xc4>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800142a:	085b      	lsrs	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	1acb      	subs	r3, r1, r3
 8001430:	429a      	cmp	r2, r3
 8001432:	dc3f      	bgt.n	80014b4 <lcd_ShowStr+0xbc>
 8001434:	89ba      	ldrh	r2, [r7, #12]
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <lcd_ShowStr+0xc4>)
 8001438:	885b      	ldrh	r3, [r3, #2]
 800143a:	4619      	mov	r1, r3
 800143c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001440:	1acb      	subs	r3, r1, r3
 8001442:	429a      	cmp	r2, r3
 8001444:	dc36      	bgt.n	80014b4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b80      	cmp	r3, #128	@ 0x80
 800144c:	d902      	bls.n	8001454 <lcd_ShowStr+0x5c>
 800144e:	2301      	movs	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
 8001452:	e02a      	b.n	80014aa <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b0d      	cmp	r3, #13
 800145a:	d10b      	bne.n	8001474 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800145c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001460:	b29a      	uxth	r2, r3
 8001462:	89bb      	ldrh	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001468:	8abb      	ldrh	r3, [r7, #20]
 800146a:	81fb      	strh	r3, [r7, #14]
					str++;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3301      	adds	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	e017      	b.n	80014a4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	781a      	ldrb	r2, [r3, #0]
 8001478:	88fc      	ldrh	r4, [r7, #6]
 800147a:	89b9      	ldrh	r1, [r7, #12]
 800147c:	89f8      	ldrh	r0, [r7, #14]
 800147e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	4623      	mov	r3, r4
 8001490:	f7ff fc66 	bl	8000d60 <lcd_ShowChar>
					x+=sizey/2;
 8001494:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	89fb      	ldrh	r3, [r7, #14]
 80014a0:	4413      	add	r3, r2
 80014a2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	3301      	adds	r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1b2      	bne.n	8001418 <lcd_ShowStr+0x20>
 80014b2:	e000      	b.n	80014b6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014b4:	bf00      	nop
			}
		}
	}
}
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	20000100 	.word	0x20000100

080014c0 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af04      	add	r7, sp, #16
 80014c6:	60ba      	str	r2, [r7, #8]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	81fb      	strh	r3, [r7, #14]
 80014ce:	460b      	mov	r3, r1
 80014d0:	81bb      	strh	r3, [r7, #12]
 80014d2:	4613      	mov	r3, r2
 80014d4:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 80014d6:	68b8      	ldr	r0, [r7, #8]
 80014d8:	f7fe fe7a 	bl	80001d0 <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <lcd_StrCenter+0x60>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	8afb      	ldrh	r3, [r7, #22]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	0fda      	lsrs	r2, r3, #31
 80014ee:	4413      	add	r3, r2
 80014f0:	105b      	asrs	r3, r3, #1
 80014f2:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80014f4:	89fa      	ldrh	r2, [r7, #14]
 80014f6:	8abb      	ldrh	r3, [r7, #20]
 80014f8:	4413      	add	r3, r2
 80014fa:	b298      	uxth	r0, r3
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	89b9      	ldrh	r1, [r7, #12]
 8001500:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	8c3b      	ldrh	r3, [r7, #32]
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f7ff ff70 	bl	80013f8 <lcd_ShowStr>
}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000100 	.word	0x20000100

08001524 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	2140      	movs	r1, #64	@ 0x40
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <led7_init+0x14>)
 800152e:	f001 f8d9 	bl	80026e4 <HAL_GPIO_WritePin>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021800 	.word	0x40021800

0800153c <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001540:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <led7_Scan+0x104>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b3d      	ldr	r3, [pc, #244]	@ (8001640 <led7_Scan+0x104>)
 800154a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800154c:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <led7_Scan+0x108>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b3d      	ldr	r3, [pc, #244]	@ (8001648 <led7_Scan+0x10c>)
 8001554:	5c9b      	ldrb	r3, [r3, r2]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	4b39      	ldr	r3, [pc, #228]	@ (8001640 <led7_Scan+0x104>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21b      	sxth	r3, r3
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <led7_Scan+0x104>)
 8001568:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800156a:	4b36      	ldr	r3, [pc, #216]	@ (8001644 <led7_Scan+0x108>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d846      	bhi.n	8001600 <led7_Scan+0xc4>
 8001572:	a201      	add	r2, pc, #4	@ (adr r2, 8001578 <led7_Scan+0x3c>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001589 	.word	0x08001589
 800157c:	080015a7 	.word	0x080015a7
 8001580:	080015c5 	.word	0x080015c5
 8001584:	080015e3 	.word	0x080015e3
	case 0:
		spi_buffer |= 0x00b0;
 8001588:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <led7_Scan+0x104>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b2b      	ldr	r3, [pc, #172]	@ (8001640 <led7_Scan+0x104>)
 8001594:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <led7_Scan+0x104>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <led7_Scan+0x104>)
 80015a2:	801a      	strh	r2, [r3, #0]
		break;
 80015a4:	e02d      	b.n	8001602 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80015a6:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <led7_Scan+0x104>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <led7_Scan+0x104>)
 80015b2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80015b4:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <led7_Scan+0x104>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	f023 0320 	bic.w	r3, r3, #32
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <led7_Scan+0x104>)
 80015c0:	801a      	strh	r2, [r3, #0]
		break;
 80015c2:	e01e      	b.n	8001602 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <led7_Scan+0x104>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <led7_Scan+0x104>)
 80015d0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80015d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <led7_Scan+0x104>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	f023 0310 	bic.w	r3, r3, #16
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <led7_Scan+0x104>)
 80015de:	801a      	strh	r2, [r3, #0]
		break;
 80015e0:	e00f      	b.n	8001602 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <led7_Scan+0x104>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <led7_Scan+0x104>)
 80015ee:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <led7_Scan+0x104>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <led7_Scan+0x104>)
 80015fc:	801a      	strh	r2, [r3, #0]
		break;
 80015fe:	e000      	b.n	8001602 <led7_Scan+0xc6>
	default:
		break;
 8001600:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <led7_Scan+0x108>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	425a      	negs	r2, r3
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	f002 0203 	and.w	r2, r2, #3
 8001612:	bf58      	it	pl
 8001614:	4253      	negpl	r3, r2
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <led7_Scan+0x108>)
 800161a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2140      	movs	r1, #64	@ 0x40
 8001620:	480a      	ldr	r0, [pc, #40]	@ (800164c <led7_Scan+0x110>)
 8001622:	f001 f85f 	bl	80026e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001626:	2301      	movs	r3, #1
 8001628:	2202      	movs	r2, #2
 800162a:	4905      	ldr	r1, [pc, #20]	@ (8001640 <led7_Scan+0x104>)
 800162c:	4808      	ldr	r0, [pc, #32]	@ (8001650 <led7_Scan+0x114>)
 800162e:	f001 fd60 	bl	80030f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001632:	2201      	movs	r2, #1
 8001634:	2140      	movs	r1, #64	@ 0x40
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <led7_Scan+0x110>)
 8001638:	f001 f854 	bl	80026e4 <HAL_GPIO_WritePin>
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000004 	.word	0x20000004
 8001644:	20000106 	.word	0x20000106
 8001648:	20000000 	.word	0x20000000
 800164c:	40021800 	.word	0x40021800
 8001650:	20000110 	.word	0x20000110

08001654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001658:	f000 fd00 	bl	800205c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165c:	f000 f820 	bl	80016a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001660:	f7ff f8ce 	bl	8000800 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001664:	f000 fa26 	bl	8001ab4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001668:	f000 f8fc 	bl	8001864 <MX_SPI1_Init>
  MX_FSMC_Init();
 800166c:	f7fe fff8 	bl	8000660 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001670:	f000 f880 	bl	8001774 <system_init>
  lcd_Clear(WHITE);
 8001674:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001678:	f7ff fa38 	bl	8000aec <lcd_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 800167c:	bf00      	nop
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <main+0x48>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0fb      	beq.n	800167e <main+0x2a>
	  flag_timer2 = 0;
 8001686:	4b05      	ldr	r3, [pc, #20]	@ (800169c <main+0x48>)
 8001688:	2200      	movs	r2, #0
 800168a:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800168c:	f7fe ff7c 	bl	8000588 <button_Scan>
	  traffic_FSM();
 8001690:	f000 fa9e 	bl	8001bd0 <traffic_FSM>
	  traffic_HandleButtons();
 8001694:	f000 fc20 	bl	8001ed8 <traffic_HandleButtons>
	  while(!flag_timer2);
 8001698:	e7f0      	b.n	800167c <main+0x28>
 800169a:	bf00      	nop
 800169c:	20000108 	.word	0x20000108

080016a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b094      	sub	sp, #80	@ 0x50
 80016a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	2230      	movs	r2, #48	@ 0x30
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f002 fff4 	bl	800469c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	4b28      	ldr	r3, [pc, #160]	@ (800176c <SystemClock_Config+0xcc>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	4a27      	ldr	r2, [pc, #156]	@ (800176c <SystemClock_Config+0xcc>)
 80016ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d4:	4b25      	ldr	r3, [pc, #148]	@ (800176c <SystemClock_Config+0xcc>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <SystemClock_Config+0xd0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a21      	ldr	r2, [pc, #132]	@ (8001770 <SystemClock_Config+0xd0>)
 80016ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <SystemClock_Config+0xd0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016fc:	2302      	movs	r3, #2
 80016fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001700:	2301      	movs	r3, #1
 8001702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001704:	2310      	movs	r3, #16
 8001706:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001708:	2302      	movs	r3, #2
 800170a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800170c:	2300      	movs	r3, #0
 800170e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001710:	2308      	movs	r3, #8
 8001712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001714:	23a8      	movs	r3, #168	@ 0xa8
 8001716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001718:	2302      	movs	r3, #2
 800171a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800171c:	2304      	movs	r3, #4
 800171e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001720:	f107 0320 	add.w	r3, r7, #32
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fff7 	bl	8002718 <HAL_RCC_OscConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001730:	f000 f842 	bl	80017b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001734:	230f      	movs	r3, #15
 8001736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001738:	2302      	movs	r3, #2
 800173a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001746:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800174a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	2105      	movs	r1, #5
 8001752:	4618      	mov	r0, r3
 8001754:	f001 fa58 	bl	8002c08 <HAL_RCC_ClockConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800175e:	f000 f82b 	bl	80017b8 <Error_Handler>
  }
}
 8001762:	bf00      	nop
 8001764:	3750      	adds	r7, #80	@ 0x50
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40007000 	.word	0x40007000

08001774 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	2120      	movs	r1, #32
 800177c:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <system_init+0x40>)
 800177e:	f000 ffb1 	bl	80026e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2140      	movs	r1, #64	@ 0x40
 8001786:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <system_init+0x40>)
 8001788:	f000 ffac 	bl	80026e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2110      	movs	r1, #16
 8001790:	4808      	ldr	r0, [pc, #32]	@ (80017b4 <system_init+0x40>)
 8001792:	f000 ffa7 	bl	80026e4 <HAL_GPIO_WritePin>
	  timer_init();
 8001796:	f000 f815 	bl	80017c4 <timer_init>
	  led7_init();
 800179a:	f7ff fec3 	bl	8001524 <led7_init>
	  button_init();
 800179e:	f7fe fee7 	bl	8000570 <button_init>
	  lcd_init();
 80017a2:	f7ff fbd1 	bl	8000f48 <lcd_init>
	  setTimer2(50);
 80017a6:	2032      	movs	r0, #50	@ 0x32
 80017a8:	f000 f816 	bl	80017d8 <setTimer2>
	  traffic_Init();
 80017ac:	f000 f9f4 	bl	8001b98 <traffic_Init>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <Error_Handler+0x8>

080017c4 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <timer_init+0x10>)
 80017ca:	f002 fa45 	bl	8003c58 <HAL_TIM_Base_Start_IT>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000016c 	.word	0x2000016c

080017d8 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80017e2:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <setTimer2+0x2c>)
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <setTimer2+0x2c>)
 80017ea:	881a      	ldrh	r2, [r3, #0]
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <setTimer2+0x30>)
 80017ee:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <setTimer2+0x34>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	801a      	strh	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2000010c 	.word	0x2000010c
 8001808:	2000010a 	.word	0x2000010a
 800180c:	20000108 	.word	0x20000108

08001810 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001820:	d116      	bne.n	8001850 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001822:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d010      	beq.n	800184c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001834:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d106      	bne.n	800184c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001840:	2201      	movs	r2, #1
 8001842:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800184a:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 800184c:	f7ff fe76 	bl	800153c <led7_Scan>
	}
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000010a 	.word	0x2000010a
 800185c:	20000108 	.word	0x20000108
 8001860:	2000010c 	.word	0x2000010c

08001864 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <MX_SPI1_Init+0x64>)
 800186a:	4a18      	ldr	r2, [pc, #96]	@ (80018cc <MX_SPI1_Init+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <MX_SPI1_Init+0x64>)
 8001870:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <MX_SPI1_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <MX_SPI1_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <MX_SPI1_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <MX_SPI1_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <MX_SPI1_Init+0x64>)
 8001890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001896:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <MX_SPI1_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800189c:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <MX_SPI1_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <MX_SPI1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a8:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <MX_SPI1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <MX_SPI1_Init+0x64>)
 80018b0:	220a      	movs	r2, #10
 80018b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <MX_SPI1_Init+0x64>)
 80018b6:	f001 fb93 	bl	8002fe0 <HAL_SPI_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018c0:	f7ff ff7a 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000110 	.word	0x20000110
 80018cc:	40013000 	.word	0x40013000

080018d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	@ 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <HAL_SPI_MspInit+0x84>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d12b      	bne.n	800194a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <HAL_SPI_MspInit+0x88>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	4a17      	ldr	r2, [pc, #92]	@ (8001958 <HAL_SPI_MspInit+0x88>)
 80018fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001900:	6453      	str	r3, [r2, #68]	@ 0x44
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <HAL_SPI_MspInit+0x88>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <HAL_SPI_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a10      	ldr	r2, [pc, #64]	@ (8001958 <HAL_SPI_MspInit+0x88>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <HAL_SPI_MspInit+0x88>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800192a:	2338      	movs	r3, #56	@ 0x38
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193a:	2305      	movs	r3, #5
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	@ (800195c <HAL_SPI_MspInit+0x8c>)
 8001946:	f000 fd31 	bl	80023ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	@ 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40013000 	.word	0x40013000
 8001958:	40023800 	.word	0x40023800
 800195c:	40020400 	.word	0x40020400

08001960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <HAL_MspInit+0x4c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	4a0f      	ldr	r2, [pc, #60]	@ (80019ac <HAL_MspInit+0x4c>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001974:	6453      	str	r3, [r2, #68]	@ 0x44
 8001976:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <HAL_MspInit+0x4c>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <HAL_MspInit+0x4c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_MspInit+0x4c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <NMI_Handler+0x4>

080019b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <MemManage_Handler+0x4>

080019c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a06:	f000 fb7b 	bl	8002100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <TIM2_IRQHandler+0x10>)
 8001a16:	f002 f98f 	bl	8003d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2000016c 	.word	0x2000016c

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	@ (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	@ (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	@ (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f002 fe2a 	bl	80046ac <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	@ (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20020000 	.word	0x20020000
 8001a84:	00000400 	.word	0x00000400
 8001a88:	20000168 	.word	0x20000168
 8001a8c:	20000318 	.word	0x20000318

08001a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <SystemInit+0x20>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a9a:	4a05      	ldr	r2, [pc, #20]	@ (8001ab0 <SystemInit+0x20>)
 8001a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001ad2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ad6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001ada:	f240 3247 	movw	r2, #839	@ 0x347
 8001ade:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001ae8:	2263      	movs	r2, #99	@ 0x63
 8001aea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af8:	4813      	ldr	r0, [pc, #76]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001afa:	f002 f85d 	bl	8003bb8 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b04:	f7ff fe58 	bl	80017b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	4619      	mov	r1, r3
 8001b14:	480c      	ldr	r0, [pc, #48]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001b16:	f002 fa17 	bl	8003f48 <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b20:	f7ff fe4a 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <MX_TIM2_Init+0x94>)
 8001b32:	f002 fc33 	bl	800439c <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b3c:	f7ff fe3c 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000016c 	.word	0x2000016c

08001b4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b5c:	d115      	bne.n	8001b8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <HAL_TIM_Base_MspInit+0x48>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	4a0b      	ldr	r2, [pc, #44]	@ (8001b94 <HAL_TIM_Base_MspInit+0x48>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <HAL_TIM_Base_MspInit+0x48>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	201c      	movs	r0, #28
 8001b80:	f000 fbdd 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b84:	201c      	movs	r0, #28
 8001b86:	f000 fbf6 	bl	8002376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <traffic_Init>:
static TrafficTiming timing = {20, 15, 5}; // Default timings
static uint32_t stateTimer = 0;
static uint8_t blinkTimer = 0;
static uint8_t showBlink = 0;

void traffic_Init(void) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af04      	add	r7, sp, #16
    lcd_Clear(WHITE);
 8001b9e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ba2:	f7fe ffa3 	bl	8000aec <lcd_Clear>
    lcd_StrCenter(0, 2, "Traffic Light Control", BLACK, WHITE, 16, 1);
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	9302      	str	r3, [sp, #8]
 8001baa:	2310      	movs	r3, #16
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	4a05      	ldr	r2, [pc, #20]	@ (8001bcc <traffic_Init+0x34>)
 8001bb8:	2102      	movs	r1, #2
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7ff fc80 	bl	80014c0 <lcd_StrCenter>
    traffic_DrawLights();
 8001bc0:	f000 f88c 	bl	8001cdc <traffic_DrawLights>
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	08004fb4 	.word	0x08004fb4

08001bd0 <traffic_FSM>:

void traffic_FSM(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
    static uint32_t lastTick = 0;
    uint32_t currentTick = HAL_GetTick();
 8001bd6:	f000 faa7 	bl	8002128 <HAL_GetTick>
 8001bda:	6078      	str	r0, [r7, #4]
    
    // Update every 500ms
    if (currentTick - lastTick >= 500) {
 8001bdc:	4b39      	ldr	r3, [pc, #228]	@ (8001cc4 <traffic_FSM+0xf4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001be8:	d367      	bcc.n	8001cba <traffic_FSM+0xea>
        lastTick = currentTick;
 8001bea:	4a36      	ldr	r2, [pc, #216]	@ (8001cc4 <traffic_FSM+0xf4>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6013      	str	r3, [r2, #0]
        blinkTimer ^= 1;
 8001bf0:	4b35      	ldr	r3, [pc, #212]	@ (8001cc8 <traffic_FSM+0xf8>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	f083 0301 	eor.w	r3, r3, #1
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b33      	ldr	r3, [pc, #204]	@ (8001cc8 <traffic_FSM+0xf8>)
 8001bfc:	701a      	strb	r2, [r3, #0]
        
        if (currentMode == MODE_NORMAL) {
 8001bfe:	4b33      	ldr	r3, [pc, #204]	@ (8001ccc <traffic_FSM+0xfc>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d157      	bne.n	8001cb6 <traffic_FSM+0xe6>
            stateTimer++;
 8001c06:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <traffic_FSM+0x100>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	4a30      	ldr	r2, [pc, #192]	@ (8001cd0 <traffic_FSM+0x100>)
 8001c0e:	6013      	str	r3, [r2, #0]
            switch (currentState) {
 8001c10:	4b30      	ldr	r3, [pc, #192]	@ (8001cd4 <traffic_FSM+0x104>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d84e      	bhi.n	8001cb6 <traffic_FSM+0xe6>
 8001c18:	a201      	add	r2, pc, #4	@ (adr r2, 8001c20 <traffic_FSM+0x50>)
 8001c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1e:	bf00      	nop
 8001c20:	08001c31 	.word	0x08001c31
 8001c24:	08001c4f 	.word	0x08001c4f
 8001c28:	08001c6d 	.word	0x08001c6d
 8001c2c:	08001c8b 	.word	0x08001c8b
                case STATE_RED_GREEN:
                    if (stateTimer >= timing.greenTime * 2) {
 8001c30:	4b29      	ldr	r3, [pc, #164]	@ (8001cd8 <traffic_FSM+0x108>)
 8001c32:	785b      	ldrb	r3, [r3, #1]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <traffic_FSM+0x100>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d833      	bhi.n	8001ca8 <traffic_FSM+0xd8>
                        currentState = STATE_RED_YELLOW;
 8001c40:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <traffic_FSM+0x104>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
                        stateTimer = 0;
 8001c46:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <traffic_FSM+0x100>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
                    }
                    break;
 8001c4c:	e02c      	b.n	8001ca8 <traffic_FSM+0xd8>
                    
                case STATE_RED_YELLOW:
                    if (stateTimer >= timing.yellowTime * 2) {
 8001c4e:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <traffic_FSM+0x108>)
 8001c50:	789b      	ldrb	r3, [r3, #2]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <traffic_FSM+0x100>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d826      	bhi.n	8001cac <traffic_FSM+0xdc>
                        currentState = STATE_GREEN_RED;
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <traffic_FSM+0x104>)
 8001c60:	2202      	movs	r2, #2
 8001c62:	701a      	strb	r2, [r3, #0]
                        stateTimer = 0;
 8001c64:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd0 <traffic_FSM+0x100>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
                    }
                    break;
 8001c6a:	e01f      	b.n	8001cac <traffic_FSM+0xdc>
                    
                case STATE_GREEN_RED:
                    if (stateTimer >= timing.greenTime * 2) {
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <traffic_FSM+0x108>)
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <traffic_FSM+0x100>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d819      	bhi.n	8001cb0 <traffic_FSM+0xe0>
                        currentState = STATE_YELLOW_RED;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <traffic_FSM+0x104>)
 8001c7e:	2203      	movs	r2, #3
 8001c80:	701a      	strb	r2, [r3, #0]
                        stateTimer = 0;
 8001c82:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <traffic_FSM+0x100>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
                    }
                    break;
 8001c88:	e012      	b.n	8001cb0 <traffic_FSM+0xe0>
                    
                case STATE_YELLOW_RED:
                    if (stateTimer >= timing.yellowTime * 2) {
 8001c8a:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <traffic_FSM+0x108>)
 8001c8c:	789b      	ldrb	r3, [r3, #2]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <traffic_FSM+0x100>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d80c      	bhi.n	8001cb4 <traffic_FSM+0xe4>
                        currentState = STATE_RED_GREEN;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <traffic_FSM+0x104>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
                        stateTimer = 0;
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <traffic_FSM+0x100>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
                    }
                    break;
 8001ca6:	e005      	b.n	8001cb4 <traffic_FSM+0xe4>
                    break;
 8001ca8:	bf00      	nop
 8001caa:	e004      	b.n	8001cb6 <traffic_FSM+0xe6>
                    break;
 8001cac:	bf00      	nop
 8001cae:	e002      	b.n	8001cb6 <traffic_FSM+0xe6>
                    break;
 8001cb0:	bf00      	nop
 8001cb2:	e000      	b.n	8001cb6 <traffic_FSM+0xe6>
                    break;
 8001cb4:	bf00      	nop
            }
        }
        traffic_DrawLights();
 8001cb6:	f000 f811 	bl	8001cdc <traffic_DrawLights>
    }
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200001c0 	.word	0x200001c0
 8001cc8:	200001bc 	.word	0x200001bc
 8001ccc:	2000000c 	.word	0x2000000c
 8001cd0:	200001b8 	.word	0x200001b8
 8001cd4:	200001b4 	.word	0x200001b4
 8001cd8:	20000010 	.word	0x20000010

08001cdc <traffic_DrawLights>:

void traffic_DrawLights(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	@ 0x30
 8001ce0:	af04      	add	r7, sp, #16
    // Clear previous lights
    lcd_Fill(20, 50, 220, 200, WHITE);
 8001ce2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	23c8      	movs	r3, #200	@ 0xc8
 8001cea:	22dc      	movs	r2, #220	@ 0xdc
 8001cec:	2132      	movs	r1, #50	@ 0x32
 8001cee:	2014      	movs	r0, #20
 8001cf0:	f7fe ff2e 	bl	8000b50 <lcd_Fill>
    
    // Draw traffic light frames
    lcd_DrawRectangle(40, 60, 100, 180, BLACK);
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	23b4      	movs	r3, #180	@ 0xb4
 8001cfa:	2264      	movs	r2, #100	@ 0x64
 8001cfc:	213c      	movs	r1, #60	@ 0x3c
 8001cfe:	2028      	movs	r0, #40	@ 0x28
 8001d00:	f7fe fff7 	bl	8000cf2 <lcd_DrawRectangle>
    lcd_DrawRectangle(140, 60, 200, 180, BLACK);
 8001d04:	2300      	movs	r3, #0
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	23b4      	movs	r3, #180	@ 0xb4
 8001d0a:	22c8      	movs	r2, #200	@ 0xc8
 8001d0c:	213c      	movs	r1, #60	@ 0x3c
 8001d0e:	208c      	movs	r0, #140	@ 0x8c
 8001d10:	f7fe ffef 	bl	8000cf2 <lcd_DrawRectangle>
    
    // Draw lights based on current state and mode
    if (currentMode == MODE_NORMAL) {
 8001d14:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec0 <traffic_DrawLights+0x1e4>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d154      	bne.n	8001dc6 <traffic_DrawLights+0xea>
        // First traffic light
        switch (currentState) {
 8001d1c:	4b69      	ldr	r3, [pc, #420]	@ (8001ec4 <traffic_DrawLights+0x1e8>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d01d      	beq.n	8001d60 <traffic_DrawLights+0x84>
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	dc25      	bgt.n	8001d74 <traffic_DrawLights+0x98>
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	dc02      	bgt.n	8001d32 <traffic_DrawLights+0x56>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	da03      	bge.n	8001d38 <traffic_DrawLights+0x5c>
 8001d30:	e020      	b.n	8001d74 <traffic_DrawLights+0x98>
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d00a      	beq.n	8001d4c <traffic_DrawLights+0x70>
 8001d36:	e01d      	b.n	8001d74 <traffic_DrawLights+0x98>
            case STATE_RED_GREEN:
            case STATE_RED_YELLOW:
                lcd_DrawCircle(70, 90, RED, 15, 1);
 8001d38:	2301      	movs	r3, #1
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001d42:	215a      	movs	r1, #90	@ 0x5a
 8001d44:	2046      	movs	r0, #70	@ 0x46
 8001d46:	f7ff faea 	bl	800131e <lcd_DrawCircle>
                break;
 8001d4a:	e013      	b.n	8001d74 <traffic_DrawLights+0x98>
            case STATE_GREEN_RED:
                lcd_DrawCircle(70, 130, GREEN, 15, 1);
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	230f      	movs	r3, #15
 8001d52:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d56:	2182      	movs	r1, #130	@ 0x82
 8001d58:	2046      	movs	r0, #70	@ 0x46
 8001d5a:	f7ff fae0 	bl	800131e <lcd_DrawCircle>
                break;
 8001d5e:	e009      	b.n	8001d74 <traffic_DrawLights+0x98>
            case STATE_YELLOW_RED:
                lcd_DrawCircle(70, 160, YELLOW, 15, 1);
 8001d60:	2301      	movs	r3, #1
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	230f      	movs	r3, #15
 8001d66:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001d6a:	21a0      	movs	r1, #160	@ 0xa0
 8001d6c:	2046      	movs	r0, #70	@ 0x46
 8001d6e:	f7ff fad6 	bl	800131e <lcd_DrawCircle>
                break;
 8001d72:	bf00      	nop
        }
        
        // Second traffic light
        switch (currentState) {
 8001d74:	4b53      	ldr	r3, [pc, #332]	@ (8001ec4 <traffic_DrawLights+0x1e8>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	dc6c      	bgt.n	8001e56 <traffic_DrawLights+0x17a>
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	da18      	bge.n	8001db2 <traffic_DrawLights+0xd6>
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <traffic_DrawLights+0xae>
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d00a      	beq.n	8001d9e <traffic_DrawLights+0xc2>
 8001d88:	e065      	b.n	8001e56 <traffic_DrawLights+0x17a>
            case STATE_RED_GREEN:
                lcd_DrawCircle(170, 130, GREEN, 15, 1);
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	230f      	movs	r3, #15
 8001d90:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d94:	2182      	movs	r1, #130	@ 0x82
 8001d96:	20aa      	movs	r0, #170	@ 0xaa
 8001d98:	f7ff fac1 	bl	800131e <lcd_DrawCircle>
                break;
 8001d9c:	e05b      	b.n	8001e56 <traffic_DrawLights+0x17a>
            case STATE_RED_YELLOW:
                lcd_DrawCircle(170, 160, YELLOW, 15, 1);
 8001d9e:	2301      	movs	r3, #1
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	230f      	movs	r3, #15
 8001da4:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001da8:	21a0      	movs	r1, #160	@ 0xa0
 8001daa:	20aa      	movs	r0, #170	@ 0xaa
 8001dac:	f7ff fab7 	bl	800131e <lcd_DrawCircle>
                break;
 8001db0:	e051      	b.n	8001e56 <traffic_DrawLights+0x17a>
            case STATE_GREEN_RED:
            case STATE_YELLOW_RED:
                lcd_DrawCircle(170, 90, RED, 15, 1);
 8001db2:	2301      	movs	r3, #1
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	230f      	movs	r3, #15
 8001db8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001dbc:	215a      	movs	r1, #90	@ 0x5a
 8001dbe:	20aa      	movs	r0, #170	@ 0xaa
 8001dc0:	f7ff faad 	bl	800131e <lcd_DrawCircle>
                break;
 8001dc4:	e047      	b.n	8001e56 <traffic_DrawLights+0x17a>
        }
    } else {
        // Modification modes - blink the respective light
        if (blinkTimer) {
 8001dc6:	4b40      	ldr	r3, [pc, #256]	@ (8001ec8 <traffic_DrawLights+0x1ec>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d043      	beq.n	8001e56 <traffic_DrawLights+0x17a>
            switch (currentMode) {
 8001dce:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec0 <traffic_DrawLights+0x1e4>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d02c      	beq.n	8001e30 <traffic_DrawLights+0x154>
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	dc3d      	bgt.n	8001e56 <traffic_DrawLights+0x17a>
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d002      	beq.n	8001de4 <traffic_DrawLights+0x108>
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d013      	beq.n	8001e0a <traffic_DrawLights+0x12e>
 8001de2:	e038      	b.n	8001e56 <traffic_DrawLights+0x17a>
                case MODE_RED_MODIFY:
                    lcd_DrawCircle(70, 90, RED, 15, 1);
 8001de4:	2301      	movs	r3, #1
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	230f      	movs	r3, #15
 8001dea:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001dee:	215a      	movs	r1, #90	@ 0x5a
 8001df0:	2046      	movs	r0, #70	@ 0x46
 8001df2:	f7ff fa94 	bl	800131e <lcd_DrawCircle>
                    lcd_DrawCircle(170, 90, RED, 15, 1);
 8001df6:	2301      	movs	r3, #1
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	230f      	movs	r3, #15
 8001dfc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001e00:	215a      	movs	r1, #90	@ 0x5a
 8001e02:	20aa      	movs	r0, #170	@ 0xaa
 8001e04:	f7ff fa8b 	bl	800131e <lcd_DrawCircle>
                    break;
 8001e08:	e025      	b.n	8001e56 <traffic_DrawLights+0x17a>
                case MODE_GREEN_MODIFY:
                    lcd_DrawCircle(70, 130, GREEN, 15, 1);
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	230f      	movs	r3, #15
 8001e10:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001e14:	2182      	movs	r1, #130	@ 0x82
 8001e16:	2046      	movs	r0, #70	@ 0x46
 8001e18:	f7ff fa81 	bl	800131e <lcd_DrawCircle>
                    lcd_DrawCircle(170, 130, GREEN, 15, 1);
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	230f      	movs	r3, #15
 8001e22:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001e26:	2182      	movs	r1, #130	@ 0x82
 8001e28:	20aa      	movs	r0, #170	@ 0xaa
 8001e2a:	f7ff fa78 	bl	800131e <lcd_DrawCircle>
                    break;
 8001e2e:	e012      	b.n	8001e56 <traffic_DrawLights+0x17a>
                case MODE_YELLOW_MODIFY:
                    lcd_DrawCircle(70, 160, YELLOW, 15, 1);
 8001e30:	2301      	movs	r3, #1
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	230f      	movs	r3, #15
 8001e36:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001e3a:	21a0      	movs	r1, #160	@ 0xa0
 8001e3c:	2046      	movs	r0, #70	@ 0x46
 8001e3e:	f7ff fa6e 	bl	800131e <lcd_DrawCircle>
                    lcd_DrawCircle(170, 160, YELLOW, 15, 1);
 8001e42:	2301      	movs	r3, #1
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	230f      	movs	r3, #15
 8001e48:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001e4c:	21a0      	movs	r1, #160	@ 0xa0
 8001e4e:	20aa      	movs	r0, #170	@ 0xaa
 8001e50:	f7ff fa65 	bl	800131e <lcd_DrawCircle>
                    break;
 8001e54:	bf00      	nop
        }
    }
    
    // Display current mode and timings
    char buf[32];
    sprintf(buf, "Mode: %d", currentMode);
 8001e56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <traffic_DrawLights+0x1e4>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	491b      	ldr	r1, [pc, #108]	@ (8001ecc <traffic_DrawLights+0x1f0>)
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fbfb 	bl	800465c <siprintf>
    lcd_ShowStr(10, 200, buf, BLACK, WHITE, 16, 0);
 8001e66:	463a      	mov	r2, r7
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2300      	movs	r3, #0
 8001e78:	21c8      	movs	r1, #200	@ 0xc8
 8001e7a:	200a      	movs	r0, #10
 8001e7c:	f7ff fabc 	bl	80013f8 <lcd_ShowStr>
    
    sprintf(buf, "R:%d G:%d Y:%d", timing.redTime, timing.greenTime, timing.yellowTime);
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <traffic_DrawLights+0x1f4>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <traffic_DrawLights+0x1f4>)
 8001e88:	785b      	ldrb	r3, [r3, #1]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <traffic_DrawLights+0x1f4>)
 8001e8e:	789b      	ldrb	r3, [r3, #2]
 8001e90:	4638      	mov	r0, r7
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	460b      	mov	r3, r1
 8001e96:	490f      	ldr	r1, [pc, #60]	@ (8001ed4 <traffic_DrawLights+0x1f8>)
 8001e98:	f002 fbe0 	bl	800465c <siprintf>
    lcd_ShowStr(10, 220, buf, BLACK, WHITE, 16, 0);
 8001e9c:	463a      	mov	r2, r7
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	9302      	str	r3, [sp, #8]
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2300      	movs	r3, #0
 8001eae:	21dc      	movs	r1, #220	@ 0xdc
 8001eb0:	200a      	movs	r0, #10
 8001eb2:	f7ff faa1 	bl	80013f8 <lcd_ShowStr>
}
 8001eb6:	bf00      	nop
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000000c 	.word	0x2000000c
 8001ec4:	200001b4 	.word	0x200001b4
 8001ec8:	200001bc 	.word	0x200001bc
 8001ecc:	08004fcc 	.word	0x08004fcc
 8001ed0:	20000010 	.word	0x20000010
 8001ed4:	08004fd8 	.word	0x08004fd8

08001ed8 <traffic_HandleButtons>:

void traffic_HandleButtons(void) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	@ 0x30
 8001edc:	af04      	add	r7, sp, #16
    static uint8_t tempTiming = 0;
    
    // Mode button (assuming button 0)
    if (button_count[0] == 1) {
 8001ede:	4b44      	ldr	r3, [pc, #272]	@ (8001ff0 <traffic_HandleButtons+0x118>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d126      	bne.n	8001f34 <traffic_HandleButtons+0x5c>
        currentMode = (currentMode % 4) + 1;
 8001ee6:	4b43      	ldr	r3, [pc, #268]	@ (8001ff4 <traffic_HandleButtons+0x11c>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff4 <traffic_HandleButtons+0x11c>)
 8001ef6:	701a      	strb	r2, [r3, #0]
        if (currentMode != MODE_NORMAL) {
 8001ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff4 <traffic_HandleButtons+0x11c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d019      	beq.n	8001f34 <traffic_HandleButtons+0x5c>
            switch (currentMode) {
 8001f00:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff4 <traffic_HandleButtons+0x11c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d010      	beq.n	8001f2a <traffic_HandleButtons+0x52>
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	dc13      	bgt.n	8001f34 <traffic_HandleButtons+0x5c>
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d002      	beq.n	8001f16 <traffic_HandleButtons+0x3e>
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d005      	beq.n	8001f20 <traffic_HandleButtons+0x48>
 8001f14:	e00e      	b.n	8001f34 <traffic_HandleButtons+0x5c>
                case MODE_RED_MODIFY:
                    tempTiming = timing.redTime;
 8001f16:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <traffic_HandleButtons+0x120>)
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	4b38      	ldr	r3, [pc, #224]	@ (8001ffc <traffic_HandleButtons+0x124>)
 8001f1c:	701a      	strb	r2, [r3, #0]
                    break;
 8001f1e:	e009      	b.n	8001f34 <traffic_HandleButtons+0x5c>
                case MODE_GREEN_MODIFY:
                    tempTiming = timing.greenTime;
 8001f20:	4b35      	ldr	r3, [pc, #212]	@ (8001ff8 <traffic_HandleButtons+0x120>)
 8001f22:	785a      	ldrb	r2, [r3, #1]
 8001f24:	4b35      	ldr	r3, [pc, #212]	@ (8001ffc <traffic_HandleButtons+0x124>)
 8001f26:	701a      	strb	r2, [r3, #0]
                    break;
 8001f28:	e004      	b.n	8001f34 <traffic_HandleButtons+0x5c>
                case MODE_YELLOW_MODIFY:
                    tempTiming = timing.yellowTime;
 8001f2a:	4b33      	ldr	r3, [pc, #204]	@ (8001ff8 <traffic_HandleButtons+0x120>)
 8001f2c:	789a      	ldrb	r2, [r3, #2]
 8001f2e:	4b33      	ldr	r3, [pc, #204]	@ (8001ffc <traffic_HandleButtons+0x124>)
 8001f30:	701a      	strb	r2, [r3, #0]
                    break;
 8001f32:	bf00      	nop
            }
        }
    }
    
    // Increment button (assuming button 1)
    if (currentMode != MODE_NORMAL && button_count[1] == 1) {
 8001f34:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff4 <traffic_HandleButtons+0x11c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d029      	beq.n	8001f90 <traffic_HandleButtons+0xb8>
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff0 <traffic_HandleButtons+0x118>)
 8001f3e:	885b      	ldrh	r3, [r3, #2]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d125      	bne.n	8001f90 <traffic_HandleButtons+0xb8>
        tempTiming = (tempTiming % 99) + 1;
 8001f44:	4b2d      	ldr	r3, [pc, #180]	@ (8001ffc <traffic_HandleButtons+0x124>)
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <traffic_HandleButtons+0x128>)
 8001f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f4e:	0999      	lsrs	r1, r3, #6
 8001f50:	460b      	mov	r3, r1
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	440b      	add	r3, r1
 8001f56:	0159      	lsls	r1, r3, #5
 8001f58:	440b      	add	r3, r1
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b26      	ldr	r3, [pc, #152]	@ (8001ffc <traffic_HandleButtons+0x124>)
 8001f64:	701a      	strb	r2, [r3, #0]
        char buf[32];
        sprintf(buf, "New Value: %d", tempTiming);
 8001f66:	4b25      	ldr	r3, [pc, #148]	@ (8001ffc <traffic_HandleButtons+0x124>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	4925      	ldr	r1, [pc, #148]	@ (8002004 <traffic_HandleButtons+0x12c>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 fb73 	bl	800465c <siprintf>
        lcd_ShowStr(10, 240, buf, BLACK, WHITE, 16, 0);
 8001f76:	463a      	mov	r2, r7
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9302      	str	r3, [sp, #8]
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2300      	movs	r3, #0
 8001f88:	21f0      	movs	r1, #240	@ 0xf0
 8001f8a:	200a      	movs	r0, #10
 8001f8c:	f7ff fa34 	bl	80013f8 <lcd_ShowStr>
    }
    
    // Confirm button (assuming button 2)
    if (currentMode != MODE_NORMAL && button_count[2] == 1) {
 8001f90:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <traffic_HandleButtons+0x11c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d027      	beq.n	8001fe8 <traffic_HandleButtons+0x110>
 8001f98:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <traffic_HandleButtons+0x118>)
 8001f9a:	889b      	ldrh	r3, [r3, #4]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d123      	bne.n	8001fe8 <traffic_HandleButtons+0x110>
        switch (currentMode) {
 8001fa0:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <traffic_HandleButtons+0x11c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d010      	beq.n	8001fca <traffic_HandleButtons+0xf2>
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	dc13      	bgt.n	8001fd4 <traffic_HandleButtons+0xfc>
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d002      	beq.n	8001fb6 <traffic_HandleButtons+0xde>
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d005      	beq.n	8001fc0 <traffic_HandleButtons+0xe8>
 8001fb4:	e00e      	b.n	8001fd4 <traffic_HandleButtons+0xfc>
            case MODE_RED_MODIFY:
                timing.redTime = tempTiming;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <traffic_HandleButtons+0x124>)
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <traffic_HandleButtons+0x120>)
 8001fbc:	701a      	strb	r2, [r3, #0]
                break;
 8001fbe:	e009      	b.n	8001fd4 <traffic_HandleButtons+0xfc>
            case MODE_GREEN_MODIFY:
                timing.greenTime = tempTiming;
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <traffic_HandleButtons+0x124>)
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <traffic_HandleButtons+0x120>)
 8001fc6:	705a      	strb	r2, [r3, #1]
                break;
 8001fc8:	e004      	b.n	8001fd4 <traffic_HandleButtons+0xfc>
            case MODE_YELLOW_MODIFY:
                timing.yellowTime = tempTiming;
 8001fca:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <traffic_HandleButtons+0x124>)
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <traffic_HandleButtons+0x120>)
 8001fd0:	709a      	strb	r2, [r3, #2]
                break;
 8001fd2:	bf00      	nop
        }
        lcd_Fill(10, 240, 200, 256, WHITE); // Clear "New Value" text
 8001fd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fde:	22c8      	movs	r2, #200	@ 0xc8
 8001fe0:	21f0      	movs	r1, #240	@ 0xf0
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7fe fdb4 	bl	8000b50 <lcd_Fill>
    }
}
 8001fe8:	bf00      	nop
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000088 	.word	0x20000088
 8001ff4:	2000000c 	.word	0x2000000c
 8001ff8:	20000010 	.word	0x20000010
 8001ffc:	200001c4 	.word	0x200001c4
 8002000:	a57eb503 	.word	0xa57eb503
 8002004:	08004fe8 	.word	0x08004fe8

08002008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800200c:	480d      	ldr	r0, [pc, #52]	@ (8002044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800200e:	490e      	ldr	r1, [pc, #56]	@ (8002048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002010:	4a0e      	ldr	r2, [pc, #56]	@ (800204c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002014:	e002      	b.n	800201c <LoopCopyDataInit>

08002016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201a:	3304      	adds	r3, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800201c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002020:	d3f9      	bcc.n	8002016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002022:	4a0b      	ldr	r2, [pc, #44]	@ (8002050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002024:	4c0b      	ldr	r4, [pc, #44]	@ (8002054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002028:	e001      	b.n	800202e <LoopFillZerobss>

0800202a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800202c:	3204      	adds	r2, #4

0800202e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002030:	d3fb      	bcc.n	800202a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002032:	f7ff fd2d 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002036:	f002 fb3f 	bl	80046b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203a:	f7ff fb0b 	bl	8001654 <main>
  bx  lr    
 800203e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002048:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800204c:	08007fcc 	.word	0x08007fcc
  ldr r2, =_sbss
 8002050:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002054:	20000314 	.word	0x20000314

08002058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC_IRQHandler>
	...

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002060:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <HAL_Init+0x40>)
 8002066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800206a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800206c:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <HAL_Init+0x40>)
 8002072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a07      	ldr	r2, [pc, #28]	@ (800209c <HAL_Init+0x40>)
 800207e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002084:	2003      	movs	r0, #3
 8002086:	f000 f94f 	bl	8002328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800208a:	200f      	movs	r0, #15
 800208c:	f000 f808 	bl	80020a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002090:	f7ff fc66 	bl	8001960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023c00 	.word	0x40023c00

080020a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a8:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_InitTick+0x54>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <HAL_InitTick+0x58>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f967 	bl	8002392 <HAL_SYSTICK_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00e      	b.n	80020ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b0f      	cmp	r3, #15
 80020d2:	d80a      	bhi.n	80020ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d4:	2200      	movs	r2, #0
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020dc:	f000 f92f 	bl	800233e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e0:	4a06      	ldr	r2, [pc, #24]	@ (80020fc <HAL_InitTick+0x5c>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000008 	.word	0x20000008
 80020f8:	20000018 	.word	0x20000018
 80020fc:	20000014 	.word	0x20000014

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000018 	.word	0x20000018
 8002124:	200001c8 	.word	0x200001c8

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	200001c8 	.word	0x200001c8

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002158:	d005      	beq.n	8002166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_Delay+0x44>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002166:	bf00      	nop
 8002168:	f7ff ffde 	bl	8002128 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8f7      	bhi.n	8002168 <HAL_Delay+0x28>
  {
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000018 	.word	0x20000018

08002188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ba:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60d3      	str	r3, [r2, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d4:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <__NVIC_GetPriorityGrouping+0x18>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0307 	and.w	r3, r3, #7
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db0b      	blt.n	8002216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4907      	ldr	r1, [pc, #28]	@ (8002224 <__NVIC_EnableIRQ+0x38>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db0a      	blt.n	8002252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	490c      	ldr	r1, [pc, #48]	@ (8002274 <__NVIC_SetPriority+0x4c>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	440b      	add	r3, r1
 800224c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002250:	e00a      	b.n	8002268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4908      	ldr	r1, [pc, #32]	@ (8002278 <__NVIC_SetPriority+0x50>)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3b04      	subs	r3, #4
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	440b      	add	r3, r1
 8002266:	761a      	strb	r2, [r3, #24]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000e100 	.word	0xe000e100
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	@ 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2b04      	cmp	r3, #4
 8002298:	bf28      	it	cs
 800229a:	2304      	movcs	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d902      	bls.n	80022ac <NVIC_EncodePriority+0x30>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3b03      	subs	r3, #3
 80022aa:	e000      	b.n	80022ae <NVIC_EncodePriority+0x32>
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	4313      	orrs	r3, r2
         );
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	@ 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f4:	d301      	bcc.n	80022fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00f      	b.n	800231a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002324 <SysTick_Config+0x40>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002302:	210f      	movs	r1, #15
 8002304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002308:	f7ff ff8e 	bl	8002228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <SysTick_Config+0x40>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002312:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <SysTick_Config+0x40>)
 8002314:	2207      	movs	r2, #7
 8002316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	e000e010 	.word	0xe000e010

08002328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff29 	bl	8002188 <__NVIC_SetPriorityGrouping>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002350:	f7ff ff3e 	bl	80021d0 <__NVIC_GetPriorityGrouping>
 8002354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	6978      	ldr	r0, [r7, #20]
 800235c:	f7ff ff8e 	bl	800227c <NVIC_EncodePriority>
 8002360:	4602      	mov	r2, r0
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff5d 	bl	8002228 <__NVIC_SetPriority>
}
 800236e:	bf00      	nop
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff31 	bl	80021ec <__NVIC_EnableIRQ>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ffa2 	bl	80022e4 <SysTick_Config>
 80023a0:	4603      	mov	r3, r0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e16b      	b.n	80026a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 815a 	bne.w	800269a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80b4 	beq.w	800269a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b60      	ldr	r3, [pc, #384]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4a5f      	ldr	r2, [pc, #380]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002540:	6453      	str	r3, [r2, #68]	@ 0x44
 8002542:	4b5d      	ldr	r3, [pc, #372]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254e:	4a5b      	ldr	r2, [pc, #364]	@ (80026bc <HAL_GPIO_Init+0x310>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a52      	ldr	r2, [pc, #328]	@ (80026c0 <HAL_GPIO_Init+0x314>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <HAL_GPIO_Init+0x226>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a51      	ldr	r2, [pc, #324]	@ (80026c4 <HAL_GPIO_Init+0x318>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d025      	beq.n	80025ce <HAL_GPIO_Init+0x222>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a50      	ldr	r2, [pc, #320]	@ (80026c8 <HAL_GPIO_Init+0x31c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01f      	beq.n	80025ca <HAL_GPIO_Init+0x21e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4f      	ldr	r2, [pc, #316]	@ (80026cc <HAL_GPIO_Init+0x320>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0x21a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4e      	ldr	r2, [pc, #312]	@ (80026d0 <HAL_GPIO_Init+0x324>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0x216>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4d      	ldr	r2, [pc, #308]	@ (80026d4 <HAL_GPIO_Init+0x328>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x212>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4c      	ldr	r2, [pc, #304]	@ (80026d8 <HAL_GPIO_Init+0x32c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4b      	ldr	r2, [pc, #300]	@ (80026dc <HAL_GPIO_Init+0x330>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_Init+0x20a>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e00e      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025b6:	2308      	movs	r3, #8
 80025b8:	e00c      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e00a      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025be:	2305      	movs	r3, #5
 80025c0:	e008      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025c2:	2304      	movs	r3, #4
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e004      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025d2:	2300      	movs	r3, #0
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f002 0203 	and.w	r2, r2, #3
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	4093      	lsls	r3, r2
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e4:	4935      	ldr	r1, [pc, #212]	@ (80026bc <HAL_GPIO_Init+0x310>)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f2:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002616:	4a32      	ldr	r2, [pc, #200]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800261c:	4b30      	ldr	r3, [pc, #192]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002640:	4a27      	ldr	r2, [pc, #156]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002646:	4b26      	ldr	r3, [pc, #152]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266a:	4a1d      	ldr	r2, [pc, #116]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002670:	4b1b      	ldr	r3, [pc, #108]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002694:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3301      	adds	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	f67f ae90 	bls.w	80023c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40013800 	.word	0x40013800
 80026c0:	40020000 	.word	0x40020000
 80026c4:	40020400 	.word	0x40020400
 80026c8:	40020800 	.word	0x40020800
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40021400 	.word	0x40021400
 80026d8:	40021800 	.word	0x40021800
 80026dc:	40021c00 	.word	0x40021c00
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e267      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d075      	beq.n	8002822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002736:	4b88      	ldr	r3, [pc, #544]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b04      	cmp	r3, #4
 8002740:	d00c      	beq.n	800275c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002742:	4b85      	ldr	r3, [pc, #532]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274a:	2b08      	cmp	r3, #8
 800274c:	d112      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274e:	4b82      	ldr	r3, [pc, #520]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002756:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800275a:	d10b      	bne.n	8002774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	4b7e      	ldr	r3, [pc, #504]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05b      	beq.n	8002820 <HAL_RCC_OscConfig+0x108>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d157      	bne.n	8002820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e242      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800277c:	d106      	bne.n	800278c <HAL_RCC_OscConfig+0x74>
 800277e:	4b76      	ldr	r3, [pc, #472]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a75      	ldr	r2, [pc, #468]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e01d      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x98>
 8002796:	4b70      	ldr	r3, [pc, #448]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6f      	ldr	r2, [pc, #444]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 800279c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6c      	ldr	r2, [pc, #432]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0xb0>
 80027b0:	4b69      	ldr	r3, [pc, #420]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a68      	ldr	r2, [pc, #416]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b66      	ldr	r3, [pc, #408]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a65      	ldr	r2, [pc, #404]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 80027c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7ff fcaa 	bl	8002128 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7ff fca6 	bl	8002128 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	@ 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e207      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0xc0>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7ff fc96 	bl	8002128 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7ff fc92 	bl	8002128 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	@ 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1f3      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	4b51      	ldr	r3, [pc, #324]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0xe8>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d063      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800282e:	4b4a      	ldr	r3, [pc, #296]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283a:	4b47      	ldr	r3, [pc, #284]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002842:	2b08      	cmp	r3, #8
 8002844:	d11c      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b44      	ldr	r3, [pc, #272]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d116      	bne.n	8002880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	4b41      	ldr	r3, [pc, #260]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e1c7      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286a:	4b3b      	ldr	r3, [pc, #236]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4937      	ldr	r1, [pc, #220]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287e:	e03a      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d020      	beq.n	80028ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002888:	4b34      	ldr	r3, [pc, #208]	@ (800295c <HAL_RCC_OscConfig+0x244>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7ff fc4b 	bl	8002128 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002896:	f7ff fc47 	bl	8002128 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1a8      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b4:	4b28      	ldr	r3, [pc, #160]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4925      	ldr	r1, [pc, #148]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
 80028c8:	e015      	b.n	80028f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ca:	4b24      	ldr	r3, [pc, #144]	@ (800295c <HAL_RCC_OscConfig+0x244>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7ff fc2a 	bl	8002128 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d8:	f7ff fc26 	bl	8002128 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e187      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d036      	beq.n	8002970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290a:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <HAL_RCC_OscConfig+0x248>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7ff fc0a 	bl	8002128 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002918:	f7ff fc06 	bl	8002128 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e167      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_RCC_OscConfig+0x240>)
 800292c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x200>
 8002936:	e01b      	b.n	8002970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002938:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <HAL_RCC_OscConfig+0x248>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7ff fbf3 	bl	8002128 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002944:	e00e      	b.n	8002964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002946:	f7ff fbef 	bl	8002128 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d907      	bls.n	8002964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e150      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
 8002958:	40023800 	.word	0x40023800
 800295c:	42470000 	.word	0x42470000
 8002960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002964:	4b88      	ldr	r3, [pc, #544]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ea      	bne.n	8002946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8097 	beq.w	8002aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002982:	4b81      	ldr	r3, [pc, #516]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10f      	bne.n	80029ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	4b7d      	ldr	r3, [pc, #500]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	4a7c      	ldr	r2, [pc, #496]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800299c:	6413      	str	r3, [r2, #64]	@ 0x40
 800299e:	4b7a      	ldr	r3, [pc, #488]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	4b77      	ldr	r3, [pc, #476]	@ (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d118      	bne.n	80029ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ba:	4b74      	ldr	r3, [pc, #464]	@ (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a73      	ldr	r2, [pc, #460]	@ (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c6:	f7ff fbaf 	bl	8002128 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ce:	f7ff fbab 	bl	8002128 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e10c      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	4b6a      	ldr	r3, [pc, #424]	@ (8002b8c <HAL_RCC_OscConfig+0x474>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d106      	bne.n	8002a02 <HAL_RCC_OscConfig+0x2ea>
 80029f4:	4b64      	ldr	r3, [pc, #400]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f8:	4a63      	ldr	r2, [pc, #396]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a00:	e01c      	b.n	8002a3c <HAL_RCC_OscConfig+0x324>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x30c>
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0e:	4a5e      	ldr	r2, [pc, #376]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a16:	4b5c      	ldr	r3, [pc, #368]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0x324>
 8002a24:	4b58      	ldr	r3, [pc, #352]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a28:	4a57      	ldr	r2, [pc, #348]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a30:	4b55      	ldr	r3, [pc, #340]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a34:	4a54      	ldr	r2, [pc, #336]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a36:	f023 0304 	bic.w	r3, r3, #4
 8002a3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d015      	beq.n	8002a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7ff fb70 	bl	8002128 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4c:	f7ff fb6c 	bl	8002128 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e0cb      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	4b49      	ldr	r3, [pc, #292]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0ee      	beq.n	8002a4c <HAL_RCC_OscConfig+0x334>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7ff fb5a 	bl	8002128 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7ff fb56 	bl	8002128 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0b5      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1ee      	bne.n	8002a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d105      	bne.n	8002aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa0:	4b39      	ldr	r3, [pc, #228]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	4a38      	ldr	r2, [pc, #224]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a1 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab6:	4b34      	ldr	r3, [pc, #208]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d05c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d141      	bne.n	8002b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	4b31      	ldr	r3, [pc, #196]	@ (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7ff fb2a 	bl	8002128 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7ff fb26 	bl	8002128 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e087      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	4b27      	ldr	r3, [pc, #156]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	019b      	lsls	r3, r3, #6
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	491b      	ldr	r1, [pc, #108]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b20:	4b1b      	ldr	r3, [pc, #108]	@ (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7ff faff 	bl	8002128 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7ff fafb 	bl	8002128 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e05c      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b40:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x416>
 8002b4c:	e054      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4e:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <HAL_RCC_OscConfig+0x478>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7ff fae8 	bl	8002128 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7ff fae4 	bl	8002128 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e045      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_RCC_OscConfig+0x470>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x444>
 8002b7a:	e03d      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e038      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_RCC_OscConfig+0x4ec>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d028      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d121      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d11a      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d111      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800

08002c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0cc      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b68      	ldr	r3, [pc, #416]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d90c      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b65      	ldr	r3, [pc, #404]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b63      	ldr	r3, [pc, #396]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0b8      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d020      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c5c:	4b59      	ldr	r3, [pc, #356]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a58      	ldr	r2, [pc, #352]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c74:	4b53      	ldr	r3, [pc, #332]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a52      	ldr	r2, [pc, #328]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b50      	ldr	r3, [pc, #320]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	494d      	ldr	r1, [pc, #308]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d044      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b47      	ldr	r3, [pc, #284]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d119      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e07f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e06f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e067      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce6:	4b37      	ldr	r3, [pc, #220]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f023 0203 	bic.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4934      	ldr	r1, [pc, #208]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7ff fa16 	bl	8002128 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f7ff fa12 	bl	8002128 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e04f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 020c 	and.w	r2, r3, #12
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d1eb      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d28:	4b25      	ldr	r3, [pc, #148]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d20c      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b22      	ldr	r3, [pc, #136]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b20      	ldr	r3, [pc, #128]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e032      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4916      	ldr	r1, [pc, #88]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7a:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	490e      	ldr	r1, [pc, #56]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d8e:	f000 f821 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	490a      	ldr	r1, [pc, #40]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	5ccb      	ldrb	r3, [r1, r3]
 8002da2:	fa22 f303 	lsr.w	r3, r2, r3
 8002da6:	4a09      	ldr	r2, [pc, #36]	@ (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f976 	bl	80020a0 <HAL_InitTick>

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023c00 	.word	0x40023c00
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08007f78 	.word	0x08007f78
 8002dcc:	20000008 	.word	0x20000008
 8002dd0:	20000014 	.word	0x20000014

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b094      	sub	sp, #80	@ 0x50
 8002dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	647b      	str	r3, [r7, #68]	@ 0x44
 8002de0:	2300      	movs	r3, #0
 8002de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002de4:	2300      	movs	r3, #0
 8002de6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dec:	4b79      	ldr	r3, [pc, #484]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d00d      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x40>
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	f200 80e1 	bhi.w	8002fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x34>
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d003      	beq.n	8002e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e06:	e0db      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b73      	ldr	r3, [pc, #460]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002e0c:	e0db      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e0e:	4b73      	ldr	r3, [pc, #460]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8002e10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e12:	e0d8      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e14:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d063      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	099b      	lsrs	r3, r3, #6
 8002e30:	2200      	movs	r2, #0
 8002e32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e3e:	2300      	movs	r3, #0
 8002e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e46:	4622      	mov	r2, r4
 8002e48:	462b      	mov	r3, r5
 8002e4a:	f04f 0000 	mov.w	r0, #0
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	0159      	lsls	r1, r3, #5
 8002e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e58:	0150      	lsls	r0, r2, #5
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4621      	mov	r1, r4
 8002e60:	1a51      	subs	r1, r2, r1
 8002e62:	6139      	str	r1, [r7, #16]
 8002e64:	4629      	mov	r1, r5
 8002e66:	eb63 0301 	sbc.w	r3, r3, r1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e78:	4659      	mov	r1, fp
 8002e7a:	018b      	lsls	r3, r1, #6
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e82:	4651      	mov	r1, sl
 8002e84:	018a      	lsls	r2, r1, #6
 8002e86:	4651      	mov	r1, sl
 8002e88:	ebb2 0801 	subs.w	r8, r2, r1
 8002e8c:	4659      	mov	r1, fp
 8002e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ea6:	4690      	mov	r8, r2
 8002ea8:	4699      	mov	r9, r3
 8002eaa:	4623      	mov	r3, r4
 8002eac:	eb18 0303 	adds.w	r3, r8, r3
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	eb49 0303 	adc.w	r3, r9, r3
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	024b      	lsls	r3, r1, #9
 8002eca:	4621      	mov	r1, r4
 8002ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	024a      	lsls	r2, r1, #9
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eda:	2200      	movs	r2, #0
 8002edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ee4:	f7fd f9cc 	bl	8000280 <__aeabi_uldivmod>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4613      	mov	r3, r2
 8002eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ef0:	e058      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef2:	4b38      	ldr	r3, [pc, #224]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	099b      	lsrs	r3, r3, #6
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	4611      	mov	r1, r2
 8002efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	464b      	mov	r3, r9
 8002f10:	f04f 0000 	mov.w	r0, #0
 8002f14:	f04f 0100 	mov.w	r1, #0
 8002f18:	0159      	lsls	r1, r3, #5
 8002f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f1e:	0150      	lsls	r0, r2, #5
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4641      	mov	r1, r8
 8002f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f44:	ebb2 040a 	subs.w	r4, r2, sl
 8002f48:	eb63 050b 	sbc.w	r5, r3, fp
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	00eb      	lsls	r3, r5, #3
 8002f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f5a:	00e2      	lsls	r2, r4, #3
 8002f5c:	4614      	mov	r4, r2
 8002f5e:	461d      	mov	r5, r3
 8002f60:	4643      	mov	r3, r8
 8002f62:	18e3      	adds	r3, r4, r3
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	464b      	mov	r3, r9
 8002f68:	eb45 0303 	adc.w	r3, r5, r3
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	028b      	lsls	r3, r1, #10
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f84:	4621      	mov	r1, r4
 8002f86:	028a      	lsls	r2, r1, #10
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61bb      	str	r3, [r7, #24]
 8002f92:	61fa      	str	r2, [r7, #28]
 8002f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f98:	f7fd f972 	bl	8000280 <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002fb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3750      	adds	r7, #80	@ 0x50
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	007a1200 	.word	0x007a1200

08002fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e07b      	b.n	80030ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d108      	bne.n	800300c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003002:	d009      	beq.n	8003018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
 800300a:	e005      	b.n	8003018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fe fc4c 	bl	80018d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800304e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309c:	ea42 0103 	orr.w	r1, r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	f003 0104 	and.w	r1, r3, #4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	f003 0210 	and.w	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b088      	sub	sp, #32
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_SPI_Transmit+0x22>
 8003110:	2302      	movs	r3, #2
 8003112:	e126      	b.n	8003362 <HAL_SPI_Transmit+0x270>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800311c:	f7ff f804 	bl	8002128 <HAL_GetTick>
 8003120:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d002      	beq.n	8003138 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003132:	2302      	movs	r3, #2
 8003134:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003136:	e10b      	b.n	8003350 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_SPI_Transmit+0x52>
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003148:	e102      	b.n	8003350 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2203      	movs	r2, #3
 800314e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	88fa      	ldrh	r2, [r7, #6]
 8003162:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	88fa      	ldrh	r2, [r7, #6]
 8003168:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003190:	d10f      	bne.n	80031b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031bc:	2b40      	cmp	r3, #64	@ 0x40
 80031be:	d007      	beq.n	80031d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031d8:	d14b      	bne.n	8003272 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_SPI_Transmit+0xf6>
 80031e2:	8afb      	ldrh	r3, [r7, #22]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d13e      	bne.n	8003266 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	881a      	ldrh	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	1c9a      	adds	r2, r3, #2
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800320c:	e02b      	b.n	8003266 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b02      	cmp	r3, #2
 800321a:	d112      	bne.n	8003242 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	881a      	ldrh	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322c:	1c9a      	adds	r2, r3, #2
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003240:	e011      	b.n	8003266 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003242:	f7fe ff71 	bl	8002128 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d803      	bhi.n	800325a <HAL_SPI_Transmit+0x168>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003258:	d102      	bne.n	8003260 <HAL_SPI_Transmit+0x16e>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003264:	e074      	b.n	8003350 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ce      	bne.n	800320e <HAL_SPI_Transmit+0x11c>
 8003270:	e04c      	b.n	800330c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_SPI_Transmit+0x18e>
 800327a:	8afb      	ldrh	r3, [r7, #22]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d140      	bne.n	8003302 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	330c      	adds	r3, #12
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80032a6:	e02c      	b.n	8003302 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d113      	bne.n	80032de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80032dc:	e011      	b.n	8003302 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032de:	f7fe ff23 	bl	8002128 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d803      	bhi.n	80032f6 <HAL_SPI_Transmit+0x204>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032f4:	d102      	bne.n	80032fc <HAL_SPI_Transmit+0x20a>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003300:	e026      	b.n	8003350 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1cd      	bne.n	80032a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	6839      	ldr	r1, [r7, #0]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fbcb 	bl	8003aac <SPI_EndRxTxTransaction>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e000      	b.n	8003350 <HAL_SPI_Transmit+0x25e>
  }

error:
 800334e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003360:	7ffb      	ldrb	r3, [r7, #31]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b088      	sub	sp, #32
 800336e:	af02      	add	r7, sp, #8
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003386:	d112      	bne.n	80033ae <HAL_SPI_Receive+0x44>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10e      	bne.n	80033ae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2204      	movs	r2, #4
 8003394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003398:	88fa      	ldrh	r2, [r7, #6]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f8f1 	bl	800358c <HAL_SPI_TransmitReceive>
 80033aa:	4603      	mov	r3, r0
 80033ac:	e0ea      	b.n	8003584 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_SPI_Receive+0x52>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e0e3      	b.n	8003584 <HAL_SPI_Receive+0x21a>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c4:	f7fe feb0 	bl	8002128 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d002      	beq.n	80033dc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
 80033d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033da:	e0ca      	b.n	8003572 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_Receive+0x7e>
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033ec:	e0c1      	b.n	8003572 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2204      	movs	r2, #4
 80033f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	88fa      	ldrh	r2, [r7, #6]
 8003406:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003434:	d10f      	bne.n	8003456 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003454:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003460:	2b40      	cmp	r3, #64	@ 0x40
 8003462:	d007      	beq.n	8003474 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003472:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d162      	bne.n	8003542 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800347c:	e02e      	b.n	80034dc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d115      	bne.n	80034b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f103 020c 	add.w	r2, r3, #12
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	7812      	ldrb	r2, [r2, #0]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034b6:	e011      	b.n	80034dc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034b8:	f7fe fe36 	bl	8002128 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d803      	bhi.n	80034d0 <HAL_SPI_Receive+0x166>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034ce:	d102      	bne.n	80034d6 <HAL_SPI_Receive+0x16c>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80034da:	e04a      	b.n	8003572 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1cb      	bne.n	800347e <HAL_SPI_Receive+0x114>
 80034e6:	e031      	b.n	800354c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d113      	bne.n	800351e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003500:	b292      	uxth	r2, r2
 8003502:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	1c9a      	adds	r2, r3, #2
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800351c:	e011      	b.n	8003542 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800351e:	f7fe fe03 	bl	8002128 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d803      	bhi.n	8003536 <HAL_SPI_Receive+0x1cc>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003534:	d102      	bne.n	800353c <HAL_SPI_Receive+0x1d2>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003540:	e017      	b.n	8003572 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1cd      	bne.n	80034e8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	6839      	ldr	r1, [r7, #0]
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fa45 	bl	80039e0 <SPI_EndRxTransaction>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
 800356e:	e000      	b.n	8003572 <HAL_SPI_Receive+0x208>
  }

error :
 8003570:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003582:	7dfb      	ldrb	r3, [r7, #23]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08c      	sub	sp, #48	@ 0x30
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800359a:	2301      	movs	r3, #1
 800359c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x26>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e18a      	b.n	80038c8 <HAL_SPI_TransmitReceive+0x33c>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035ba:	f7fe fdb5 	bl	8002128 <HAL_GetTick>
 80035be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80035d0:	887b      	ldrh	r3, [r7, #2]
 80035d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d00f      	beq.n	80035fc <HAL_SPI_TransmitReceive+0x70>
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035e2:	d107      	bne.n	80035f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d103      	bne.n	80035f4 <HAL_SPI_TransmitReceive+0x68>
 80035ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d003      	beq.n	80035fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
 80035f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80035fa:	e15b      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_SPI_TransmitReceive+0x82>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_SPI_TransmitReceive+0x82>
 8003608:	887b      	ldrh	r3, [r7, #2]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d103      	bne.n	8003616 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003614:	e14e      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b04      	cmp	r3, #4
 8003620:	d003      	beq.n	800362a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2205      	movs	r2, #5
 8003626:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	887a      	ldrh	r2, [r7, #2]
 800363a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	887a      	ldrh	r2, [r7, #2]
 8003652:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366a:	2b40      	cmp	r3, #64	@ 0x40
 800366c:	d007      	beq.n	800367e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800367c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003686:	d178      	bne.n	800377a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_SPI_TransmitReceive+0x10a>
 8003690:	8b7b      	ldrh	r3, [r7, #26]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d166      	bne.n	8003764 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	881a      	ldrh	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	1c9a      	adds	r2, r3, #2
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ba:	e053      	b.n	8003764 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d11b      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x176>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d016      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x176>
 80036d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d113      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	881a      	ldrh	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	1c9a      	adds	r2, r3, #2
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d119      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x1b8>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d014      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	b292      	uxth	r2, r2
 8003726:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	1c9a      	adds	r2, r3, #2
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003740:	2301      	movs	r3, #1
 8003742:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003744:	f7fe fcf0 	bl	8002128 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003750:	429a      	cmp	r2, r3
 8003752:	d807      	bhi.n	8003764 <HAL_SPI_TransmitReceive+0x1d8>
 8003754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800375a:	d003      	beq.n	8003764 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8003762:	e0a7      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1a6      	bne.n	80036bc <HAL_SPI_TransmitReceive+0x130>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1a1      	bne.n	80036bc <HAL_SPI_TransmitReceive+0x130>
 8003778:	e07c      	b.n	8003874 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_SPI_TransmitReceive+0x1fc>
 8003782:	8b7b      	ldrh	r3, [r7, #26]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d16b      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	7812      	ldrb	r2, [r2, #0]
 8003794:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ae:	e057      	b.n	8003860 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d11c      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x26c>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d017      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x26c>
 80037c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d114      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	7812      	ldrb	r2, [r2, #0]
 80037da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d119      	bne.n	800383a <HAL_SPI_TransmitReceive+0x2ae>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d014      	beq.n	800383a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003836:	2301      	movs	r3, #1
 8003838:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800383a:	f7fe fc75 	bl	8002128 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003846:	429a      	cmp	r2, r3
 8003848:	d803      	bhi.n	8003852 <HAL_SPI_TransmitReceive+0x2c6>
 800384a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003850:	d102      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x2cc>
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800385e:	e029      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1a2      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x224>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d19d      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003876:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f917 	bl	8003aac <SPI_EndRxTxTransaction>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d006      	beq.n	8003892 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003890:	e010      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10b      	bne.n	80038b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	e000      	b.n	80038b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80038b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80038c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3730      	adds	r7, #48	@ 0x30
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038e0:	f7fe fc22 	bl	8002128 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	4413      	add	r3, r2
 80038ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038f0:	f7fe fc1a 	bl	8002128 <HAL_GetTick>
 80038f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038f6:	4b39      	ldr	r3, [pc, #228]	@ (80039dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	015b      	lsls	r3, r3, #5
 80038fc:	0d1b      	lsrs	r3, r3, #20
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	fb02 f303 	mul.w	r3, r2, r3
 8003904:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003906:	e054      	b.n	80039b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800390e:	d050      	beq.n	80039b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003910:	f7fe fc0a 	bl	8002128 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	429a      	cmp	r2, r3
 800391e:	d902      	bls.n	8003926 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d13d      	bne.n	80039a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003934:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800393e:	d111      	bne.n	8003964 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003948:	d004      	beq.n	8003954 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003952:	d107      	bne.n	8003964 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003962:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396c:	d10f      	bne.n	800398e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800398c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e017      	b.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4013      	ands	r3, r2
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	429a      	cmp	r2, r3
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d19b      	bne.n	8003908 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000008 	.word	0x20000008

080039e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039f4:	d111      	bne.n	8003a1a <SPI_EndRxTransaction+0x3a>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039fe:	d004      	beq.n	8003a0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a08:	d107      	bne.n	8003a1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a22:	d12a      	bne.n	8003a7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a2c:	d012      	beq.n	8003a54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2200      	movs	r2, #0
 8003a36:	2180      	movs	r1, #128	@ 0x80
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff ff49 	bl	80038d0 <SPI_WaitFlagStateUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d02d      	beq.n	8003aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a48:	f043 0220 	orr.w	r2, r3, #32
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e026      	b.n	8003aa2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff ff36 	bl	80038d0 <SPI_WaitFlagStateUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01a      	beq.n	8003aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e013      	b.n	8003aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2101      	movs	r1, #1
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff ff23 	bl	80038d0 <SPI_WaitFlagStateUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d007      	beq.n	8003aa0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e000      	b.n	8003aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b28 <SPI_EndRxTxTransaction+0x7c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b2c <SPI_EndRxTxTransaction+0x80>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	0d5b      	lsrs	r3, r3, #21
 8003ac4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ad6:	d112      	bne.n	8003afe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2180      	movs	r1, #128	@ 0x80
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff fef4 	bl	80038d0 <SPI_WaitFlagStateUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af2:	f043 0220 	orr.w	r2, r3, #32
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e00f      	b.n	8003b1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b14:	2b80      	cmp	r3, #128	@ 0x80
 8003b16:	d0f2      	beq.n	8003afe <SPI_EndRxTxTransaction+0x52>
 8003b18:	e000      	b.n	8003b1c <SPI_EndRxTxTransaction+0x70>
        break;
 8003b1a:	bf00      	nop
  }

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000008 	.word	0x20000008
 8003b2c:	165e9f81 	.word	0x165e9f81

08003b30 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e034      	b.n	8003bb0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7fc fe46 	bl	80007ec <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3308      	adds	r3, #8
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	f000 fca6 	bl	80044bc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	f000 fcf0 	bl	8004560 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6858      	ldr	r0, [r3, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	f000 fd25 	bl	80045dc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	6892      	ldr	r2, [r2, #8]
 8003b9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	6892      	ldr	r2, [r2, #8]
 8003ba6:	f041 0101 	orr.w	r1, r1, #1
 8003baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e041      	b.n	8003c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd ffb4 	bl	8001b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	f000 fa96 	bl	8004128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d001      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e04e      	b.n	8003d0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a23      	ldr	r2, [pc, #140]	@ (8003d1c <HAL_TIM_Base_Start_IT+0xc4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d022      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9a:	d01d      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d20 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d018      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1e      	ldr	r2, [pc, #120]	@ (8003d24 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d013      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00e      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8003d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d009      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a19      	ldr	r2, [pc, #100]	@ (8003d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d004      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0x80>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a18      	ldr	r2, [pc, #96]	@ (8003d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d111      	bne.n	8003cfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d010      	beq.n	8003d0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	e007      	b.n	8003d0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800
 8003d28:	40000c00 	.word	0x40000c00
 8003d2c:	40010400 	.word	0x40010400
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40001800 	.word	0x40001800

08003d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d122      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d11b      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0202 	mvn.w	r2, #2
 8003d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f9b5 	bl	80040ea <HAL_TIM_IC_CaptureCallback>
 8003d80:	e005      	b.n	8003d8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f9a7 	bl	80040d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f9b8 	bl	80040fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d122      	bne.n	8003de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d11b      	bne.n	8003de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0204 	mvn.w	r2, #4
 8003db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f98b 	bl	80040ea <HAL_TIM_IC_CaptureCallback>
 8003dd4:	e005      	b.n	8003de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f97d 	bl	80040d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f98e 	bl	80040fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d122      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d11b      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0208 	mvn.w	r2, #8
 8003e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2204      	movs	r2, #4
 8003e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f961 	bl	80040ea <HAL_TIM_IC_CaptureCallback>
 8003e28:	e005      	b.n	8003e36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f953 	bl	80040d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f964 	bl	80040fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d122      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d11b      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0210 	mvn.w	r2, #16
 8003e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2208      	movs	r2, #8
 8003e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f937 	bl	80040ea <HAL_TIM_IC_CaptureCallback>
 8003e7c:	e005      	b.n	8003e8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f929 	bl	80040d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f93a 	bl	80040fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d10e      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d107      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0201 	mvn.w	r2, #1
 8003eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fd fcaa 	bl	8001810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec6:	2b80      	cmp	r3, #128	@ 0x80
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed4:	2b80      	cmp	r3, #128	@ 0x80
 8003ed6:	d107      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fae0 	bl	80044a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef2:	2b40      	cmp	r3, #64	@ 0x40
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f00:	2b40      	cmp	r3, #64	@ 0x40
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8ff 	bl	8004112 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0220 	mvn.w	r2, #32
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 faaa 	bl	8004494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_TIM_ConfigClockSource+0x1c>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e0b4      	b.n	80040ce <HAL_TIM_ConfigClockSource+0x186>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f9c:	d03e      	beq.n	800401c <HAL_TIM_ConfigClockSource+0xd4>
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa2:	f200 8087 	bhi.w	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003faa:	f000 8086 	beq.w	80040ba <HAL_TIM_ConfigClockSource+0x172>
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb2:	d87f      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb4:	2b70      	cmp	r3, #112	@ 0x70
 8003fb6:	d01a      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0xa6>
 8003fb8:	2b70      	cmp	r3, #112	@ 0x70
 8003fba:	d87b      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fbc:	2b60      	cmp	r3, #96	@ 0x60
 8003fbe:	d050      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x11a>
 8003fc0:	2b60      	cmp	r3, #96	@ 0x60
 8003fc2:	d877      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc4:	2b50      	cmp	r3, #80	@ 0x50
 8003fc6:	d03c      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0xfa>
 8003fc8:	2b50      	cmp	r3, #80	@ 0x50
 8003fca:	d873      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b40      	cmp	r3, #64	@ 0x40
 8003fce:	d058      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0x13a>
 8003fd0:	2b40      	cmp	r3, #64	@ 0x40
 8003fd2:	d86f      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b30      	cmp	r3, #48	@ 0x30
 8003fd6:	d064      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fd8:	2b30      	cmp	r3, #48	@ 0x30
 8003fda:	d86b      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d060      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d867      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d05c      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d05a      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fec:	e062      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6899      	ldr	r1, [r3, #8]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f000 f9ad 	bl	800435c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	609a      	str	r2, [r3, #8]
      break;
 800401a:	e04f      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6899      	ldr	r1, [r3, #8]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f000 f996 	bl	800435c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800403e:	609a      	str	r2, [r3, #8]
      break;
 8004040:	e03c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	461a      	mov	r2, r3
 8004050:	f000 f90a 	bl	8004268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2150      	movs	r1, #80	@ 0x50
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f963 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8004060:	e02c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	f000 f929 	bl	80042c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2160      	movs	r1, #96	@ 0x60
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f953 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 8004080:	e01c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	461a      	mov	r2, r3
 8004090:	f000 f8ea 	bl	8004268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2140      	movs	r1, #64	@ 0x40
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f943 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 80040a0:	e00c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f000 f93a 	bl	8004326 <TIM_ITRx_SetConfig>
      break;
 80040b2:	e003      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
      break;
 80040b8:	e000      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a40      	ldr	r2, [pc, #256]	@ (800423c <TIM_Base_SetConfig+0x114>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d013      	beq.n	8004168 <TIM_Base_SetConfig+0x40>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004146:	d00f      	beq.n	8004168 <TIM_Base_SetConfig+0x40>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a3d      	ldr	r2, [pc, #244]	@ (8004240 <TIM_Base_SetConfig+0x118>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00b      	beq.n	8004168 <TIM_Base_SetConfig+0x40>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3c      	ldr	r2, [pc, #240]	@ (8004244 <TIM_Base_SetConfig+0x11c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d007      	beq.n	8004168 <TIM_Base_SetConfig+0x40>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3b      	ldr	r2, [pc, #236]	@ (8004248 <TIM_Base_SetConfig+0x120>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d003      	beq.n	8004168 <TIM_Base_SetConfig+0x40>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a3a      	ldr	r2, [pc, #232]	@ (800424c <TIM_Base_SetConfig+0x124>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d108      	bne.n	800417a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2f      	ldr	r2, [pc, #188]	@ (800423c <TIM_Base_SetConfig+0x114>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d02b      	beq.n	80041da <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004188:	d027      	beq.n	80041da <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a2c      	ldr	r2, [pc, #176]	@ (8004240 <TIM_Base_SetConfig+0x118>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d023      	beq.n	80041da <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a2b      	ldr	r2, [pc, #172]	@ (8004244 <TIM_Base_SetConfig+0x11c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01f      	beq.n	80041da <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a2a      	ldr	r2, [pc, #168]	@ (8004248 <TIM_Base_SetConfig+0x120>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01b      	beq.n	80041da <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a29      	ldr	r2, [pc, #164]	@ (800424c <TIM_Base_SetConfig+0x124>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d017      	beq.n	80041da <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a28      	ldr	r2, [pc, #160]	@ (8004250 <TIM_Base_SetConfig+0x128>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a27      	ldr	r2, [pc, #156]	@ (8004254 <TIM_Base_SetConfig+0x12c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00f      	beq.n	80041da <TIM_Base_SetConfig+0xb2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a26      	ldr	r2, [pc, #152]	@ (8004258 <TIM_Base_SetConfig+0x130>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00b      	beq.n	80041da <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a25      	ldr	r2, [pc, #148]	@ (800425c <TIM_Base_SetConfig+0x134>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d007      	beq.n	80041da <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a24      	ldr	r2, [pc, #144]	@ (8004260 <TIM_Base_SetConfig+0x138>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a23      	ldr	r2, [pc, #140]	@ (8004264 <TIM_Base_SetConfig+0x13c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d108      	bne.n	80041ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a0a      	ldr	r2, [pc, #40]	@ (800423c <TIM_Base_SetConfig+0x114>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_Base_SetConfig+0xf8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a0c      	ldr	r2, [pc, #48]	@ (800424c <TIM_Base_SetConfig+0x124>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d103      	bne.n	8004228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	615a      	str	r2, [r3, #20]
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40010000 	.word	0x40010000
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40000c00 	.word	0x40000c00
 800424c:	40010400 	.word	0x40010400
 8004250:	40014000 	.word	0x40014000
 8004254:	40014400 	.word	0x40014400
 8004258:	40014800 	.word	0x40014800
 800425c:	40001800 	.word	0x40001800
 8004260:	40001c00 	.word	0x40001c00
 8004264:	40002000 	.word	0x40002000

08004268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f023 030a 	bic.w	r3, r3, #10
 80042a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f023 0210 	bic.w	r2, r3, #16
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	031b      	lsls	r3, r3, #12
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004326:	b480      	push	{r7}
 8004328:	b085      	sub	sp, #20
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	f043 0307 	orr.w	r3, r3, #7
 8004348:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	609a      	str	r2, [r3, #8]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	021a      	lsls	r2, r3, #8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	431a      	orrs	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4313      	orrs	r3, r2
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	609a      	str	r2, [r3, #8]
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e05a      	b.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a21      	ldr	r2, [pc, #132]	@ (8004478 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004400:	d01d      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1d      	ldr	r2, [pc, #116]	@ (800447c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1b      	ldr	r2, [pc, #108]	@ (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1a      	ldr	r2, [pc, #104]	@ (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a18      	ldr	r2, [pc, #96]	@ (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a17      	ldr	r2, [pc, #92]	@ (800448c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a15      	ldr	r2, [pc, #84]	@ (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10c      	bne.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	4313      	orrs	r3, r2
 800444e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010000 	.word	0x40010000
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800
 8004484:	40000c00 	.word	0x40000c00
 8004488:	40010400 	.word	0x40010400
 800448c:	40014000 	.word	0x40014000
 8004490:	40001800 	.word	0x40001800

08004494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4b20      	ldr	r3, [pc, #128]	@ (800455c <FSMC_NORSRAM_Init+0xa0>)
 80044da:	4013      	ands	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80044e6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80044ec:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80044f2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80044f8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80044fe:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004504:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800450a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8004510:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8004516:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 800451c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8004522:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8004528:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d103      	bne.n	8004540 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800453e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68f9      	ldr	r1, [r7, #12]
 8004548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	fff00080 	.word	0xfff00080

08004560 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004582:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800458e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004596:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800459e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80045a8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	3b02      	subs	r3, #2
 80045b0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80045b2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80045b8:	4313      	orrs	r3, r2
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6979      	ldr	r1, [r7, #20]
 80045c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045f4:	d122      	bne.n	800463c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045fe:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4b15      	ldr	r3, [pc, #84]	@ (8004658 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004604:	4013      	ands	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004612:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800461a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004622:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004628:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6979      	ldr	r1, [r7, #20]
 8004636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800463a:	e005      	b.n	8004648 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8004644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	cff00000 	.word	0xcff00000

0800465c <siprintf>:
 800465c:	b40e      	push	{r1, r2, r3}
 800465e:	b500      	push	{lr}
 8004660:	b09c      	sub	sp, #112	@ 0x70
 8004662:	ab1d      	add	r3, sp, #116	@ 0x74
 8004664:	9002      	str	r0, [sp, #8]
 8004666:	9006      	str	r0, [sp, #24]
 8004668:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800466c:	4809      	ldr	r0, [pc, #36]	@ (8004694 <siprintf+0x38>)
 800466e:	9107      	str	r1, [sp, #28]
 8004670:	9104      	str	r1, [sp, #16]
 8004672:	4909      	ldr	r1, [pc, #36]	@ (8004698 <siprintf+0x3c>)
 8004674:	f853 2b04 	ldr.w	r2, [r3], #4
 8004678:	9105      	str	r1, [sp, #20]
 800467a:	6800      	ldr	r0, [r0, #0]
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	a902      	add	r1, sp, #8
 8004680:	f000 f89c 	bl	80047bc <_svfiprintf_r>
 8004684:	9b02      	ldr	r3, [sp, #8]
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	b01c      	add	sp, #112	@ 0x70
 800468c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004690:	b003      	add	sp, #12
 8004692:	4770      	bx	lr
 8004694:	2000001c 	.word	0x2000001c
 8004698:	ffff0208 	.word	0xffff0208

0800469c <memset>:
 800469c:	4402      	add	r2, r0
 800469e:	4603      	mov	r3, r0
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d100      	bne.n	80046a6 <memset+0xa>
 80046a4:	4770      	bx	lr
 80046a6:	f803 1b01 	strb.w	r1, [r3], #1
 80046aa:	e7f9      	b.n	80046a0 <memset+0x4>

080046ac <__errno>:
 80046ac:	4b01      	ldr	r3, [pc, #4]	@ (80046b4 <__errno+0x8>)
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	2000001c 	.word	0x2000001c

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4d0d      	ldr	r5, [pc, #52]	@ (80046f0 <__libc_init_array+0x38>)
 80046bc:	4c0d      	ldr	r4, [pc, #52]	@ (80046f4 <__libc_init_array+0x3c>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	2600      	movs	r6, #0
 80046c4:	42a6      	cmp	r6, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	4d0b      	ldr	r5, [pc, #44]	@ (80046f8 <__libc_init_array+0x40>)
 80046ca:	4c0c      	ldr	r4, [pc, #48]	@ (80046fc <__libc_init_array+0x44>)
 80046cc:	f000 fc66 	bl	8004f9c <_init>
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	2600      	movs	r6, #0
 80046d6:	42a6      	cmp	r6, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e0:	4798      	blx	r3
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ea:	4798      	blx	r3
 80046ec:	3601      	adds	r6, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	08007fc4 	.word	0x08007fc4
 80046f4:	08007fc4 	.word	0x08007fc4
 80046f8:	08007fc4 	.word	0x08007fc4
 80046fc:	08007fc8 	.word	0x08007fc8

08004700 <__retarget_lock_acquire_recursive>:
 8004700:	4770      	bx	lr

08004702 <__retarget_lock_release_recursive>:
 8004702:	4770      	bx	lr

08004704 <__ssputs_r>:
 8004704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	688e      	ldr	r6, [r1, #8]
 800470a:	461f      	mov	r7, r3
 800470c:	42be      	cmp	r6, r7
 800470e:	680b      	ldr	r3, [r1, #0]
 8004710:	4682      	mov	sl, r0
 8004712:	460c      	mov	r4, r1
 8004714:	4690      	mov	r8, r2
 8004716:	d82d      	bhi.n	8004774 <__ssputs_r+0x70>
 8004718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800471c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004720:	d026      	beq.n	8004770 <__ssputs_r+0x6c>
 8004722:	6965      	ldr	r5, [r4, #20]
 8004724:	6909      	ldr	r1, [r1, #16]
 8004726:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800472a:	eba3 0901 	sub.w	r9, r3, r1
 800472e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004732:	1c7b      	adds	r3, r7, #1
 8004734:	444b      	add	r3, r9
 8004736:	106d      	asrs	r5, r5, #1
 8004738:	429d      	cmp	r5, r3
 800473a:	bf38      	it	cc
 800473c:	461d      	movcc	r5, r3
 800473e:	0553      	lsls	r3, r2, #21
 8004740:	d527      	bpl.n	8004792 <__ssputs_r+0x8e>
 8004742:	4629      	mov	r1, r5
 8004744:	f000 f958 	bl	80049f8 <_malloc_r>
 8004748:	4606      	mov	r6, r0
 800474a:	b360      	cbz	r0, 80047a6 <__ssputs_r+0xa2>
 800474c:	6921      	ldr	r1, [r4, #16]
 800474e:	464a      	mov	r2, r9
 8004750:	f000 fbc4 	bl	8004edc <memcpy>
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800475a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800475e:	81a3      	strh	r3, [r4, #12]
 8004760:	6126      	str	r6, [r4, #16]
 8004762:	6165      	str	r5, [r4, #20]
 8004764:	444e      	add	r6, r9
 8004766:	eba5 0509 	sub.w	r5, r5, r9
 800476a:	6026      	str	r6, [r4, #0]
 800476c:	60a5      	str	r5, [r4, #8]
 800476e:	463e      	mov	r6, r7
 8004770:	42be      	cmp	r6, r7
 8004772:	d900      	bls.n	8004776 <__ssputs_r+0x72>
 8004774:	463e      	mov	r6, r7
 8004776:	6820      	ldr	r0, [r4, #0]
 8004778:	4632      	mov	r2, r6
 800477a:	4641      	mov	r1, r8
 800477c:	f000 fb84 	bl	8004e88 <memmove>
 8004780:	68a3      	ldr	r3, [r4, #8]
 8004782:	1b9b      	subs	r3, r3, r6
 8004784:	60a3      	str	r3, [r4, #8]
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	4433      	add	r3, r6
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	2000      	movs	r0, #0
 800478e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004792:	462a      	mov	r2, r5
 8004794:	f000 fb4a 	bl	8004e2c <_realloc_r>
 8004798:	4606      	mov	r6, r0
 800479a:	2800      	cmp	r0, #0
 800479c:	d1e0      	bne.n	8004760 <__ssputs_r+0x5c>
 800479e:	6921      	ldr	r1, [r4, #16]
 80047a0:	4650      	mov	r0, sl
 80047a2:	f000 fba9 	bl	8004ef8 <_free_r>
 80047a6:	230c      	movs	r3, #12
 80047a8:	f8ca 3000 	str.w	r3, [sl]
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047b8:	e7e9      	b.n	800478e <__ssputs_r+0x8a>
	...

080047bc <_svfiprintf_r>:
 80047bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c0:	4698      	mov	r8, r3
 80047c2:	898b      	ldrh	r3, [r1, #12]
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	b09d      	sub	sp, #116	@ 0x74
 80047c8:	4607      	mov	r7, r0
 80047ca:	460d      	mov	r5, r1
 80047cc:	4614      	mov	r4, r2
 80047ce:	d510      	bpl.n	80047f2 <_svfiprintf_r+0x36>
 80047d0:	690b      	ldr	r3, [r1, #16]
 80047d2:	b973      	cbnz	r3, 80047f2 <_svfiprintf_r+0x36>
 80047d4:	2140      	movs	r1, #64	@ 0x40
 80047d6:	f000 f90f 	bl	80049f8 <_malloc_r>
 80047da:	6028      	str	r0, [r5, #0]
 80047dc:	6128      	str	r0, [r5, #16]
 80047de:	b930      	cbnz	r0, 80047ee <_svfiprintf_r+0x32>
 80047e0:	230c      	movs	r3, #12
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047e8:	b01d      	add	sp, #116	@ 0x74
 80047ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ee:	2340      	movs	r3, #64	@ 0x40
 80047f0:	616b      	str	r3, [r5, #20]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047f6:	2320      	movs	r3, #32
 80047f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004800:	2330      	movs	r3, #48	@ 0x30
 8004802:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80049a0 <_svfiprintf_r+0x1e4>
 8004806:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800480a:	f04f 0901 	mov.w	r9, #1
 800480e:	4623      	mov	r3, r4
 8004810:	469a      	mov	sl, r3
 8004812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004816:	b10a      	cbz	r2, 800481c <_svfiprintf_r+0x60>
 8004818:	2a25      	cmp	r2, #37	@ 0x25
 800481a:	d1f9      	bne.n	8004810 <_svfiprintf_r+0x54>
 800481c:	ebba 0b04 	subs.w	fp, sl, r4
 8004820:	d00b      	beq.n	800483a <_svfiprintf_r+0x7e>
 8004822:	465b      	mov	r3, fp
 8004824:	4622      	mov	r2, r4
 8004826:	4629      	mov	r1, r5
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff ff6b 	bl	8004704 <__ssputs_r>
 800482e:	3001      	adds	r0, #1
 8004830:	f000 80a7 	beq.w	8004982 <_svfiprintf_r+0x1c6>
 8004834:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004836:	445a      	add	r2, fp
 8004838:	9209      	str	r2, [sp, #36]	@ 0x24
 800483a:	f89a 3000 	ldrb.w	r3, [sl]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 809f 	beq.w	8004982 <_svfiprintf_r+0x1c6>
 8004844:	2300      	movs	r3, #0
 8004846:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800484a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800484e:	f10a 0a01 	add.w	sl, sl, #1
 8004852:	9304      	str	r3, [sp, #16]
 8004854:	9307      	str	r3, [sp, #28]
 8004856:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800485a:	931a      	str	r3, [sp, #104]	@ 0x68
 800485c:	4654      	mov	r4, sl
 800485e:	2205      	movs	r2, #5
 8004860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004864:	484e      	ldr	r0, [pc, #312]	@ (80049a0 <_svfiprintf_r+0x1e4>)
 8004866:	f7fb fcbb 	bl	80001e0 <memchr>
 800486a:	9a04      	ldr	r2, [sp, #16]
 800486c:	b9d8      	cbnz	r0, 80048a6 <_svfiprintf_r+0xea>
 800486e:	06d0      	lsls	r0, r2, #27
 8004870:	bf44      	itt	mi
 8004872:	2320      	movmi	r3, #32
 8004874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004878:	0711      	lsls	r1, r2, #28
 800487a:	bf44      	itt	mi
 800487c:	232b      	movmi	r3, #43	@ 0x2b
 800487e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004882:	f89a 3000 	ldrb.w	r3, [sl]
 8004886:	2b2a      	cmp	r3, #42	@ 0x2a
 8004888:	d015      	beq.n	80048b6 <_svfiprintf_r+0xfa>
 800488a:	9a07      	ldr	r2, [sp, #28]
 800488c:	4654      	mov	r4, sl
 800488e:	2000      	movs	r0, #0
 8004890:	f04f 0c0a 	mov.w	ip, #10
 8004894:	4621      	mov	r1, r4
 8004896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800489a:	3b30      	subs	r3, #48	@ 0x30
 800489c:	2b09      	cmp	r3, #9
 800489e:	d94b      	bls.n	8004938 <_svfiprintf_r+0x17c>
 80048a0:	b1b0      	cbz	r0, 80048d0 <_svfiprintf_r+0x114>
 80048a2:	9207      	str	r2, [sp, #28]
 80048a4:	e014      	b.n	80048d0 <_svfiprintf_r+0x114>
 80048a6:	eba0 0308 	sub.w	r3, r0, r8
 80048aa:	fa09 f303 	lsl.w	r3, r9, r3
 80048ae:	4313      	orrs	r3, r2
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	46a2      	mov	sl, r4
 80048b4:	e7d2      	b.n	800485c <_svfiprintf_r+0xa0>
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	1d19      	adds	r1, r3, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	9103      	str	r1, [sp, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfbb      	ittet	lt
 80048c2:	425b      	neglt	r3, r3
 80048c4:	f042 0202 	orrlt.w	r2, r2, #2
 80048c8:	9307      	strge	r3, [sp, #28]
 80048ca:	9307      	strlt	r3, [sp, #28]
 80048cc:	bfb8      	it	lt
 80048ce:	9204      	strlt	r2, [sp, #16]
 80048d0:	7823      	ldrb	r3, [r4, #0]
 80048d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80048d4:	d10a      	bne.n	80048ec <_svfiprintf_r+0x130>
 80048d6:	7863      	ldrb	r3, [r4, #1]
 80048d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80048da:	d132      	bne.n	8004942 <_svfiprintf_r+0x186>
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	1d1a      	adds	r2, r3, #4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	9203      	str	r2, [sp, #12]
 80048e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048e8:	3402      	adds	r4, #2
 80048ea:	9305      	str	r3, [sp, #20]
 80048ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80049b0 <_svfiprintf_r+0x1f4>
 80048f0:	7821      	ldrb	r1, [r4, #0]
 80048f2:	2203      	movs	r2, #3
 80048f4:	4650      	mov	r0, sl
 80048f6:	f7fb fc73 	bl	80001e0 <memchr>
 80048fa:	b138      	cbz	r0, 800490c <_svfiprintf_r+0x150>
 80048fc:	9b04      	ldr	r3, [sp, #16]
 80048fe:	eba0 000a 	sub.w	r0, r0, sl
 8004902:	2240      	movs	r2, #64	@ 0x40
 8004904:	4082      	lsls	r2, r0
 8004906:	4313      	orrs	r3, r2
 8004908:	3401      	adds	r4, #1
 800490a:	9304      	str	r3, [sp, #16]
 800490c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004910:	4824      	ldr	r0, [pc, #144]	@ (80049a4 <_svfiprintf_r+0x1e8>)
 8004912:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004916:	2206      	movs	r2, #6
 8004918:	f7fb fc62 	bl	80001e0 <memchr>
 800491c:	2800      	cmp	r0, #0
 800491e:	d036      	beq.n	800498e <_svfiprintf_r+0x1d2>
 8004920:	4b21      	ldr	r3, [pc, #132]	@ (80049a8 <_svfiprintf_r+0x1ec>)
 8004922:	bb1b      	cbnz	r3, 800496c <_svfiprintf_r+0x1b0>
 8004924:	9b03      	ldr	r3, [sp, #12]
 8004926:	3307      	adds	r3, #7
 8004928:	f023 0307 	bic.w	r3, r3, #7
 800492c:	3308      	adds	r3, #8
 800492e:	9303      	str	r3, [sp, #12]
 8004930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004932:	4433      	add	r3, r6
 8004934:	9309      	str	r3, [sp, #36]	@ 0x24
 8004936:	e76a      	b.n	800480e <_svfiprintf_r+0x52>
 8004938:	fb0c 3202 	mla	r2, ip, r2, r3
 800493c:	460c      	mov	r4, r1
 800493e:	2001      	movs	r0, #1
 8004940:	e7a8      	b.n	8004894 <_svfiprintf_r+0xd8>
 8004942:	2300      	movs	r3, #0
 8004944:	3401      	adds	r4, #1
 8004946:	9305      	str	r3, [sp, #20]
 8004948:	4619      	mov	r1, r3
 800494a:	f04f 0c0a 	mov.w	ip, #10
 800494e:	4620      	mov	r0, r4
 8004950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004954:	3a30      	subs	r2, #48	@ 0x30
 8004956:	2a09      	cmp	r2, #9
 8004958:	d903      	bls.n	8004962 <_svfiprintf_r+0x1a6>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0c6      	beq.n	80048ec <_svfiprintf_r+0x130>
 800495e:	9105      	str	r1, [sp, #20]
 8004960:	e7c4      	b.n	80048ec <_svfiprintf_r+0x130>
 8004962:	fb0c 2101 	mla	r1, ip, r1, r2
 8004966:	4604      	mov	r4, r0
 8004968:	2301      	movs	r3, #1
 800496a:	e7f0      	b.n	800494e <_svfiprintf_r+0x192>
 800496c:	ab03      	add	r3, sp, #12
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	462a      	mov	r2, r5
 8004972:	4b0e      	ldr	r3, [pc, #56]	@ (80049ac <_svfiprintf_r+0x1f0>)
 8004974:	a904      	add	r1, sp, #16
 8004976:	4638      	mov	r0, r7
 8004978:	f3af 8000 	nop.w
 800497c:	1c42      	adds	r2, r0, #1
 800497e:	4606      	mov	r6, r0
 8004980:	d1d6      	bne.n	8004930 <_svfiprintf_r+0x174>
 8004982:	89ab      	ldrh	r3, [r5, #12]
 8004984:	065b      	lsls	r3, r3, #25
 8004986:	f53f af2d 	bmi.w	80047e4 <_svfiprintf_r+0x28>
 800498a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800498c:	e72c      	b.n	80047e8 <_svfiprintf_r+0x2c>
 800498e:	ab03      	add	r3, sp, #12
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	462a      	mov	r2, r5
 8004994:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <_svfiprintf_r+0x1f0>)
 8004996:	a904      	add	r1, sp, #16
 8004998:	4638      	mov	r0, r7
 800499a:	f000 f91b 	bl	8004bd4 <_printf_i>
 800499e:	e7ed      	b.n	800497c <_svfiprintf_r+0x1c0>
 80049a0:	08007f88 	.word	0x08007f88
 80049a4:	08007f92 	.word	0x08007f92
 80049a8:	00000000 	.word	0x00000000
 80049ac:	08004705 	.word	0x08004705
 80049b0:	08007f8e 	.word	0x08007f8e

080049b4 <sbrk_aligned>:
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	4e0f      	ldr	r6, [pc, #60]	@ (80049f4 <sbrk_aligned+0x40>)
 80049b8:	460c      	mov	r4, r1
 80049ba:	6831      	ldr	r1, [r6, #0]
 80049bc:	4605      	mov	r5, r0
 80049be:	b911      	cbnz	r1, 80049c6 <sbrk_aligned+0x12>
 80049c0:	f000 fa7c 	bl	8004ebc <_sbrk_r>
 80049c4:	6030      	str	r0, [r6, #0]
 80049c6:	4621      	mov	r1, r4
 80049c8:	4628      	mov	r0, r5
 80049ca:	f000 fa77 	bl	8004ebc <_sbrk_r>
 80049ce:	1c43      	adds	r3, r0, #1
 80049d0:	d103      	bne.n	80049da <sbrk_aligned+0x26>
 80049d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80049d6:	4620      	mov	r0, r4
 80049d8:	bd70      	pop	{r4, r5, r6, pc}
 80049da:	1cc4      	adds	r4, r0, #3
 80049dc:	f024 0403 	bic.w	r4, r4, #3
 80049e0:	42a0      	cmp	r0, r4
 80049e2:	d0f8      	beq.n	80049d6 <sbrk_aligned+0x22>
 80049e4:	1a21      	subs	r1, r4, r0
 80049e6:	4628      	mov	r0, r5
 80049e8:	f000 fa68 	bl	8004ebc <_sbrk_r>
 80049ec:	3001      	adds	r0, #1
 80049ee:	d1f2      	bne.n	80049d6 <sbrk_aligned+0x22>
 80049f0:	e7ef      	b.n	80049d2 <sbrk_aligned+0x1e>
 80049f2:	bf00      	nop
 80049f4:	20000308 	.word	0x20000308

080049f8 <_malloc_r>:
 80049f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049fc:	1ccd      	adds	r5, r1, #3
 80049fe:	f025 0503 	bic.w	r5, r5, #3
 8004a02:	3508      	adds	r5, #8
 8004a04:	2d0c      	cmp	r5, #12
 8004a06:	bf38      	it	cc
 8004a08:	250c      	movcc	r5, #12
 8004a0a:	2d00      	cmp	r5, #0
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	db01      	blt.n	8004a14 <_malloc_r+0x1c>
 8004a10:	42a9      	cmp	r1, r5
 8004a12:	d904      	bls.n	8004a1e <_malloc_r+0x26>
 8004a14:	230c      	movs	r3, #12
 8004a16:	6033      	str	r3, [r6, #0]
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004af4 <_malloc_r+0xfc>
 8004a22:	f000 f9f7 	bl	8004e14 <__malloc_lock>
 8004a26:	f8d8 3000 	ldr.w	r3, [r8]
 8004a2a:	461c      	mov	r4, r3
 8004a2c:	bb44      	cbnz	r4, 8004a80 <_malloc_r+0x88>
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4630      	mov	r0, r6
 8004a32:	f7ff ffbf 	bl	80049b4 <sbrk_aligned>
 8004a36:	1c43      	adds	r3, r0, #1
 8004a38:	4604      	mov	r4, r0
 8004a3a:	d158      	bne.n	8004aee <_malloc_r+0xf6>
 8004a3c:	f8d8 4000 	ldr.w	r4, [r8]
 8004a40:	4627      	mov	r7, r4
 8004a42:	2f00      	cmp	r7, #0
 8004a44:	d143      	bne.n	8004ace <_malloc_r+0xd6>
 8004a46:	2c00      	cmp	r4, #0
 8004a48:	d04b      	beq.n	8004ae2 <_malloc_r+0xea>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	4630      	mov	r0, r6
 8004a50:	eb04 0903 	add.w	r9, r4, r3
 8004a54:	f000 fa32 	bl	8004ebc <_sbrk_r>
 8004a58:	4581      	cmp	r9, r0
 8004a5a:	d142      	bne.n	8004ae2 <_malloc_r+0xea>
 8004a5c:	6821      	ldr	r1, [r4, #0]
 8004a5e:	1a6d      	subs	r5, r5, r1
 8004a60:	4629      	mov	r1, r5
 8004a62:	4630      	mov	r0, r6
 8004a64:	f7ff ffa6 	bl	80049b4 <sbrk_aligned>
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d03a      	beq.n	8004ae2 <_malloc_r+0xea>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	442b      	add	r3, r5
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	f8d8 3000 	ldr.w	r3, [r8]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	bb62      	cbnz	r2, 8004ad4 <_malloc_r+0xdc>
 8004a7a:	f8c8 7000 	str.w	r7, [r8]
 8004a7e:	e00f      	b.n	8004aa0 <_malloc_r+0xa8>
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	1b52      	subs	r2, r2, r5
 8004a84:	d420      	bmi.n	8004ac8 <_malloc_r+0xd0>
 8004a86:	2a0b      	cmp	r2, #11
 8004a88:	d917      	bls.n	8004aba <_malloc_r+0xc2>
 8004a8a:	1961      	adds	r1, r4, r5
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	6025      	str	r5, [r4, #0]
 8004a90:	bf18      	it	ne
 8004a92:	6059      	strne	r1, [r3, #4]
 8004a94:	6863      	ldr	r3, [r4, #4]
 8004a96:	bf08      	it	eq
 8004a98:	f8c8 1000 	streq.w	r1, [r8]
 8004a9c:	5162      	str	r2, [r4, r5]
 8004a9e:	604b      	str	r3, [r1, #4]
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f000 f9bd 	bl	8004e20 <__malloc_unlock>
 8004aa6:	f104 000b 	add.w	r0, r4, #11
 8004aaa:	1d23      	adds	r3, r4, #4
 8004aac:	f020 0007 	bic.w	r0, r0, #7
 8004ab0:	1ac2      	subs	r2, r0, r3
 8004ab2:	bf1c      	itt	ne
 8004ab4:	1a1b      	subne	r3, r3, r0
 8004ab6:	50a3      	strne	r3, [r4, r2]
 8004ab8:	e7af      	b.n	8004a1a <_malloc_r+0x22>
 8004aba:	6862      	ldr	r2, [r4, #4]
 8004abc:	42a3      	cmp	r3, r4
 8004abe:	bf0c      	ite	eq
 8004ac0:	f8c8 2000 	streq.w	r2, [r8]
 8004ac4:	605a      	strne	r2, [r3, #4]
 8004ac6:	e7eb      	b.n	8004aa0 <_malloc_r+0xa8>
 8004ac8:	4623      	mov	r3, r4
 8004aca:	6864      	ldr	r4, [r4, #4]
 8004acc:	e7ae      	b.n	8004a2c <_malloc_r+0x34>
 8004ace:	463c      	mov	r4, r7
 8004ad0:	687f      	ldr	r7, [r7, #4]
 8004ad2:	e7b6      	b.n	8004a42 <_malloc_r+0x4a>
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	42a3      	cmp	r3, r4
 8004ada:	d1fb      	bne.n	8004ad4 <_malloc_r+0xdc>
 8004adc:	2300      	movs	r3, #0
 8004ade:	6053      	str	r3, [r2, #4]
 8004ae0:	e7de      	b.n	8004aa0 <_malloc_r+0xa8>
 8004ae2:	230c      	movs	r3, #12
 8004ae4:	6033      	str	r3, [r6, #0]
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f000 f99a 	bl	8004e20 <__malloc_unlock>
 8004aec:	e794      	b.n	8004a18 <_malloc_r+0x20>
 8004aee:	6005      	str	r5, [r0, #0]
 8004af0:	e7d6      	b.n	8004aa0 <_malloc_r+0xa8>
 8004af2:	bf00      	nop
 8004af4:	2000030c 	.word	0x2000030c

08004af8 <_printf_common>:
 8004af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004afc:	4616      	mov	r6, r2
 8004afe:	4698      	mov	r8, r3
 8004b00:	688a      	ldr	r2, [r1, #8]
 8004b02:	690b      	ldr	r3, [r1, #16]
 8004b04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bfb8      	it	lt
 8004b0c:	4613      	movlt	r3, r2
 8004b0e:	6033      	str	r3, [r6, #0]
 8004b10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b14:	4607      	mov	r7, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	b10a      	cbz	r2, 8004b1e <_printf_common+0x26>
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	6033      	str	r3, [r6, #0]
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	0699      	lsls	r1, r3, #26
 8004b22:	bf42      	ittt	mi
 8004b24:	6833      	ldrmi	r3, [r6, #0]
 8004b26:	3302      	addmi	r3, #2
 8004b28:	6033      	strmi	r3, [r6, #0]
 8004b2a:	6825      	ldr	r5, [r4, #0]
 8004b2c:	f015 0506 	ands.w	r5, r5, #6
 8004b30:	d106      	bne.n	8004b40 <_printf_common+0x48>
 8004b32:	f104 0a19 	add.w	sl, r4, #25
 8004b36:	68e3      	ldr	r3, [r4, #12]
 8004b38:	6832      	ldr	r2, [r6, #0]
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	42ab      	cmp	r3, r5
 8004b3e:	dc26      	bgt.n	8004b8e <_printf_common+0x96>
 8004b40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	3b00      	subs	r3, #0
 8004b48:	bf18      	it	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	0692      	lsls	r2, r2, #26
 8004b4e:	d42b      	bmi.n	8004ba8 <_printf_common+0xb0>
 8004b50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b54:	4641      	mov	r1, r8
 8004b56:	4638      	mov	r0, r7
 8004b58:	47c8      	blx	r9
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d01e      	beq.n	8004b9c <_printf_common+0xa4>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	6922      	ldr	r2, [r4, #16]
 8004b62:	f003 0306 	and.w	r3, r3, #6
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	bf02      	ittt	eq
 8004b6a:	68e5      	ldreq	r5, [r4, #12]
 8004b6c:	6833      	ldreq	r3, [r6, #0]
 8004b6e:	1aed      	subeq	r5, r5, r3
 8004b70:	68a3      	ldr	r3, [r4, #8]
 8004b72:	bf0c      	ite	eq
 8004b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b78:	2500      	movne	r5, #0
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	bfc4      	itt	gt
 8004b7e:	1a9b      	subgt	r3, r3, r2
 8004b80:	18ed      	addgt	r5, r5, r3
 8004b82:	2600      	movs	r6, #0
 8004b84:	341a      	adds	r4, #26
 8004b86:	42b5      	cmp	r5, r6
 8004b88:	d11a      	bne.n	8004bc0 <_printf_common+0xc8>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	e008      	b.n	8004ba0 <_printf_common+0xa8>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4652      	mov	r2, sl
 8004b92:	4641      	mov	r1, r8
 8004b94:	4638      	mov	r0, r7
 8004b96:	47c8      	blx	r9
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d103      	bne.n	8004ba4 <_printf_common+0xac>
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba4:	3501      	adds	r5, #1
 8004ba6:	e7c6      	b.n	8004b36 <_printf_common+0x3e>
 8004ba8:	18e1      	adds	r1, r4, r3
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	2030      	movs	r0, #48	@ 0x30
 8004bae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bb2:	4422      	add	r2, r4
 8004bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	e7c7      	b.n	8004b50 <_printf_common+0x58>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	47c8      	blx	r9
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d0e6      	beq.n	8004b9c <_printf_common+0xa4>
 8004bce:	3601      	adds	r6, #1
 8004bd0:	e7d9      	b.n	8004b86 <_printf_common+0x8e>
	...

08004bd4 <_printf_i>:
 8004bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	7e0f      	ldrb	r7, [r1, #24]
 8004bda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004bdc:	2f78      	cmp	r7, #120	@ 0x78
 8004bde:	4691      	mov	r9, r2
 8004be0:	4680      	mov	r8, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	469a      	mov	sl, r3
 8004be6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bea:	d807      	bhi.n	8004bfc <_printf_i+0x28>
 8004bec:	2f62      	cmp	r7, #98	@ 0x62
 8004bee:	d80a      	bhi.n	8004c06 <_printf_i+0x32>
 8004bf0:	2f00      	cmp	r7, #0
 8004bf2:	f000 80d2 	beq.w	8004d9a <_printf_i+0x1c6>
 8004bf6:	2f58      	cmp	r7, #88	@ 0x58
 8004bf8:	f000 80b9 	beq.w	8004d6e <_printf_i+0x19a>
 8004bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c04:	e03a      	b.n	8004c7c <_printf_i+0xa8>
 8004c06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c0a:	2b15      	cmp	r3, #21
 8004c0c:	d8f6      	bhi.n	8004bfc <_printf_i+0x28>
 8004c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c14 <_printf_i+0x40>)
 8004c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c14:	08004c6d 	.word	0x08004c6d
 8004c18:	08004c81 	.word	0x08004c81
 8004c1c:	08004bfd 	.word	0x08004bfd
 8004c20:	08004bfd 	.word	0x08004bfd
 8004c24:	08004bfd 	.word	0x08004bfd
 8004c28:	08004bfd 	.word	0x08004bfd
 8004c2c:	08004c81 	.word	0x08004c81
 8004c30:	08004bfd 	.word	0x08004bfd
 8004c34:	08004bfd 	.word	0x08004bfd
 8004c38:	08004bfd 	.word	0x08004bfd
 8004c3c:	08004bfd 	.word	0x08004bfd
 8004c40:	08004d81 	.word	0x08004d81
 8004c44:	08004cab 	.word	0x08004cab
 8004c48:	08004d3b 	.word	0x08004d3b
 8004c4c:	08004bfd 	.word	0x08004bfd
 8004c50:	08004bfd 	.word	0x08004bfd
 8004c54:	08004da3 	.word	0x08004da3
 8004c58:	08004bfd 	.word	0x08004bfd
 8004c5c:	08004cab 	.word	0x08004cab
 8004c60:	08004bfd 	.word	0x08004bfd
 8004c64:	08004bfd 	.word	0x08004bfd
 8004c68:	08004d43 	.word	0x08004d43
 8004c6c:	6833      	ldr	r3, [r6, #0]
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6032      	str	r2, [r6, #0]
 8004c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e09d      	b.n	8004dbc <_printf_i+0x1e8>
 8004c80:	6833      	ldr	r3, [r6, #0]
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	1d19      	adds	r1, r3, #4
 8004c86:	6031      	str	r1, [r6, #0]
 8004c88:	0606      	lsls	r6, r0, #24
 8004c8a:	d501      	bpl.n	8004c90 <_printf_i+0xbc>
 8004c8c:	681d      	ldr	r5, [r3, #0]
 8004c8e:	e003      	b.n	8004c98 <_printf_i+0xc4>
 8004c90:	0645      	lsls	r5, r0, #25
 8004c92:	d5fb      	bpl.n	8004c8c <_printf_i+0xb8>
 8004c94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c98:	2d00      	cmp	r5, #0
 8004c9a:	da03      	bge.n	8004ca4 <_printf_i+0xd0>
 8004c9c:	232d      	movs	r3, #45	@ 0x2d
 8004c9e:	426d      	negs	r5, r5
 8004ca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ca4:	4859      	ldr	r0, [pc, #356]	@ (8004e0c <_printf_i+0x238>)
 8004ca6:	230a      	movs	r3, #10
 8004ca8:	e011      	b.n	8004cce <_printf_i+0xfa>
 8004caa:	6821      	ldr	r1, [r4, #0]
 8004cac:	6833      	ldr	r3, [r6, #0]
 8004cae:	0608      	lsls	r0, r1, #24
 8004cb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cb4:	d402      	bmi.n	8004cbc <_printf_i+0xe8>
 8004cb6:	0649      	lsls	r1, r1, #25
 8004cb8:	bf48      	it	mi
 8004cba:	b2ad      	uxthmi	r5, r5
 8004cbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cbe:	4853      	ldr	r0, [pc, #332]	@ (8004e0c <_printf_i+0x238>)
 8004cc0:	6033      	str	r3, [r6, #0]
 8004cc2:	bf14      	ite	ne
 8004cc4:	230a      	movne	r3, #10
 8004cc6:	2308      	moveq	r3, #8
 8004cc8:	2100      	movs	r1, #0
 8004cca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cce:	6866      	ldr	r6, [r4, #4]
 8004cd0:	60a6      	str	r6, [r4, #8]
 8004cd2:	2e00      	cmp	r6, #0
 8004cd4:	bfa2      	ittt	ge
 8004cd6:	6821      	ldrge	r1, [r4, #0]
 8004cd8:	f021 0104 	bicge.w	r1, r1, #4
 8004cdc:	6021      	strge	r1, [r4, #0]
 8004cde:	b90d      	cbnz	r5, 8004ce4 <_printf_i+0x110>
 8004ce0:	2e00      	cmp	r6, #0
 8004ce2:	d04b      	beq.n	8004d7c <_printf_i+0x1a8>
 8004ce4:	4616      	mov	r6, r2
 8004ce6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cea:	fb03 5711 	mls	r7, r3, r1, r5
 8004cee:	5dc7      	ldrb	r7, [r0, r7]
 8004cf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cf4:	462f      	mov	r7, r5
 8004cf6:	42bb      	cmp	r3, r7
 8004cf8:	460d      	mov	r5, r1
 8004cfa:	d9f4      	bls.n	8004ce6 <_printf_i+0x112>
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d10b      	bne.n	8004d18 <_printf_i+0x144>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	07df      	lsls	r7, r3, #31
 8004d04:	d508      	bpl.n	8004d18 <_printf_i+0x144>
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	6861      	ldr	r1, [r4, #4]
 8004d0a:	4299      	cmp	r1, r3
 8004d0c:	bfde      	ittt	le
 8004d0e:	2330      	movle	r3, #48	@ 0x30
 8004d10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d14:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004d18:	1b92      	subs	r2, r2, r6
 8004d1a:	6122      	str	r2, [r4, #16]
 8004d1c:	f8cd a000 	str.w	sl, [sp]
 8004d20:	464b      	mov	r3, r9
 8004d22:	aa03      	add	r2, sp, #12
 8004d24:	4621      	mov	r1, r4
 8004d26:	4640      	mov	r0, r8
 8004d28:	f7ff fee6 	bl	8004af8 <_printf_common>
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d14a      	bne.n	8004dc6 <_printf_i+0x1f2>
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d34:	b004      	add	sp, #16
 8004d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	f043 0320 	orr.w	r3, r3, #32
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	4833      	ldr	r0, [pc, #204]	@ (8004e10 <_printf_i+0x23c>)
 8004d44:	2778      	movs	r7, #120	@ 0x78
 8004d46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	6831      	ldr	r1, [r6, #0]
 8004d4e:	061f      	lsls	r7, r3, #24
 8004d50:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d54:	d402      	bmi.n	8004d5c <_printf_i+0x188>
 8004d56:	065f      	lsls	r7, r3, #25
 8004d58:	bf48      	it	mi
 8004d5a:	b2ad      	uxthmi	r5, r5
 8004d5c:	6031      	str	r1, [r6, #0]
 8004d5e:	07d9      	lsls	r1, r3, #31
 8004d60:	bf44      	itt	mi
 8004d62:	f043 0320 	orrmi.w	r3, r3, #32
 8004d66:	6023      	strmi	r3, [r4, #0]
 8004d68:	b11d      	cbz	r5, 8004d72 <_printf_i+0x19e>
 8004d6a:	2310      	movs	r3, #16
 8004d6c:	e7ac      	b.n	8004cc8 <_printf_i+0xf4>
 8004d6e:	4827      	ldr	r0, [pc, #156]	@ (8004e0c <_printf_i+0x238>)
 8004d70:	e7e9      	b.n	8004d46 <_printf_i+0x172>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	f023 0320 	bic.w	r3, r3, #32
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	e7f6      	b.n	8004d6a <_printf_i+0x196>
 8004d7c:	4616      	mov	r6, r2
 8004d7e:	e7bd      	b.n	8004cfc <_printf_i+0x128>
 8004d80:	6833      	ldr	r3, [r6, #0]
 8004d82:	6825      	ldr	r5, [r4, #0]
 8004d84:	6961      	ldr	r1, [r4, #20]
 8004d86:	1d18      	adds	r0, r3, #4
 8004d88:	6030      	str	r0, [r6, #0]
 8004d8a:	062e      	lsls	r6, r5, #24
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	d501      	bpl.n	8004d94 <_printf_i+0x1c0>
 8004d90:	6019      	str	r1, [r3, #0]
 8004d92:	e002      	b.n	8004d9a <_printf_i+0x1c6>
 8004d94:	0668      	lsls	r0, r5, #25
 8004d96:	d5fb      	bpl.n	8004d90 <_printf_i+0x1bc>
 8004d98:	8019      	strh	r1, [r3, #0]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	4616      	mov	r6, r2
 8004da0:	e7bc      	b.n	8004d1c <_printf_i+0x148>
 8004da2:	6833      	ldr	r3, [r6, #0]
 8004da4:	1d1a      	adds	r2, r3, #4
 8004da6:	6032      	str	r2, [r6, #0]
 8004da8:	681e      	ldr	r6, [r3, #0]
 8004daa:	6862      	ldr	r2, [r4, #4]
 8004dac:	2100      	movs	r1, #0
 8004dae:	4630      	mov	r0, r6
 8004db0:	f7fb fa16 	bl	80001e0 <memchr>
 8004db4:	b108      	cbz	r0, 8004dba <_printf_i+0x1e6>
 8004db6:	1b80      	subs	r0, r0, r6
 8004db8:	6060      	str	r0, [r4, #4]
 8004dba:	6863      	ldr	r3, [r4, #4]
 8004dbc:	6123      	str	r3, [r4, #16]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dc4:	e7aa      	b.n	8004d1c <_printf_i+0x148>
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	4632      	mov	r2, r6
 8004dca:	4649      	mov	r1, r9
 8004dcc:	4640      	mov	r0, r8
 8004dce:	47d0      	blx	sl
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d0ad      	beq.n	8004d30 <_printf_i+0x15c>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	079b      	lsls	r3, r3, #30
 8004dd8:	d413      	bmi.n	8004e02 <_printf_i+0x22e>
 8004dda:	68e0      	ldr	r0, [r4, #12]
 8004ddc:	9b03      	ldr	r3, [sp, #12]
 8004dde:	4298      	cmp	r0, r3
 8004de0:	bfb8      	it	lt
 8004de2:	4618      	movlt	r0, r3
 8004de4:	e7a6      	b.n	8004d34 <_printf_i+0x160>
 8004de6:	2301      	movs	r3, #1
 8004de8:	4632      	mov	r2, r6
 8004dea:	4649      	mov	r1, r9
 8004dec:	4640      	mov	r0, r8
 8004dee:	47d0      	blx	sl
 8004df0:	3001      	adds	r0, #1
 8004df2:	d09d      	beq.n	8004d30 <_printf_i+0x15c>
 8004df4:	3501      	adds	r5, #1
 8004df6:	68e3      	ldr	r3, [r4, #12]
 8004df8:	9903      	ldr	r1, [sp, #12]
 8004dfa:	1a5b      	subs	r3, r3, r1
 8004dfc:	42ab      	cmp	r3, r5
 8004dfe:	dcf2      	bgt.n	8004de6 <_printf_i+0x212>
 8004e00:	e7eb      	b.n	8004dda <_printf_i+0x206>
 8004e02:	2500      	movs	r5, #0
 8004e04:	f104 0619 	add.w	r6, r4, #25
 8004e08:	e7f5      	b.n	8004df6 <_printf_i+0x222>
 8004e0a:	bf00      	nop
 8004e0c:	08007f99 	.word	0x08007f99
 8004e10:	08007faa 	.word	0x08007faa

08004e14 <__malloc_lock>:
 8004e14:	4801      	ldr	r0, [pc, #4]	@ (8004e1c <__malloc_lock+0x8>)
 8004e16:	f7ff bc73 	b.w	8004700 <__retarget_lock_acquire_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	20000304 	.word	0x20000304

08004e20 <__malloc_unlock>:
 8004e20:	4801      	ldr	r0, [pc, #4]	@ (8004e28 <__malloc_unlock+0x8>)
 8004e22:	f7ff bc6e 	b.w	8004702 <__retarget_lock_release_recursive>
 8004e26:	bf00      	nop
 8004e28:	20000304 	.word	0x20000304

08004e2c <_realloc_r>:
 8004e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e30:	4680      	mov	r8, r0
 8004e32:	4615      	mov	r5, r2
 8004e34:	460c      	mov	r4, r1
 8004e36:	b921      	cbnz	r1, 8004e42 <_realloc_r+0x16>
 8004e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	f7ff bddb 	b.w	80049f8 <_malloc_r>
 8004e42:	b92a      	cbnz	r2, 8004e50 <_realloc_r+0x24>
 8004e44:	f000 f858 	bl	8004ef8 <_free_r>
 8004e48:	2400      	movs	r4, #0
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e50:	f000 f89c 	bl	8004f8c <_malloc_usable_size_r>
 8004e54:	4285      	cmp	r5, r0
 8004e56:	4606      	mov	r6, r0
 8004e58:	d802      	bhi.n	8004e60 <_realloc_r+0x34>
 8004e5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e5e:	d8f4      	bhi.n	8004e4a <_realloc_r+0x1e>
 8004e60:	4629      	mov	r1, r5
 8004e62:	4640      	mov	r0, r8
 8004e64:	f7ff fdc8 	bl	80049f8 <_malloc_r>
 8004e68:	4607      	mov	r7, r0
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d0ec      	beq.n	8004e48 <_realloc_r+0x1c>
 8004e6e:	42b5      	cmp	r5, r6
 8004e70:	462a      	mov	r2, r5
 8004e72:	4621      	mov	r1, r4
 8004e74:	bf28      	it	cs
 8004e76:	4632      	movcs	r2, r6
 8004e78:	f000 f830 	bl	8004edc <memcpy>
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	4640      	mov	r0, r8
 8004e80:	f000 f83a 	bl	8004ef8 <_free_r>
 8004e84:	463c      	mov	r4, r7
 8004e86:	e7e0      	b.n	8004e4a <_realloc_r+0x1e>

08004e88 <memmove>:
 8004e88:	4288      	cmp	r0, r1
 8004e8a:	b510      	push	{r4, lr}
 8004e8c:	eb01 0402 	add.w	r4, r1, r2
 8004e90:	d902      	bls.n	8004e98 <memmove+0x10>
 8004e92:	4284      	cmp	r4, r0
 8004e94:	4623      	mov	r3, r4
 8004e96:	d807      	bhi.n	8004ea8 <memmove+0x20>
 8004e98:	1e43      	subs	r3, r0, #1
 8004e9a:	42a1      	cmp	r1, r4
 8004e9c:	d008      	beq.n	8004eb0 <memmove+0x28>
 8004e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ea6:	e7f8      	b.n	8004e9a <memmove+0x12>
 8004ea8:	4402      	add	r2, r0
 8004eaa:	4601      	mov	r1, r0
 8004eac:	428a      	cmp	r2, r1
 8004eae:	d100      	bne.n	8004eb2 <memmove+0x2a>
 8004eb0:	bd10      	pop	{r4, pc}
 8004eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eba:	e7f7      	b.n	8004eac <memmove+0x24>

08004ebc <_sbrk_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4d06      	ldr	r5, [pc, #24]	@ (8004ed8 <_sbrk_r+0x1c>)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	f7fc fdac 	bl	8001a24 <_sbrk>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_sbrk_r+0x1a>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_sbrk_r+0x1a>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	20000310 	.word	0x20000310

08004edc <memcpy>:
 8004edc:	440a      	add	r2, r1
 8004ede:	4291      	cmp	r1, r2
 8004ee0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004ee4:	d100      	bne.n	8004ee8 <memcpy+0xc>
 8004ee6:	4770      	bx	lr
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ef2:	4291      	cmp	r1, r2
 8004ef4:	d1f9      	bne.n	8004eea <memcpy+0xe>
 8004ef6:	bd10      	pop	{r4, pc}

08004ef8 <_free_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4605      	mov	r5, r0
 8004efc:	2900      	cmp	r1, #0
 8004efe:	d041      	beq.n	8004f84 <_free_r+0x8c>
 8004f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f04:	1f0c      	subs	r4, r1, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bfb8      	it	lt
 8004f0a:	18e4      	addlt	r4, r4, r3
 8004f0c:	f7ff ff82 	bl	8004e14 <__malloc_lock>
 8004f10:	4a1d      	ldr	r2, [pc, #116]	@ (8004f88 <_free_r+0x90>)
 8004f12:	6813      	ldr	r3, [r2, #0]
 8004f14:	b933      	cbnz	r3, 8004f24 <_free_r+0x2c>
 8004f16:	6063      	str	r3, [r4, #4]
 8004f18:	6014      	str	r4, [r2, #0]
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f20:	f7ff bf7e 	b.w	8004e20 <__malloc_unlock>
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	d908      	bls.n	8004f3a <_free_r+0x42>
 8004f28:	6820      	ldr	r0, [r4, #0]
 8004f2a:	1821      	adds	r1, r4, r0
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	bf01      	itttt	eq
 8004f30:	6819      	ldreq	r1, [r3, #0]
 8004f32:	685b      	ldreq	r3, [r3, #4]
 8004f34:	1809      	addeq	r1, r1, r0
 8004f36:	6021      	streq	r1, [r4, #0]
 8004f38:	e7ed      	b.n	8004f16 <_free_r+0x1e>
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	b10b      	cbz	r3, 8004f44 <_free_r+0x4c>
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	d9fa      	bls.n	8004f3a <_free_r+0x42>
 8004f44:	6811      	ldr	r1, [r2, #0]
 8004f46:	1850      	adds	r0, r2, r1
 8004f48:	42a0      	cmp	r0, r4
 8004f4a:	d10b      	bne.n	8004f64 <_free_r+0x6c>
 8004f4c:	6820      	ldr	r0, [r4, #0]
 8004f4e:	4401      	add	r1, r0
 8004f50:	1850      	adds	r0, r2, r1
 8004f52:	4283      	cmp	r3, r0
 8004f54:	6011      	str	r1, [r2, #0]
 8004f56:	d1e0      	bne.n	8004f1a <_free_r+0x22>
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	6053      	str	r3, [r2, #4]
 8004f5e:	4408      	add	r0, r1
 8004f60:	6010      	str	r0, [r2, #0]
 8004f62:	e7da      	b.n	8004f1a <_free_r+0x22>
 8004f64:	d902      	bls.n	8004f6c <_free_r+0x74>
 8004f66:	230c      	movs	r3, #12
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	e7d6      	b.n	8004f1a <_free_r+0x22>
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	1821      	adds	r1, r4, r0
 8004f70:	428b      	cmp	r3, r1
 8004f72:	bf04      	itt	eq
 8004f74:	6819      	ldreq	r1, [r3, #0]
 8004f76:	685b      	ldreq	r3, [r3, #4]
 8004f78:	6063      	str	r3, [r4, #4]
 8004f7a:	bf04      	itt	eq
 8004f7c:	1809      	addeq	r1, r1, r0
 8004f7e:	6021      	streq	r1, [r4, #0]
 8004f80:	6054      	str	r4, [r2, #4]
 8004f82:	e7ca      	b.n	8004f1a <_free_r+0x22>
 8004f84:	bd38      	pop	{r3, r4, r5, pc}
 8004f86:	bf00      	nop
 8004f88:	2000030c 	.word	0x2000030c

08004f8c <_malloc_usable_size_r>:
 8004f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f90:	1f18      	subs	r0, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bfbc      	itt	lt
 8004f96:	580b      	ldrlt	r3, [r1, r0]
 8004f98:	18c0      	addlt	r0, r0, r3
 8004f9a:	4770      	bx	lr

08004f9c <_init>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr

08004fa8 <_fini>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr
