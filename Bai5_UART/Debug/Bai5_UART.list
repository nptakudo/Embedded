
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030f0  08008380  08008380  00018380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b470  0800b470  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b470  0800b470  0001b470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b478  0800b478  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b478  0800b478  0001b478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b47c  0800b47c  0001b47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000324  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b8  200003b8  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c66a  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cfb  00000000  00000000  0003c72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  00040430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001428  00000000  00000000  000419e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002464f  00000000  00000000  00042e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c262  00000000  00000000  0006745f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3686  00000000  00000000  000836c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00156d47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d50  00000000  00000000  00156d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008368 	.word	0x08008368

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08008368 	.word	0x08008368

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	2108      	movs	r1, #8
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <button_init+0x14>)
 8000572:	f003 fa17 	bl	80039a4 <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40020c00 	.word	0x40020c00

08000580 <button_Scan>:

void button_Scan(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2108      	movs	r1, #8
 800058a:	482f      	ldr	r0, [pc, #188]	; (8000648 <button_Scan+0xc8>)
 800058c:	f003 fa0a 	bl	80039a4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000590:	2201      	movs	r2, #1
 8000592:	2108      	movs	r1, #8
 8000594:	482c      	ldr	r0, [pc, #176]	; (8000648 <button_Scan+0xc8>)
 8000596:	f003 fa05 	bl	80039a4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800059a:	230a      	movs	r3, #10
 800059c:	2202      	movs	r2, #2
 800059e:	492b      	ldr	r1, [pc, #172]	; (800064c <button_Scan+0xcc>)
 80005a0:	482b      	ldr	r0, [pc, #172]	; (8000650 <button_Scan+0xd0>)
 80005a2:	f005 f940 	bl	8005826 <HAL_SPI_Receive>
	  int button_index = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ae:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	e03f      	b.n	8000636 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db06      	blt.n	80005ca <button_Scan+0x4a>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	dc03      	bgt.n	80005ca <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3304      	adds	r3, #4
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e018      	b.n	80005fc <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	dd07      	ble.n	80005e0 <button_Scan+0x60>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	dc04      	bgt.n	80005e0 <button_Scan+0x60>
			  button_index = 7 - i;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f1c3 0307 	rsb	r3, r3, #7
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e00d      	b.n	80005fc <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	dd06      	ble.n	80005f4 <button_Scan+0x74>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b0b      	cmp	r3, #11
 80005ea:	dc03      	bgt.n	80005f4 <button_Scan+0x74>
			  button_index = i + 4;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3304      	adds	r3, #4
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	e003      	b.n	80005fc <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f1c3 0317 	rsb	r3, r3, #23
 80005fa:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <button_Scan+0xcc>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	897b      	ldrh	r3, [r7, #10]
 8000602:	4013      	ands	r3, r2
 8000604:	b29b      	uxth	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d005      	beq.n	8000616 <button_Scan+0x96>
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <button_Scan+0xd4>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2100      	movs	r1, #0
 8000610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000614:	e009      	b.n	800062a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <button_Scan+0xd4>)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061e:	3301      	adds	r3, #1
 8000620:	b299      	uxth	r1, r3
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <button_Scan+0xd4>)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800062a:	897b      	ldrh	r3, [r7, #10]
 800062c:	085b      	lsrs	r3, r3, #1
 800062e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3301      	adds	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	ddbc      	ble.n	80005b6 <button_Scan+0x36>
	  }
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020c00 	.word	0x40020c00
 800064c:	200000b0 	.word	0x200000b0
 8000650:	2000025c 	.word	0x2000025c
 8000654:	200000e8 	.word	0x200000e8

08000658 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 800065c:	201e      	movs	r0, #30
 800065e:	f002 fd7d 	bl	800315c <DEC2BCD>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <ds3231_init+0x80>)
 8000668:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 800066a:	2016      	movs	r0, #22
 800066c:	f002 fd76 	bl	800315c <DEC2BCD>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <ds3231_init+0x80>)
 8000676:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000678:	2015      	movs	r0, #21
 800067a:	f002 fd6f 	bl	800315c <DEC2BCD>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <ds3231_init+0x80>)
 8000684:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000686:	2006      	movs	r0, #6
 8000688:	f002 fd68 	bl	800315c <DEC2BCD>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <ds3231_init+0x80>)
 8000692:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000694:	200f      	movs	r0, #15
 8000696:	f002 fd61 	bl	800315c <DEC2BCD>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <ds3231_init+0x80>)
 80006a0:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80006a2:	2009      	movs	r0, #9
 80006a4:	f002 fd5a 	bl	800315c <DEC2BCD>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <ds3231_init+0x80>)
 80006ae:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80006b0:	2017      	movs	r0, #23
 80006b2:	f002 fd53 	bl	800315c <DEC2BCD>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <ds3231_init+0x80>)
 80006bc:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80006be:	2332      	movs	r3, #50	; 0x32
 80006c0:	2203      	movs	r2, #3
 80006c2:	21d0      	movs	r1, #208	; 0xd0
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <ds3231_init+0x84>)
 80006c6:	f003 fdeb 	bl	80042a0 <HAL_I2C_IsDeviceReady>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d000      	beq.n	80006d2 <ds3231_init+0x7a>
		while(1);
 80006d0:	e7fe      	b.n	80006d0 <ds3231_init+0x78>
	};
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000110 	.word	0x20000110
 80006dc:	20000168 	.word	0x20000168

080006e0 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af04      	add	r7, sp, #16
 80006e6:	4603      	mov	r3, r0
 80006e8:	460a      	mov	r2, r1
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	4613      	mov	r3, r2
 80006ee:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fd32 	bl	800315c <DEC2BCD>
 80006f8:	4603      	mov	r3, r0
 80006fa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	230a      	movs	r3, #10
 8000702:	9302      	str	r3, [sp, #8]
 8000704:	2301      	movs	r3, #1
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	f107 030f 	add.w	r3, r7, #15
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	21d0      	movs	r1, #208	; 0xd0
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <ds3231_Write+0x40>)
 8000714:	f003 faa4 	bl	8003c60 <HAL_I2C_Mem_Write>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000168 	.word	0x20000168

08000724 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800072a:	230a      	movs	r3, #10
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2307      	movs	r3, #7
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <ds3231_ReadTime+0xa4>)
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	2200      	movs	r2, #0
 800073a:	21d0      	movs	r1, #208	; 0xd0
 800073c:	4823      	ldr	r0, [pc, #140]	; (80007cc <ds3231_ReadTime+0xa8>)
 800073e:	f003 fb89 	bl	8003e54 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <ds3231_ReadTime+0xa4>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fcee 	bl	8003128 <BCD2DEC>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <ds3231_ReadTime+0xac>)
 8000752:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <ds3231_ReadTime+0xa4>)
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	4618      	mov	r0, r3
 800075a:	f002 fce5 	bl	8003128 <BCD2DEC>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <ds3231_ReadTime+0xb0>)
 8000764:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <ds3231_ReadTime+0xa4>)
 8000768:	789b      	ldrb	r3, [r3, #2]
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fcdc 	bl	8003128 <BCD2DEC>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <ds3231_ReadTime+0xb4>)
 8000776:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <ds3231_ReadTime+0xa4>)
 800077a:	78db      	ldrb	r3, [r3, #3]
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fcd3 	bl	8003128 <BCD2DEC>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <ds3231_ReadTime+0xb8>)
 8000788:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <ds3231_ReadTime+0xa4>)
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	f002 fcca 	bl	8003128 <BCD2DEC>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <ds3231_ReadTime+0xbc>)
 800079a:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <ds3231_ReadTime+0xa4>)
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fcc1 	bl	8003128 <BCD2DEC>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <ds3231_ReadTime+0xc0>)
 80007ac:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <ds3231_ReadTime+0xa4>)
 80007b0:	799b      	ldrb	r3, [r3, #6]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 fcb8 	bl	8003128 <BCD2DEC>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <ds3231_ReadTime+0xc4>)
 80007be:	701a      	strb	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000110 	.word	0x20000110
 80007cc:	20000168 	.word	0x20000168
 80007d0:	20000108 	.word	0x20000108
 80007d4:	2000010a 	.word	0x2000010a
 80007d8:	2000010d 	.word	0x2000010d
 80007dc:	2000010c 	.word	0x2000010c
 80007e0:	2000010b 	.word	0x2000010b
 80007e4:	2000010e 	.word	0x2000010e
 80007e8:	20000109 	.word	0x20000109

080007ec <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000818:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <MX_FSMC_Init+0xec>)
 800081a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800081e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000820:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000822:	4a2e      	ldr	r2, [pc, #184]	; (80008dc <MX_FSMC_Init+0xf0>)
 8000824:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_FSMC_Init+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MX_FSMC_Init+0xec>)
 800083a:	2210      	movs	r2, #16
 800083c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_FSMC_Init+0xec>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000850:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000860:	2200      	movs	r2, #0
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_FSMC_Init+0xec>)
 800086e:	2200      	movs	r2, #0
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000874:	2200      	movs	r2, #0
 8000876:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_FSMC_Init+0xec>)
 800087a:	2200      	movs	r2, #0
 800087c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800087e:	230f      	movs	r3, #15
 8000880:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000882:	230f      	movs	r3, #15
 8000884:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000886:	233c      	movs	r3, #60	; 0x3c
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800088e:	2310      	movs	r3, #16
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000892:	2311      	movs	r3, #17
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000896:	2300      	movs	r3, #0
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800089a:	2308      	movs	r3, #8
 800089c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800089e:	230f      	movs	r3, #15
 80008a0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80008a2:	2309      	movs	r3, #9
 80008a4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008aa:	2310      	movs	r3, #16
 80008ac:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008ae:	2311      	movs	r3, #17
 80008b0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008b6:	463a      	mov	r2, r7
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <MX_FSMC_Init+0xec>)
 80008c0:	f005 fb94 	bl	8005fec <HAL_SRAM_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008ca:	f002 f90d 	bl	8002ae8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008ce:	bf00      	nop
 80008d0:	3738      	adds	r7, #56	; 0x38
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000118 	.word	0x20000118
 80008dc:	a0000104 	.word	0xa0000104

080008e0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <HAL_FSMC_MspInit+0x88>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d131      	bne.n	8000960 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_FSMC_MspInit+0x88>)
 80008fe:	2201      	movs	r2, #1
 8000900:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <HAL_FSMC_MspInit+0x8c>)
 8000908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <HAL_FSMC_MspInit+0x8c>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6393      	str	r3, [r2, #56]	; 0x38
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <HAL_FSMC_MspInit+0x8c>)
 8000914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800091e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000922:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000930:	230c      	movs	r3, #12
 8000932:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <HAL_FSMC_MspInit+0x90>)
 800093a:	f002 fe97 	bl	800366c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800093e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000942:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000950:	230c      	movs	r3, #12
 8000952:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <HAL_FSMC_MspInit+0x94>)
 800095a:	f002 fe87 	bl	800366c <HAL_GPIO_Init>
 800095e:	e000      	b.n	8000962 <HAL_FSMC_MspInit+0x82>
    return;
 8000960:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000b4 	.word	0x200000b4
 800096c:	40023800 	.word	0x40023800
 8000970:	40021000 	.word	0x40021000
 8000974:	40020c00 	.word	0x40020c00

08000978 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000980:	f7ff ffae 	bl	80008e0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	4b6f      	ldr	r3, [pc, #444]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a6e      	ldr	r2, [pc, #440]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b6c      	ldr	r3, [pc, #432]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	4b68      	ldr	r3, [pc, #416]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a67      	ldr	r2, [pc, #412]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b65      	ldr	r3, [pc, #404]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a60      	ldr	r2, [pc, #384]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b5e      	ldr	r3, [pc, #376]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a59      	ldr	r2, [pc, #356]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b57      	ldr	r3, [pc, #348]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	4b53      	ldr	r3, [pc, #332]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a52      	ldr	r2, [pc, #328]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b50      	ldr	r3, [pc, #320]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a4b      	ldr	r2, [pc, #300]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 8000a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b49      	ldr	r3, [pc, #292]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a44      	ldr	r2, [pc, #272]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b42      	ldr	r3, [pc, #264]	; (8000b64 <MX_GPIO_Init+0x1d8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2170      	movs	r1, #112	; 0x70
 8000a6a:	483f      	ldr	r0, [pc, #252]	; (8000b68 <MX_GPIO_Init+0x1dc>)
 8000a6c:	f002 ff9a 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a76:	483d      	ldr	r0, [pc, #244]	; (8000b6c <MX_GPIO_Init+0x1e0>)
 8000a78:	f002 ff94 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2140      	movs	r1, #64	; 0x40
 8000a80:	483b      	ldr	r0, [pc, #236]	; (8000b70 <MX_GPIO_Init+0x1e4>)
 8000a82:	f002 ff8f 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	4839      	ldr	r0, [pc, #228]	; (8000b74 <MX_GPIO_Init+0x1e8>)
 8000a8e:	f002 ff89 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2108      	movs	r1, #8
 8000a96:	4838      	ldr	r0, [pc, #224]	; (8000b78 <MX_GPIO_Init+0x1ec>)
 8000a98:	f002 ff84 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a9c:	2370      	movs	r3, #112	; 0x70
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	482d      	ldr	r0, [pc, #180]	; (8000b68 <MX_GPIO_Init+0x1dc>)
 8000ab4:	f002 fdda 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4826      	ldr	r0, [pc, #152]	; (8000b6c <MX_GPIO_Init+0x1e0>)
 8000ad2:	f002 fdcb 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000ad6:	23c0      	movs	r3, #192	; 0xc0
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4822      	ldr	r0, [pc, #136]	; (8000b74 <MX_GPIO_Init+0x1e8>)
 8000aea:	f002 fdbf 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000aee:	2330      	movs	r3, #48	; 0x30
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	481a      	ldr	r0, [pc, #104]	; (8000b6c <MX_GPIO_Init+0x1e0>)
 8000b02:	f002 fdb3 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4814      	ldr	r0, [pc, #80]	; (8000b70 <MX_GPIO_Init+0x1e4>)
 8000b1e:	f002 fda5 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480e      	ldr	r0, [pc, #56]	; (8000b74 <MX_GPIO_Init+0x1e8>)
 8000b3c:	f002 fd96 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b40:	2308      	movs	r3, #8
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <MX_GPIO_Init+0x1ec>)
 8000b58:	f002 fd88 	bl	800366c <HAL_GPIO_Init>

}
 8000b5c:	bf00      	nop
 8000b5e:	3730      	adds	r7, #48	; 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40021800 	.word	0x40021800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020c00 	.word	0x40020c00

08000b7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b82:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <MX_I2C1_Init+0x54>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_I2C1_Init+0x58>)
 8000b8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bba:	f002 ff0d 	bl	80039d8 <HAL_I2C_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc4:	f001 ff90 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000168 	.word	0x20000168
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	000186a0 	.word	0x000186a0

08000bd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_I2C_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12b      	bne.n	8000c52 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c16:	23c0      	movs	r3, #192	; 0xc0
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1a:	2312      	movs	r3, #18
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c26:	2304      	movs	r3, #4
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <HAL_I2C_MspInit+0x8c>)
 8000c32:	f002 fd1b 	bl	800366c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400

08000c68 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <LCD_WR_REG+0x1c>)
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	8013      	strh	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	600ffffe 	.word	0x600ffffe

08000c88 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <LCD_WR_DATA+0x1c>)
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	8053      	strh	r3, [r2, #2]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	600ffffe 	.word	0x600ffffe

08000ca8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <LCD_RD_DATA+0x20>)
 8000cb0:	885b      	ldrh	r3, [r3, #2]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	b29b      	uxth	r3, r3
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	600ffffe 	.word	0x600ffffe

08000ccc <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4623      	mov	r3, r4
 8000cdc:	80fb      	strh	r3, [r7, #6]
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80bb      	strh	r3, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	807b      	strh	r3, [r7, #2]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000cea:	202a      	movs	r0, #42	; 0x2a
 8000cec:	f7ff ffbc 	bl	8000c68 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ffc6 	bl	8000c88 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ffc0 	bl	8000c88 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ffba 	bl	8000c88 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000d14:	887b      	ldrh	r3, [r7, #2]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ffb4 	bl	8000c88 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000d20:	202b      	movs	r0, #43	; 0x2b
 8000d22:	f7ff ffa1 	bl	8000c68 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000d26:	88bb      	ldrh	r3, [r7, #4]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ffab 	bl	8000c88 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d32:	88bb      	ldrh	r3, [r7, #4]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ffa5 	bl	8000c88 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d3e:	883b      	ldrh	r3, [r7, #0]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff9f 	bl	8000c88 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d4a:	883b      	ldrh	r3, [r7, #0]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff99 	bl	8000c88 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d56:	202c      	movs	r0, #44	; 0x2c
 8000d58:	f7ff ff86 	bl	8000c68 <LCD_WR_REG>
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd90      	pop	{r4, r7, pc}

08000d64 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <lcd_Clear+0x70>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <lcd_Clear+0x70>)
 8000d88:	885b      	ldrh	r3, [r3, #2]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff ff9b 	bl	8000ccc <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	81fb      	strh	r3, [r7, #14]
 8000d9a:	e011      	b.n	8000dc0 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	81bb      	strh	r3, [r7, #12]
 8000da0:	e006      	b.n	8000db0 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff6f 	bl	8000c88 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000daa:	89bb      	ldrh	r3, [r7, #12]
 8000dac:	3301      	adds	r3, #1
 8000dae:	81bb      	strh	r3, [r7, #12]
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <lcd_Clear+0x70>)
 8000db2:	885b      	ldrh	r3, [r3, #2]
 8000db4:	89ba      	ldrh	r2, [r7, #12]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d3f3      	bcc.n	8000da2 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000dba:	89fb      	ldrh	r3, [r7, #14]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	81fb      	strh	r3, [r7, #14]
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <lcd_Clear+0x70>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	89fa      	ldrh	r2, [r7, #14]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d3e8      	bcc.n	8000d9c <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200001bc 	.word	0x200001bc

08000dd8 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
 8000de2:	460b      	mov	r3, r1
 8000de4:	80bb      	strh	r3, [r7, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	88fa      	ldrh	r2, [r7, #6]
 8000dee:	88b9      	ldrh	r1, [r7, #4]
 8000df0:	88f8      	ldrh	r0, [r7, #6]
 8000df2:	f7ff ff6b 	bl	8000ccc <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff45 	bl	8000c88 <LCD_WR_DATA>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4604      	mov	r4, r0
 8000e10:	4608      	mov	r0, r1
 8000e12:	4611      	mov	r1, r2
 8000e14:	461a      	mov	r2, r3
 8000e16:	4623      	mov	r3, r4
 8000e18:	80fb      	strh	r3, [r7, #6]
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80bb      	strh	r3, [r7, #4]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	70fb      	strb	r3, [r7, #3]
 8000e22:	4613      	mov	r3, r2
 8000e24:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	08db      	lsrs	r3, r3, #3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf14      	ite	ne
 8000e4a:	2301      	movne	r3, #1
 8000e4c:	2300      	moveq	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	fb12 f303 	smulbb	r3, r2, r3
 8000e5e:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	3b20      	subs	r3, #32
 8000e64:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3b01      	subs	r3, #1
 8000e72:	b29c      	uxth	r4, r3
 8000e74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	88b9      	ldrh	r1, [r7, #4]
 8000e86:	88f8      	ldrh	r0, [r7, #6]
 8000e88:	4622      	mov	r2, r4
 8000e8a:	f7ff ff1f 	bl	8000ccc <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	827b      	strh	r3, [r7, #18]
 8000e92:	e07a      	b.n	8000f8a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e98:	2b0c      	cmp	r3, #12
 8000e9a:	d028      	beq.n	8000eee <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000e9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ea0:	2b10      	cmp	r3, #16
 8000ea2:	d108      	bne.n	8000eb6 <lcd_ShowChar+0xae>
 8000ea4:	78fa      	ldrb	r2, [r7, #3]
 8000ea6:	8a7b      	ldrh	r3, [r7, #18]
 8000ea8:	493c      	ldr	r1, [pc, #240]	; (8000f9c <lcd_ShowChar+0x194>)
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	440a      	add	r2, r1
 8000eae:	4413      	add	r3, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	75fb      	strb	r3, [r7, #23]
 8000eb4:	e01b      	b.n	8000eee <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000eb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eba:	2b18      	cmp	r3, #24
 8000ebc:	d10b      	bne.n	8000ed6 <lcd_ShowChar+0xce>
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	8a79      	ldrh	r1, [r7, #18]
 8000ec2:	4837      	ldr	r0, [pc, #220]	; (8000fa0 <lcd_ShowChar+0x198>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4403      	add	r3, r0
 8000ece:	440b      	add	r3, r1
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	75fb      	strb	r3, [r7, #23]
 8000ed4:	e00b      	b.n	8000eee <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000ed6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eda:	2b20      	cmp	r3, #32
 8000edc:	d15a      	bne.n	8000f94 <lcd_ShowChar+0x18c>
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	8a7b      	ldrh	r3, [r7, #18]
 8000ee2:	4930      	ldr	r1, [pc, #192]	; (8000fa4 <lcd_ShowChar+0x19c>)
 8000ee4:	0192      	lsls	r2, r2, #6
 8000ee6:	440a      	add	r2, r1
 8000ee8:	4413      	add	r3, r2
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	75bb      	strb	r3, [r7, #22]
 8000ef2:	e044      	b.n	8000f7e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000ef4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d120      	bne.n	8000f3e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000efc:	7dfa      	ldrb	r2, [r7, #23]
 8000efe:	7dbb      	ldrb	r3, [r7, #22]
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d004      	beq.n	8000f16 <lcd_ShowChar+0x10e>
 8000f0c:	883b      	ldrh	r3, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff feba 	bl	8000c88 <LCD_WR_DATA>
 8000f14:	e003      	b.n	8000f1e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000f16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff feb5 	bl	8000c88 <LCD_WR_DATA>
				m++;
 8000f1e:	7d7b      	ldrb	r3, [r7, #21]
 8000f20:	3301      	adds	r3, #1
 8000f22:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f24:	7d7b      	ldrb	r3, [r7, #21]
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f2c:	fb02 f201 	mul.w	r2, r2, r1
 8000f30:	1a9b      	subs	r3, r3, r2
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11f      	bne.n	8000f78 <lcd_ShowChar+0x170>
				{
					m=0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	757b      	strb	r3, [r7, #21]
					break;
 8000f3c:	e022      	b.n	8000f84 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f3e:	7dfa      	ldrb	r2, [r7, #23]
 8000f40:	7dbb      	ldrb	r3, [r7, #22]
 8000f42:	fa42 f303 	asr.w	r3, r2, r3
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <lcd_ShowChar+0x152>
 8000f4e:	883a      	ldrh	r2, [r7, #0]
 8000f50:	88b9      	ldrh	r1, [r7, #4]
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff3f 	bl	8000dd8 <lcd_DrawPoint>
				x++;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f60:	88fa      	ldrh	r2, [r7, #6]
 8000f62:	8a3b      	ldrh	r3, [r7, #16]
 8000f64:	1ad2      	subs	r2, r2, r3
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d105      	bne.n	8000f78 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f6c:	8a3b      	ldrh	r3, [r7, #16]
 8000f6e:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	3301      	adds	r3, #1
 8000f74:	80bb      	strh	r3, [r7, #4]
					break;
 8000f76:	e005      	b.n	8000f84 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f78:	7dbb      	ldrb	r3, [r7, #22]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	75bb      	strb	r3, [r7, #22]
 8000f7e:	7dbb      	ldrb	r3, [r7, #22]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d9b7      	bls.n	8000ef4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f84:	8a7b      	ldrh	r3, [r7, #18]
 8000f86:	3301      	adds	r3, #1
 8000f88:	827b      	strh	r3, [r7, #18]
 8000f8a:	8a7a      	ldrh	r2, [r7, #18]
 8000f8c:	89bb      	ldrh	r3, [r7, #12]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d380      	bcc.n	8000e94 <lcd_ShowChar+0x8c>
 8000f92:	e000      	b.n	8000f96 <lcd_ShowChar+0x18e>
		else return;
 8000f94:	bf00      	nop
				}
			}
		}
	}
}
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	080084a4 	.word	0x080084a4
 8000fa0:	08008a94 	.word	0x08008a94
 8000fa4:	08009c64 	.word	0x08009c64

08000fa8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000fbc:	e004      	b.n	8000fc8 <mypow+0x20>
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	71ba      	strb	r2, [r7, #6]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f5      	bne.n	8000fbe <mypow+0x16>
	return result;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	4608      	mov	r0, r1
 8000fea:	4611      	mov	r1, r2
 8000fec:	461a      	mov	r2, r3
 8000fee:	4623      	mov	r3, r4
 8000ff0:	80fb      	strh	r3, [r7, #6]
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80bb      	strh	r3, [r7, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	807b      	strh	r3, [r7, #2]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001002:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001006:	085b      	lsrs	r3, r3, #1
 8001008:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e059      	b.n	80010c4 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001010:	887c      	ldrh	r4, [r7, #2]
 8001012:	787a      	ldrb	r2, [r7, #1]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	3b01      	subs	r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4619      	mov	r1, r3
 8001020:	200a      	movs	r0, #10
 8001022:	f7ff ffc1 	bl	8000fa8 <mypow>
 8001026:	4603      	mov	r3, r0
 8001028:	fbb4 f1f3 	udiv	r1, r4, r3
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <lcd_ShowIntNum+0xf8>)
 800102e:	fba3 2301 	umull	r2, r3, r3, r1
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	1aca      	subs	r2, r1, r3
 800103e:	4613      	mov	r3, r2
 8001040:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d121      	bne.n	800108c <lcd_ShowIntNum+0xac>
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	787b      	ldrb	r3, [r7, #1]
 800104c:	3b01      	subs	r3, #1
 800104e:	429a      	cmp	r2, r3
 8001050:	da1c      	bge.n	800108c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001052:	7b3b      	ldrb	r3, [r7, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d117      	bne.n	8001088 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	b29a      	uxth	r2, r3
 800105c:	7b7b      	ldrb	r3, [r7, #13]
 800105e:	b29b      	uxth	r3, r3
 8001060:	fb12 f303 	smulbb	r3, r2, r3
 8001064:	b29a      	uxth	r2, r3
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	4413      	add	r3, r2
 800106a:	b298      	uxth	r0, r3
 800106c:	8c3a      	ldrh	r2, [r7, #32]
 800106e:	88b9      	ldrh	r1, [r7, #4]
 8001070:	2300      	movs	r3, #0
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	4613      	mov	r3, r2
 8001080:	2220      	movs	r2, #32
 8001082:	f7ff fec1 	bl	8000e08 <lcd_ShowChar>
				continue;
 8001086:	e01a      	b.n	80010be <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001088:	2301      	movs	r3, #1
 800108a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	b29a      	uxth	r2, r3
 8001090:	7b7b      	ldrb	r3, [r7, #13]
 8001092:	b29b      	uxth	r3, r3
 8001094:	fb12 f303 	smulbb	r3, r2, r3
 8001098:	b29a      	uxth	r2, r3
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	4413      	add	r3, r2
 800109e:	b298      	uxth	r0, r3
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	3330      	adds	r3, #48	; 0x30
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	8c3c      	ldrh	r4, [r7, #32]
 80010a8:	88b9      	ldrh	r1, [r7, #4]
 80010aa:	2300      	movs	r3, #0
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	4623      	mov	r3, r4
 80010ba:	f7ff fea5 	bl	8000e08 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	3301      	adds	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	787b      	ldrb	r3, [r7, #1]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d3a1      	bcc.n	8001010 <lcd_ShowIntNum+0x30>
	}
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	cccccccd 	.word	0xcccccccd

080010dc <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <lcd_SetDir+0x44>)
 80010f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010fc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <lcd_SetDir+0x44>)
 8001100:	22f0      	movs	r2, #240	; 0xf0
 8001102:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001104:	e006      	b.n	8001114 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <lcd_SetDir+0x44>)
 8001108:	22f0      	movs	r2, #240	; 0xf0
 800110a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <lcd_SetDir+0x44>)
 800110e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001112:	805a      	strh	r2, [r3, #2]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	200001bc 	.word	0x200001bc

08001124 <lcd_init>:


void lcd_init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112e:	48aa      	ldr	r0, [pc, #680]	; (80013d8 <lcd_init+0x2b4>)
 8001130:	f002 fc38 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001134:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001138:	f002 f8d0 	bl	80032dc <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	48a5      	ldr	r0, [pc, #660]	; (80013d8 <lcd_init+0x2b4>)
 8001144:	f002 fc2e 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001148:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114c:	f002 f8c6 	bl	80032dc <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff ffc3 	bl	80010dc <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001156:	20d3      	movs	r0, #211	; 0xd3
 8001158:	f7ff fd86 	bl	8000c68 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800115c:	f7ff fda4 	bl	8000ca8 <LCD_RD_DATA>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b9d      	ldr	r3, [pc, #628]	; (80013dc <lcd_init+0x2b8>)
 8001166:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001168:	f7ff fd9e 	bl	8000ca8 <LCD_RD_DATA>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b9a      	ldr	r3, [pc, #616]	; (80013dc <lcd_init+0x2b8>)
 8001172:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001174:	f7ff fd98 	bl	8000ca8 <LCD_RD_DATA>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b97      	ldr	r3, [pc, #604]	; (80013dc <lcd_init+0x2b8>)
 800117e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001180:	4b96      	ldr	r3, [pc, #600]	; (80013dc <lcd_init+0x2b8>)
 8001182:	889b      	ldrh	r3, [r3, #4]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b94      	ldr	r3, [pc, #592]	; (80013dc <lcd_init+0x2b8>)
 800118a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800118c:	f7ff fd8c 	bl	8000ca8 <LCD_RD_DATA>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b91      	ldr	r3, [pc, #580]	; (80013dc <lcd_init+0x2b8>)
 8001196:	889b      	ldrh	r3, [r3, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b8f      	ldr	r3, [pc, #572]	; (80013dc <lcd_init+0x2b8>)
 800119e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80011a0:	20cf      	movs	r0, #207	; 0xcf
 80011a2:	f7ff fd61 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff fd6e 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80011ac:	20c1      	movs	r0, #193	; 0xc1
 80011ae:	f7ff fd6b 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80011b2:	2030      	movs	r0, #48	; 0x30
 80011b4:	f7ff fd68 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80011b8:	20ed      	movs	r0, #237	; 0xed
 80011ba:	f7ff fd55 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80011be:	2064      	movs	r0, #100	; 0x64
 80011c0:	f7ff fd62 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f7ff fd5f 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80011ca:	2012      	movs	r0, #18
 80011cc:	f7ff fd5c 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80011d0:	2081      	movs	r0, #129	; 0x81
 80011d2:	f7ff fd59 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80011d6:	20e8      	movs	r0, #232	; 0xe8
 80011d8:	f7ff fd46 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80011dc:	2085      	movs	r0, #133	; 0x85
 80011de:	f7ff fd53 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011e2:	2010      	movs	r0, #16
 80011e4:	f7ff fd50 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80011e8:	207a      	movs	r0, #122	; 0x7a
 80011ea:	f7ff fd4d 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80011ee:	20cb      	movs	r0, #203	; 0xcb
 80011f0:	f7ff fd3a 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80011f4:	2039      	movs	r0, #57	; 0x39
 80011f6:	f7ff fd47 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80011fa:	202c      	movs	r0, #44	; 0x2c
 80011fc:	f7ff fd44 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fd41 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001206:	2034      	movs	r0, #52	; 0x34
 8001208:	f7ff fd3e 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800120c:	2002      	movs	r0, #2
 800120e:	f7ff fd3b 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001212:	20f7      	movs	r0, #247	; 0xf7
 8001214:	f7ff fd28 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001218:	2020      	movs	r0, #32
 800121a:	f7ff fd35 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800121e:	20ea      	movs	r0, #234	; 0xea
 8001220:	f7ff fd22 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fd2f 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fd2c 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001230:	20c0      	movs	r0, #192	; 0xc0
 8001232:	f7ff fd19 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001236:	201b      	movs	r0, #27
 8001238:	f7ff fd26 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800123c:	20c1      	movs	r0, #193	; 0xc1
 800123e:	f7ff fd13 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001242:	2001      	movs	r0, #1
 8001244:	f7ff fd20 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001248:	20c5      	movs	r0, #197	; 0xc5
 800124a:	f7ff fd0d 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800124e:	2030      	movs	r0, #48	; 0x30
 8001250:	f7ff fd1a 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001254:	2030      	movs	r0, #48	; 0x30
 8001256:	f7ff fd17 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800125a:	20c7      	movs	r0, #199	; 0xc7
 800125c:	f7ff fd04 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001260:	20b7      	movs	r0, #183	; 0xb7
 8001262:	f7ff fd11 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001266:	2036      	movs	r0, #54	; 0x36
 8001268:	f7ff fcfe 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 800126c:	2008      	movs	r0, #8
 800126e:	f7ff fd0b 	bl	8000c88 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001272:	203a      	movs	r0, #58	; 0x3a
 8001274:	f7ff fcf8 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001278:	2055      	movs	r0, #85	; 0x55
 800127a:	f7ff fd05 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800127e:	20b1      	movs	r0, #177	; 0xb1
 8001280:	f7ff fcf2 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff fcff 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800128a:	201a      	movs	r0, #26
 800128c:	f7ff fcfc 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001290:	20b6      	movs	r0, #182	; 0xb6
 8001292:	f7ff fce9 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001296:	200a      	movs	r0, #10
 8001298:	f7ff fcf6 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800129c:	20a2      	movs	r0, #162	; 0xa2
 800129e:	f7ff fcf3 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80012a2:	20f2      	movs	r0, #242	; 0xf2
 80012a4:	f7ff fce0 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fced 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80012ae:	2026      	movs	r0, #38	; 0x26
 80012b0:	f7ff fcda 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff fce7 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80012ba:	20e0      	movs	r0, #224	; 0xe0
 80012bc:	f7ff fcd4 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80012c0:	200f      	movs	r0, #15
 80012c2:	f7ff fce1 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80012c6:	202a      	movs	r0, #42	; 0x2a
 80012c8:	f7ff fcde 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80012cc:	2028      	movs	r0, #40	; 0x28
 80012ce:	f7ff fcdb 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012d2:	2008      	movs	r0, #8
 80012d4:	f7ff fcd8 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80012d8:	200e      	movs	r0, #14
 80012da:	f7ff fcd5 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012de:	2008      	movs	r0, #8
 80012e0:	f7ff fcd2 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012e4:	2054      	movs	r0, #84	; 0x54
 80012e6:	f7ff fccf 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80012ea:	20a9      	movs	r0, #169	; 0xa9
 80012ec:	f7ff fccc 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80012f0:	2043      	movs	r0, #67	; 0x43
 80012f2:	f7ff fcc9 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80012f6:	200a      	movs	r0, #10
 80012f8:	f7ff fcc6 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012fc:	200f      	movs	r0, #15
 80012fe:	f7ff fcc3 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff fcc0 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff fcbd 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fcba 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff fcb7 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800131a:	20e1      	movs	r0, #225	; 0xe1
 800131c:	f7ff fca4 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001320:	2000      	movs	r0, #0
 8001322:	f7ff fcb1 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001326:	2015      	movs	r0, #21
 8001328:	f7ff fcae 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800132c:	2017      	movs	r0, #23
 800132e:	f7ff fcab 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001332:	2007      	movs	r0, #7
 8001334:	f7ff fca8 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001338:	2011      	movs	r0, #17
 800133a:	f7ff fca5 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800133e:	2006      	movs	r0, #6
 8001340:	f7ff fca2 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001344:	202b      	movs	r0, #43	; 0x2b
 8001346:	f7ff fc9f 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800134a:	2056      	movs	r0, #86	; 0x56
 800134c:	f7ff fc9c 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001350:	203c      	movs	r0, #60	; 0x3c
 8001352:	f7ff fc99 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001356:	2005      	movs	r0, #5
 8001358:	f7ff fc96 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800135c:	2010      	movs	r0, #16
 800135e:	f7ff fc93 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001362:	200f      	movs	r0, #15
 8001364:	f7ff fc90 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001368:	203f      	movs	r0, #63	; 0x3f
 800136a:	f7ff fc8d 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800136e:	203f      	movs	r0, #63	; 0x3f
 8001370:	f7ff fc8a 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001374:	200f      	movs	r0, #15
 8001376:	f7ff fc87 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800137a:	202b      	movs	r0, #43	; 0x2b
 800137c:	f7ff fc74 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fc81 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff fc7e 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff fc7b 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001392:	203f      	movs	r0, #63	; 0x3f
 8001394:	f7ff fc78 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001398:	202a      	movs	r0, #42	; 0x2a
 800139a:	f7ff fc65 	bl	8000c68 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fc72 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fc6f 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fc6c 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80013b0:	20ef      	movs	r0, #239	; 0xef
 80013b2:	f7ff fc69 	bl	8000c88 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80013b6:	2011      	movs	r0, #17
 80013b8:	f7ff fc56 	bl	8000c68 <LCD_WR_REG>
	HAL_Delay(120);
 80013bc:	2078      	movs	r0, #120	; 0x78
 80013be:	f001 ff8d 	bl	80032dc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80013c2:	2029      	movs	r0, #41	; 0x29
 80013c4:	f7ff fc50 	bl	8000c68 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ce:	4804      	ldr	r0, [pc, #16]	; (80013e0 <lcd_init+0x2bc>)
 80013d0:	f002 fae8 	bl	80039a4 <HAL_GPIO_WritePin>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40020800 	.word	0x40020800
 80013dc:	200001bc 	.word	0x200001bc
 80013e0:	40020000 	.word	0x40020000

080013e4 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af04      	add	r7, sp, #16
 80013ea:	60ba      	str	r2, [r7, #8]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4603      	mov	r3, r0
 80013f0:	81fb      	strh	r3, [r7, #14]
 80013f2:	460b      	mov	r3, r1
 80013f4:	81bb      	strh	r3, [r7, #12]
 80013f6:	4613      	mov	r3, r2
 80013f8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80013fa:	89fb      	ldrh	r3, [r7, #14]
 80013fc:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80013fe:	2300      	movs	r3, #0
 8001400:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001402:	e048      	b.n	8001496 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d145      	bne.n	8001496 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800140a:	89fa      	ldrh	r2, [r7, #14]
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <lcd_ShowStr+0xc4>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001416:	085b      	lsrs	r3, r3, #1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	1acb      	subs	r3, r1, r3
 800141c:	429a      	cmp	r2, r3
 800141e:	dc3f      	bgt.n	80014a0 <lcd_ShowStr+0xbc>
 8001420:	89ba      	ldrh	r2, [r7, #12]
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <lcd_ShowStr+0xc4>)
 8001424:	885b      	ldrh	r3, [r3, #2]
 8001426:	4619      	mov	r1, r3
 8001428:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800142c:	1acb      	subs	r3, r1, r3
 800142e:	429a      	cmp	r2, r3
 8001430:	dc36      	bgt.n	80014a0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b80      	cmp	r3, #128	; 0x80
 8001438:	d902      	bls.n	8001440 <lcd_ShowStr+0x5c>
 800143a:	2301      	movs	r3, #1
 800143c:	75fb      	strb	r3, [r7, #23]
 800143e:	e02a      	b.n	8001496 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b0d      	cmp	r3, #13
 8001446:	d10b      	bne.n	8001460 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001448:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800144c:	b29a      	uxth	r2, r3
 800144e:	89bb      	ldrh	r3, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001454:	8abb      	ldrh	r3, [r7, #20]
 8001456:	81fb      	strh	r3, [r7, #14]
					str++;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	3301      	adds	r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	e017      	b.n	8001490 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	88fc      	ldrh	r4, [r7, #6]
 8001466:	89b9      	ldrh	r1, [r7, #12]
 8001468:	89f8      	ldrh	r0, [r7, #14]
 800146a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	4623      	mov	r3, r4
 800147c:	f7ff fcc4 	bl	8000e08 <lcd_ShowChar>
					x+=sizey/2;
 8001480:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	b29a      	uxth	r2, r3
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	4413      	add	r3, r2
 800148e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	3301      	adds	r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1b2      	bne.n	8001404 <lcd_ShowStr+0x20>
 800149e:	e000      	b.n	80014a2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014a0:	bf00      	nop
			}
		}
	}
}
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	200001bc 	.word	0x200001bc

080014ac <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80014b0:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <led7_Scan+0x104>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <led7_Scan+0x104>)
 80014ba:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80014bc:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <led7_Scan+0x108>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a3d      	ldr	r2, [pc, #244]	; (80015b8 <led7_Scan+0x10c>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <led7_Scan+0x104>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <led7_Scan+0x104>)
 80014d6:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <led7_Scan+0x108>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d847      	bhi.n	8001570 <led7_Scan+0xc4>
 80014e0:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <led7_Scan+0x3c>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	080014f9 	.word	0x080014f9
 80014ec:	08001517 	.word	0x08001517
 80014f0:	08001535 	.word	0x08001535
 80014f4:	08001553 	.word	0x08001553
	case 0:
		spi_buffer |= 0x00b0;
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <led7_Scan+0x104>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <led7_Scan+0x104>)
 8001504:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <led7_Scan+0x104>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <led7_Scan+0x104>)
 8001512:	801a      	strh	r2, [r3, #0]
		break;
 8001514:	e02d      	b.n	8001572 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <led7_Scan+0x104>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <led7_Scan+0x104>)
 8001522:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <led7_Scan+0x104>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	f023 0320 	bic.w	r3, r3, #32
 800152c:	b29a      	uxth	r2, r3
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <led7_Scan+0x104>)
 8001530:	801a      	strh	r2, [r3, #0]
		break;
 8001532:	e01e      	b.n	8001572 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <led7_Scan+0x104>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <led7_Scan+0x104>)
 8001540:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <led7_Scan+0x104>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	f023 0310 	bic.w	r3, r3, #16
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <led7_Scan+0x104>)
 800154e:	801a      	strh	r2, [r3, #0]
		break;
 8001550:	e00f      	b.n	8001572 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <led7_Scan+0x104>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <led7_Scan+0x104>)
 800155e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <led7_Scan+0x104>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <led7_Scan+0x104>)
 800156c:	801a      	strh	r2, [r3, #0]
		break;
 800156e:	e000      	b.n	8001572 <led7_Scan+0xc6>
	default:
		break;
 8001570:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <led7_Scan+0x108>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	425a      	negs	r2, r3
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	f002 0203 	and.w	r2, r2, #3
 8001582:	bf58      	it	pl
 8001584:	4253      	negpl	r3, r2
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <led7_Scan+0x108>)
 8001588:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <led7_Scan+0x110>)
 8001590:	f002 fa08 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001594:	2301      	movs	r3, #1
 8001596:	2202      	movs	r2, #2
 8001598:	4905      	ldr	r1, [pc, #20]	; (80015b0 <led7_Scan+0x104>)
 800159a:	4809      	ldr	r0, [pc, #36]	; (80015c0 <led7_Scan+0x114>)
 800159c:	f004 f807 	bl	80055ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <led7_Scan+0x110>)
 80015a6:	f002 f9fd 	bl	80039a4 <HAL_GPIO_WritePin>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000004 	.word	0x20000004
 80015b4:	200000b8 	.word	0x200000b8
 80015b8:	20000000 	.word	0x20000000
 80015bc:	40021800 	.word	0x40021800
 80015c0:	2000025c 	.word	0x2000025c

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c8:	f001 fe16 	bl	80031f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015cc:	f000 f82a 	bl	8001624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d0:	f7ff f9dc 	bl	800098c <MX_GPIO_Init>
  MX_TIM2_Init();
 80015d4:	f001 fc0a 	bl	8002dec <MX_TIM2_Init>
  MX_SPI1_Init();
 80015d8:	f001 fadc 	bl	8002b94 <MX_SPI1_Init>
  MX_FSMC_Init();
 80015dc:	f7ff f906 	bl	80007ec <MX_FSMC_Init>
  MX_I2C1_Init();
 80015e0:	f7ff facc 	bl	8000b7c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80015e4:	f001 fd26 	bl	8003034 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	system_init();
 80015e8:	f000 f886 	bl	80016f8 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	lcd_Clear(BLACK);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fbb9 	bl	8000d64 <lcd_Clear>
	UpdateTime();// update the curret time
 80015f2:	f000 f8e5 	bl	80017c0 <UpdateTime>

	while (1) {
		while (!timer2_flag);
 80015f6:	bf00      	nop
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <main+0x5c>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0fb      	beq.n	80015f8 <main+0x34>
		timer2_flag = 0;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <main+0x5c>)
 8001602:	2200      	movs	r2, #0
 8001604:	801a      	strh	r2, [r3, #0]
		ds3231_ReadTime();
 8001606:	f7ff f88d 	bl	8000724 <ds3231_ReadTime>
		button_Scan();
 800160a:	f7fe ffb9 	bl	8000580 <button_Scan>
        fsm();
 800160e:	f001 f945 	bl	800289c <fsm>
        displayScreen();
 8001612:	f000 fda7 	bl	8002164 <displayScreen>
        test_Uart();
 8001616:	f000 f8a7 	bl	8001768 <test_Uart>
        test_receive();
 800161a:	f000 f88f 	bl	800173c <test_receive>
	while (1) {
 800161e:	e7ea      	b.n	80015f6 <main+0x32>
 8001620:	200000d0 	.word	0x200000d0

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	; 0x50
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	2230      	movs	r2, #48	; 0x30
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f006 fa62 	bl	8007afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <SystemClock_Config+0xcc>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <SystemClock_Config+0xcc>)
 8001652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <SystemClock_Config+0xcc>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <SystemClock_Config+0xd0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <SystemClock_Config+0xd0>)
 800166e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <SystemClock_Config+0xd0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001684:	2301      	movs	r3, #1
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001688:	2310      	movs	r3, #16
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168c:	2302      	movs	r3, #2
 800168e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001690:	2300      	movs	r3, #0
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001694:	2308      	movs	r3, #8
 8001696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001698:	23a8      	movs	r3, #168	; 0xa8
 800169a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016a0:	2304      	movs	r3, #4
 80016a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a4:	f107 0320 	add.w	r3, r7, #32
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fa83 	bl	8004bb4 <HAL_RCC_OscConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016b4:	f001 fa18 	bl	8002ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b8:	230f      	movs	r3, #15
 80016ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016bc:	2302      	movs	r3, #2
 80016be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80016ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2105      	movs	r1, #5
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 fce4 	bl	80050a4 <HAL_RCC_ClockConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016e2:	f001 fa01 	bl	8002ae8 <Error_Handler>
  }
}
 80016e6:	bf00      	nop
 80016e8:	3750      	adds	r7, #80	; 0x50
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40007000 	.word	0x40007000

080016f8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2120      	movs	r1, #32
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <system_init+0x40>)
 8001702:	f002 f94f 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2140      	movs	r1, #64	; 0x40
 800170a:	480b      	ldr	r0, [pc, #44]	; (8001738 <system_init+0x40>)
 800170c:	f002 f94a 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2110      	movs	r1, #16
 8001714:	4808      	ldr	r0, [pc, #32]	; (8001738 <system_init+0x40>)
 8001716:	f002 f945 	bl	80039a4 <HAL_GPIO_WritePin>

	button_init ();
 800171a:	f7fe ff25 	bl	8000568 <button_init>
	lcd_init();
 800171e:	f7ff fd01 	bl	8001124 <lcd_init>
	ds3231_init();
 8001722:	f7fe ff99 	bl	8000658 <ds3231_init>
	uart_init_rs232();
 8001726:	f001 fbd3 	bl	8002ed0 <uart_init_rs232>

	timer_init();
 800172a:	f001 f9e3 	bl	8002af4 <timer_init>
	setTimer2(50);
 800172e:	2032      	movs	r0, #50	; 0x32
 8001730:	f001 f9ea 	bl	8002b08 <setTimer2>
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000

0800173c <test_receive>:

void test_receive(){
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af04      	add	r7, sp, #16
	lcd_ShowStr(20, 210, rcv, RED, BLACK, 24, 0);
 8001742:	2300      	movs	r3, #0
 8001744:	9302      	str	r3, [sp, #8]
 8001746:	2318      	movs	r3, #24
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	2300      	movs	r3, #0
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <test_receive+0x28>)
 8001754:	21d2      	movs	r1, #210	; 0xd2
 8001756:	2014      	movs	r0, #20
 8001758:	f7ff fe44 	bl	80013e4 <lcd_ShowStr>
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200001f8 	.word	0x200001f8

08001768 <test_Uart>:

void test_Uart(){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	if(button_count[11] == 1){
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <test_Uart+0x40>)
 800176e:	8adb      	ldrh	r3, [r3, #22]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d117      	bne.n	80017a4 <test_Uart+0x3c>
		uart_Rs232SendNum(ds3231_hours);
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <test_Uart+0x44>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f001 fbd1 	bl	8002f20 <uart_Rs232SendNum>
		uart_Rs232SendString(":");
 800177e:	480c      	ldr	r0, [pc, #48]	; (80017b0 <test_Uart+0x48>)
 8001780:	f001 fbb4 	bl	8002eec <uart_Rs232SendString>
		uart_Rs232SendNum(ds3231_min);
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <test_Uart+0x4c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f001 fbc9 	bl	8002f20 <uart_Rs232SendNum>
		uart_Rs232SendString(":");
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <test_Uart+0x48>)
 8001790:	f001 fbac 	bl	8002eec <uart_Rs232SendString>
		uart_Rs232SendNum(ds3231_sec);
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <test_Uart+0x50>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f001 fbc1 	bl	8002f20 <uart_Rs232SendNum>
		uart_Rs232SendString("\n");
 800179e:	4807      	ldr	r0, [pc, #28]	; (80017bc <test_Uart+0x54>)
 80017a0:	f001 fba4 	bl	8002eec <uart_Rs232SendString>
	}
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200000e8 	.word	0x200000e8
 80017ac:	2000010d 	.word	0x2000010d
 80017b0:	08008380 	.word	0x08008380
 80017b4:	2000010a 	.word	0x2000010a
 80017b8:	20000108 	.word	0x20000108
 80017bc:	08008384 	.word	0x08008384

080017c0 <UpdateTime>:

void UpdateTime() {// update the current time
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 80017c4:	2118      	movs	r1, #24
 80017c6:	2006      	movs	r0, #6
 80017c8:	f7fe ff8a 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 80017cc:	210b      	movs	r1, #11
 80017ce:	2005      	movs	r0, #5
 80017d0:	f7fe ff86 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 15);
 80017d4:	210f      	movs	r1, #15
 80017d6:	2004      	movs	r0, #4
 80017d8:	f7fe ff82 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 80017dc:	2106      	movs	r1, #6
 80017de:	2003      	movs	r0, #3
 80017e0:	f7fe ff7e 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 9);
 80017e4:	2109      	movs	r1, #9
 80017e6:	2002      	movs	r0, #2
 80017e8:	f7fe ff7a 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 0);
 80017ec:	2100      	movs	r1, #0
 80017ee:	2001      	movs	r0, #1
 80017f0:	f7fe ff76 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 0);
 80017f4:	2100      	movs	r1, #0
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7fe ff72 	bl	80006e0 <ds3231_Write>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}

08001800 <displayHour>:

void displayHour(int num, int isBlink) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af04      	add	r7, sp, #16
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	if(isBlink){
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d04f      	beq.n	80018b0 <displayHour+0xb0>
	    timeBlink = (timeBlink + 1)%10;
 8001810:	4b40      	ldr	r3, [pc, #256]	; (8001914 <displayHour+0x114>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	1c59      	adds	r1, r3, #1
 8001816:	4b40      	ldr	r3, [pc, #256]	; (8001918 <displayHour+0x118>)
 8001818:	fb83 2301 	smull	r2, r3, r3, r1
 800181c:	109a      	asrs	r2, r3, #2
 800181e:	17cb      	asrs	r3, r1, #31
 8001820:	1ad2      	subs	r2, r2, r3
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	1aca      	subs	r2, r1, r3
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <displayHour+0x114>)
 800182e:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001830:	4b38      	ldr	r3, [pc, #224]	; (8001914 <displayHour+0x114>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b04      	cmp	r3, #4
 8001836:	dc0d      	bgt.n	8001854 <displayHour+0x54>
	    	lcd_ShowStr(70, 100, "  ", GREEN, BLACK, 24, 0);
 8001838:	2300      	movs	r3, #0
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	2318      	movs	r3, #24
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	2300      	movs	r3, #0
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001848:	4a34      	ldr	r2, [pc, #208]	; (800191c <displayHour+0x11c>)
 800184a:	2164      	movs	r1, #100	; 0x64
 800184c:	2046      	movs	r0, #70	; 0x46
 800184e:	f7ff fdc9 	bl	80013e4 <lcd_ShowStr>
	}
	else {
		lcd_ShowIntNum(70, 100, num/10, 1, GREEN, BLACK, 24);
		lcd_ShowIntNum(83, 100, num%10, 1, GREEN, BLACK, 24);
	}
}
 8001852:	e05a      	b.n	800190a <displayHour+0x10a>
			lcd_ShowIntNum(70, 100, num/10, 1, GREEN, BLACK, 24);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a30      	ldr	r2, [pc, #192]	; (8001918 <displayHour+0x118>)
 8001858:	fb82 1203 	smull	r1, r2, r2, r3
 800185c:	1092      	asrs	r2, r2, #2
 800185e:	17db      	asrs	r3, r3, #31
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	b29a      	uxth	r2, r3
 8001864:	2318      	movs	r3, #24
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	2300      	movs	r3, #0
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2301      	movs	r3, #1
 8001874:	2164      	movs	r1, #100	; 0x64
 8001876:	2046      	movs	r0, #70	; 0x46
 8001878:	f7ff fbb2 	bl	8000fe0 <lcd_ShowIntNum>
			lcd_ShowIntNum(83, 100, num%10, 1, GREEN, BLACK, 24);
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <displayHour+0x118>)
 8001880:	fb83 1302 	smull	r1, r3, r3, r2
 8001884:	1099      	asrs	r1, r3, #2
 8001886:	17d3      	asrs	r3, r2, #31
 8001888:	1ac9      	subs	r1, r1, r3
 800188a:	460b      	mov	r3, r1
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	1ad1      	subs	r1, r2, r3
 8001894:	b28a      	uxth	r2, r1
 8001896:	2318      	movs	r3, #24
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	2300      	movs	r3, #0
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	2164      	movs	r1, #100	; 0x64
 80018a8:	2053      	movs	r0, #83	; 0x53
 80018aa:	f7ff fb99 	bl	8000fe0 <lcd_ShowIntNum>
}
 80018ae:	e02c      	b.n	800190a <displayHour+0x10a>
		lcd_ShowIntNum(70, 100, num/10, 1, GREEN, BLACK, 24);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a19      	ldr	r2, [pc, #100]	; (8001918 <displayHour+0x118>)
 80018b4:	fb82 1203 	smull	r1, r2, r2, r3
 80018b8:	1092      	asrs	r2, r2, #2
 80018ba:	17db      	asrs	r3, r3, #31
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	b29a      	uxth	r2, r3
 80018c0:	2318      	movs	r3, #24
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2300      	movs	r3, #0
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2301      	movs	r3, #1
 80018d0:	2164      	movs	r1, #100	; 0x64
 80018d2:	2046      	movs	r0, #70	; 0x46
 80018d4:	f7ff fb84 	bl	8000fe0 <lcd_ShowIntNum>
		lcd_ShowIntNum(83, 100, num%10, 1, GREEN, BLACK, 24);
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <displayHour+0x118>)
 80018dc:	fb83 1302 	smull	r1, r3, r3, r2
 80018e0:	1099      	asrs	r1, r3, #2
 80018e2:	17d3      	asrs	r3, r2, #31
 80018e4:	1ac9      	subs	r1, r1, r3
 80018e6:	460b      	mov	r3, r1
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	1ad1      	subs	r1, r2, r3
 80018f0:	b28a      	uxth	r2, r1
 80018f2:	2318      	movs	r3, #24
 80018f4:	9302      	str	r3, [sp, #8]
 80018f6:	2300      	movs	r3, #0
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2301      	movs	r3, #1
 8001902:	2164      	movs	r1, #100	; 0x64
 8001904:	2053      	movs	r0, #83	; 0x53
 8001906:	f7ff fb6b 	bl	8000fe0 <lcd_ShowIntNum>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200000cc 	.word	0x200000cc
 8001918:	66666667 	.word	0x66666667
 800191c:	08008388 	.word	0x08008388

08001920 <displayMin>:

void displayMin(int num, int isBlink) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af04      	add	r7, sp, #16
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
	lcd_ShowChar(96, 100, ':', GREEN, BLACK, 24, 0);
 800192a:	2300      	movs	r3, #0
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2318      	movs	r3, #24
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	2300      	movs	r3, #0
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800193a:	223a      	movs	r2, #58	; 0x3a
 800193c:	2164      	movs	r1, #100	; 0x64
 800193e:	2060      	movs	r0, #96	; 0x60
 8001940:	f7ff fa62 	bl	8000e08 <lcd_ShowChar>
	if (isBlink) {
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d04f      	beq.n	80019ea <displayMin+0xca>
	    timeBlink = (timeBlink + 1)%10;
 800194a:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <displayMin+0x12c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <displayMin+0x130>)
 8001952:	fb83 2301 	smull	r2, r3, r3, r1
 8001956:	109a      	asrs	r2, r3, #2
 8001958:	17cb      	asrs	r3, r1, #31
 800195a:	1ad2      	subs	r2, r2, r3
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	1aca      	subs	r2, r1, r3
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <displayMin+0x12c>)
 8001968:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 800196a:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <displayMin+0x12c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b04      	cmp	r3, #4
 8001970:	dc0d      	bgt.n	800198e <displayMin+0x6e>
	    	lcd_ShowStr(110, 100, "  ", GREEN, BLACK, 24, 0);
 8001972:	2300      	movs	r3, #0
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2318      	movs	r3, #24
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	2300      	movs	r3, #0
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001982:	4a34      	ldr	r2, [pc, #208]	; (8001a54 <displayMin+0x134>)
 8001984:	2164      	movs	r1, #100	; 0x64
 8001986:	206e      	movs	r0, #110	; 0x6e
 8001988:	f7ff fd2c 	bl	80013e4 <lcd_ShowStr>
	else {
    	lcd_ShowIntNum(110, 100, num/10, 1, GREEN, BLACK, 24);
    	lcd_ShowIntNum(123, 100, num%10, 1, GREEN, BLACK, 24);
	}

}
 800198c:	e05a      	b.n	8001a44 <displayMin+0x124>
	    	lcd_ShowIntNum(110, 100, num/10, 1, GREEN, BLACK, 24);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a2f      	ldr	r2, [pc, #188]	; (8001a50 <displayMin+0x130>)
 8001992:	fb82 1203 	smull	r1, r2, r2, r3
 8001996:	1092      	asrs	r2, r2, #2
 8001998:	17db      	asrs	r3, r3, #31
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b29a      	uxth	r2, r3
 800199e:	2318      	movs	r3, #24
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2300      	movs	r3, #0
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	2164      	movs	r1, #100	; 0x64
 80019b0:	206e      	movs	r0, #110	; 0x6e
 80019b2:	f7ff fb15 	bl	8000fe0 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(123, 100, num%10, 1, GREEN, BLACK, 24);
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <displayMin+0x130>)
 80019ba:	fb83 1302 	smull	r1, r3, r3, r2
 80019be:	1099      	asrs	r1, r3, #2
 80019c0:	17d3      	asrs	r3, r2, #31
 80019c2:	1ac9      	subs	r1, r1, r3
 80019c4:	460b      	mov	r3, r1
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	1ad1      	subs	r1, r2, r3
 80019ce:	b28a      	uxth	r2, r1
 80019d0:	2318      	movs	r3, #24
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	2300      	movs	r3, #0
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	2164      	movs	r1, #100	; 0x64
 80019e2:	207b      	movs	r0, #123	; 0x7b
 80019e4:	f7ff fafc 	bl	8000fe0 <lcd_ShowIntNum>
}
 80019e8:	e02c      	b.n	8001a44 <displayMin+0x124>
    	lcd_ShowIntNum(110, 100, num/10, 1, GREEN, BLACK, 24);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <displayMin+0x130>)
 80019ee:	fb82 1203 	smull	r1, r2, r2, r3
 80019f2:	1092      	asrs	r2, r2, #2
 80019f4:	17db      	asrs	r3, r3, #31
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	2318      	movs	r3, #24
 80019fc:	9302      	str	r3, [sp, #8]
 80019fe:	2300      	movs	r3, #0
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	2164      	movs	r1, #100	; 0x64
 8001a0c:	206e      	movs	r0, #110	; 0x6e
 8001a0e:	f7ff fae7 	bl	8000fe0 <lcd_ShowIntNum>
    	lcd_ShowIntNum(123, 100, num%10, 1, GREEN, BLACK, 24);
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <displayMin+0x130>)
 8001a16:	fb83 1302 	smull	r1, r3, r3, r2
 8001a1a:	1099      	asrs	r1, r3, #2
 8001a1c:	17d3      	asrs	r3, r2, #31
 8001a1e:	1ac9      	subs	r1, r1, r3
 8001a20:	460b      	mov	r3, r1
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	1ad1      	subs	r1, r2, r3
 8001a2a:	b28a      	uxth	r2, r1
 8001a2c:	2318      	movs	r3, #24
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	2300      	movs	r3, #0
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	2164      	movs	r1, #100	; 0x64
 8001a3e:	207b      	movs	r0, #123	; 0x7b
 8001a40:	f7ff face 	bl	8000fe0 <lcd_ShowIntNum>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200000cc 	.word	0x200000cc
 8001a50:	66666667 	.word	0x66666667
 8001a54:	08008388 	.word	0x08008388

08001a58 <displaySec>:

void displaySec(int num, int isBlink) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	lcd_ShowChar(136, 100, ':', GREEN, BLACK, 24, 0);
 8001a62:	2300      	movs	r3, #0
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	2318      	movs	r3, #24
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a72:	223a      	movs	r2, #58	; 0x3a
 8001a74:	2164      	movs	r1, #100	; 0x64
 8001a76:	2088      	movs	r0, #136	; 0x88
 8001a78:	f7ff f9c6 	bl	8000e08 <lcd_ShowChar>
	if (isBlink) {
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d04f      	beq.n	8001b22 <displaySec+0xca>
	    timeBlink = (timeBlink + 1)%10;
 8001a82:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <displaySec+0x12c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	1c59      	adds	r1, r3, #1
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <displaySec+0x130>)
 8001a8a:	fb83 2301 	smull	r2, r3, r3, r1
 8001a8e:	109a      	asrs	r2, r3, #2
 8001a90:	17cb      	asrs	r3, r1, #31
 8001a92:	1ad2      	subs	r2, r2, r3
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	1aca      	subs	r2, r1, r3
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <displaySec+0x12c>)
 8001aa0:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <displaySec+0x12c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	dc0d      	bgt.n	8001ac6 <displaySec+0x6e>
	    	lcd_ShowStr(150, 100, "  ", GREEN, BLACK, 24, 0);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2318      	movs	r3, #24
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001aba:	4a34      	ldr	r2, [pc, #208]	; (8001b8c <displaySec+0x134>)
 8001abc:	2164      	movs	r1, #100	; 0x64
 8001abe:	2096      	movs	r0, #150	; 0x96
 8001ac0:	f7ff fc90 	bl	80013e4 <lcd_ShowStr>
	}
	else {
    	lcd_ShowIntNum(150, 100, num/10, 1, GREEN, BLACK, 24);
    	lcd_ShowIntNum(163, 100, num%10, 1, GREEN, BLACK, 24);
	}
}
 8001ac4:	e05a      	b.n	8001b7c <displaySec+0x124>
	    	lcd_ShowIntNum(150, 100, num/10, 1, GREEN, BLACK, 24);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <displaySec+0x130>)
 8001aca:	fb82 1203 	smull	r1, r2, r2, r3
 8001ace:	1092      	asrs	r2, r2, #2
 8001ad0:	17db      	asrs	r3, r3, #31
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	2318      	movs	r3, #24
 8001ad8:	9302      	str	r3, [sp, #8]
 8001ada:	2300      	movs	r3, #0
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2164      	movs	r1, #100	; 0x64
 8001ae8:	2096      	movs	r0, #150	; 0x96
 8001aea:	f7ff fa79 	bl	8000fe0 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(163, 100, num%10, 1, GREEN, BLACK, 24);
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <displaySec+0x130>)
 8001af2:	fb83 1302 	smull	r1, r3, r3, r2
 8001af6:	1099      	asrs	r1, r3, #2
 8001af8:	17d3      	asrs	r3, r2, #31
 8001afa:	1ac9      	subs	r1, r1, r3
 8001afc:	460b      	mov	r3, r1
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	1ad1      	subs	r1, r2, r3
 8001b06:	b28a      	uxth	r2, r1
 8001b08:	2318      	movs	r3, #24
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2301      	movs	r3, #1
 8001b18:	2164      	movs	r1, #100	; 0x64
 8001b1a:	20a3      	movs	r0, #163	; 0xa3
 8001b1c:	f7ff fa60 	bl	8000fe0 <lcd_ShowIntNum>
}
 8001b20:	e02c      	b.n	8001b7c <displaySec+0x124>
    	lcd_ShowIntNum(150, 100, num/10, 1, GREEN, BLACK, 24);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <displaySec+0x130>)
 8001b26:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2a:	1092      	asrs	r2, r2, #2
 8001b2c:	17db      	asrs	r3, r3, #31
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	2318      	movs	r3, #24
 8001b34:	9302      	str	r3, [sp, #8]
 8001b36:	2300      	movs	r3, #0
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2301      	movs	r3, #1
 8001b42:	2164      	movs	r1, #100	; 0x64
 8001b44:	2096      	movs	r0, #150	; 0x96
 8001b46:	f7ff fa4b 	bl	8000fe0 <lcd_ShowIntNum>
    	lcd_ShowIntNum(163, 100, num%10, 1, GREEN, BLACK, 24);
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <displaySec+0x130>)
 8001b4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b52:	1099      	asrs	r1, r3, #2
 8001b54:	17d3      	asrs	r3, r2, #31
 8001b56:	1ac9      	subs	r1, r1, r3
 8001b58:	460b      	mov	r3, r1
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	1ad1      	subs	r1, r2, r3
 8001b62:	b28a      	uxth	r2, r1
 8001b64:	2318      	movs	r3, #24
 8001b66:	9302      	str	r3, [sp, #8]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2301      	movs	r3, #1
 8001b74:	2164      	movs	r1, #100	; 0x64
 8001b76:	20a3      	movs	r0, #163	; 0xa3
 8001b78:	f7ff fa32 	bl	8000fe0 <lcd_ShowIntNum>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200000cc 	.word	0x200000cc
 8001b88:	66666667 	.word	0x66666667
 8001b8c:	08008388 	.word	0x08008388

08001b90 <convertDay>:

void convertDay(int num) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	2b06      	cmp	r3, #6
 8001b9e:	d873      	bhi.n	8001c88 <convertDay+0xf8>
 8001ba0:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <convertDay+0x18>)
 8001ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba6:	bf00      	nop
 8001ba8:	08001bc5 	.word	0x08001bc5
 8001bac:	08001be1 	.word	0x08001be1
 8001bb0:	08001bfd 	.word	0x08001bfd
 8001bb4:	08001c19 	.word	0x08001c19
 8001bb8:	08001c35 	.word	0x08001c35
 8001bbc:	08001c51 	.word	0x08001c51
 8001bc0:	08001c6d 	.word	0x08001c6d
	switch(num)
	{
		case 1:
			lcd_ShowStr(20, 130, "SUN", YELLOW, BLACK, 24, 0);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	2318      	movs	r3, #24
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001bd4:	4a2e      	ldr	r2, [pc, #184]	; (8001c90 <convertDay+0x100>)
 8001bd6:	2182      	movs	r1, #130	; 0x82
 8001bd8:	2014      	movs	r0, #20
 8001bda:	f7ff fc03 	bl	80013e4 <lcd_ShowStr>
			break;
 8001bde:	e053      	b.n	8001c88 <convertDay+0xf8>
		case 2:
			lcd_ShowStr(20, 130, "MON", YELLOW, BLACK, 24, 0);
 8001be0:	2300      	movs	r3, #0
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	2318      	movs	r3, #24
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2300      	movs	r3, #0
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001bf0:	4a28      	ldr	r2, [pc, #160]	; (8001c94 <convertDay+0x104>)
 8001bf2:	2182      	movs	r1, #130	; 0x82
 8001bf4:	2014      	movs	r0, #20
 8001bf6:	f7ff fbf5 	bl	80013e4 <lcd_ShowStr>
			break;
 8001bfa:	e045      	b.n	8001c88 <convertDay+0xf8>
		case 3:
			lcd_ShowStr(20, 130, "TUE", YELLOW, BLACK, 24, 0);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9302      	str	r3, [sp, #8]
 8001c00:	2318      	movs	r3, #24
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c0c:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <convertDay+0x108>)
 8001c0e:	2182      	movs	r1, #130	; 0x82
 8001c10:	2014      	movs	r0, #20
 8001c12:	f7ff fbe7 	bl	80013e4 <lcd_ShowStr>
			break;
 8001c16:	e037      	b.n	8001c88 <convertDay+0xf8>
		case 4:
			lcd_ShowStr(20, 130, "WED", YELLOW, BLACK, 24, 0);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	2318      	movs	r3, #24
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c28:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <convertDay+0x10c>)
 8001c2a:	2182      	movs	r1, #130	; 0x82
 8001c2c:	2014      	movs	r0, #20
 8001c2e:	f7ff fbd9 	bl	80013e4 <lcd_ShowStr>
			break;
 8001c32:	e029      	b.n	8001c88 <convertDay+0xf8>
		case 5:
			lcd_ShowStr(20, 130, "THU", YELLOW, BLACK, 24, 0);
 8001c34:	2300      	movs	r3, #0
 8001c36:	9302      	str	r3, [sp, #8]
 8001c38:	2318      	movs	r3, #24
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c44:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <convertDay+0x110>)
 8001c46:	2182      	movs	r1, #130	; 0x82
 8001c48:	2014      	movs	r0, #20
 8001c4a:	f7ff fbcb 	bl	80013e4 <lcd_ShowStr>
			break;
 8001c4e:	e01b      	b.n	8001c88 <convertDay+0xf8>
		case 6:
			lcd_ShowStr(20, 130, "FRI", YELLOW, BLACK, 24, 0);
 8001c50:	2300      	movs	r3, #0
 8001c52:	9302      	str	r3, [sp, #8]
 8001c54:	2318      	movs	r3, #24
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c60:	4a10      	ldr	r2, [pc, #64]	; (8001ca4 <convertDay+0x114>)
 8001c62:	2182      	movs	r1, #130	; 0x82
 8001c64:	2014      	movs	r0, #20
 8001c66:	f7ff fbbd 	bl	80013e4 <lcd_ShowStr>
			break;
 8001c6a:	e00d      	b.n	8001c88 <convertDay+0xf8>
		case 7:
			lcd_ShowStr(20, 130, "SAT", YELLOW, BLACK, 24, 0);
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2318      	movs	r3, #24
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <convertDay+0x118>)
 8001c7e:	2182      	movs	r1, #130	; 0x82
 8001c80:	2014      	movs	r0, #20
 8001c82:	f7ff fbaf 	bl	80013e4 <lcd_ShowStr>
			break;
 8001c86:	bf00      	nop
	}
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	0800838c 	.word	0x0800838c
 8001c94:	08008390 	.word	0x08008390
 8001c98:	08008394 	.word	0x08008394
 8001c9c:	08008398 	.word	0x08008398
 8001ca0:	0800839c 	.word	0x0800839c
 8001ca4:	080083a0 	.word	0x080083a0
 8001ca8:	080083a4 	.word	0x080083a4

08001cac <displayDay>:
void displayDay(int num, int isBlink) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af04      	add	r7, sp, #16
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d025      	beq.n	8001d08 <displayDay+0x5c>
	    timeBlink = (timeBlink + 1)%10;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <displayDay+0x6c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	1c59      	adds	r1, r3, #1
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <displayDay+0x70>)
 8001cc4:	fb83 2301 	smull	r2, r3, r3, r1
 8001cc8:	109a      	asrs	r2, r3, #2
 8001cca:	17cb      	asrs	r3, r1, #31
 8001ccc:	1ad2      	subs	r2, r2, r3
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	1aca      	subs	r2, r1, r3
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <displayDay+0x6c>)
 8001cda:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <displayDay+0x6c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	dc0d      	bgt.n	8001d00 <displayDay+0x54>
	    	lcd_ShowStr(20, 130, "   ", GREEN, BLACK, 24, 0);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	2318      	movs	r3, #24
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	2300      	movs	r3, #0
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <displayDay+0x74>)
 8001cf6:	2182      	movs	r1, #130	; 0x82
 8001cf8:	2014      	movs	r0, #20
 8001cfa:	f7ff fb73 	bl	80013e4 <lcd_ShowStr>
	    else {
	    	convertDay(num);
	    }
	}
	else convertDay(num);
}
 8001cfe:	e006      	b.n	8001d0e <displayDay+0x62>
	    	convertDay(num);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff45 	bl	8001b90 <convertDay>
}
 8001d06:	e002      	b.n	8001d0e <displayDay+0x62>
	else convertDay(num);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff41 	bl	8001b90 <convertDay>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200000cc 	.word	0x200000cc
 8001d1c:	66666667 	.word	0x66666667
 8001d20:	080083a8 	.word	0x080083a8

08001d24 <displayDate>:

void displayDate(int num, int isBlink) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af04      	add	r7, sp, #16
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d030      	beq.n	8001d96 <displayDate+0x72>
	    timeBlink = (timeBlink + 1)%10;
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <displayDate+0x98>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	1c59      	adds	r1, r3, #1
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <displayDate+0x9c>)
 8001d3c:	fb83 2301 	smull	r2, r3, r3, r1
 8001d40:	109a      	asrs	r2, r3, #2
 8001d42:	17cb      	asrs	r3, r1, #31
 8001d44:	1ad2      	subs	r2, r2, r3
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	1aca      	subs	r2, r1, r3
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <displayDate+0x98>)
 8001d52:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <displayDate+0x98>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	dc0d      	bgt.n	8001d78 <displayDate+0x54>
	    	lcd_ShowStr(70, 130, "  ", GREEN, BLACK, 24, 0);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9302      	str	r3, [sp, #8]
 8001d60:	2318      	movs	r3, #24
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	2300      	movs	r3, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d6c:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <displayDate+0xa0>)
 8001d6e:	2182      	movs	r1, #130	; 0x82
 8001d70:	2046      	movs	r0, #70	; 0x46
 8001d72:	f7ff fb37 	bl	80013e4 <lcd_ShowStr>
	    }
	}
	else {
    		lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
	}
}
 8001d76:	e01c      	b.n	8001db2 <displayDate+0x8e>
	    	lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2318      	movs	r3, #24
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	2300      	movs	r3, #0
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	2182      	movs	r1, #130	; 0x82
 8001d8e:	2046      	movs	r0, #70	; 0x46
 8001d90:	f7ff f926 	bl	8000fe0 <lcd_ShowIntNum>
}
 8001d94:	e00d      	b.n	8001db2 <displayDate+0x8e>
    		lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	2318      	movs	r3, #24
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2302      	movs	r3, #2
 8001daa:	2182      	movs	r1, #130	; 0x82
 8001dac:	2046      	movs	r0, #70	; 0x46
 8001dae:	f7ff f917 	bl	8000fe0 <lcd_ShowIntNum>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200000cc 	.word	0x200000cc
 8001dc0:	66666667 	.word	0x66666667
 8001dc4:	08008388 	.word	0x08008388

08001dc8 <convertMonth>:

void convertMonth(int num) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af04      	add	r7, sp, #16
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	2b0b      	cmp	r3, #11
 8001dd6:	f200 80c3 	bhi.w	8001f60 <convertMonth+0x198>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <convertMonth+0x18>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001e11 	.word	0x08001e11
 8001de4:	08001e2d 	.word	0x08001e2d
 8001de8:	08001e49 	.word	0x08001e49
 8001dec:	08001e65 	.word	0x08001e65
 8001df0:	08001e81 	.word	0x08001e81
 8001df4:	08001e9d 	.word	0x08001e9d
 8001df8:	08001eb9 	.word	0x08001eb9
 8001dfc:	08001ed5 	.word	0x08001ed5
 8001e00:	08001ef1 	.word	0x08001ef1
 8001e04:	08001f0d 	.word	0x08001f0d
 8001e08:	08001f29 	.word	0x08001f29
 8001e0c:	08001f45 	.word	0x08001f45
    switch(num)
    {
        case 1:
        	lcd_ShowStr(105, 130, "JAN", YELLOW, BLACK, 24, 0);
 8001e10:	2300      	movs	r3, #0
 8001e12:	9302      	str	r3, [sp, #8]
 8001e14:	2318      	movs	r3, #24
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e20:	4a51      	ldr	r2, [pc, #324]	; (8001f68 <convertMonth+0x1a0>)
 8001e22:	2182      	movs	r1, #130	; 0x82
 8001e24:	2069      	movs	r0, #105	; 0x69
 8001e26:	f7ff fadd 	bl	80013e4 <lcd_ShowStr>
            break;
 8001e2a:	e099      	b.n	8001f60 <convertMonth+0x198>
        case 2:
        	lcd_ShowStr(105, 130, "FEB", YELLOW, BLACK, 24, 0);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	2318      	movs	r3, #24
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	2300      	movs	r3, #0
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e3c:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <convertMonth+0x1a4>)
 8001e3e:	2182      	movs	r1, #130	; 0x82
 8001e40:	2069      	movs	r0, #105	; 0x69
 8001e42:	f7ff facf 	bl	80013e4 <lcd_ShowStr>
            break;
 8001e46:	e08b      	b.n	8001f60 <convertMonth+0x198>
        case 3:
        	lcd_ShowStr(105, 130, "MAR", YELLOW, BLACK, 24, 0);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	2318      	movs	r3, #24
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	2300      	movs	r3, #0
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e58:	4a45      	ldr	r2, [pc, #276]	; (8001f70 <convertMonth+0x1a8>)
 8001e5a:	2182      	movs	r1, #130	; 0x82
 8001e5c:	2069      	movs	r0, #105	; 0x69
 8001e5e:	f7ff fac1 	bl	80013e4 <lcd_ShowStr>
            break;
 8001e62:	e07d      	b.n	8001f60 <convertMonth+0x198>
        case 4:
        	lcd_ShowStr(105, 130, "APR", YELLOW, BLACK, 24, 0);
 8001e64:	2300      	movs	r3, #0
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	2318      	movs	r3, #24
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e74:	4a3f      	ldr	r2, [pc, #252]	; (8001f74 <convertMonth+0x1ac>)
 8001e76:	2182      	movs	r1, #130	; 0x82
 8001e78:	2069      	movs	r0, #105	; 0x69
 8001e7a:	f7ff fab3 	bl	80013e4 <lcd_ShowStr>
            break;
 8001e7e:	e06f      	b.n	8001f60 <convertMonth+0x198>
        case 5:
        	lcd_ShowStr(105, 130, "MAY", YELLOW, BLACK, 24, 0);
 8001e80:	2300      	movs	r3, #0
 8001e82:	9302      	str	r3, [sp, #8]
 8001e84:	2318      	movs	r3, #24
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e90:	4a39      	ldr	r2, [pc, #228]	; (8001f78 <convertMonth+0x1b0>)
 8001e92:	2182      	movs	r1, #130	; 0x82
 8001e94:	2069      	movs	r0, #105	; 0x69
 8001e96:	f7ff faa5 	bl	80013e4 <lcd_ShowStr>
            break;
 8001e9a:	e061      	b.n	8001f60 <convertMonth+0x198>
        case 6:
        	lcd_ShowStr(105, 130, "JUN", YELLOW, BLACK, 24, 0);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9302      	str	r3, [sp, #8]
 8001ea0:	2318      	movs	r3, #24
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001eac:	4a33      	ldr	r2, [pc, #204]	; (8001f7c <convertMonth+0x1b4>)
 8001eae:	2182      	movs	r1, #130	; 0x82
 8001eb0:	2069      	movs	r0, #105	; 0x69
 8001eb2:	f7ff fa97 	bl	80013e4 <lcd_ShowStr>
            break;
 8001eb6:	e053      	b.n	8001f60 <convertMonth+0x198>
        case 7:
        	lcd_ShowStr(105, 130, "JUL", YELLOW, BLACK, 24, 0);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	2318      	movs	r3, #24
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ec8:	4a2d      	ldr	r2, [pc, #180]	; (8001f80 <convertMonth+0x1b8>)
 8001eca:	2182      	movs	r1, #130	; 0x82
 8001ecc:	2069      	movs	r0, #105	; 0x69
 8001ece:	f7ff fa89 	bl	80013e4 <lcd_ShowStr>
            break;
 8001ed2:	e045      	b.n	8001f60 <convertMonth+0x198>
        case 8:
        	lcd_ShowStr(105, 130, "AUG", YELLOW, BLACK, 24, 0);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9302      	str	r3, [sp, #8]
 8001ed8:	2318      	movs	r3, #24
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	2300      	movs	r3, #0
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ee4:	4a27      	ldr	r2, [pc, #156]	; (8001f84 <convertMonth+0x1bc>)
 8001ee6:	2182      	movs	r1, #130	; 0x82
 8001ee8:	2069      	movs	r0, #105	; 0x69
 8001eea:	f7ff fa7b 	bl	80013e4 <lcd_ShowStr>
            break;
 8001eee:	e037      	b.n	8001f60 <convertMonth+0x198>
        case 9:
        	lcd_ShowStr(105, 130, "SEP", YELLOW, BLACK, 24, 0);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	2318      	movs	r3, #24
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f00:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <convertMonth+0x1c0>)
 8001f02:	2182      	movs	r1, #130	; 0x82
 8001f04:	2069      	movs	r0, #105	; 0x69
 8001f06:	f7ff fa6d 	bl	80013e4 <lcd_ShowStr>
            break;
 8001f0a:	e029      	b.n	8001f60 <convertMonth+0x198>
        case 10:
        	lcd_ShowStr(105, 130, "OCT", YELLOW, BLACK, 24, 0);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	2318      	movs	r3, #24
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	2300      	movs	r3, #0
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f1c:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <convertMonth+0x1c4>)
 8001f1e:	2182      	movs	r1, #130	; 0x82
 8001f20:	2069      	movs	r0, #105	; 0x69
 8001f22:	f7ff fa5f 	bl	80013e4 <lcd_ShowStr>
            break;
 8001f26:	e01b      	b.n	8001f60 <convertMonth+0x198>
        case 11:
        	lcd_ShowStr(105, 130, "NOV", YELLOW, BLACK, 24, 0);
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	2318      	movs	r3, #24
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2300      	movs	r3, #0
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f38:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <convertMonth+0x1c8>)
 8001f3a:	2182      	movs	r1, #130	; 0x82
 8001f3c:	2069      	movs	r0, #105	; 0x69
 8001f3e:	f7ff fa51 	bl	80013e4 <lcd_ShowStr>
            break;
 8001f42:	e00d      	b.n	8001f60 <convertMonth+0x198>
        case 12:
        	lcd_ShowStr(105, 130, "DEC", YELLOW, BLACK, 24, 0);
 8001f44:	2300      	movs	r3, #0
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	2318      	movs	r3, #24
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f54:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <convertMonth+0x1cc>)
 8001f56:	2182      	movs	r1, #130	; 0x82
 8001f58:	2069      	movs	r0, #105	; 0x69
 8001f5a:	f7ff fa43 	bl	80013e4 <lcd_ShowStr>
            break;
 8001f5e:	bf00      	nop
    }
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	080083ac 	.word	0x080083ac
 8001f6c:	080083b0 	.word	0x080083b0
 8001f70:	080083b4 	.word	0x080083b4
 8001f74:	080083b8 	.word	0x080083b8
 8001f78:	080083bc 	.word	0x080083bc
 8001f7c:	080083c0 	.word	0x080083c0
 8001f80:	080083c4 	.word	0x080083c4
 8001f84:	080083c8 	.word	0x080083c8
 8001f88:	080083cc 	.word	0x080083cc
 8001f8c:	080083d0 	.word	0x080083d0
 8001f90:	080083d4 	.word	0x080083d4
 8001f94:	080083d8 	.word	0x080083d8

08001f98 <displayMonth>:
void displayMonth(int num, int isBlink) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af04      	add	r7, sp, #16
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d025      	beq.n	8001ff4 <displayMonth+0x5c>
	    timeBlink = (timeBlink + 1)%10;
 8001fa8:	4b16      	ldr	r3, [pc, #88]	; (8002004 <displayMonth+0x6c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	1c59      	adds	r1, r3, #1
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <displayMonth+0x70>)
 8001fb0:	fb83 2301 	smull	r2, r3, r3, r1
 8001fb4:	109a      	asrs	r2, r3, #2
 8001fb6:	17cb      	asrs	r3, r1, #31
 8001fb8:	1ad2      	subs	r2, r2, r3
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	1aca      	subs	r2, r1, r3
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <displayMonth+0x6c>)
 8001fc6:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <displayMonth+0x6c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	dc0d      	bgt.n	8001fec <displayMonth+0x54>
	    	lcd_ShowStr(105, 130, "   ", GREEN, BLACK, 24, 0);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9302      	str	r3, [sp, #8]
 8001fd4:	2318      	movs	r3, #24
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <displayMonth+0x74>)
 8001fe2:	2182      	movs	r1, #130	; 0x82
 8001fe4:	2069      	movs	r0, #105	; 0x69
 8001fe6:	f7ff f9fd 	bl	80013e4 <lcd_ShowStr>
	    }
	}
	else {
		convertMonth(num);
	}
}
 8001fea:	e006      	b.n	8001ffa <displayMonth+0x62>
	    	convertMonth(num);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff feeb 	bl	8001dc8 <convertMonth>
}
 8001ff2:	e002      	b.n	8001ffa <displayMonth+0x62>
		convertMonth(num);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff fee7 	bl	8001dc8 <convertMonth>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200000cc 	.word	0x200000cc
 8002008:	66666667 	.word	0x66666667
 800200c:	080083a8 	.word	0x080083a8

08002010 <displayYear>:

void displayYear(int num, int isBlink) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af04      	add	r7, sp, #16
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d05c      	beq.n	80020da <displayYear+0xca>
	    timeBlink = (timeBlink + 1)%10;
 8002020:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <displayYear+0x148>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	1c59      	adds	r1, r3, #1
 8002026:	4b4d      	ldr	r3, [pc, #308]	; (800215c <displayYear+0x14c>)
 8002028:	fb83 2301 	smull	r2, r3, r3, r1
 800202c:	109a      	asrs	r2, r3, #2
 800202e:	17cb      	asrs	r3, r1, #31
 8002030:	1ad2      	subs	r2, r2, r3
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	1aca      	subs	r2, r1, r3
 800203c:	4b46      	ldr	r3, [pc, #280]	; (8002158 <displayYear+0x148>)
 800203e:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8002040:	4b45      	ldr	r3, [pc, #276]	; (8002158 <displayYear+0x148>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b04      	cmp	r3, #4
 8002046:	dc0d      	bgt.n	8002064 <displayYear+0x54>
	    	lcd_ShowStr(150, 130, "    ", GREEN, BLACK, 24, 0);
 8002048:	2300      	movs	r3, #0
 800204a:	9302      	str	r3, [sp, #8]
 800204c:	2318      	movs	r3, #24
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	2300      	movs	r3, #0
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002058:	4a41      	ldr	r2, [pc, #260]	; (8002160 <displayYear+0x150>)
 800205a:	2182      	movs	r1, #130	; 0x82
 800205c:	2096      	movs	r0, #150	; 0x96
 800205e:	f7ff f9c1 	bl	80013e4 <lcd_ShowStr>
	else {
    	lcd_ShowIntNum(150, 130, 20, 2, YELLOW, BLACK, 24);
    	lcd_ShowIntNum(176, 130, num/10, 1, YELLOW, BLACK, 24);
    	lcd_ShowIntNum(189, 130, num%10, 1, YELLOW, BLACK, 24);
	}
}
 8002062:	e074      	b.n	800214e <displayYear+0x13e>
	    	lcd_ShowIntNum(150, 130, 20, 2, YELLOW, BLACK, 24);
 8002064:	2318      	movs	r3, #24
 8002066:	9302      	str	r3, [sp, #8]
 8002068:	2300      	movs	r3, #0
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2302      	movs	r3, #2
 8002074:	2214      	movs	r2, #20
 8002076:	2182      	movs	r1, #130	; 0x82
 8002078:	2096      	movs	r0, #150	; 0x96
 800207a:	f7fe ffb1 	bl	8000fe0 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(176, 130, num/10, 1, YELLOW, BLACK, 24);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a36      	ldr	r2, [pc, #216]	; (800215c <displayYear+0x14c>)
 8002082:	fb82 1203 	smull	r1, r2, r2, r3
 8002086:	1092      	asrs	r2, r2, #2
 8002088:	17db      	asrs	r3, r3, #31
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	b29a      	uxth	r2, r3
 800208e:	2318      	movs	r3, #24
 8002090:	9302      	str	r3, [sp, #8]
 8002092:	2300      	movs	r3, #0
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2301      	movs	r3, #1
 800209e:	2182      	movs	r1, #130	; 0x82
 80020a0:	20b0      	movs	r0, #176	; 0xb0
 80020a2:	f7fe ff9d 	bl	8000fe0 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(189, 130, num%10, 1, YELLOW, BLACK, 24);
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <displayYear+0x14c>)
 80020aa:	fb83 1302 	smull	r1, r3, r3, r2
 80020ae:	1099      	asrs	r1, r3, #2
 80020b0:	17d3      	asrs	r3, r2, #31
 80020b2:	1ac9      	subs	r1, r1, r3
 80020b4:	460b      	mov	r3, r1
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	1ad1      	subs	r1, r2, r3
 80020be:	b28a      	uxth	r2, r1
 80020c0:	2318      	movs	r3, #24
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	2300      	movs	r3, #0
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2301      	movs	r3, #1
 80020d0:	2182      	movs	r1, #130	; 0x82
 80020d2:	20bd      	movs	r0, #189	; 0xbd
 80020d4:	f7fe ff84 	bl	8000fe0 <lcd_ShowIntNum>
}
 80020d8:	e039      	b.n	800214e <displayYear+0x13e>
    	lcd_ShowIntNum(150, 130, 20, 2, YELLOW, BLACK, 24);
 80020da:	2318      	movs	r3, #24
 80020dc:	9302      	str	r3, [sp, #8]
 80020de:	2300      	movs	r3, #0
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2302      	movs	r3, #2
 80020ea:	2214      	movs	r2, #20
 80020ec:	2182      	movs	r1, #130	; 0x82
 80020ee:	2096      	movs	r0, #150	; 0x96
 80020f0:	f7fe ff76 	bl	8000fe0 <lcd_ShowIntNum>
    	lcd_ShowIntNum(176, 130, num/10, 1, YELLOW, BLACK, 24);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a19      	ldr	r2, [pc, #100]	; (800215c <displayYear+0x14c>)
 80020f8:	fb82 1203 	smull	r1, r2, r2, r3
 80020fc:	1092      	asrs	r2, r2, #2
 80020fe:	17db      	asrs	r3, r3, #31
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	b29a      	uxth	r2, r3
 8002104:	2318      	movs	r3, #24
 8002106:	9302      	str	r3, [sp, #8]
 8002108:	2300      	movs	r3, #0
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2301      	movs	r3, #1
 8002114:	2182      	movs	r1, #130	; 0x82
 8002116:	20b0      	movs	r0, #176	; 0xb0
 8002118:	f7fe ff62 	bl	8000fe0 <lcd_ShowIntNum>
    	lcd_ShowIntNum(189, 130, num%10, 1, YELLOW, BLACK, 24);
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <displayYear+0x14c>)
 8002120:	fb83 1302 	smull	r1, r3, r3, r2
 8002124:	1099      	asrs	r1, r3, #2
 8002126:	17d3      	asrs	r3, r2, #31
 8002128:	1ac9      	subs	r1, r1, r3
 800212a:	460b      	mov	r3, r1
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	1ad1      	subs	r1, r2, r3
 8002134:	b28a      	uxth	r2, r1
 8002136:	2318      	movs	r3, #24
 8002138:	9302      	str	r3, [sp, #8]
 800213a:	2300      	movs	r3, #0
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2301      	movs	r3, #1
 8002146:	2182      	movs	r1, #130	; 0x82
 8002148:	20bd      	movs	r0, #189	; 0xbd
 800214a:	f7fe ff49 	bl	8000fe0 <lcd_ShowIntNum>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200000cc 	.word	0x200000cc
 800215c:	66666667 	.word	0x66666667
 8002160:	080083dc 	.word	0x080083dc

08002164 <displayScreen>:

void displayScreen()
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af04      	add	r7, sp, #16
	if (status == NORMAL) {
 800216a:	4ba4      	ldr	r3, [pc, #656]	; (80023fc <displayScreen+0x298>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d12a      	bne.n	80021c8 <displayScreen+0x64>
		displayHour(ds3231_hours,0);
 8002172:	4ba3      	ldr	r3, [pc, #652]	; (8002400 <displayScreen+0x29c>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fb41 	bl	8001800 <displayHour>
		displayMin(ds3231_min,0);
 800217e:	4ba1      	ldr	r3, [pc, #644]	; (8002404 <displayScreen+0x2a0>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fbcb 	bl	8001920 <displayMin>
		displaySec(ds3231_sec,0);
 800218a:	4b9f      	ldr	r3, [pc, #636]	; (8002408 <displayScreen+0x2a4>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fc61 	bl	8001a58 <displaySec>
		displayDay(ds3231_day,0);
 8002196:	4b9d      	ldr	r3, [pc, #628]	; (800240c <displayScreen+0x2a8>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fd85 	bl	8001cac <displayDay>
		displayDate(ds3231_date,0);
 80021a2:	4b9b      	ldr	r3, [pc, #620]	; (8002410 <displayScreen+0x2ac>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fdbb 	bl	8001d24 <displayDate>
		displayMonth(ds3231_month,0);
 80021ae:	4b99      	ldr	r3, [pc, #612]	; (8002414 <displayScreen+0x2b0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff feef 	bl	8001f98 <displayMonth>
		displayYear(ds3231_year,0);
 80021ba:	4b97      	ldr	r3, [pc, #604]	; (8002418 <displayScreen+0x2b4>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff25 	bl	8002010 <displayYear>
 80021c6:	e167      	b.n	8002498 <displayScreen+0x334>
	}
	else {
		if (statusModifying == SET_HOUR) {
 80021c8:	4b94      	ldr	r3, [pc, #592]	; (800241c <displayScreen+0x2b8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d12a      	bne.n	8002226 <displayScreen+0xc2>
			displayHour(hourTemp,1);
 80021d0:	4b93      	ldr	r3, [pc, #588]	; (8002420 <displayScreen+0x2bc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fb12 	bl	8001800 <displayHour>
			displayMin(minTemp,0);
 80021dc:	4b91      	ldr	r3, [pc, #580]	; (8002424 <displayScreen+0x2c0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fb9c 	bl	8001920 <displayMin>
			displaySec(secTemp,0);
 80021e8:	4b8f      	ldr	r3, [pc, #572]	; (8002428 <displayScreen+0x2c4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fc32 	bl	8001a58 <displaySec>
			displayDay(dayTemp,0);
 80021f4:	4b8d      	ldr	r3, [pc, #564]	; (800242c <displayScreen+0x2c8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fd56 	bl	8001cac <displayDay>
			displayDate(dateTemp,0);
 8002200:	4b8b      	ldr	r3, [pc, #556]	; (8002430 <displayScreen+0x2cc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fd8c 	bl	8001d24 <displayDate>
			displayMonth(monthTemp,0);
 800220c:	4b89      	ldr	r3, [pc, #548]	; (8002434 <displayScreen+0x2d0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fec0 	bl	8001f98 <displayMonth>
			displayYear(yearTemp,0);
 8002218:	4b87      	ldr	r3, [pc, #540]	; (8002438 <displayScreen+0x2d4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fef6 	bl	8002010 <displayYear>
 8002224:	e138      	b.n	8002498 <displayScreen+0x334>
		}

		else if (statusModifying == SET_MIN) {
 8002226:	4b7d      	ldr	r3, [pc, #500]	; (800241c <displayScreen+0x2b8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d12a      	bne.n	8002284 <displayScreen+0x120>
			displayHour(hourTemp,0);
 800222e:	4b7c      	ldr	r3, [pc, #496]	; (8002420 <displayScreen+0x2bc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fae3 	bl	8001800 <displayHour>
			displayMin(minTemp,1);
 800223a:	4b7a      	ldr	r3, [pc, #488]	; (8002424 <displayScreen+0x2c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2101      	movs	r1, #1
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fb6d 	bl	8001920 <displayMin>
			displaySec(secTemp,0);
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <displayScreen+0x2c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fc03 	bl	8001a58 <displaySec>
			displayDay(dayTemp,0);
 8002252:	4b76      	ldr	r3, [pc, #472]	; (800242c <displayScreen+0x2c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fd27 	bl	8001cac <displayDay>
			displayDate(dateTemp,0);
 800225e:	4b74      	ldr	r3, [pc, #464]	; (8002430 <displayScreen+0x2cc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fd5d 	bl	8001d24 <displayDate>
			displayMonth(monthTemp,0);
 800226a:	4b72      	ldr	r3, [pc, #456]	; (8002434 <displayScreen+0x2d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fe91 	bl	8001f98 <displayMonth>
			displayYear(yearTemp,0);
 8002276:	4b70      	ldr	r3, [pc, #448]	; (8002438 <displayScreen+0x2d4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fec7 	bl	8002010 <displayYear>
 8002282:	e109      	b.n	8002498 <displayScreen+0x334>
		}

		else if (statusModifying == SET_SEC) {
 8002284:	4b65      	ldr	r3, [pc, #404]	; (800241c <displayScreen+0x2b8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b09      	cmp	r3, #9
 800228a:	d12a      	bne.n	80022e2 <displayScreen+0x17e>
			displayHour(hourTemp,0);
 800228c:	4b64      	ldr	r3, [pc, #400]	; (8002420 <displayScreen+0x2bc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fab4 	bl	8001800 <displayHour>
			displayMin(minTemp,0);
 8002298:	4b62      	ldr	r3, [pc, #392]	; (8002424 <displayScreen+0x2c0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fb3e 	bl	8001920 <displayMin>
			displaySec(secTemp,1);
 80022a4:	4b60      	ldr	r3, [pc, #384]	; (8002428 <displayScreen+0x2c4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fbd4 	bl	8001a58 <displaySec>
			displayDay(dayTemp,0);
 80022b0:	4b5e      	ldr	r3, [pc, #376]	; (800242c <displayScreen+0x2c8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fcf8 	bl	8001cac <displayDay>
			displayDate(dateTemp,0);
 80022bc:	4b5c      	ldr	r3, [pc, #368]	; (8002430 <displayScreen+0x2cc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fd2e 	bl	8001d24 <displayDate>
			displayMonth(monthTemp,0);
 80022c8:	4b5a      	ldr	r3, [pc, #360]	; (8002434 <displayScreen+0x2d0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fe62 	bl	8001f98 <displayMonth>
			displayYear(yearTemp,0);
 80022d4:	4b58      	ldr	r3, [pc, #352]	; (8002438 <displayScreen+0x2d4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fe98 	bl	8002010 <displayYear>
 80022e0:	e0da      	b.n	8002498 <displayScreen+0x334>
		}

		else if (statusModifying == SET_DAY) {
 80022e2:	4b4e      	ldr	r3, [pc, #312]	; (800241c <displayScreen+0x2b8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d12a      	bne.n	8002340 <displayScreen+0x1dc>
			displayHour(hourTemp,0);
 80022ea:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <displayScreen+0x2bc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fa85 	bl	8001800 <displayHour>
			displayMin(minTemp,0);
 80022f6:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <displayScreen+0x2c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fb0f 	bl	8001920 <displayMin>
			displaySec(secTemp,0);
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <displayScreen+0x2c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fba5 	bl	8001a58 <displaySec>
			displayDay(dayTemp,1);
 800230e:	4b47      	ldr	r3, [pc, #284]	; (800242c <displayScreen+0x2c8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2101      	movs	r1, #1
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fcc9 	bl	8001cac <displayDay>
			displayDate(dateTemp,0);
 800231a:	4b45      	ldr	r3, [pc, #276]	; (8002430 <displayScreen+0x2cc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fcff 	bl	8001d24 <displayDate>
			displayMonth(monthTemp,0);
 8002326:	4b43      	ldr	r3, [pc, #268]	; (8002434 <displayScreen+0x2d0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fe33 	bl	8001f98 <displayMonth>
			displayYear(yearTemp,0);
 8002332:	4b41      	ldr	r3, [pc, #260]	; (8002438 <displayScreen+0x2d4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fe69 	bl	8002010 <displayYear>
 800233e:	e0ab      	b.n	8002498 <displayScreen+0x334>
		}

		else if (statusModifying == SET_DATE) {
 8002340:	4b36      	ldr	r3, [pc, #216]	; (800241c <displayScreen+0x2b8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b04      	cmp	r3, #4
 8002346:	d12a      	bne.n	800239e <displayScreen+0x23a>
			displayHour(hourTemp,0);
 8002348:	4b35      	ldr	r3, [pc, #212]	; (8002420 <displayScreen+0x2bc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fa56 	bl	8001800 <displayHour>
			displayMin(minTemp,0);
 8002354:	4b33      	ldr	r3, [pc, #204]	; (8002424 <displayScreen+0x2c0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fae0 	bl	8001920 <displayMin>
			displaySec(secTemp,0);
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <displayScreen+0x2c4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fb76 	bl	8001a58 <displaySec>
			displayDay(dayTemp,0);
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <displayScreen+0x2c8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fc9a 	bl	8001cac <displayDay>
			displayDate(dateTemp,1);
 8002378:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <displayScreen+0x2cc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fcd0 	bl	8001d24 <displayDate>
			displayMonth(monthTemp,0);
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <displayScreen+0x2d0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe04 	bl	8001f98 <displayMonth>
			displayYear(yearTemp,0);
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <displayScreen+0x2d4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fe3a 	bl	8002010 <displayYear>
 800239c:	e07c      	b.n	8002498 <displayScreen+0x334>
		}

		else if (statusModifying == SET_MONTH) {
 800239e:	4b1f      	ldr	r3, [pc, #124]	; (800241c <displayScreen+0x2b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d14a      	bne.n	800243c <displayScreen+0x2d8>
			displayHour(hourTemp,0);
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <displayScreen+0x2bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fa27 	bl	8001800 <displayHour>
			displayMin(minTemp,0);
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <displayScreen+0x2c0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fab1 	bl	8001920 <displayMin>
			displaySec(secTemp,0);
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <displayScreen+0x2c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fb47 	bl	8001a58 <displaySec>
			displayDay(dayTemp,0);
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <displayScreen+0x2c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fc6b 	bl	8001cac <displayDay>
			displayDate(dateTemp,0);
 80023d6:	4b16      	ldr	r3, [pc, #88]	; (8002430 <displayScreen+0x2cc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fca1 	bl	8001d24 <displayDate>
			displayMonth(monthTemp,1);
 80023e2:	4b14      	ldr	r3, [pc, #80]	; (8002434 <displayScreen+0x2d0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2101      	movs	r1, #1
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fdd5 	bl	8001f98 <displayMonth>
			displayYear(yearTemp,0);
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <displayScreen+0x2d4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fe0b 	bl	8002010 <displayYear>
 80023fa:	e04d      	b.n	8002498 <displayScreen+0x334>
 80023fc:	200000bc 	.word	0x200000bc
 8002400:	2000010d 	.word	0x2000010d
 8002404:	2000010a 	.word	0x2000010a
 8002408:	20000108 	.word	0x20000108
 800240c:	2000010c 	.word	0x2000010c
 8002410:	2000010b 	.word	0x2000010b
 8002414:	2000010e 	.word	0x2000010e
 8002418:	20000109 	.word	0x20000109
 800241c:	20000008 	.word	0x20000008
 8002420:	2000000c 	.word	0x2000000c
 8002424:	20000010 	.word	0x20000010
 8002428:	200000c0 	.word	0x200000c0
 800242c:	20000014 	.word	0x20000014
 8002430:	20000018 	.word	0x20000018
 8002434:	2000001c 	.word	0x2000001c
 8002438:	20000020 	.word	0x20000020
		}

		else if (statusModifying == SET_YEAR) {
 800243c:	4b45      	ldr	r3, [pc, #276]	; (8002554 <displayScreen+0x3f0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b06      	cmp	r3, #6
 8002442:	d129      	bne.n	8002498 <displayScreen+0x334>
			displayHour(hourTemp,0);
 8002444:	4b44      	ldr	r3, [pc, #272]	; (8002558 <displayScreen+0x3f4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f9d8 	bl	8001800 <displayHour>
			displayMin(minTemp,0);
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <displayScreen+0x3f8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fa62 	bl	8001920 <displayMin>
			displaySec(secTemp,0);
 800245c:	4b40      	ldr	r3, [pc, #256]	; (8002560 <displayScreen+0x3fc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff faf8 	bl	8001a58 <displaySec>
			displayDay(dayTemp,0);
 8002468:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <displayScreen+0x400>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fc1c 	bl	8001cac <displayDay>
			displayDate(dateTemp,0);
 8002474:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <displayScreen+0x404>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fc52 	bl	8001d24 <displayDate>
			displayMonth(monthTemp,0);
 8002480:	4b3a      	ldr	r3, [pc, #232]	; (800256c <displayScreen+0x408>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fd86 	bl	8001f98 <displayMonth>
			displayYear(yearTemp,1);
 800248c:	4b38      	ldr	r3, [pc, #224]	; (8002570 <displayScreen+0x40c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fdbc 	bl	8002010 <displayYear>
		}
	}
	//displayState
	if (status == NORMAL) {
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <displayScreen+0x410>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10d      	bne.n	80024bc <displayScreen+0x358>
		lcd_ShowStr(20, 160, "1.NOR", YELLOW, BLACK, 24, 0);
 80024a0:	2300      	movs	r3, #0
 80024a2:	9302      	str	r3, [sp, #8]
 80024a4:	2318      	movs	r3, #24
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024b0:	4a31      	ldr	r2, [pc, #196]	; (8002578 <displayScreen+0x414>)
 80024b2:	21a0      	movs	r1, #160	; 0xa0
 80024b4:	2014      	movs	r0, #20
 80024b6:	f7fe ff95 	bl	80013e4 <lcd_ShowStr>
 80024ba:	e01e      	b.n	80024fa <displayScreen+0x396>
	}
	else if (status == MODIFY_TIME) {
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <displayScreen+0x410>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b07      	cmp	r3, #7
 80024c2:	d10d      	bne.n	80024e0 <displayScreen+0x37c>
		lcd_ShowStr(20, 160, "2.MOD", YELLOW, BLACK, 24, 0);
 80024c4:	2300      	movs	r3, #0
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	2318      	movs	r3, #24
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2300      	movs	r3, #0
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024d4:	4a29      	ldr	r2, [pc, #164]	; (800257c <displayScreen+0x418>)
 80024d6:	21a0      	movs	r1, #160	; 0xa0
 80024d8:	2014      	movs	r0, #20
 80024da:	f7fe ff83 	bl	80013e4 <lcd_ShowStr>
 80024de:	e00c      	b.n	80024fa <displayScreen+0x396>
	}
	else {
		lcd_ShowStr(20, 160, "3.ALR", YELLOW, BLACK, 24, 0);
 80024e0:	2300      	movs	r3, #0
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	2318      	movs	r3, #24
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024f0:	4a23      	ldr	r2, [pc, #140]	; (8002580 <displayScreen+0x41c>)
 80024f2:	21a0      	movs	r1, #160	; 0xa0
 80024f4:	2014      	movs	r0, #20
 80024f6:	f7fe ff75 	bl	80013e4 <lcd_ShowStr>
	}

	if (ds3231_hours == hourAlarm && ds3231_min == minAlarm) {
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <displayScreen+0x420>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <displayScreen+0x424>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d114      	bne.n	8002532 <displayScreen+0x3ce>
 8002508:	4b20      	ldr	r3, [pc, #128]	; (800258c <displayScreen+0x428>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <displayScreen+0x42c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d10d      	bne.n	8002532 <displayScreen+0x3ce>
		lcd_ShowStr(20, 190, "Wake up honey", RED, BLACK, 24, 0);
 8002516:	2300      	movs	r3, #0
 8002518:	9302      	str	r3, [sp, #8]
 800251a:	2318      	movs	r3, #24
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	2300      	movs	r3, #0
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002526:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <displayScreen+0x430>)
 8002528:	21be      	movs	r1, #190	; 0xbe
 800252a:	2014      	movs	r0, #20
 800252c:	f7fe ff5a 	bl	80013e4 <lcd_ShowStr>
 8002530:	e00c      	b.n	800254c <displayScreen+0x3e8>
	}
	else{
		lcd_ShowStr(20, 190, "              ", BLACK, BLACK, 24, 0);
 8002532:	2300      	movs	r3, #0
 8002534:	9302      	str	r3, [sp, #8]
 8002536:	2318      	movs	r3, #24
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	2300      	movs	r3, #0
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2300      	movs	r3, #0
 8002540:	4a15      	ldr	r2, [pc, #84]	; (8002598 <displayScreen+0x434>)
 8002542:	21be      	movs	r1, #190	; 0xbe
 8002544:	2014      	movs	r0, #20
 8002546:	f7fe ff4d 	bl	80013e4 <lcd_ShowStr>
	}

}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000008 	.word	0x20000008
 8002558:	2000000c 	.word	0x2000000c
 800255c:	20000010 	.word	0x20000010
 8002560:	200000c0 	.word	0x200000c0
 8002564:	20000014 	.word	0x20000014
 8002568:	20000018 	.word	0x20000018
 800256c:	2000001c 	.word	0x2000001c
 8002570:	20000020 	.word	0x20000020
 8002574:	200000bc 	.word	0x200000bc
 8002578:	080083e4 	.word	0x080083e4
 800257c:	080083ec 	.word	0x080083ec
 8002580:	080083f4 	.word	0x080083f4
 8002584:	2000010d 	.word	0x2000010d
 8002588:	200000c4 	.word	0x200000c4
 800258c:	2000010a 	.word	0x2000010a
 8002590:	200000c8 	.word	0x200000c8
 8002594:	080083fc 	.word	0x080083fc
 8002598:	0800840c 	.word	0x0800840c

0800259c <modifyTimeFsm>:

void modifyTimeFsm() {
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af04      	add	r7, sp, #16
	switch(statusModifying){
 80025a2:	4b92      	ldr	r3, [pc, #584]	; (80027ec <modifyTimeFsm+0x250>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	f200 8107 	bhi.w	80027bc <modifyTimeFsm+0x220>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <modifyTimeFsm+0x18>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	080025d9 	.word	0x080025d9
 80025b8:	0800261f 	.word	0x0800261f
 80025bc:	080026ab 	.word	0x080026ab
 80025c0:	080026f1 	.word	0x080026f1
 80025c4:	08002735 	.word	0x08002735
 80025c8:	08002779 	.word	0x08002779
 80025cc:	080027bd 	.word	0x080027bd
 80025d0:	080027bd 	.word	0x080027bd
 80025d4:	08002665 	.word	0x08002665
		case SET_HOUR:
			lcd_ShowStr(20, 50, "Updating hour:", RED, BLACK, 24, 0);
 80025d8:	2300      	movs	r3, #0
 80025da:	9302      	str	r3, [sp, #8]
 80025dc:	2318      	movs	r3, #24
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	2300      	movs	r3, #0
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025e8:	4a81      	ldr	r2, [pc, #516]	; (80027f0 <modifyTimeFsm+0x254>)
 80025ea:	2132      	movs	r1, #50	; 0x32
 80025ec:	2014      	movs	r0, #20
 80025ee:	f7fe fef9 	bl	80013e4 <lcd_ShowStr>
			setHour();
 80025f2:	f000 f9d1 	bl	8002998 <setHour>
			if(IsButtonSave()) {
 80025f6:	f000 f9bf 	bl	8002978 <IsButtonSave>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80e4 	beq.w	80027ca <modifyTimeFsm+0x22e>
				ds3231_Write(ADDRESS_HOUR, hourTemp);
 8002602:	4b7c      	ldr	r3, [pc, #496]	; (80027f4 <modifyTimeFsm+0x258>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	4619      	mov	r1, r3
 800260a:	2002      	movs	r0, #2
 800260c:	f7fe f868 	bl	80006e0 <ds3231_Write>
				statusModifying = SET_MIN;
 8002610:	4b76      	ldr	r3, [pc, #472]	; (80027ec <modifyTimeFsm+0x250>)
 8002612:	2202      	movs	r2, #2
 8002614:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe fba4 	bl	8000d64 <lcd_Clear>
			}
			break;
 800261c:	e0d5      	b.n	80027ca <modifyTimeFsm+0x22e>

		case SET_MIN:
			lcd_ShowStr(20, 50, "Updating minute:", RED, BLACK, 24, 0);
 800261e:	2300      	movs	r3, #0
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	2318      	movs	r3, #24
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	2300      	movs	r3, #0
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800262e:	4a72      	ldr	r2, [pc, #456]	; (80027f8 <modifyTimeFsm+0x25c>)
 8002630:	2132      	movs	r1, #50	; 0x32
 8002632:	2014      	movs	r0, #20
 8002634:	f7fe fed6 	bl	80013e4 <lcd_ShowStr>
			setMin();
 8002638:	f000 f9c6 	bl	80029c8 <setMin>
			if(IsButtonSave()) {
 800263c:	f000 f99c 	bl	8002978 <IsButtonSave>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80c3 	beq.w	80027ce <modifyTimeFsm+0x232>
				ds3231_Write(ADDRESS_MIN, minTemp);
 8002648:	4b6c      	ldr	r3, [pc, #432]	; (80027fc <modifyTimeFsm+0x260>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4619      	mov	r1, r3
 8002650:	2001      	movs	r0, #1
 8002652:	f7fe f845 	bl	80006e0 <ds3231_Write>
				statusModifying = SET_SEC;
 8002656:	4b65      	ldr	r3, [pc, #404]	; (80027ec <modifyTimeFsm+0x250>)
 8002658:	2209      	movs	r2, #9
 800265a:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe fb81 	bl	8000d64 <lcd_Clear>
			}
			break;
 8002662:	e0b4      	b.n	80027ce <modifyTimeFsm+0x232>

		case SET_SEC:
			lcd_ShowStr(20, 50, "Updating sec:", RED, BLACK, 24, 0);
 8002664:	2300      	movs	r3, #0
 8002666:	9302      	str	r3, [sp, #8]
 8002668:	2318      	movs	r3, #24
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	2300      	movs	r3, #0
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002674:	4a62      	ldr	r2, [pc, #392]	; (8002800 <modifyTimeFsm+0x264>)
 8002676:	2132      	movs	r1, #50	; 0x32
 8002678:	2014      	movs	r0, #20
 800267a:	f7fe feb3 	bl	80013e4 <lcd_ShowStr>
			setSec();
 800267e:	f000 f9bb 	bl	80029f8 <setSec>
			if(IsButtonSave()) {
 8002682:	f000 f979 	bl	8002978 <IsButtonSave>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a2 	beq.w	80027d2 <modifyTimeFsm+0x236>
				ds3231_Write(ADDRESS_SEC, secTemp);
 800268e:	4b5d      	ldr	r3, [pc, #372]	; (8002804 <modifyTimeFsm+0x268>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4619      	mov	r1, r3
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe f822 	bl	80006e0 <ds3231_Write>
				statusModifying = SET_DAY;
 800269c:	4b53      	ldr	r3, [pc, #332]	; (80027ec <modifyTimeFsm+0x250>)
 800269e:	2203      	movs	r2, #3
 80026a0:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7fe fb5e 	bl	8000d64 <lcd_Clear>
			}
			break;
 80026a8:	e093      	b.n	80027d2 <modifyTimeFsm+0x236>

		case SET_DAY:
			lcd_ShowStr(20, 50, "Updating day:", RED, BLACK, 24, 0);
 80026aa:	2300      	movs	r3, #0
 80026ac:	9302      	str	r3, [sp, #8]
 80026ae:	2318      	movs	r3, #24
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026ba:	4a53      	ldr	r2, [pc, #332]	; (8002808 <modifyTimeFsm+0x26c>)
 80026bc:	2132      	movs	r1, #50	; 0x32
 80026be:	2014      	movs	r0, #20
 80026c0:	f7fe fe90 	bl	80013e4 <lcd_ShowStr>
			setDay();
 80026c4:	f000 f9b0 	bl	8002a28 <setDay>
			if(IsButtonSave()) {
 80026c8:	f000 f956 	bl	8002978 <IsButtonSave>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8081 	beq.w	80027d6 <modifyTimeFsm+0x23a>
				ds3231_Write(ADDRESS_DAY, dayTemp);
 80026d4:	4b4d      	ldr	r3, [pc, #308]	; (800280c <modifyTimeFsm+0x270>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4619      	mov	r1, r3
 80026dc:	2003      	movs	r0, #3
 80026de:	f7fd ffff 	bl	80006e0 <ds3231_Write>
				statusModifying = SET_DATE;
 80026e2:	4b42      	ldr	r3, [pc, #264]	; (80027ec <modifyTimeFsm+0x250>)
 80026e4:	2204      	movs	r2, #4
 80026e6:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe fb3b 	bl	8000d64 <lcd_Clear>
			}
			break;
 80026ee:	e072      	b.n	80027d6 <modifyTimeFsm+0x23a>

		case SET_DATE:
			lcd_ShowStr(20, 50, "Updating date:", RED, BLACK, 24, 0);
 80026f0:	2300      	movs	r3, #0
 80026f2:	9302      	str	r3, [sp, #8]
 80026f4:	2318      	movs	r3, #24
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	2300      	movs	r3, #0
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002700:	4a43      	ldr	r2, [pc, #268]	; (8002810 <modifyTimeFsm+0x274>)
 8002702:	2132      	movs	r1, #50	; 0x32
 8002704:	2014      	movs	r0, #20
 8002706:	f7fe fe6d 	bl	80013e4 <lcd_ShowStr>
			setDate();
 800270a:	f000 f9a5 	bl	8002a58 <setDate>
			if(IsButtonSave()) {
 800270e:	f000 f933 	bl	8002978 <IsButtonSave>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d060      	beq.n	80027da <modifyTimeFsm+0x23e>
				ds3231_Write(ADDRESS_DATE, dateTemp);
 8002718:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <modifyTimeFsm+0x278>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	4619      	mov	r1, r3
 8002720:	2004      	movs	r0, #4
 8002722:	f7fd ffdd 	bl	80006e0 <ds3231_Write>
				statusModifying = SET_MONTH;
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <modifyTimeFsm+0x250>)
 8002728:	2205      	movs	r2, #5
 800272a:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe fb19 	bl	8000d64 <lcd_Clear>
			}
			break;
 8002732:	e052      	b.n	80027da <modifyTimeFsm+0x23e>

		case SET_MONTH:
			lcd_ShowStr(20, 50, "Updating month:", RED, BLACK, 24, 0);
 8002734:	2300      	movs	r3, #0
 8002736:	9302      	str	r3, [sp, #8]
 8002738:	2318      	movs	r3, #24
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	2300      	movs	r3, #0
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002744:	4a34      	ldr	r2, [pc, #208]	; (8002818 <modifyTimeFsm+0x27c>)
 8002746:	2132      	movs	r1, #50	; 0x32
 8002748:	2014      	movs	r0, #20
 800274a:	f7fe fe4b 	bl	80013e4 <lcd_ShowStr>
			setMonth();
 800274e:	f000 f99b 	bl	8002a88 <setMonth>
			if(IsButtonSave()) {
 8002752:	f000 f911 	bl	8002978 <IsButtonSave>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d040      	beq.n	80027de <modifyTimeFsm+0x242>
				ds3231_Write(ADDRESS_MONTH, monthTemp);
 800275c:	4b2f      	ldr	r3, [pc, #188]	; (800281c <modifyTimeFsm+0x280>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	4619      	mov	r1, r3
 8002764:	2005      	movs	r0, #5
 8002766:	f7fd ffbb 	bl	80006e0 <ds3231_Write>
				statusModifying = SET_YEAR;
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <modifyTimeFsm+0x250>)
 800276c:	2206      	movs	r2, #6
 800276e:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 8002770:	2000      	movs	r0, #0
 8002772:	f7fe faf7 	bl	8000d64 <lcd_Clear>
			}
			break;
 8002776:	e032      	b.n	80027de <modifyTimeFsm+0x242>

		case SET_YEAR:
			lcd_ShowStr(20, 50, "Updating year:", RED, BLACK, 24, 0);
 8002778:	2300      	movs	r3, #0
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	2318      	movs	r3, #24
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	2300      	movs	r3, #0
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002788:	4a25      	ldr	r2, [pc, #148]	; (8002820 <modifyTimeFsm+0x284>)
 800278a:	2132      	movs	r1, #50	; 0x32
 800278c:	2014      	movs	r0, #20
 800278e:	f7fe fe29 	bl	80013e4 <lcd_ShowStr>
			setYear();
 8002792:	f000 f991 	bl	8002ab8 <setYear>
			if(IsButtonSave()) {
 8002796:	f000 f8ef 	bl	8002978 <IsButtonSave>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <modifyTimeFsm+0x246>
				ds3231_Write(ADDRESS_YEAR, yearTemp);
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <modifyTimeFsm+0x288>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4619      	mov	r1, r3
 80027a8:	2006      	movs	r0, #6
 80027aa:	f7fd ff99 	bl	80006e0 <ds3231_Write>
				statusModifying = SET_HOUR;
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <modifyTimeFsm+0x250>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe fad5 	bl	8000d64 <lcd_Clear>
			}
			break;
 80027ba:	e012      	b.n	80027e2 <modifyTimeFsm+0x246>


		default:
			statusModifying = SET_HOUR;
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <modifyTimeFsm+0x250>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7fe face 	bl	8000d64 <lcd_Clear>
			break;
 80027c8:	e00c      	b.n	80027e4 <modifyTimeFsm+0x248>
			break;
 80027ca:	bf00      	nop
 80027cc:	e00a      	b.n	80027e4 <modifyTimeFsm+0x248>
			break;
 80027ce:	bf00      	nop
 80027d0:	e008      	b.n	80027e4 <modifyTimeFsm+0x248>
			break;
 80027d2:	bf00      	nop
 80027d4:	e006      	b.n	80027e4 <modifyTimeFsm+0x248>
			break;
 80027d6:	bf00      	nop
 80027d8:	e004      	b.n	80027e4 <modifyTimeFsm+0x248>
			break;
 80027da:	bf00      	nop
 80027dc:	e002      	b.n	80027e4 <modifyTimeFsm+0x248>
			break;
 80027de:	bf00      	nop
 80027e0:	e000      	b.n	80027e4 <modifyTimeFsm+0x248>
			break;
 80027e2:	bf00      	nop
	}
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000008 	.word	0x20000008
 80027f0:	0800841c 	.word	0x0800841c
 80027f4:	2000000c 	.word	0x2000000c
 80027f8:	0800842c 	.word	0x0800842c
 80027fc:	20000010 	.word	0x20000010
 8002800:	08008440 	.word	0x08008440
 8002804:	200000c0 	.word	0x200000c0
 8002808:	08008450 	.word	0x08008450
 800280c:	20000014 	.word	0x20000014
 8002810:	08008460 	.word	0x08008460
 8002814:	20000018 	.word	0x20000018
 8002818:	08008470 	.word	0x08008470
 800281c:	2000001c 	.word	0x2000001c
 8002820:	08008480 	.word	0x08008480
 8002824:	20000020 	.word	0x20000020

08002828 <modifyAlarmFsm>:

void modifyAlarmFsm(){
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	switch(statusModifying) {
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <modifyAlarmFsm+0x60>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d002      	beq.n	800283a <modifyAlarmFsm+0x12>
 8002834:	2b02      	cmp	r3, #2
 8002836:	d00f      	beq.n	8002858 <modifyAlarmFsm+0x30>
 8002838:	e01d      	b.n	8002876 <modifyAlarmFsm+0x4e>
		case SET_HOUR:
			setHour();
 800283a:	f000 f8ad 	bl	8002998 <setHour>
			if(IsButtonSave()) {
 800283e:	f000 f89b 	bl	8002978 <IsButtonSave>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01a      	beq.n	800287e <modifyAlarmFsm+0x56>
				hourAlarm = hourTemp;
 8002848:	4b10      	ldr	r3, [pc, #64]	; (800288c <modifyAlarmFsm+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a10      	ldr	r2, [pc, #64]	; (8002890 <modifyAlarmFsm+0x68>)
 800284e:	6013      	str	r3, [r2, #0]
				statusModifying = SET_MIN;
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <modifyAlarmFsm+0x60>)
 8002852:	2202      	movs	r2, #2
 8002854:	601a      	str	r2, [r3, #0]
			}
			break;
 8002856:	e012      	b.n	800287e <modifyAlarmFsm+0x56>

		case SET_MIN:
			setMin();
 8002858:	f000 f8b6 	bl	80029c8 <setMin>
			if(IsButtonSave()) {
 800285c:	f000 f88c 	bl	8002978 <IsButtonSave>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <modifyAlarmFsm+0x5a>
				minAlarm = minTemp;
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <modifyAlarmFsm+0x6c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <modifyAlarmFsm+0x70>)
 800286c:	6013      	str	r3, [r2, #0]
				statusModifying = SET_HOUR;
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <modifyAlarmFsm+0x60>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]
			}
			break;
 8002874:	e005      	b.n	8002882 <modifyAlarmFsm+0x5a>

		default:
			statusModifying = SET_HOUR;
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <modifyAlarmFsm+0x60>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
			break;
 800287c:	e002      	b.n	8002884 <modifyAlarmFsm+0x5c>
			break;
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <modifyAlarmFsm+0x5c>
			break;
 8002882:	bf00      	nop
	}
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000008 	.word	0x20000008
 800288c:	2000000c 	.word	0x2000000c
 8002890:	200000c4 	.word	0x200000c4
 8002894:	20000010 	.word	0x20000010
 8002898:	200000c8 	.word	0x200000c8

0800289c <fsm>:

void fsm()
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
    switch(status)
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <fsm+0x7c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d020      	beq.n	80028ea <fsm+0x4e>
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	dc29      	bgt.n	8002900 <fsm+0x64>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <fsm+0x1a>
 80028b0:	2b07      	cmp	r3, #7
 80028b2:	d00c      	beq.n	80028ce <fsm+0x32>
 80028b4:	e024      	b.n	8002900 <fsm+0x64>
    {
        case NORMAL:
            if(IsButtonMode()) {
 80028b6:	f000 f833 	bl	8002920 <IsButtonMode>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d023      	beq.n	8002908 <fsm+0x6c>
                status = MODIFY_TIME;
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <fsm+0x7c>)
 80028c2:	2207      	movs	r2, #7
 80028c4:	601a      	str	r2, [r3, #0]
            	statusModifying = SET_HOUR;
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <fsm+0x80>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
            }
            break;
 80028cc:	e01c      	b.n	8002908 <fsm+0x6c>
        case MODIFY_TIME:
            modifyTimeFsm();
 80028ce:	f7ff fe65 	bl	800259c <modifyTimeFsm>
            if(IsButtonMode()) {
 80028d2:	f000 f825 	bl	8002920 <IsButtonMode>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d017      	beq.n	800290c <fsm+0x70>
                status = MODIFY_ALARM;
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <fsm+0x7c>)
 80028de:	2208      	movs	r2, #8
 80028e0:	601a      	str	r2, [r3, #0]
                statusModifying = SET_HOUR;
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <fsm+0x80>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
            }
            break;
 80028e8:	e010      	b.n	800290c <fsm+0x70>
        case MODIFY_ALARM:
            modifyAlarmFsm();
 80028ea:	f7ff ff9d 	bl	8002828 <modifyAlarmFsm>
            if(IsButtonMode())
 80028ee:	f000 f817 	bl	8002920 <IsButtonMode>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00b      	beq.n	8002910 <fsm+0x74>
                status = NORMAL;
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <fsm+0x7c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
            break;
 80028fe:	e007      	b.n	8002910 <fsm+0x74>
        default:
            status = NORMAL;
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <fsm+0x7c>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
            break;
 8002906:	e004      	b.n	8002912 <fsm+0x76>
            break;
 8002908:	bf00      	nop
 800290a:	e002      	b.n	8002912 <fsm+0x76>
            break;
 800290c:	bf00      	nop
 800290e:	e000      	b.n	8002912 <fsm+0x76>
            break;
 8002910:	bf00      	nop
    }
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200000bc 	.word	0x200000bc
 800291c:	20000008 	.word	0x20000008

08002920 <IsButtonMode>:
//button change mode
unsigned char IsButtonMode()
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
    if (button_count[0] == 1)
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <IsButtonMode+0x1c>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <IsButtonMode+0x10>
        return 1;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <IsButtonMode+0x12>
    else
        return 0;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	200000e8 	.word	0x200000e8

08002940 <IsButtonUp>:

//increase parameter
unsigned char IsButtonUp()
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
	if ((button_count[3] == 1) || (button_count[3] >= 40 && button_count[3] % 4 == 0))
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <IsButtonUp+0x34>)
 8002946:	88db      	ldrh	r3, [r3, #6]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d00a      	beq.n	8002962 <IsButtonUp+0x22>
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <IsButtonUp+0x34>)
 800294e:	88db      	ldrh	r3, [r3, #6]
 8002950:	2b27      	cmp	r3, #39	; 0x27
 8002952:	d908      	bls.n	8002966 <IsButtonUp+0x26>
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <IsButtonUp+0x34>)
 8002956:	88db      	ldrh	r3, [r3, #6]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <IsButtonUp+0x26>
        return 1;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <IsButtonUp+0x28>
    else
        return 0;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	200000e8 	.word	0x200000e8

08002978 <IsButtonSave>:

//save parameter
unsigned char IsButtonSave()
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
    if (button_count[12] == 1)
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <IsButtonSave+0x1c>)
 800297e:	8b1b      	ldrh	r3, [r3, #24]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <IsButtonSave+0x10>
        return 1;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <IsButtonSave+0x12>
    else
        return 0;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	200000e8 	.word	0x200000e8

08002998 <setHour>:

void setHour()
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
    if(IsButtonUp())
 800299c:	f7ff ffd0 	bl	8002940 <IsButtonUp>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <setHour+0x26>
    {
        hourTemp++;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <setHour+0x2c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <setHour+0x2c>)
 80029ae:	6013      	str	r3, [r2, #0]
        if(hourTemp > 23)
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <setHour+0x2c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b17      	cmp	r3, #23
 80029b6:	dd02      	ble.n	80029be <setHour+0x26>
            hourTemp = 0;
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <setHour+0x2c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
    }
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000000c 	.word	0x2000000c

080029c8 <setMin>:

void setMin()
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
    if(IsButtonUp())
 80029cc:	f7ff ffb8 	bl	8002940 <IsButtonUp>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <setMin+0x26>
    {
        minTemp++;
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <setMin+0x2c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <setMin+0x2c>)
 80029de:	6013      	str	r3, [r2, #0]
        if(minTemp > 59)
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <setMin+0x2c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b3b      	cmp	r3, #59	; 0x3b
 80029e6:	dd02      	ble.n	80029ee <setMin+0x26>
            minTemp = 0;
 80029e8:	4b02      	ldr	r3, [pc, #8]	; (80029f4 <setMin+0x2c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    }
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000010 	.word	0x20000010

080029f8 <setSec>:

void setSec()
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 80029fc:	f7ff ffa0 	bl	8002940 <IsButtonUp>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <setSec+0x26>
    {
        secTemp++;
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <setSec+0x2c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <setSec+0x2c>)
 8002a0e:	6013      	str	r3, [r2, #0]
        if(secTemp > 59)
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <setSec+0x2c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b3b      	cmp	r3, #59	; 0x3b
 8002a16:	dd02      	ble.n	8002a1e <setSec+0x26>
            secTemp = 0;
 8002a18:	4b02      	ldr	r3, [pc, #8]	; (8002a24 <setSec+0x2c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
    }
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200000c0 	.word	0x200000c0

08002a28 <setDay>:

void setDay()
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 8002a2c:	f7ff ff88 	bl	8002940 <IsButtonUp>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <setDay+0x26>
    {
        dayTemp++;
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <setDay+0x2c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <setDay+0x2c>)
 8002a3e:	6013      	str	r3, [r2, #0]
        if(dayTemp > 7)
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <setDay+0x2c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b07      	cmp	r3, #7
 8002a46:	dd02      	ble.n	8002a4e <setDay+0x26>
            dayTemp = 1;
 8002a48:	4b02      	ldr	r3, [pc, #8]	; (8002a54 <setDay+0x2c>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    }
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000014 	.word	0x20000014

08002a58 <setDate>:

void setDate()
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 8002a5c:	f7ff ff70 	bl	8002940 <IsButtonUp>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <setDate+0x26>
    {
        dateTemp++;
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <setDate+0x2c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <setDate+0x2c>)
 8002a6e:	6013      	str	r3, [r2, #0]
        if(dateTemp > 31)
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <setDate+0x2c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b1f      	cmp	r3, #31
 8002a76:	dd02      	ble.n	8002a7e <setDate+0x26>
            dateTemp = 1;
 8002a78:	4b02      	ldr	r3, [pc, #8]	; (8002a84 <setDate+0x2c>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
    }
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000018 	.word	0x20000018

08002a88 <setMonth>:

void setMonth()
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 8002a8c:	f7ff ff58 	bl	8002940 <IsButtonUp>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <setMonth+0x26>
    {
        monthTemp++;
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <setMonth+0x2c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <setMonth+0x2c>)
 8002a9e:	6013      	str	r3, [r2, #0]
        if(monthTemp > 12)
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <setMonth+0x2c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	dd02      	ble.n	8002aae <setMonth+0x26>
            monthTemp = 1;
 8002aa8:	4b02      	ldr	r3, [pc, #8]	; (8002ab4 <setMonth+0x2c>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
    }
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000001c 	.word	0x2000001c

08002ab8 <setYear>:

void setYear()
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 8002abc:	f7ff ff40 	bl	8002940 <IsButtonUp>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <setYear+0x26>
    {
        yearTemp++;
 8002ac6:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <setYear+0x2c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	4a05      	ldr	r2, [pc, #20]	; (8002ae4 <setYear+0x2c>)
 8002ace:	6013      	str	r3, [r2, #0]
        if(yearTemp > 99)
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <setYear+0x2c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b63      	cmp	r3, #99	; 0x63
 8002ad6:	dd02      	ble.n	8002ade <setYear+0x26>
            yearTemp = 0;
 8002ad8:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <setYear+0x2c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
    }
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000020 	.word	0x20000020

08002ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aec:	b672      	cpsid	i
}
 8002aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002af0:	e7fe      	b.n	8002af0 <Error_Handler+0x8>
	...

08002af4 <timer_init>:

uint16_t timer2_flag = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <timer_init+0x10>)
 8002afa:	f003 fb0b 	bl	8006114 <HAL_TIM_Base_Start_IT>
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200002b4 	.word	0x200002b4

08002b08 <setTimer2>:

void setTimer2(uint16_t duration){
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002b12:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <setTimer2+0x2c>)
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <setTimer2+0x2c>)
 8002b1a:	881a      	ldrh	r2, [r3, #0]
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <setTimer2+0x30>)
 8002b1e:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <setTimer2+0x34>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	801a      	strh	r2, [r3, #0]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	200000d4 	.word	0x200000d4
 8002b38:	200000d2 	.word	0x200000d2
 8002b3c:	200000d0 	.word	0x200000d0

08002b40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b50:	d116      	bne.n	8002b80 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d010      	beq.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b64:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b76:	881a      	ldrh	r2, [r3, #0]
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b7a:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002b7c:	f7fe fc96 	bl	80014ac <led7_Scan>
	}
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200000d2 	.word	0x200000d2
 8002b8c:	200000d0 	.word	0x200000d0
 8002b90:	200000d4 	.word	0x200000d4

08002b94 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b98:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002b9a:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <MX_SPI1_Init+0x68>)
 8002b9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b9e:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002ba0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ba4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ba6:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002be0:	220a      	movs	r2, #10
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002be4:	4804      	ldr	r0, [pc, #16]	; (8002bf8 <MX_SPI1_Init+0x64>)
 8002be6:	f002 fc59 	bl	800549c <HAL_SPI_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002bf0:	f7ff ff7a 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	2000025c 	.word	0x2000025c
 8002bfc:	40013000 	.word	0x40013000

08002c00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <HAL_SPI_MspInit+0x84>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d12b      	bne.n	8002c7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <HAL_SPI_MspInit+0x88>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <HAL_SPI_MspInit+0x88>)
 8002c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_SPI_MspInit+0x88>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_SPI_MspInit+0x88>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <HAL_SPI_MspInit+0x88>)
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <HAL_SPI_MspInit+0x88>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c5a:	2338      	movs	r3, #56	; 0x38
 8002c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c66:	2303      	movs	r3, #3
 8002c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c6a:	2305      	movs	r3, #5
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4619      	mov	r1, r3
 8002c74:	4805      	ldr	r0, [pc, #20]	; (8002c8c <HAL_SPI_MspInit+0x8c>)
 8002c76:	f000 fcf9 	bl	800366c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	3728      	adds	r7, #40	; 0x28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40013000 	.word	0x40013000
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020400 	.word	0x40020400

08002c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_MspInit+0x4c>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	4a0f      	ldr	r2, [pc, #60]	; (8002cdc <HAL_MspInit+0x4c>)
 8002ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_MspInit+0x4c>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <HAL_MspInit+0x4c>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	4a08      	ldr	r2, [pc, #32]	; (8002cdc <HAL_MspInit+0x4c>)
 8002cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_MspInit+0x4c>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <NMI_Handler+0x4>

08002ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cea:	e7fe      	b.n	8002cea <HardFault_Handler+0x4>

08002cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <MemManage_Handler+0x4>

08002cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf6:	e7fe      	b.n	8002cf6 <BusFault_Handler+0x4>

08002cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <UsageFault_Handler+0x4>

08002cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d2c:	f000 fab6 	bl	800329c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <TIM2_IRQHandler+0x10>)
 8002d3a:	f003 fa5b 	bl	80061f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200002b4 	.word	0x200002b4

08002d48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <USART1_IRQHandler+0x10>)
 8002d4e:	f003 ff23 	bl	8006b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000360 	.word	0x20000360

08002d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d64:	4a14      	ldr	r2, [pc, #80]	; (8002db8 <_sbrk+0x5c>)
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <_sbrk+0x60>)
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <_sbrk+0x64>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <_sbrk+0x64>)
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <_sbrk+0x68>)
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <_sbrk+0x64>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d207      	bcs.n	8002d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d8c:	f004 fe8c 	bl	8007aa8 <__errno>
 8002d90:	4603      	mov	r3, r0
 8002d92:	220c      	movs	r2, #12
 8002d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	e009      	b.n	8002db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <_sbrk+0x64>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <_sbrk+0x64>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <_sbrk+0x64>)
 8002dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dae:	68fb      	ldr	r3, [r7, #12]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20020000 	.word	0x20020000
 8002dbc:	00000400 	.word	0x00000400
 8002dc0:	200000d8 	.word	0x200000d8
 8002dc4:	200003b8 	.word	0x200003b8

08002dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <SystemInit+0x20>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <SystemInit+0x20>)
 8002dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002df2:	f107 0308 	add.w	r3, r7, #8
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	609a      	str	r2, [r3, #8]
 8002dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e00:	463b      	mov	r3, r7
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e08:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <MX_TIM2_Init+0x94>)
 8002e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <MX_TIM2_Init+0x94>)
 8002e12:	f240 3247 	movw	r2, #839	; 0x347
 8002e16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <MX_TIM2_Init+0x94>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <MX_TIM2_Init+0x94>)
 8002e20:	2263      	movs	r2, #99	; 0x63
 8002e22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <MX_TIM2_Init+0x94>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <MX_TIM2_Init+0x94>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e30:	4813      	ldr	r0, [pc, #76]	; (8002e80 <MX_TIM2_Init+0x94>)
 8002e32:	f003 f91f 	bl	8006074 <HAL_TIM_Base_Init>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e3c:	f7ff fe54 	bl	8002ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e46:	f107 0308 	add.w	r3, r7, #8
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	480c      	ldr	r0, [pc, #48]	; (8002e80 <MX_TIM2_Init+0x94>)
 8002e4e:	f003 fad9 	bl	8006404 <HAL_TIM_ConfigClockSource>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e58:	f7ff fe46 	bl	8002ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e64:	463b      	mov	r3, r7
 8002e66:	4619      	mov	r1, r3
 8002e68:	4805      	ldr	r0, [pc, #20]	; (8002e80 <MX_TIM2_Init+0x94>)
 8002e6a:	f003 fcf5 	bl	8006858 <HAL_TIMEx_MasterConfigSynchronization>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e74:	f7ff fe38 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e78:	bf00      	nop
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200002b4 	.word	0x200002b4

08002e84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d115      	bne.n	8002ec2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <HAL_TIM_Base_MspInit+0x48>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <HAL_TIM_Base_MspInit+0x48>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_TIM_Base_MspInit+0x48>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	201c      	movs	r0, #28
 8002eb8:	f000 fb0f 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ebc:	201c      	movs	r0, #28
 8002ebe:	f000 fb28 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <uart_init_rs232>:
uint8_t receive_buffer1 = 0;
uint8_t index_buffer = 0;
uint8_t rcv[100];
uint8_t msg[100];

void uart_init_rs232(){
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4903      	ldr	r1, [pc, #12]	; (8002ee4 <uart_init_rs232+0x14>)
 8002ed8:	4803      	ldr	r0, [pc, #12]	; (8002ee8 <uart_init_rs232+0x18>)
 8002eda:	f003 fe2c 	bl	8006b36 <HAL_UART_Receive_IT>
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200000dc 	.word	0x200000dc
 8002ee8:	20000360 	.word	0x20000360

08002eec <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4907      	ldr	r1, [pc, #28]	; (8002f14 <uart_Rs232SendString+0x28>)
 8002ef8:	4807      	ldr	r0, [pc, #28]	; (8002f18 <uart_Rs232SendString+0x2c>)
 8002efa:	f004 fe07 	bl	8007b0c <siprintf>
 8002efe:	4603      	mov	r3, r0
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	230a      	movs	r3, #10
 8002f04:	4904      	ldr	r1, [pc, #16]	; (8002f18 <uart_Rs232SendString+0x2c>)
 8002f06:	4805      	ldr	r0, [pc, #20]	; (8002f1c <uart_Rs232SendString+0x30>)
 8002f08:	f003 fd83 	bl	8006a12 <HAL_UART_Transmit>
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	08008490 	.word	0x08008490
 8002f18:	200002fc 	.word	0x200002fc
 8002f1c:	20000360 	.word	0x20000360

08002f20 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d103      	bne.n	8002f36 <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 8002f2e:	4824      	ldr	r0, [pc, #144]	; (8002fc0 <uart_Rs232SendNum+0xa0>)
 8002f30:	f7ff ffdc 	bl	8002eec <uart_Rs232SendString>
		return;
 8002f34:	e040      	b.n	8002fb8 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8002f3a:	230a      	movs	r3, #10
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	e038      	b.n	8002fb2 <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	4619      	mov	r1, r3
 8002f46:	200a      	movs	r0, #10
 8002f48:	f7fe f82e 	bl	8000fa8 <mypow>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d315      	bcc.n	8002f82 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	4619      	mov	r1, r3
 8002f60:	200a      	movs	r0, #10
 8002f62:	f7fe f821 	bl	8000fa8 <mypow>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	4914      	ldr	r1, [pc, #80]	; (8002fc4 <uart_Rs232SendNum+0xa4>)
 8002f74:	4814      	ldr	r0, [pc, #80]	; (8002fc8 <uart_Rs232SendNum+0xa8>)
 8002f76:	f004 fdc9 	bl	8007b0c <siprintf>
            uart_Rs232SendString(msg);
 8002f7a:	4813      	ldr	r0, [pc, #76]	; (8002fc8 <uart_Rs232SendNum+0xa8>)
 8002f7c:	f7ff ffb6 	bl	8002eec <uart_Rs232SendString>
 8002f80:	e005      	b.n	8002f8e <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 8002f88:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <uart_Rs232SendNum+0xa0>)
 8002f8a:	f7ff ffaf 	bl	8002eec <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	4619      	mov	r1, r3
 8002f94:	200a      	movs	r0, #10
 8002f96:	f7fe f807 	bl	8000fa8 <mypow>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002fa4:	fb02 f201 	mul.w	r2, r2, r1
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	dcc3      	bgt.n	8002f40 <uart_Rs232SendNum+0x20>
    }
}
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	08008494 	.word	0x08008494
 8002fc4:	08008498 	.word	0x08008498
 8002fc8:	200002fc 	.word	0x200002fc

08002fcc <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a11      	ldr	r2, [pc, #68]	; (8003020 <HAL_UART_RxCpltCallback+0x54>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d11c      	bne.n	8003018 <HAL_UART_RxCpltCallback+0x4c>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002fde:	230a      	movs	r3, #10
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4910      	ldr	r1, [pc, #64]	; (8003024 <HAL_UART_RxCpltCallback+0x58>)
 8002fe4:	4810      	ldr	r0, [pc, #64]	; (8003028 <HAL_UART_RxCpltCallback+0x5c>)
 8002fe6:	f003 fd14 	bl	8006a12 <HAL_UART_Transmit>
		rcv[index_buffer++] = receive_buffer1;
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_UART_RxCpltCallback+0x60>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	b2d1      	uxtb	r1, r2
 8002ff2:	4a0e      	ldr	r2, [pc, #56]	; (800302c <HAL_UART_RxCpltCallback+0x60>)
 8002ff4:	7011      	strb	r1, [r2, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_UART_RxCpltCallback+0x58>)
 8002ffa:	7819      	ldrb	r1, [r3, #0]
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_UART_RxCpltCallback+0x64>)
 8002ffe:	5499      	strb	r1, [r3, r2]
		if (index_buffer == 100) index_buffer = 0;
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_UART_RxCpltCallback+0x60>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b64      	cmp	r3, #100	; 0x64
 8003006:	d102      	bne.n	800300e <HAL_UART_RxCpltCallback+0x42>
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_UART_RxCpltCallback+0x60>)
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800300e:	2201      	movs	r2, #1
 8003010:	4904      	ldr	r1, [pc, #16]	; (8003024 <HAL_UART_RxCpltCallback+0x58>)
 8003012:	4805      	ldr	r0, [pc, #20]	; (8003028 <HAL_UART_RxCpltCallback+0x5c>)
 8003014:	f003 fd8f 	bl	8006b36 <HAL_UART_Receive_IT>
	}
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40011000 	.word	0x40011000
 8003024:	200000dc 	.word	0x200000dc
 8003028:	20000360 	.word	0x20000360
 800302c:	200000dd 	.word	0x200000dd
 8003030:	200001f8 	.word	0x200001f8

08003034 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <MX_USART1_UART_Init+0x4c>)
 800303a:	4a12      	ldr	r2, [pc, #72]	; (8003084 <MX_USART1_UART_Init+0x50>)
 800303c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <MX_USART1_UART_Init+0x4c>)
 8003040:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003044:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <MX_USART1_UART_Init+0x4c>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <MX_USART1_UART_Init+0x4c>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <MX_USART1_UART_Init+0x4c>)
 8003054:	2200      	movs	r2, #0
 8003056:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <MX_USART1_UART_Init+0x4c>)
 800305a:	220c      	movs	r2, #12
 800305c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <MX_USART1_UART_Init+0x4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <MX_USART1_UART_Init+0x4c>)
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800306a:	4805      	ldr	r0, [pc, #20]	; (8003080 <MX_USART1_UART_Init+0x4c>)
 800306c:	f003 fc84 	bl	8006978 <HAL_UART_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003076:	f7ff fd37 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000360 	.word	0x20000360
 8003084:	40011000 	.word	0x40011000

08003088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	f107 0314 	add.w	r3, r7, #20
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1d      	ldr	r2, [pc, #116]	; (800311c <HAL_UART_MspInit+0x94>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d134      	bne.n	8003114 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <HAL_UART_MspInit+0x98>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <HAL_UART_MspInit+0x98>)
 80030b4:	f043 0310 	orr.w	r3, r3, #16
 80030b8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_UART_MspInit+0x98>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_UART_MspInit+0x98>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a14      	ldr	r2, [pc, #80]	; (8003120 <HAL_UART_MspInit+0x98>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_UART_MspInit+0x98>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f0:	2303      	movs	r3, #3
 80030f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030f4:	2307      	movs	r3, #7
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	4619      	mov	r1, r3
 80030fe:	4809      	ldr	r0, [pc, #36]	; (8003124 <HAL_UART_MspInit+0x9c>)
 8003100:	f000 fab4 	bl	800366c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003104:	2200      	movs	r2, #0
 8003106:	2100      	movs	r1, #0
 8003108:	2025      	movs	r0, #37	; 0x25
 800310a:	f000 f9e6 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800310e:	2025      	movs	r0, #37	; 0x25
 8003110:	f000 f9ff 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003114:	bf00      	nop
 8003116:	3728      	adds	r7, #40	; 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40011000 	.word	0x40011000
 8003120:	40023800 	.word	0x40023800
 8003124:	40020000 	.word	0x40020000

08003128 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	0092      	lsls	r2, r2, #2
 800313c:	4413      	add	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	b2db      	uxtb	r3, r3
 800314a:	4413      	add	r3, r2
 800314c:	b2db      	uxtb	r3, r3
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <DEC2BCD+0x44>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	08db      	lsrs	r3, r3, #3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	b258      	sxtb	r0, r3
 8003176:	79fa      	ldrb	r2, [r7, #7]
 8003178:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <DEC2BCD+0x44>)
 800317a:	fba3 1302 	umull	r1, r3, r3, r2
 800317e:	08d9      	lsrs	r1, r3, #3
 8003180:	460b      	mov	r3, r1
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	b25b      	sxtb	r3, r3
 800318e:	4303      	orrs	r3, r0
 8003190:	b25b      	sxtb	r3, r3
 8003192:	b2db      	uxtb	r3, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	cccccccd 	.word	0xcccccccd

080031a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031a8:	480d      	ldr	r0, [pc, #52]	; (80031e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031aa:	490e      	ldr	r1, [pc, #56]	; (80031e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031ac:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b0:	e002      	b.n	80031b8 <LoopCopyDataInit>

080031b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b6:	3304      	adds	r3, #4

080031b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031bc:	d3f9      	bcc.n	80031b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031c0:	4c0b      	ldr	r4, [pc, #44]	; (80031f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c4:	e001      	b.n	80031ca <LoopFillZerobss>

080031c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c8:	3204      	adds	r2, #4

080031ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031cc:	d3fb      	bcc.n	80031c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031ce:	f7ff fdfb 	bl	8002dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d2:	f004 fc6f 	bl	8007ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031d6:	f7fe f9f5 	bl	80015c4 <main>
  bx  lr    
 80031da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80031e8:	0800b480 	.word	0x0800b480
  ldr r2, =_sbss
 80031ec:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80031f0:	200003b8 	.word	0x200003b8

080031f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <ADC_IRQHandler>
	...

080031f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_Init+0x40>)
 8003202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_Init+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_Init+0x40>)
 800320e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_Init+0x40>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_Init+0x40>)
 800321a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003220:	2003      	movs	r0, #3
 8003222:	f000 f94f 	bl	80034c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003226:	200f      	movs	r0, #15
 8003228:	f000 f808 	bl	800323c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800322c:	f7ff fd30 	bl	8002c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023c00 	.word	0x40023c00

0800323c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_InitTick+0x54>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_InitTick+0x58>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003252:	fbb3 f3f1 	udiv	r3, r3, r1
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f967 	bl	800352e <HAL_SYSTICK_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e00e      	b.n	8003288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0f      	cmp	r3, #15
 800326e:	d80a      	bhi.n	8003286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003270:	2200      	movs	r2, #0
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f000 f92f 	bl	80034da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800327c:	4a06      	ldr	r2, [pc, #24]	; (8003298 <HAL_InitTick+0x5c>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000024 	.word	0x20000024
 8003294:	2000002c 	.word	0x2000002c
 8003298:	20000028 	.word	0x20000028

0800329c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_IncTick+0x20>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_IncTick+0x24>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_IncTick+0x24>)
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	2000002c 	.word	0x2000002c
 80032c0:	200003a4 	.word	0x200003a4

080032c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return uwTick;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_GetTick+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	200003a4 	.word	0x200003a4

080032dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e4:	f7ff ffee 	bl	80032c4 <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d005      	beq.n	8003302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_Delay+0x44>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003302:	bf00      	nop
 8003304:	f7ff ffde 	bl	80032c4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	429a      	cmp	r2, r3
 8003312:	d8f7      	bhi.n	8003304 <HAL_Delay+0x28>
  {
  }
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2000002c 	.word	0x2000002c

08003324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800334c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003356:	4a04      	ldr	r2, [pc, #16]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60d3      	str	r3, [r2, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <__NVIC_EnableIRQ+0x38>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	; (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003490:	d301      	bcc.n	8003496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <SysTick_Config+0x40>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349e:	210f      	movs	r1, #15
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	f7ff ff8e 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <SysTick_Config+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <SysTick_Config+0x40>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff29 	bl	8003324 <__NVIC_SetPriorityGrouping>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ec:	f7ff ff3e 	bl	800336c <__NVIC_GetPriorityGrouping>
 80034f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff8e 	bl	8003418 <NVIC_EncodePriority>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff5d 	bl	80033c4 <__NVIC_SetPriority>
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff31 	bl	8003388 <__NVIC_EnableIRQ>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffa2 	bl	8003480 <SysTick_Config>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003554:	f7ff feb6 	bl	80032c4 <HAL_GetTick>
 8003558:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d008      	beq.n	8003578 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e052      	b.n	800361e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0216 	bic.w	r2, r2, #22
 8003586:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003596:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <HAL_DMA_Abort+0x62>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0208 	bic.w	r2, r2, #8
 80035b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c8:	e013      	b.n	80035f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ca:	f7ff fe7b 	bl	80032c4 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b05      	cmp	r3, #5
 80035d6:	d90c      	bls.n	80035f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2203      	movs	r2, #3
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e015      	b.n	800361e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e4      	bne.n	80035ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003604:	223f      	movs	r2, #63	; 0x3f
 8003606:	409a      	lsls	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d004      	beq.n	8003644 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2280      	movs	r2, #128	; 0x80
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e00c      	b.n	800365e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2205      	movs	r2, #5
 8003648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	e16b      	b.n	8003960 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003688:	2201      	movs	r2, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	f040 815a 	bne.w	800395a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d005      	beq.n	80036be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d130      	bne.n	8003720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2203      	movs	r2, #3
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 0201 	and.w	r2, r3, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b03      	cmp	r3, #3
 800372a:	d017      	beq.n	800375c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2203      	movs	r2, #3
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d123      	bne.n	80037b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	08da      	lsrs	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3208      	adds	r2, #8
 8003770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	220f      	movs	r2, #15
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	08da      	lsrs	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3208      	adds	r2, #8
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0203 	and.w	r2, r3, #3
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80b4 	beq.w	800395a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	4b60      	ldr	r3, [pc, #384]	; (8003978 <HAL_GPIO_Init+0x30c>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4a5f      	ldr	r2, [pc, #380]	; (8003978 <HAL_GPIO_Init+0x30c>)
 80037fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003800:	6453      	str	r3, [r2, #68]	; 0x44
 8003802:	4b5d      	ldr	r3, [pc, #372]	; (8003978 <HAL_GPIO_Init+0x30c>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800380e:	4a5b      	ldr	r2, [pc, #364]	; (800397c <HAL_GPIO_Init+0x310>)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	3302      	adds	r3, #2
 8003816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	220f      	movs	r2, #15
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a52      	ldr	r2, [pc, #328]	; (8003980 <HAL_GPIO_Init+0x314>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02b      	beq.n	8003892 <HAL_GPIO_Init+0x226>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a51      	ldr	r2, [pc, #324]	; (8003984 <HAL_GPIO_Init+0x318>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d025      	beq.n	800388e <HAL_GPIO_Init+0x222>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a50      	ldr	r2, [pc, #320]	; (8003988 <HAL_GPIO_Init+0x31c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01f      	beq.n	800388a <HAL_GPIO_Init+0x21e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4f      	ldr	r2, [pc, #316]	; (800398c <HAL_GPIO_Init+0x320>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d019      	beq.n	8003886 <HAL_GPIO_Init+0x21a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4e      	ldr	r2, [pc, #312]	; (8003990 <HAL_GPIO_Init+0x324>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_GPIO_Init+0x216>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4d      	ldr	r2, [pc, #308]	; (8003994 <HAL_GPIO_Init+0x328>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00d      	beq.n	800387e <HAL_GPIO_Init+0x212>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4c      	ldr	r2, [pc, #304]	; (8003998 <HAL_GPIO_Init+0x32c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <HAL_GPIO_Init+0x20e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4b      	ldr	r2, [pc, #300]	; (800399c <HAL_GPIO_Init+0x330>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_GPIO_Init+0x20a>
 8003872:	2307      	movs	r3, #7
 8003874:	e00e      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003876:	2308      	movs	r3, #8
 8003878:	e00c      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800387a:	2306      	movs	r3, #6
 800387c:	e00a      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800387e:	2305      	movs	r3, #5
 8003880:	e008      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003882:	2304      	movs	r3, #4
 8003884:	e006      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003886:	2303      	movs	r3, #3
 8003888:	e004      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800388a:	2302      	movs	r3, #2
 800388c:	e002      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003892:	2300      	movs	r3, #0
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	f002 0203 	and.w	r2, r2, #3
 800389a:	0092      	lsls	r2, r2, #2
 800389c:	4093      	lsls	r3, r2
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038a4:	4935      	ldr	r1, [pc, #212]	; (800397c <HAL_GPIO_Init+0x310>)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	089b      	lsrs	r3, r3, #2
 80038aa:	3302      	adds	r3, #2
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b2:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_GPIO_Init+0x334>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038d6:	4a32      	ldr	r2, [pc, #200]	; (80039a0 <HAL_GPIO_Init+0x334>)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038dc:	4b30      	ldr	r3, [pc, #192]	; (80039a0 <HAL_GPIO_Init+0x334>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003900:	4a27      	ldr	r2, [pc, #156]	; (80039a0 <HAL_GPIO_Init+0x334>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_GPIO_Init+0x334>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800392a:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_GPIO_Init+0x334>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_GPIO_Init+0x334>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003954:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <HAL_GPIO_Init+0x334>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3301      	adds	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b0f      	cmp	r3, #15
 8003964:	f67f ae90 	bls.w	8003688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	3724      	adds	r7, #36	; 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	40013800 	.word	0x40013800
 8003980:	40020000 	.word	0x40020000
 8003984:	40020400 	.word	0x40020400
 8003988:	40020800 	.word	0x40020800
 800398c:	40020c00 	.word	0x40020c00
 8003990:	40021000 	.word	0x40021000
 8003994:	40021400 	.word	0x40021400
 8003998:	40021800 	.word	0x40021800
 800399c:	40021c00 	.word	0x40021c00
 80039a0:	40013c00 	.word	0x40013c00

080039a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	807b      	strh	r3, [r7, #2]
 80039b0:	4613      	mov	r3, r2
 80039b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b4:	787b      	ldrb	r3, [r7, #1]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ba:	887a      	ldrh	r2, [r7, #2]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039c0:	e003      	b.n	80039ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039c2:	887b      	ldrh	r3, [r7, #2]
 80039c4:	041a      	lsls	r2, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	619a      	str	r2, [r3, #24]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e12b      	b.n	8003c42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd f8ea 	bl	8000bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2224      	movs	r2, #36	; 0x24
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f001 fd06 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8003a40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4a81      	ldr	r2, [pc, #516]	; (8003c4c <HAL_I2C_Init+0x274>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d807      	bhi.n	8003a5c <HAL_I2C_Init+0x84>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a80      	ldr	r2, [pc, #512]	; (8003c50 <HAL_I2C_Init+0x278>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	bf94      	ite	ls
 8003a54:	2301      	movls	r3, #1
 8003a56:	2300      	movhi	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e006      	b.n	8003a6a <HAL_I2C_Init+0x92>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a7d      	ldr	r2, [pc, #500]	; (8003c54 <HAL_I2C_Init+0x27c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	bf94      	ite	ls
 8003a64:	2301      	movls	r3, #1
 8003a66:	2300      	movhi	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0e7      	b.n	8003c42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a78      	ldr	r2, [pc, #480]	; (8003c58 <HAL_I2C_Init+0x280>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0c9b      	lsrs	r3, r3, #18
 8003a7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a6a      	ldr	r2, [pc, #424]	; (8003c4c <HAL_I2C_Init+0x274>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d802      	bhi.n	8003aac <HAL_I2C_Init+0xd4>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	e009      	b.n	8003ac0 <HAL_I2C_Init+0xe8>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	4a69      	ldr	r2, [pc, #420]	; (8003c5c <HAL_I2C_Init+0x284>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	3301      	adds	r3, #1
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ad2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	495c      	ldr	r1, [pc, #368]	; (8003c4c <HAL_I2C_Init+0x274>)
 8003adc:	428b      	cmp	r3, r1
 8003ade:	d819      	bhi.n	8003b14 <HAL_I2C_Init+0x13c>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	1e59      	subs	r1, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aee:	1c59      	adds	r1, r3, #1
 8003af0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003af4:	400b      	ands	r3, r1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_I2C_Init+0x138>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1e59      	subs	r1, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0e:	e051      	b.n	8003bb4 <HAL_I2C_Init+0x1dc>
 8003b10:	2304      	movs	r3, #4
 8003b12:	e04f      	b.n	8003bb4 <HAL_I2C_Init+0x1dc>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d111      	bne.n	8003b40 <HAL_I2C_Init+0x168>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1e58      	subs	r0, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	440b      	add	r3, r1
 8003b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e012      	b.n	8003b66 <HAL_I2C_Init+0x18e>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1e58      	subs	r0, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	0099      	lsls	r1, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b56:	3301      	adds	r3, #1
 8003b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Init+0x196>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e022      	b.n	8003bb4 <HAL_I2C_Init+0x1dc>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10e      	bne.n	8003b94 <HAL_I2C_Init+0x1bc>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1e58      	subs	r0, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6859      	ldr	r1, [r3, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	440b      	add	r3, r1
 8003b84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b92:	e00f      	b.n	8003bb4 <HAL_I2C_Init+0x1dc>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e58      	subs	r0, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	0099      	lsls	r1, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	6809      	ldr	r1, [r1, #0]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003be2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6911      	ldr	r1, [r2, #16]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68d2      	ldr	r2, [r2, #12]
 8003bee:	4311      	orrs	r1, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	000186a0 	.word	0x000186a0
 8003c50:	001e847f 	.word	0x001e847f
 8003c54:	003d08ff 	.word	0x003d08ff
 8003c58:	431bde83 	.word	0x431bde83
 8003c5c:	10624dd3 	.word	0x10624dd3

08003c60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	817b      	strh	r3, [r7, #10]
 8003c72:	460b      	mov	r3, r1
 8003c74:	813b      	strh	r3, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c7a:	f7ff fb23 	bl	80032c4 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	f040 80d9 	bne.w	8003e40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	2319      	movs	r3, #25
 8003c94:	2201      	movs	r2, #1
 8003c96:	496d      	ldr	r1, [pc, #436]	; (8003e4c <HAL_I2C_Mem_Write+0x1ec>)
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fdad 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0cc      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2C_Mem_Write+0x56>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0c5      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d007      	beq.n	8003cdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2221      	movs	r2, #33	; 0x21
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a4d      	ldr	r2, [pc, #308]	; (8003e50 <HAL_I2C_Mem_Write+0x1f0>)
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d1e:	88f8      	ldrh	r0, [r7, #6]
 8003d20:	893a      	ldrh	r2, [r7, #8]
 8003d22:	8979      	ldrh	r1, [r7, #10]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	9301      	str	r3, [sp, #4]
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 fbe4 	bl	80044fc <I2C_RequestMemoryWrite>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d052      	beq.n	8003de0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e081      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fe2e 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d107      	bne.n	8003d66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e06b      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d11b      	bne.n	8003de0 <HAL_I2C_Mem_Write+0x180>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d017      	beq.n	8003de0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1aa      	bne.n	8003d3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fe1a 	bl	8004a26 <I2C_WaitOnBTFFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d107      	bne.n	8003e10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e016      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	00100002 	.word	0x00100002
 8003e50:	ffff0000 	.word	0xffff0000

08003e54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08c      	sub	sp, #48	; 0x30
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	4611      	mov	r1, r2
 8003e60:	461a      	mov	r2, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	817b      	strh	r3, [r7, #10]
 8003e66:	460b      	mov	r3, r1
 8003e68:	813b      	strh	r3, [r7, #8]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e6e:	f7ff fa29 	bl	80032c4 <HAL_GetTick>
 8003e72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	f040 8208 	bne.w	8004292 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	2319      	movs	r3, #25
 8003e88:	2201      	movs	r2, #1
 8003e8a:	497b      	ldr	r1, [pc, #492]	; (8004078 <HAL_I2C_Mem_Read+0x224>)
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fcb3 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e1fb      	b.n	8004294 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2C_Mem_Read+0x56>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e1f4      	b.n	8004294 <HAL_I2C_Mem_Read+0x440>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d007      	beq.n	8003ed0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ede:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2222      	movs	r2, #34	; 0x22
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2240      	movs	r2, #64	; 0x40
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a5b      	ldr	r2, [pc, #364]	; (800407c <HAL_I2C_Mem_Read+0x228>)
 8003f10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f12:	88f8      	ldrh	r0, [r7, #6]
 8003f14:	893a      	ldrh	r2, [r7, #8]
 8003f16:	8979      	ldrh	r1, [r7, #10]
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	4603      	mov	r3, r0
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fb80 	bl	8004628 <I2C_RequestMemoryRead>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e1b0      	b.n	8004294 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d113      	bne.n	8003f62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	623b      	str	r3, [r7, #32]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	623b      	str	r3, [r7, #32]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	623b      	str	r3, [r7, #32]
 8003f4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e184      	b.n	800426c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d11b      	bne.n	8003fa2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e164      	b.n	800426c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	e144      	b.n	800426c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ff8:	e138      	b.n	800426c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	f200 80f1 	bhi.w	80041e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	2b01      	cmp	r3, #1
 800400a:	d123      	bne.n	8004054 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fd49 	bl	8004aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e139      	b.n	8004294 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004052:	e10b      	b.n	800426c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004058:	2b02      	cmp	r3, #2
 800405a:	d14e      	bne.n	80040fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	2200      	movs	r2, #0
 8004064:	4906      	ldr	r1, [pc, #24]	; (8004080 <HAL_I2C_Mem_Read+0x22c>)
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fbc6 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e10e      	b.n	8004294 <HAL_I2C_Mem_Read+0x440>
 8004076:	bf00      	nop
 8004078:	00100002 	.word	0x00100002
 800407c:	ffff0000 	.word	0xffff0000
 8004080:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040f8:	e0b8      	b.n	800426c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	2200      	movs	r2, #0
 8004102:	4966      	ldr	r1, [pc, #408]	; (800429c <HAL_I2C_Mem_Read+0x448>)
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fb77 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0bf      	b.n	8004294 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	2200      	movs	r2, #0
 800415e:	494f      	ldr	r1, [pc, #316]	; (800429c <HAL_I2C_Mem_Read+0x448>)
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fb49 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e091      	b.n	8004294 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041e4:	e042      	b.n	800426c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fc5c 	bl	8004aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e04c      	b.n	8004294 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b04      	cmp	r3, #4
 8004238:	d118      	bne.n	800426c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f aec2 	bne.w	8003ffa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004292:	2302      	movs	r3, #2
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3728      	adds	r7, #40	; 0x28
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	00010004 	.word	0x00010004

080042a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	460b      	mov	r3, r1
 80042ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80042b0:	f7ff f808 	bl	80032c4 <HAL_GetTick>
 80042b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	f040 8111 	bne.w	80044ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	2319      	movs	r3, #25
 80042ce:	2201      	movs	r2, #1
 80042d0:	4988      	ldr	r1, [pc, #544]	; (80044f4 <HAL_I2C_IsDeviceReady+0x254>)
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fa90 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
 80042e0:	e104      	b.n	80044ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_I2C_IsDeviceReady+0x50>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e0fd      	b.n	80044ec <HAL_I2C_IsDeviceReady+0x24c>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d007      	beq.n	8004316 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0201 	orr.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004324:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2224      	movs	r2, #36	; 0x24
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a70      	ldr	r2, [pc, #448]	; (80044f8 <HAL_I2C_IsDeviceReady+0x258>)
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004348:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2200      	movs	r2, #0
 8004352:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fa4e 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004370:	d103      	bne.n	800437a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e0b6      	b.n	80044ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800437e:	897b      	ldrh	r3, [r7, #10]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800438c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800438e:	f7fe ff99 	bl	80032c4 <HAL_GetTick>
 8004392:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b8:	bf0c      	ite	eq
 80043ba:	2301      	moveq	r3, #1
 80043bc:	2300      	movne	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043c2:	e025      	b.n	8004410 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043c4:	f7fe ff7e 	bl	80032c4 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d302      	bcc.n	80043da <HAL_I2C_IsDeviceReady+0x13a>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	22a0      	movs	r2, #160	; 0xa0
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2ba0      	cmp	r3, #160	; 0xa0
 800441a:	d005      	beq.n	8004428 <HAL_I2C_IsDeviceReady+0x188>
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_I2C_IsDeviceReady+0x188>
 8004422:	7dbb      	ldrb	r3, [r7, #22]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0cd      	beq.n	80043c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d129      	bne.n	8004492 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	2319      	movs	r3, #25
 800446a:	2201      	movs	r2, #1
 800446c:	4921      	ldr	r1, [pc, #132]	; (80044f4 <HAL_I2C_IsDeviceReady+0x254>)
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f9c2 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e036      	b.n	80044ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e02c      	b.n	80044ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	2319      	movs	r3, #25
 80044b2:	2201      	movs	r2, #1
 80044b4:	490f      	ldr	r1, [pc, #60]	; (80044f4 <HAL_I2C_IsDeviceReady+0x254>)
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 f99e 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e012      	b.n	80044ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3301      	adds	r3, #1
 80044ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	f4ff af32 	bcc.w	800433a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3720      	adds	r7, #32
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	00100002 	.word	0x00100002
 80044f8:	ffff0000 	.word	0xffff0000

080044fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	4608      	mov	r0, r1
 8004506:	4611      	mov	r1, r2
 8004508:	461a      	mov	r2, r3
 800450a:	4603      	mov	r3, r0
 800450c:	817b      	strh	r3, [r7, #10]
 800450e:	460b      	mov	r3, r1
 8004510:	813b      	strh	r3, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004524:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	2200      	movs	r2, #0
 800452e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f960 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00d      	beq.n	800455a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454c:	d103      	bne.n	8004556 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e05f      	b.n	800461a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800455a:	897b      	ldrh	r3, [r7, #10]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004568:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	6a3a      	ldr	r2, [r7, #32]
 800456e:	492d      	ldr	r1, [pc, #180]	; (8004624 <I2C_RequestMemoryWrite+0x128>)
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f998 	bl	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e04c      	b.n	800461a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004598:	6a39      	ldr	r1, [r7, #32]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fa02 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d107      	bne.n	80045be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e02b      	b.n	800461a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d105      	bne.n	80045d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c8:	893b      	ldrh	r3, [r7, #8]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	611a      	str	r2, [r3, #16]
 80045d2:	e021      	b.n	8004618 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045d4:	893b      	ldrh	r3, [r7, #8]
 80045d6:	0a1b      	lsrs	r3, r3, #8
 80045d8:	b29b      	uxth	r3, r3
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e4:	6a39      	ldr	r1, [r7, #32]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f9dc 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d107      	bne.n	800460a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004608:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e005      	b.n	800461a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800460e:	893b      	ldrh	r3, [r7, #8]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	00010002 	.word	0x00010002

08004628 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	4608      	mov	r0, r1
 8004632:	4611      	mov	r1, r2
 8004634:	461a      	mov	r2, r3
 8004636:	4603      	mov	r3, r0
 8004638:	817b      	strh	r3, [r7, #10]
 800463a:	460b      	mov	r3, r1
 800463c:	813b      	strh	r3, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004650:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004660:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	2200      	movs	r2, #0
 800466a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f8c2 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004688:	d103      	bne.n	8004692 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0aa      	b.n	80047ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004696:	897b      	ldrh	r3, [r7, #10]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	461a      	mov	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	6a3a      	ldr	r2, [r7, #32]
 80046aa:	4952      	ldr	r1, [pc, #328]	; (80047f4 <I2C_RequestMemoryRead+0x1cc>)
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f8fa 	bl	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e097      	b.n	80047ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d4:	6a39      	ldr	r1, [r7, #32]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f964 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00d      	beq.n	80046fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d107      	bne.n	80046fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e076      	b.n	80047ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d105      	bne.n	8004710 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004704:	893b      	ldrh	r3, [r7, #8]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	611a      	str	r2, [r3, #16]
 800470e:	e021      	b.n	8004754 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004710:	893b      	ldrh	r3, [r7, #8]
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	b29b      	uxth	r3, r3
 8004716:	b2da      	uxtb	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800471e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004720:	6a39      	ldr	r1, [r7, #32]
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f93e 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00d      	beq.n	800474a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2b04      	cmp	r3, #4
 8004734:	d107      	bne.n	8004746 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004744:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e050      	b.n	80047ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800474a:	893b      	ldrh	r3, [r7, #8]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	6a39      	ldr	r1, [r7, #32]
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f923 	bl	80049a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00d      	beq.n	8004780 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	2b04      	cmp	r3, #4
 800476a:	d107      	bne.n	800477c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e035      	b.n	80047ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800478e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	2200      	movs	r2, #0
 8004798:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f82b 	bl	80047f8 <I2C_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b6:	d103      	bne.n	80047c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e013      	b.n	80047ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047c4:	897b      	ldrh	r3, [r7, #10]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	6a3a      	ldr	r2, [r7, #32]
 80047d8:	4906      	ldr	r1, [pc, #24]	; (80047f4 <I2C_RequestMemoryRead+0x1cc>)
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 f863 	bl	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	00010002 	.word	0x00010002

080047f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004808:	e025      	b.n	8004856 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d021      	beq.n	8004856 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004812:	f7fe fd57 	bl	80032c4 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d116      	bne.n	8004856 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e023      	b.n	800489e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10d      	bne.n	800487c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	43da      	mvns	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	e00c      	b.n	8004896 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	43da      	mvns	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4013      	ands	r3, r2
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	429a      	cmp	r2, r3
 800489a:	d0b6      	beq.n	800480a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048b4:	e051      	b.n	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c4:	d123      	bne.n	800490e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f043 0204 	orr.w	r2, r3, #4
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e046      	b.n	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d021      	beq.n	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fe fcd5 	bl	80032c4 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d116      	bne.n	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f043 0220 	orr.w	r2, r3, #32
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e020      	b.n	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d10c      	bne.n	800497e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	43da      	mvns	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4013      	ands	r3, r2
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	e00b      	b.n	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	43da      	mvns	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4013      	ands	r3, r2
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d18d      	bne.n	80048b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b0:	e02d      	b.n	8004a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f8ce 	bl	8004b54 <I2C_IsAcknowledgeFailed>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e02d      	b.n	8004a1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d021      	beq.n	8004a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7fe fc7b 	bl	80032c4 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d116      	bne.n	8004a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e007      	b.n	8004a1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	2b80      	cmp	r3, #128	; 0x80
 8004a1a:	d1ca      	bne.n	80049b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a32:	e02d      	b.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f88d 	bl	8004b54 <I2C_IsAcknowledgeFailed>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e02d      	b.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d021      	beq.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4c:	f7fe fc3a 	bl	80032c4 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d302      	bcc.n	8004a62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d116      	bne.n	8004a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	f043 0220 	orr.w	r2, r3, #32
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e007      	b.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d1ca      	bne.n	8004a34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ab4:	e042      	b.n	8004b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d119      	bne.n	8004af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0210 	mvn.w	r2, #16
 8004acc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e029      	b.n	8004b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af8:	f7fe fbe4 	bl	80032c4 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d302      	bcc.n	8004b0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d116      	bne.n	8004b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	f043 0220 	orr.w	r2, r3, #32
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e007      	b.n	8004b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d1b5      	bne.n	8004ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6a:	d11b      	bne.n	8004ba4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	f043 0204 	orr.w	r2, r3, #4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e264      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d075      	beq.n	8004cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bd2:	4ba3      	ldr	r3, [pc, #652]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d00c      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bde:	4ba0      	ldr	r3, [pc, #640]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d112      	bne.n	8004c10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bea:	4b9d      	ldr	r3, [pc, #628]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf6:	d10b      	bne.n	8004c10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf8:	4b99      	ldr	r3, [pc, #612]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d05b      	beq.n	8004cbc <HAL_RCC_OscConfig+0x108>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d157      	bne.n	8004cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e23f      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c18:	d106      	bne.n	8004c28 <HAL_RCC_OscConfig+0x74>
 8004c1a:	4b91      	ldr	r3, [pc, #580]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a90      	ldr	r2, [pc, #576]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	e01d      	b.n	8004c64 <HAL_RCC_OscConfig+0xb0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c30:	d10c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x98>
 8004c32:	4b8b      	ldr	r3, [pc, #556]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a8a      	ldr	r2, [pc, #552]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	4b88      	ldr	r3, [pc, #544]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a87      	ldr	r2, [pc, #540]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	e00b      	b.n	8004c64 <HAL_RCC_OscConfig+0xb0>
 8004c4c:	4b84      	ldr	r3, [pc, #528]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a83      	ldr	r2, [pc, #524]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	4b81      	ldr	r3, [pc, #516]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a80      	ldr	r2, [pc, #512]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d013      	beq.n	8004c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fe fb2a 	bl	80032c4 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c74:	f7fe fb26 	bl	80032c4 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b64      	cmp	r3, #100	; 0x64
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e204      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c86:	4b76      	ldr	r3, [pc, #472]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCC_OscConfig+0xc0>
 8004c92:	e014      	b.n	8004cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c94:	f7fe fb16 	bl	80032c4 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c9c:	f7fe fb12 	bl	80032c4 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b64      	cmp	r3, #100	; 0x64
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e1f0      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cae:	4b6c      	ldr	r3, [pc, #432]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0xe8>
 8004cba:	e000      	b.n	8004cbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d063      	beq.n	8004d92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cca:	4b65      	ldr	r3, [pc, #404]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cd6:	4b62      	ldr	r3, [pc, #392]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cde:	2b08      	cmp	r3, #8
 8004ce0:	d11c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ce2:	4b5f      	ldr	r3, [pc, #380]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d116      	bne.n	8004d1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cee:	4b5c      	ldr	r3, [pc, #368]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_RCC_OscConfig+0x152>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d001      	beq.n	8004d06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e1c4      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d06:	4b56      	ldr	r3, [pc, #344]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	4952      	ldr	r1, [pc, #328]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1a:	e03a      	b.n	8004d92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d020      	beq.n	8004d66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d24:	4b4f      	ldr	r3, [pc, #316]	; (8004e64 <HAL_RCC_OscConfig+0x2b0>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2a:	f7fe facb 	bl	80032c4 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d32:	f7fe fac7 	bl	80032c4 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e1a5      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d44:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d50:	4b43      	ldr	r3, [pc, #268]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	4940      	ldr	r1, [pc, #256]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	600b      	str	r3, [r1, #0]
 8004d64:	e015      	b.n	8004d92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d66:	4b3f      	ldr	r3, [pc, #252]	; (8004e64 <HAL_RCC_OscConfig+0x2b0>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fe faaa 	bl	80032c4 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d74:	f7fe faa6 	bl	80032c4 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e184      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d86:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d030      	beq.n	8004e00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d016      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004da6:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <HAL_RCC_OscConfig+0x2b4>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fe fa8a 	bl	80032c4 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db4:	f7fe fa86 	bl	80032c4 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e164      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc6:	4b26      	ldr	r3, [pc, #152]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f0      	beq.n	8004db4 <HAL_RCC_OscConfig+0x200>
 8004dd2:	e015      	b.n	8004e00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd4:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <HAL_RCC_OscConfig+0x2b4>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dda:	f7fe fa73 	bl	80032c4 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de2:	f7fe fa6f 	bl	80032c4 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e14d      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df4:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f0      	bne.n	8004de2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 80a0 	beq.w	8004f4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e12:	4b13      	ldr	r3, [pc, #76]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10f      	bne.n	8004e3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	4a0e      	ldr	r2, [pc, #56]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCC_OscConfig+0x2b8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d121      	bne.n	8004e8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e4a:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <HAL_RCC_OscConfig+0x2b8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a07      	ldr	r2, [pc, #28]	; (8004e6c <HAL_RCC_OscConfig+0x2b8>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e56:	f7fe fa35 	bl	80032c4 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5c:	e011      	b.n	8004e82 <HAL_RCC_OscConfig+0x2ce>
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800
 8004e64:	42470000 	.word	0x42470000
 8004e68:	42470e80 	.word	0x42470e80
 8004e6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e70:	f7fe fa28 	bl	80032c4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e106      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e82:	4b85      	ldr	r3, [pc, #532]	; (8005098 <HAL_RCC_OscConfig+0x4e4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d106      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x2f0>
 8004e96:	4b81      	ldr	r3, [pc, #516]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	4a80      	ldr	r2, [pc, #512]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea2:	e01c      	b.n	8004ede <HAL_RCC_OscConfig+0x32a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d10c      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x312>
 8004eac:	4b7b      	ldr	r3, [pc, #492]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	4a7a      	ldr	r2, [pc, #488]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004eb2:	f043 0304 	orr.w	r3, r3, #4
 8004eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb8:	4b78      	ldr	r3, [pc, #480]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	4a77      	ldr	r2, [pc, #476]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec4:	e00b      	b.n	8004ede <HAL_RCC_OscConfig+0x32a>
 8004ec6:	4b75      	ldr	r3, [pc, #468]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	4a74      	ldr	r2, [pc, #464]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed2:	4b72      	ldr	r3, [pc, #456]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	4a71      	ldr	r2, [pc, #452]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004ed8:	f023 0304 	bic.w	r3, r3, #4
 8004edc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d015      	beq.n	8004f12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee6:	f7fe f9ed 	bl	80032c4 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eee:	f7fe f9e9 	bl	80032c4 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e0c5      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f04:	4b65      	ldr	r3, [pc, #404]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0ee      	beq.n	8004eee <HAL_RCC_OscConfig+0x33a>
 8004f10:	e014      	b.n	8004f3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f12:	f7fe f9d7 	bl	80032c4 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f18:	e00a      	b.n	8004f30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1a:	f7fe f9d3 	bl	80032c4 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e0af      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f30:	4b5a      	ldr	r3, [pc, #360]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1ee      	bne.n	8004f1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d105      	bne.n	8004f4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f42:	4b56      	ldr	r3, [pc, #344]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	4a55      	ldr	r2, [pc, #340]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 809b 	beq.w	800508e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f58:	4b50      	ldr	r3, [pc, #320]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 030c 	and.w	r3, r3, #12
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d05c      	beq.n	800501e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d141      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6c:	4b4c      	ldr	r3, [pc, #304]	; (80050a0 <HAL_RCC_OscConfig+0x4ec>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f72:	f7fe f9a7 	bl	80032c4 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7a:	f7fe f9a3 	bl	80032c4 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e081      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8c:	4b43      	ldr	r3, [pc, #268]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f0      	bne.n	8004f7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	019b      	lsls	r3, r3, #6
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	041b      	lsls	r3, r3, #16
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	061b      	lsls	r3, r3, #24
 8004fbc:	4937      	ldr	r1, [pc, #220]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc2:	4b37      	ldr	r3, [pc, #220]	; (80050a0 <HAL_RCC_OscConfig+0x4ec>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fe f97c 	bl	80032c4 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fe f978 	bl	80032c4 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e056      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe2:	4b2e      	ldr	r3, [pc, #184]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x41c>
 8004fee:	e04e      	b.n	800508e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	; (80050a0 <HAL_RCC_OscConfig+0x4ec>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff6:	f7fe f965 	bl	80032c4 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffe:	f7fe f961 	bl	80032c4 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e03f      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005010:	4b22      	ldr	r3, [pc, #136]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f0      	bne.n	8004ffe <HAL_RCC_OscConfig+0x44a>
 800501c:	e037      	b.n	800508e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e032      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800502a:	4b1c      	ldr	r3, [pc, #112]	; (800509c <HAL_RCC_OscConfig+0x4e8>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d028      	beq.n	800508a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005042:	429a      	cmp	r2, r3
 8005044:	d121      	bne.n	800508a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d11a      	bne.n	800508a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800505a:	4013      	ands	r3, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005060:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005062:	4293      	cmp	r3, r2
 8005064:	d111      	bne.n	800508a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	3b01      	subs	r3, #1
 8005074:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d107      	bne.n	800508a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d001      	beq.n	800508e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40007000 	.word	0x40007000
 800509c:	40023800 	.word	0x40023800
 80050a0:	42470060 	.word	0x42470060

080050a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0cc      	b.n	8005252 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b8:	4b68      	ldr	r3, [pc, #416]	; (800525c <HAL_RCC_ClockConfig+0x1b8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d90c      	bls.n	80050e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c6:	4b65      	ldr	r3, [pc, #404]	; (800525c <HAL_RCC_ClockConfig+0x1b8>)
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ce:	4b63      	ldr	r3, [pc, #396]	; (800525c <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d001      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0b8      	b.n	8005252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d020      	beq.n	800512e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f8:	4b59      	ldr	r3, [pc, #356]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	4a58      	ldr	r2, [pc, #352]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005102:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005110:	4b53      	ldr	r3, [pc, #332]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4a52      	ldr	r2, [pc, #328]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800511a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800511c:	4b50      	ldr	r3, [pc, #320]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	494d      	ldr	r1, [pc, #308]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	4313      	orrs	r3, r2
 800512c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d044      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d107      	bne.n	8005152 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005142:	4b47      	ldr	r3, [pc, #284]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d119      	bne.n	8005182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e07f      	b.n	8005252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d003      	beq.n	8005162 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800515e:	2b03      	cmp	r3, #3
 8005160:	d107      	bne.n	8005172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005162:	4b3f      	ldr	r3, [pc, #252]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e06f      	b.n	8005252 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005172:	4b3b      	ldr	r3, [pc, #236]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e067      	b.n	8005252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005182:	4b37      	ldr	r3, [pc, #220]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f023 0203 	bic.w	r2, r3, #3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4934      	ldr	r1, [pc, #208]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005190:	4313      	orrs	r3, r2
 8005192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005194:	f7fe f896 	bl	80032c4 <HAL_GetTick>
 8005198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519a:	e00a      	b.n	80051b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800519c:	f7fe f892 	bl	80032c4 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e04f      	b.n	8005252 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b2:	4b2b      	ldr	r3, [pc, #172]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 020c 	and.w	r2, r3, #12
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d1eb      	bne.n	800519c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051c4:	4b25      	ldr	r3, [pc, #148]	; (800525c <HAL_RCC_ClockConfig+0x1b8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d20c      	bcs.n	80051ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d2:	4b22      	ldr	r3, [pc, #136]	; (800525c <HAL_RCC_ClockConfig+0x1b8>)
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051da:	4b20      	ldr	r3, [pc, #128]	; (800525c <HAL_RCC_ClockConfig+0x1b8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d001      	beq.n	80051ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e032      	b.n	8005252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f8:	4b19      	ldr	r3, [pc, #100]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4916      	ldr	r1, [pc, #88]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	490e      	ldr	r1, [pc, #56]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	4313      	orrs	r3, r2
 8005228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800522a:	f000 f821 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 800522e:	4602      	mov	r2, r0
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <HAL_RCC_ClockConfig+0x1bc>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	490a      	ldr	r1, [pc, #40]	; (8005264 <HAL_RCC_ClockConfig+0x1c0>)
 800523c:	5ccb      	ldrb	r3, [r1, r3]
 800523e:	fa22 f303 	lsr.w	r3, r2, r3
 8005242:	4a09      	ldr	r2, [pc, #36]	; (8005268 <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <HAL_RCC_ClockConfig+0x1c8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f7fd fff6 	bl	800323c <HAL_InitTick>

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40023c00 	.word	0x40023c00
 8005260:	40023800 	.word	0x40023800
 8005264:	0800b424 	.word	0x0800b424
 8005268:	20000024 	.word	0x20000024
 800526c:	20000028 	.word	0x20000028

08005270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	607b      	str	r3, [r7, #4]
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	2300      	movs	r3, #0
 8005282:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005288:	4b67      	ldr	r3, [pc, #412]	; (8005428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 030c 	and.w	r3, r3, #12
 8005290:	2b08      	cmp	r3, #8
 8005292:	d00d      	beq.n	80052b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005294:	2b08      	cmp	r3, #8
 8005296:	f200 80bd 	bhi.w	8005414 <HAL_RCC_GetSysClockFreq+0x1a4>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x34>
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d003      	beq.n	80052aa <HAL_RCC_GetSysClockFreq+0x3a>
 80052a2:	e0b7      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052a4:	4b61      	ldr	r3, [pc, #388]	; (800542c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052a6:	60bb      	str	r3, [r7, #8]
       break;
 80052a8:	e0b7      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052aa:	4b61      	ldr	r3, [pc, #388]	; (8005430 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80052ac:	60bb      	str	r3, [r7, #8]
      break;
 80052ae:	e0b4      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052b0:	4b5d      	ldr	r3, [pc, #372]	; (8005428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ba:	4b5b      	ldr	r3, [pc, #364]	; (8005428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d04d      	beq.n	8005362 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052c6:	4b58      	ldr	r3, [pc, #352]	; (8005428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	099b      	lsrs	r3, r3, #6
 80052cc:	461a      	mov	r2, r3
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	ea02 0800 	and.w	r8, r2, r0
 80052de:	ea03 0901 	and.w	r9, r3, r1
 80052e2:	4640      	mov	r0, r8
 80052e4:	4649      	mov	r1, r9
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	014b      	lsls	r3, r1, #5
 80052f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052f4:	0142      	lsls	r2, r0, #5
 80052f6:	4610      	mov	r0, r2
 80052f8:	4619      	mov	r1, r3
 80052fa:	ebb0 0008 	subs.w	r0, r0, r8
 80052fe:	eb61 0109 	sbc.w	r1, r1, r9
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	018b      	lsls	r3, r1, #6
 800530c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005310:	0182      	lsls	r2, r0, #6
 8005312:	1a12      	subs	r2, r2, r0
 8005314:	eb63 0301 	sbc.w	r3, r3, r1
 8005318:	f04f 0000 	mov.w	r0, #0
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	00d9      	lsls	r1, r3, #3
 8005322:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005326:	00d0      	lsls	r0, r2, #3
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	eb12 0208 	adds.w	r2, r2, r8
 8005330:	eb43 0309 	adc.w	r3, r3, r9
 8005334:	f04f 0000 	mov.w	r0, #0
 8005338:	f04f 0100 	mov.w	r1, #0
 800533c:	0259      	lsls	r1, r3, #9
 800533e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005342:	0250      	lsls	r0, r2, #9
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4610      	mov	r0, r2
 800534a:	4619      	mov	r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	461a      	mov	r2, r3
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	f7fa ff8c 	bl	8000270 <__aeabi_uldivmod>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4613      	mov	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e04a      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005362:	4b31      	ldr	r3, [pc, #196]	; (8005428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	099b      	lsrs	r3, r3, #6
 8005368:	461a      	mov	r2, r3
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005372:	f04f 0100 	mov.w	r1, #0
 8005376:	ea02 0400 	and.w	r4, r2, r0
 800537a:	ea03 0501 	and.w	r5, r3, r1
 800537e:	4620      	mov	r0, r4
 8005380:	4629      	mov	r1, r5
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	014b      	lsls	r3, r1, #5
 800538c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005390:	0142      	lsls	r2, r0, #5
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	1b00      	subs	r0, r0, r4
 8005398:	eb61 0105 	sbc.w	r1, r1, r5
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	018b      	lsls	r3, r1, #6
 80053a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053aa:	0182      	lsls	r2, r0, #6
 80053ac:	1a12      	subs	r2, r2, r0
 80053ae:	eb63 0301 	sbc.w	r3, r3, r1
 80053b2:	f04f 0000 	mov.w	r0, #0
 80053b6:	f04f 0100 	mov.w	r1, #0
 80053ba:	00d9      	lsls	r1, r3, #3
 80053bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053c0:	00d0      	lsls	r0, r2, #3
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	1912      	adds	r2, r2, r4
 80053c8:	eb45 0303 	adc.w	r3, r5, r3
 80053cc:	f04f 0000 	mov.w	r0, #0
 80053d0:	f04f 0100 	mov.w	r1, #0
 80053d4:	0299      	lsls	r1, r3, #10
 80053d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053da:	0290      	lsls	r0, r2, #10
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4610      	mov	r0, r2
 80053e2:	4619      	mov	r1, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	f7fa ff40 	bl	8000270 <__aeabi_uldivmod>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4613      	mov	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053f8:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	60bb      	str	r3, [r7, #8]
      break;
 8005412:	e002      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005416:	60bb      	str	r3, [r7, #8]
      break;
 8005418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800541a:	68bb      	ldr	r3, [r7, #8]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800
 800542c:	00f42400 	.word	0x00f42400
 8005430:	007a1200 	.word	0x007a1200

08005434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005438:	4b03      	ldr	r3, [pc, #12]	; (8005448 <HAL_RCC_GetHCLKFreq+0x14>)
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	4618      	mov	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000024 	.word	0x20000024

0800544c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005450:	f7ff fff0 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0a9b      	lsrs	r3, r3, #10
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4903      	ldr	r1, [pc, #12]	; (8005470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40023800 	.word	0x40023800
 8005470:	0800b434 	.word	0x0800b434

08005474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005478:	f7ff ffdc 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	0b5b      	lsrs	r3, r3, #13
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4903      	ldr	r1, [pc, #12]	; (8005498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40023800 	.word	0x40023800
 8005498:	0800b434 	.word	0x0800b434

0800549c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e07b      	b.n	80055a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d108      	bne.n	80054c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054be:	d009      	beq.n	80054d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	61da      	str	r2, [r3, #28]
 80054c6:	e005      	b.n	80054d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fd fb86 	bl	8002c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800550a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005558:	ea42 0103 	orr.w	r1, r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	0c1b      	lsrs	r3, r3, #16
 8005572:	f003 0104 	and.w	r1, r3, #4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	f003 0210 	and.w	r2, r3, #16
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005594:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b088      	sub	sp, #32
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	603b      	str	r3, [r7, #0]
 80055ba:	4613      	mov	r3, r2
 80055bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_SPI_Transmit+0x22>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e126      	b.n	800581e <HAL_SPI_Transmit+0x270>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d8:	f7fd fe74 	bl	80032c4 <HAL_GetTick>
 80055dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d002      	beq.n	80055f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
 80055f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055f2:	e10b      	b.n	800580c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_SPI_Transmit+0x52>
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005604:	e102      	b.n	800580c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2203      	movs	r2, #3
 800560a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88fa      	ldrh	r2, [r7, #6]
 800561e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564c:	d10f      	bne.n	800566e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d007      	beq.n	800568c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800568a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005694:	d14b      	bne.n	800572e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <HAL_SPI_Transmit+0xf6>
 800569e:	8afb      	ldrh	r3, [r7, #22]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d13e      	bne.n	8005722 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	881a      	ldrh	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	1c9a      	adds	r2, r3, #2
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056c8:	e02b      	b.n	8005722 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d112      	bne.n	80056fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	881a      	ldrh	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	1c9a      	adds	r2, r3, #2
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80056fc:	e011      	b.n	8005722 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056fe:	f7fd fde1 	bl	80032c4 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d803      	bhi.n	8005716 <HAL_SPI_Transmit+0x168>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d102      	bne.n	800571c <HAL_SPI_Transmit+0x16e>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005720:	e074      	b.n	800580c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1ce      	bne.n	80056ca <HAL_SPI_Transmit+0x11c>
 800572c:	e04c      	b.n	80057c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_SPI_Transmit+0x18e>
 8005736:	8afb      	ldrh	r3, [r7, #22]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d140      	bne.n	80057be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005762:	e02c      	b.n	80057be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b02      	cmp	r3, #2
 8005770:	d113      	bne.n	800579a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	7812      	ldrb	r2, [r2, #0]
 800577e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	86da      	strh	r2, [r3, #54]	; 0x36
 8005798:	e011      	b.n	80057be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800579a:	f7fd fd93 	bl	80032c4 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d803      	bhi.n	80057b2 <HAL_SPI_Transmit+0x204>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d102      	bne.n	80057b8 <HAL_SPI_Transmit+0x20a>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057bc:	e026      	b.n	800580c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1cd      	bne.n	8005764 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 fbcb 	bl	8005f68 <SPI_EndRxTxTransaction>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e000      	b.n	800580c <HAL_SPI_Transmit+0x25e>
  }

error:
 800580a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800581c:	7ffb      	ldrb	r3, [r7, #31]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b088      	sub	sp, #32
 800582a:	af02      	add	r7, sp, #8
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	603b      	str	r3, [r7, #0]
 8005832:	4613      	mov	r3, r2
 8005834:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005842:	d112      	bne.n	800586a <HAL_SPI_Receive+0x44>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10e      	bne.n	800586a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2204      	movs	r2, #4
 8005850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f8f1 	bl	8005a48 <HAL_SPI_TransmitReceive>
 8005866:	4603      	mov	r3, r0
 8005868:	e0ea      	b.n	8005a40 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_SPI_Receive+0x52>
 8005874:	2302      	movs	r3, #2
 8005876:	e0e3      	b.n	8005a40 <HAL_SPI_Receive+0x21a>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005880:	f7fd fd20 	bl	80032c4 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b01      	cmp	r3, #1
 8005890:	d002      	beq.n	8005898 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005892:	2302      	movs	r3, #2
 8005894:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005896:	e0ca      	b.n	8005a2e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_SPI_Receive+0x7e>
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058a8:	e0c1      	b.n	8005a2e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2204      	movs	r2, #4
 80058ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	88fa      	ldrh	r2, [r7, #6]
 80058c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	88fa      	ldrh	r2, [r7, #6]
 80058c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f0:	d10f      	bne.n	8005912 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005900:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005910:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b40      	cmp	r3, #64	; 0x40
 800591e:	d007      	beq.n	8005930 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800592e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d162      	bne.n	80059fe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005938:	e02e      	b.n	8005998 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b01      	cmp	r3, #1
 8005946:	d115      	bne.n	8005974 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f103 020c 	add.w	r2, r3, #12
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005954:	7812      	ldrb	r2, [r2, #0]
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005972:	e011      	b.n	8005998 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005974:	f7fd fca6 	bl	80032c4 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d803      	bhi.n	800598c <HAL_SPI_Receive+0x166>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598a:	d102      	bne.n	8005992 <HAL_SPI_Receive+0x16c>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005996:	e04a      	b.n	8005a2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1cb      	bne.n	800593a <HAL_SPI_Receive+0x114>
 80059a2:	e031      	b.n	8005a08 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d113      	bne.n	80059da <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	b292      	uxth	r2, r2
 80059be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	1c9a      	adds	r2, r3, #2
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059d8:	e011      	b.n	80059fe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059da:	f7fd fc73 	bl	80032c4 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d803      	bhi.n	80059f2 <HAL_SPI_Receive+0x1cc>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d102      	bne.n	80059f8 <HAL_SPI_Receive+0x1d2>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d102      	bne.n	80059fe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059fc:	e017      	b.n	8005a2e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1cd      	bne.n	80059a4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 fa45 	bl	8005e9c <SPI_EndRxTransaction>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	75fb      	strb	r3, [r7, #23]
 8005a2a:	e000      	b.n	8005a2e <HAL_SPI_Receive+0x208>
  }

error :
 8005a2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08c      	sub	sp, #48	; 0x30
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a56:	2301      	movs	r3, #1
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_SPI_TransmitReceive+0x26>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e18a      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x33c>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a76:	f7fd fc25 	bl	80032c4 <HAL_GetTick>
 8005a7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a8c:	887b      	ldrh	r3, [r7, #2]
 8005a8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d00f      	beq.n	8005ab8 <HAL_SPI_TransmitReceive+0x70>
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a9e:	d107      	bne.n	8005ab0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d103      	bne.n	8005ab0 <HAL_SPI_TransmitReceive+0x68>
 8005aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d003      	beq.n	8005ab8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ab6:	e15b      	b.n	8005d70 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_SPI_TransmitReceive+0x82>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_SPI_TransmitReceive+0x82>
 8005ac4:	887b      	ldrh	r3, [r7, #2]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d103      	bne.n	8005ad2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ad0:	e14e      	b.n	8005d70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d003      	beq.n	8005ae6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2205      	movs	r2, #5
 8005ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	887a      	ldrh	r2, [r7, #2]
 8005af6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	887a      	ldrh	r2, [r7, #2]
 8005afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	887a      	ldrh	r2, [r7, #2]
 8005b08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	887a      	ldrh	r2, [r7, #2]
 8005b0e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d007      	beq.n	8005b3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b42:	d178      	bne.n	8005c36 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <HAL_SPI_TransmitReceive+0x10a>
 8005b4c:	8b7b      	ldrh	r3, [r7, #26]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d166      	bne.n	8005c20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	881a      	ldrh	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	1c9a      	adds	r2, r3, #2
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b76:	e053      	b.n	8005c20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d11b      	bne.n	8005bbe <HAL_SPI_TransmitReceive+0x176>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d016      	beq.n	8005bbe <HAL_SPI_TransmitReceive+0x176>
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d113      	bne.n	8005bbe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	881a      	ldrh	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	1c9a      	adds	r2, r3, #2
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d119      	bne.n	8005c00 <HAL_SPI_TransmitReceive+0x1b8>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d014      	beq.n	8005c00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	b292      	uxth	r2, r2
 8005be2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	1c9a      	adds	r2, r3, #2
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c00:	f7fd fb60 	bl	80032c4 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d807      	bhi.n	8005c20 <HAL_SPI_TransmitReceive+0x1d8>
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d003      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c1e:	e0a7      	b.n	8005d70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1a6      	bne.n	8005b78 <HAL_SPI_TransmitReceive+0x130>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1a1      	bne.n	8005b78 <HAL_SPI_TransmitReceive+0x130>
 8005c34:	e07c      	b.n	8005d30 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_SPI_TransmitReceive+0x1fc>
 8005c3e:	8b7b      	ldrh	r3, [r7, #26]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d16b      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	7812      	ldrb	r2, [r2, #0]
 8005c50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c6a:	e057      	b.n	8005d1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d11c      	bne.n	8005cb4 <HAL_SPI_TransmitReceive+0x26c>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d017      	beq.n	8005cb4 <HAL_SPI_TransmitReceive+0x26c>
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d114      	bne.n	8005cb4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	7812      	ldrb	r2, [r2, #0]
 8005c96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d119      	bne.n	8005cf6 <HAL_SPI_TransmitReceive+0x2ae>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d014      	beq.n	8005cf6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cf6:	f7fd fae5 	bl	80032c4 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d803      	bhi.n	8005d0e <HAL_SPI_TransmitReceive+0x2c6>
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0c:	d102      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x2cc>
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d103      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d1a:	e029      	b.n	8005d70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1a2      	bne.n	8005c6c <HAL_SPI_TransmitReceive+0x224>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d19d      	bne.n	8005c6c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f917 	bl	8005f68 <SPI_EndRxTxTransaction>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d006      	beq.n	8005d4e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d4c:	e010      	b.n	8005d70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10b      	bne.n	8005d6e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	e000      	b.n	8005d70 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3730      	adds	r7, #48	; 0x30
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d9c:	f7fd fa92 	bl	80032c4 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	4413      	add	r3, r2
 8005daa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dac:	f7fd fa8a 	bl	80032c4 <HAL_GetTick>
 8005db0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005db2:	4b39      	ldr	r3, [pc, #228]	; (8005e98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	015b      	lsls	r3, r3, #5
 8005db8:	0d1b      	lsrs	r3, r3, #20
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	fb02 f303 	mul.w	r3, r2, r3
 8005dc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dc2:	e054      	b.n	8005e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d050      	beq.n	8005e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dcc:	f7fd fa7a 	bl	80032c4 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d902      	bls.n	8005de2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d13d      	bne.n	8005e5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005df0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dfa:	d111      	bne.n	8005e20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e04:	d004      	beq.n	8005e10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0e:	d107      	bne.n	8005e20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e28:	d10f      	bne.n	8005e4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e017      	b.n	8005e8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4013      	ands	r3, r2
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	bf0c      	ite	eq
 8005e7e:	2301      	moveq	r3, #1
 8005e80:	2300      	movne	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d19b      	bne.n	8005dc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000024 	.word	0x20000024

08005e9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb0:	d111      	bne.n	8005ed6 <SPI_EndRxTransaction+0x3a>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eba:	d004      	beq.n	8005ec6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec4:	d107      	bne.n	8005ed6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ede:	d12a      	bne.n	8005f36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee8:	d012      	beq.n	8005f10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2180      	movs	r1, #128	; 0x80
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f7ff ff49 	bl	8005d8c <SPI_WaitFlagStateUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d02d      	beq.n	8005f5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f04:	f043 0220 	orr.w	r2, r3, #32
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e026      	b.n	8005f5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2200      	movs	r2, #0
 8005f18:	2101      	movs	r1, #1
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7ff ff36 	bl	8005d8c <SPI_WaitFlagStateUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d01a      	beq.n	8005f5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2a:	f043 0220 	orr.w	r2, r3, #32
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e013      	b.n	8005f5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2101      	movs	r1, #1
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7ff ff23 	bl	8005d8c <SPI_WaitFlagStateUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f50:	f043 0220 	orr.w	r2, r3, #32
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e000      	b.n	8005f5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f74:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <SPI_EndRxTxTransaction+0x7c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <SPI_EndRxTxTransaction+0x80>)
 8005f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7e:	0d5b      	lsrs	r3, r3, #21
 8005f80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f92:	d112      	bne.n	8005fba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2180      	movs	r1, #128	; 0x80
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f7ff fef4 	bl	8005d8c <SPI_WaitFlagStateUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d016      	beq.n	8005fd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e00f      	b.n	8005fda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd0:	2b80      	cmp	r3, #128	; 0x80
 8005fd2:	d0f2      	beq.n	8005fba <SPI_EndRxTxTransaction+0x52>
 8005fd4:	e000      	b.n	8005fd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005fd6:	bf00      	nop
  }

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000024 	.word	0x20000024
 8005fe8:	165e9f81 	.word	0x165e9f81

08005fec <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e034      	b.n	800606c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7fa fcae 	bl	8000978 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3308      	adds	r3, #8
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f001 fc6e 	bl	8007908 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	461a      	mov	r2, r3
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	f001 fcb8 	bl	80079ac <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6858      	ldr	r0, [r3, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	f001 fced 	bl	8007a28 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	6892      	ldr	r2, [r2, #8]
 8006056:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	6892      	ldr	r2, [r2, #8]
 8006062:	f041 0101 	orr.w	r1, r1, #1
 8006066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e041      	b.n	800610a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fc fef2 	bl	8002e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3304      	adds	r3, #4
 80060b0:	4619      	mov	r1, r3
 80060b2:	4610      	mov	r0, r2
 80060b4:	f000 fa96 	bl	80065e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d001      	beq.n	800612c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e04e      	b.n	80061ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a23      	ldr	r2, [pc, #140]	; (80061d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d022      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006156:	d01d      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <HAL_TIM_Base_Start_IT+0xc8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d018      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1c      	ldr	r2, [pc, #112]	; (80061e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00e      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1b      	ldr	r2, [pc, #108]	; (80061e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d009      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a19      	ldr	r2, [pc, #100]	; (80061ec <HAL_TIM_Base_Start_IT+0xd8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d004      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x80>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a18      	ldr	r2, [pc, #96]	; (80061f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d111      	bne.n	80061b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b06      	cmp	r3, #6
 80061a4:	d010      	beq.n	80061c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b6:	e007      	b.n	80061c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40010000 	.word	0x40010000
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800
 80061e4:	40000c00 	.word	0x40000c00
 80061e8:	40010400 	.word	0x40010400
 80061ec:	40014000 	.word	0x40014000
 80061f0:	40001800 	.word	0x40001800

080061f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b02      	cmp	r3, #2
 8006208:	d122      	bne.n	8006250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b02      	cmp	r3, #2
 8006216:	d11b      	bne.n	8006250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0202 	mvn.w	r2, #2
 8006220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9b5 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f9a7 	bl	8006592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f9b8 	bl	80065ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b04      	cmp	r3, #4
 800625c:	d122      	bne.n	80062a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b04      	cmp	r3, #4
 800626a:	d11b      	bne.n	80062a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0204 	mvn.w	r2, #4
 8006274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f98b 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 8006290:	e005      	b.n	800629e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f97d 	bl	8006592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f98e 	bl	80065ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d122      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d11b      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0208 	mvn.w	r2, #8
 80062c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2204      	movs	r2, #4
 80062ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f961 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 80062e4:	e005      	b.n	80062f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f953 	bl	8006592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f964 	bl	80065ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b10      	cmp	r3, #16
 8006304:	d122      	bne.n	800634c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b10      	cmp	r3, #16
 8006312:	d11b      	bne.n	800634c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0210 	mvn.w	r2, #16
 800631c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2208      	movs	r2, #8
 8006322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f937 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 8006338:	e005      	b.n	8006346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f929 	bl	8006592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f93a 	bl	80065ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b01      	cmp	r3, #1
 8006358:	d10e      	bne.n	8006378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b01      	cmp	r3, #1
 8006366:	d107      	bne.n	8006378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0201 	mvn.w	r2, #1
 8006370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fc fbe4 	bl	8002b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	2b80      	cmp	r3, #128	; 0x80
 8006384:	d10e      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006390:	2b80      	cmp	r3, #128	; 0x80
 8006392:	d107      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800639c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fae0 	bl	8006964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ae:	2b40      	cmp	r3, #64	; 0x40
 80063b0:	d10e      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063bc:	2b40      	cmp	r3, #64	; 0x40
 80063be:	d107      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f8ff 	bl	80065ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d10e      	bne.n	80063fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d107      	bne.n	80063fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0220 	mvn.w	r2, #32
 80063f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 faaa 	bl	8006950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_TIM_ConfigClockSource+0x1c>
 800641c:	2302      	movs	r3, #2
 800641e:	e0b4      	b.n	800658a <HAL_TIM_ConfigClockSource+0x186>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800643e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006458:	d03e      	beq.n	80064d8 <HAL_TIM_ConfigClockSource+0xd4>
 800645a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645e:	f200 8087 	bhi.w	8006570 <HAL_TIM_ConfigClockSource+0x16c>
 8006462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006466:	f000 8086 	beq.w	8006576 <HAL_TIM_ConfigClockSource+0x172>
 800646a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646e:	d87f      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x16c>
 8006470:	2b70      	cmp	r3, #112	; 0x70
 8006472:	d01a      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0xa6>
 8006474:	2b70      	cmp	r3, #112	; 0x70
 8006476:	d87b      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x16c>
 8006478:	2b60      	cmp	r3, #96	; 0x60
 800647a:	d050      	beq.n	800651e <HAL_TIM_ConfigClockSource+0x11a>
 800647c:	2b60      	cmp	r3, #96	; 0x60
 800647e:	d877      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x16c>
 8006480:	2b50      	cmp	r3, #80	; 0x50
 8006482:	d03c      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0xfa>
 8006484:	2b50      	cmp	r3, #80	; 0x50
 8006486:	d873      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x16c>
 8006488:	2b40      	cmp	r3, #64	; 0x40
 800648a:	d058      	beq.n	800653e <HAL_TIM_ConfigClockSource+0x13a>
 800648c:	2b40      	cmp	r3, #64	; 0x40
 800648e:	d86f      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x16c>
 8006490:	2b30      	cmp	r3, #48	; 0x30
 8006492:	d064      	beq.n	800655e <HAL_TIM_ConfigClockSource+0x15a>
 8006494:	2b30      	cmp	r3, #48	; 0x30
 8006496:	d86b      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x16c>
 8006498:	2b20      	cmp	r3, #32
 800649a:	d060      	beq.n	800655e <HAL_TIM_ConfigClockSource+0x15a>
 800649c:	2b20      	cmp	r3, #32
 800649e:	d867      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x16c>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d05c      	beq.n	800655e <HAL_TIM_ConfigClockSource+0x15a>
 80064a4:	2b10      	cmp	r3, #16
 80064a6:	d05a      	beq.n	800655e <HAL_TIM_ConfigClockSource+0x15a>
 80064a8:	e062      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6899      	ldr	r1, [r3, #8]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f000 f9ad 	bl	8006818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	609a      	str	r2, [r3, #8]
      break;
 80064d6:	e04f      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6818      	ldr	r0, [r3, #0]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	6899      	ldr	r1, [r3, #8]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f000 f996 	bl	8006818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064fa:	609a      	str	r2, [r3, #8]
      break;
 80064fc:	e03c      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	6859      	ldr	r1, [r3, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	461a      	mov	r2, r3
 800650c:	f000 f90a 	bl	8006724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2150      	movs	r1, #80	; 0x50
 8006516:	4618      	mov	r0, r3
 8006518:	f000 f963 	bl	80067e2 <TIM_ITRx_SetConfig>
      break;
 800651c:	e02c      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6818      	ldr	r0, [r3, #0]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	6859      	ldr	r1, [r3, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	461a      	mov	r2, r3
 800652c:	f000 f929 	bl	8006782 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2160      	movs	r1, #96	; 0x60
 8006536:	4618      	mov	r0, r3
 8006538:	f000 f953 	bl	80067e2 <TIM_ITRx_SetConfig>
      break;
 800653c:	e01c      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	6859      	ldr	r1, [r3, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	461a      	mov	r2, r3
 800654c:	f000 f8ea 	bl	8006724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2140      	movs	r1, #64	; 0x40
 8006556:	4618      	mov	r0, r3
 8006558:	f000 f943 	bl	80067e2 <TIM_ITRx_SetConfig>
      break;
 800655c:	e00c      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4619      	mov	r1, r3
 8006568:	4610      	mov	r0, r2
 800656a:	f000 f93a 	bl	80067e2 <TIM_ITRx_SetConfig>
      break;
 800656e:	e003      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
      break;
 8006574:	e000      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006588:	7bfb      	ldrb	r3, [r7, #15]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b083      	sub	sp, #12
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
	...

080065e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a40      	ldr	r2, [pc, #256]	; (80066f8 <TIM_Base_SetConfig+0x114>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d013      	beq.n	8006624 <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006602:	d00f      	beq.n	8006624 <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a3d      	ldr	r2, [pc, #244]	; (80066fc <TIM_Base_SetConfig+0x118>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00b      	beq.n	8006624 <TIM_Base_SetConfig+0x40>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a3c      	ldr	r2, [pc, #240]	; (8006700 <TIM_Base_SetConfig+0x11c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d007      	beq.n	8006624 <TIM_Base_SetConfig+0x40>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a3b      	ldr	r2, [pc, #236]	; (8006704 <TIM_Base_SetConfig+0x120>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_Base_SetConfig+0x40>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a3a      	ldr	r2, [pc, #232]	; (8006708 <TIM_Base_SetConfig+0x124>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d108      	bne.n	8006636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2f      	ldr	r2, [pc, #188]	; (80066f8 <TIM_Base_SetConfig+0x114>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d02b      	beq.n	8006696 <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006644:	d027      	beq.n	8006696 <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a2c      	ldr	r2, [pc, #176]	; (80066fc <TIM_Base_SetConfig+0x118>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d023      	beq.n	8006696 <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a2b      	ldr	r2, [pc, #172]	; (8006700 <TIM_Base_SetConfig+0x11c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01f      	beq.n	8006696 <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a2a      	ldr	r2, [pc, #168]	; (8006704 <TIM_Base_SetConfig+0x120>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01b      	beq.n	8006696 <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a29      	ldr	r2, [pc, #164]	; (8006708 <TIM_Base_SetConfig+0x124>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d017      	beq.n	8006696 <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a28      	ldr	r2, [pc, #160]	; (800670c <TIM_Base_SetConfig+0x128>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a27      	ldr	r2, [pc, #156]	; (8006710 <TIM_Base_SetConfig+0x12c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00f      	beq.n	8006696 <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a26      	ldr	r2, [pc, #152]	; (8006714 <TIM_Base_SetConfig+0x130>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00b      	beq.n	8006696 <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a25      	ldr	r2, [pc, #148]	; (8006718 <TIM_Base_SetConfig+0x134>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a24      	ldr	r2, [pc, #144]	; (800671c <TIM_Base_SetConfig+0x138>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a23      	ldr	r2, [pc, #140]	; (8006720 <TIM_Base_SetConfig+0x13c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d108      	bne.n	80066a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a0a      	ldr	r2, [pc, #40]	; (80066f8 <TIM_Base_SetConfig+0x114>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d003      	beq.n	80066dc <TIM_Base_SetConfig+0xf8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a0c      	ldr	r2, [pc, #48]	; (8006708 <TIM_Base_SetConfig+0x124>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d103      	bne.n	80066e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	615a      	str	r2, [r3, #20]
}
 80066ea:	bf00      	nop
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40010000 	.word	0x40010000
 80066fc:	40000400 	.word	0x40000400
 8006700:	40000800 	.word	0x40000800
 8006704:	40000c00 	.word	0x40000c00
 8006708:	40010400 	.word	0x40010400
 800670c:	40014000 	.word	0x40014000
 8006710:	40014400 	.word	0x40014400
 8006714:	40014800 	.word	0x40014800
 8006718:	40001800 	.word	0x40001800
 800671c:	40001c00 	.word	0x40001c00
 8006720:	40002000 	.word	0x40002000

08006724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	f023 0201 	bic.w	r2, r3, #1
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800674e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f023 030a 	bic.w	r3, r3, #10
 8006760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	621a      	str	r2, [r3, #32]
}
 8006776:	bf00      	nop
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006782:	b480      	push	{r7}
 8006784:	b087      	sub	sp, #28
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f023 0210 	bic.w	r2, r3, #16
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	031b      	lsls	r3, r3, #12
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	f043 0307 	orr.w	r3, r3, #7
 8006804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	609a      	str	r2, [r3, #8]
}
 800680c:	bf00      	nop
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	021a      	lsls	r2, r3, #8
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	431a      	orrs	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4313      	orrs	r3, r2
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	609a      	str	r2, [r3, #8]
}
 800684c:	bf00      	nop
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800686c:	2302      	movs	r3, #2
 800686e:	e05a      	b.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a21      	ldr	r2, [pc, #132]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d022      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068bc:	d01d      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1d      	ldr	r2, [pc, #116]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d018      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1b      	ldr	r2, [pc, #108]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1a      	ldr	r2, [pc, #104]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00e      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a18      	ldr	r2, [pc, #96]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d009      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a17      	ldr	r2, [pc, #92]	; (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d004      	beq.n	80068fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a15      	ldr	r2, [pc, #84]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d10c      	bne.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	4313      	orrs	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40010000 	.word	0x40010000
 8006938:	40000400 	.word	0x40000400
 800693c:	40000800 	.word	0x40000800
 8006940:	40000c00 	.word	0x40000c00
 8006944:	40010400 	.word	0x40010400
 8006948:	40014000 	.word	0x40014000
 800694c:	40001800 	.word	0x40001800

08006950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e03f      	b.n	8006a0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fc fb72 	bl	8003088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2224      	movs	r2, #36	; 0x24
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fddb 	bl	8007578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695a      	ldr	r2, [r3, #20]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b08a      	sub	sp, #40	; 0x28
 8006a16:	af02      	add	r7, sp, #8
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d17c      	bne.n	8006b2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <HAL_UART_Transmit+0x2c>
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e075      	b.n	8006b2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_UART_Transmit+0x3e>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e06e      	b.n	8006b2e <HAL_UART_Transmit+0x11c>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2221      	movs	r2, #33	; 0x21
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a66:	f7fc fc2d 	bl	80032c4 <HAL_GetTick>
 8006a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	88fa      	ldrh	r2, [r7, #6]
 8006a70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a80:	d108      	bne.n	8006a94 <HAL_UART_Transmit+0x82>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d104      	bne.n	8006a94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	e003      	b.n	8006a9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006aa4:	e02a      	b.n	8006afc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2200      	movs	r2, #0
 8006aae:	2180      	movs	r1, #128	; 0x80
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fb1f 	bl	80070f4 <UART_WaitOnFlagUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e036      	b.n	8006b2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10b      	bne.n	8006ade <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ad4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	3302      	adds	r3, #2
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	e007      	b.n	8006aee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	3301      	adds	r3, #1
 8006aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1cf      	bne.n	8006aa6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2140      	movs	r1, #64	; 0x40
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 faef 	bl	80070f4 <UART_WaitOnFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e006      	b.n	8006b2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e000      	b.n	8006b2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b2c:	2302      	movs	r3, #2
  }
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3720      	adds	r7, #32
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	4613      	mov	r3, r2
 8006b42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d11d      	bne.n	8006b8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <HAL_UART_Receive_IT+0x26>
 8006b56:	88fb      	ldrh	r3, [r7, #6]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e016      	b.n	8006b8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_UART_Receive_IT+0x38>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e00f      	b.n	8006b8e <HAL_UART_Receive_IT+0x58>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b7c:	88fb      	ldrh	r3, [r7, #6]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 fb24 	bl	80071d0 <UART_Start_Receive_IT>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	e000      	b.n	8006b8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006b8c:	2302      	movs	r3, #2
  }
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b0ba      	sub	sp, #232	; 0xe8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10f      	bne.n	8006bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <HAL_UART_IRQHandler+0x66>
 8006bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fc03 	bl	8007402 <UART_Receive_IT>
      return;
 8006bfc:	e256      	b.n	80070ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 80de 	beq.w	8006dc4 <HAL_UART_IRQHandler+0x22c>
 8006c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d106      	bne.n	8006c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 80d1 	beq.w	8006dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00b      	beq.n	8006c46 <HAL_UART_IRQHandler+0xae>
 8006c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d005      	beq.n	8006c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	f043 0201 	orr.w	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00b      	beq.n	8006c6a <HAL_UART_IRQHandler+0xd2>
 8006c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d005      	beq.n	8006c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	f043 0202 	orr.w	r2, r3, #2
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <HAL_UART_IRQHandler+0xf6>
 8006c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f043 0204 	orr.w	r2, r3, #4
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d011      	beq.n	8006cbe <HAL_UART_IRQHandler+0x126>
 8006c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d105      	bne.n	8006cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	f043 0208 	orr.w	r2, r3, #8
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 81ed 	beq.w	80070a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d008      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x14e>
 8006cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fb8e 	bl	8007402 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	bf0c      	ite	eq
 8006cf4:	2301      	moveq	r3, #1
 8006cf6:	2300      	movne	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	f003 0308 	and.w	r3, r3, #8
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d103      	bne.n	8006d12 <HAL_UART_IRQHandler+0x17a>
 8006d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d04f      	beq.n	8006db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fa96 	bl	8007244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	2b40      	cmp	r3, #64	; 0x40
 8006d24:	d141      	bne.n	8006daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3314      	adds	r3, #20
 8006d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3314      	adds	r3, #20
 8006d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1d9      	bne.n	8006d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d013      	beq.n	8006da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	4a7d      	ldr	r2, [pc, #500]	; (8006f74 <HAL_UART_IRQHandler+0x3dc>)
 8006d80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fc fc4d 	bl	8003626 <HAL_DMA_Abort_IT>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da0:	e00e      	b.n	8006dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f990 	bl	80070c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da8:	e00a      	b.n	8006dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f98c 	bl	80070c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db0:	e006      	b.n	8006dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f988 	bl	80070c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006dbe:	e170      	b.n	80070a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc0:	bf00      	nop
    return;
 8006dc2:	e16e      	b.n	80070a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	f040 814a 	bne.w	8007062 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 8143 	beq.w	8007062 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de0:	f003 0310 	and.w	r3, r3, #16
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 813c 	beq.w	8007062 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dea:	2300      	movs	r3, #0
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60bb      	str	r3, [r7, #8]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0a:	2b40      	cmp	r3, #64	; 0x40
 8006e0c:	f040 80b4 	bne.w	8006f78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 8140 	beq.w	80070a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	f080 8139 	bcs.w	80070a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e46:	f000 8088 	beq.w	8006f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	330c      	adds	r3, #12
 8006e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	330c      	adds	r3, #12
 8006e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1d9      	bne.n	8006e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3314      	adds	r3, #20
 8006e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3314      	adds	r3, #20
 8006eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e1      	bne.n	8006e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3314      	adds	r3, #20
 8006ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3314      	adds	r3, #20
 8006ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ef8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e3      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	330c      	adds	r3, #12
 8006f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2a:	f023 0310 	bic.w	r3, r3, #16
 8006f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	330c      	adds	r3, #12
 8006f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e3      	bne.n	8006f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fc faf6 	bl	8003546 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f8b6 	bl	80070dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f70:	e099      	b.n	80070a6 <HAL_UART_IRQHandler+0x50e>
 8006f72:	bf00      	nop
 8006f74:	0800730b 	.word	0x0800730b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 808b 	beq.w	80070aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8086 	beq.w	80070aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	330c      	adds	r3, #12
 8006fbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006fc2:	647a      	str	r2, [r7, #68]	; 0x44
 8006fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e3      	bne.n	8006f9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3314      	adds	r3, #20
 8006fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	f023 0301 	bic.w	r3, r3, #1
 8006fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3314      	adds	r3, #20
 8006ff6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ffa:	633a      	str	r2, [r7, #48]	; 0x30
 8006ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e3      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	330c      	adds	r3, #12
 8007022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	60fb      	str	r3, [r7, #12]
   return(result);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0310 	bic.w	r3, r3, #16
 8007032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007040:	61fa      	str	r2, [r7, #28]
 8007042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	69b9      	ldr	r1, [r7, #24]
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	617b      	str	r3, [r7, #20]
   return(result);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e3      	bne.n	800701c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f83e 	bl	80070dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007060:	e023      	b.n	80070aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <HAL_UART_IRQHandler+0x4ea>
 800706e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f959 	bl	8007332 <UART_Transmit_IT>
    return;
 8007080:	e014      	b.n	80070ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00e      	beq.n	80070ac <HAL_UART_IRQHandler+0x514>
 800708e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d008      	beq.n	80070ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f999 	bl	80073d2 <UART_EndTransmit_IT>
    return;
 80070a0:	e004      	b.n	80070ac <HAL_UART_IRQHandler+0x514>
    return;
 80070a2:	bf00      	nop
 80070a4:	e002      	b.n	80070ac <HAL_UART_IRQHandler+0x514>
      return;
 80070a6:	bf00      	nop
 80070a8:	e000      	b.n	80070ac <HAL_UART_IRQHandler+0x514>
      return;
 80070aa:	bf00      	nop
  }
}
 80070ac:	37e8      	adds	r7, #232	; 0xe8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop

080070b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b090      	sub	sp, #64	; 0x40
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	4613      	mov	r3, r2
 8007102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007104:	e050      	b.n	80071a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d04c      	beq.n	80071a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800710e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <UART_WaitOnFlagUntilTimeout+0x30>
 8007114:	f7fc f8d6 	bl	80032c4 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007120:	429a      	cmp	r2, r3
 8007122:	d241      	bcs.n	80071a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	330c      	adds	r3, #12
 800712a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	e853 3f00 	ldrex	r3, [r3]
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	330c      	adds	r3, #12
 8007142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007144:	637a      	str	r2, [r7, #52]	; 0x34
 8007146:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800714a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e5      	bne.n	8007124 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3314      	adds	r3, #20
 800715e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	613b      	str	r3, [r7, #16]
   return(result);
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3314      	adds	r3, #20
 8007176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007178:	623a      	str	r2, [r7, #32]
 800717a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	69f9      	ldr	r1, [r7, #28]
 800717e:	6a3a      	ldr	r2, [r7, #32]
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	61bb      	str	r3, [r7, #24]
   return(result);
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e5      	bne.n	8007158 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2220      	movs	r2, #32
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e00f      	b.n	80071c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	4013      	ands	r3, r2
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	bf0c      	ite	eq
 80071b8:	2301      	moveq	r3, #1
 80071ba:	2300      	movne	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d09f      	beq.n	8007106 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3740      	adds	r7, #64	; 0x40
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	4613      	mov	r3, r2
 80071dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	88fa      	ldrh	r2, [r7, #6]
 80071ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2222      	movs	r2, #34	; 0x22
 80071fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007214:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695a      	ldr	r2, [r3, #20]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0201 	orr.w	r2, r2, #1
 8007224:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f042 0220 	orr.w	r2, r2, #32
 8007234:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b095      	sub	sp, #84	; 0x54
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	330c      	adds	r3, #12
 800726a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800726c:	643a      	str	r2, [r7, #64]	; 0x40
 800726e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e5      	bne.n	800724c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3314      	adds	r3, #20
 8007286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f023 0301 	bic.w	r3, r3, #1
 8007296:	64bb      	str	r3, [r7, #72]	; 0x48
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3314      	adds	r3, #20
 800729e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e5      	bne.n	8007280 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d119      	bne.n	80072f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	330c      	adds	r3, #12
 80072c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f023 0310 	bic.w	r3, r3, #16
 80072d2:	647b      	str	r3, [r7, #68]	; 0x44
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072dc:	61ba      	str	r2, [r7, #24]
 80072de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e0:	6979      	ldr	r1, [r7, #20]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	e841 2300 	strex	r3, r2, [r1]
 80072e8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e5      	bne.n	80072bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80072fe:	bf00      	nop
 8007300:	3754      	adds	r7, #84	; 0x54
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff fecf 	bl	80070c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007332:	b480      	push	{r7}
 8007334:	b085      	sub	sp, #20
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b21      	cmp	r3, #33	; 0x21
 8007344:	d13e      	bne.n	80073c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734e:	d114      	bne.n	800737a <UART_Transmit_IT+0x48>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d110      	bne.n	800737a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800736c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	1c9a      	adds	r2, r3, #2
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	621a      	str	r2, [r3, #32]
 8007378:	e008      	b.n	800738c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	1c59      	adds	r1, r3, #1
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6211      	str	r1, [r2, #32]
 8007384:	781a      	ldrb	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007390:	b29b      	uxth	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	b29b      	uxth	r3, r3
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	4619      	mov	r1, r3
 800739a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10f      	bne.n	80073c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	e000      	b.n	80073c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073c4:	2302      	movs	r3, #2
  }
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2220      	movs	r2, #32
 80073ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff fe5e 	bl	80070b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b08c      	sub	sp, #48	; 0x30
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b22      	cmp	r3, #34	; 0x22
 8007414:	f040 80ab 	bne.w	800756e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007420:	d117      	bne.n	8007452 <UART_Receive_IT+0x50>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d113      	bne.n	8007452 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	b29b      	uxth	r3, r3
 800743c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007440:	b29a      	uxth	r2, r3
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	1c9a      	adds	r2, r3, #2
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	629a      	str	r2, [r3, #40]	; 0x28
 8007450:	e026      	b.n	80074a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007458:	2300      	movs	r3, #0
 800745a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007464:	d007      	beq.n	8007476 <UART_Receive_IT+0x74>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <UART_Receive_IT+0x82>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	b2da      	uxtb	r2, r3
 800747e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	e008      	b.n	8007496 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007490:	b2da      	uxtb	r2, r3
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	4619      	mov	r1, r3
 80074ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d15a      	bne.n	800756a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0220 	bic.w	r2, r2, #32
 80074c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68da      	ldr	r2, [r3, #12]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695a      	ldr	r2, [r3, #20]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0201 	bic.w	r2, r2, #1
 80074e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2220      	movs	r2, #32
 80074e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d135      	bne.n	8007560 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	330c      	adds	r3, #12
 8007500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	613b      	str	r3, [r7, #16]
   return(result);
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f023 0310 	bic.w	r3, r3, #16
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	330c      	adds	r3, #12
 8007518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800751a:	623a      	str	r2, [r7, #32]
 800751c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	69f9      	ldr	r1, [r7, #28]
 8007520:	6a3a      	ldr	r2, [r7, #32]
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	61bb      	str	r3, [r7, #24]
   return(result);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e5      	bne.n	80074fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	2b10      	cmp	r3, #16
 800753a:	d10a      	bne.n	8007552 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff fdbf 	bl	80070dc <HAL_UARTEx_RxEventCallback>
 800755e:	e002      	b.n	8007566 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7fb fd33 	bl	8002fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	e002      	b.n	8007570 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	e000      	b.n	8007570 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800756e:	2302      	movs	r3, #2
  }
}
 8007570:	4618      	mov	r0, r3
 8007572:	3730      	adds	r7, #48	; 0x30
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	b09f      	sub	sp, #124	; 0x7c
 800757e:	af00      	add	r7, sp, #0
 8007580:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800758c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758e:	68d9      	ldr	r1, [r3, #12]
 8007590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	ea40 0301 	orr.w	r3, r0, r1
 8007598:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800759a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	431a      	orrs	r2, r3
 80075aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80075b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075bc:	f021 010c 	bic.w	r1, r1, #12
 80075c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075c6:	430b      	orrs	r3, r1
 80075c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d6:	6999      	ldr	r1, [r3, #24]
 80075d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	ea40 0301 	orr.w	r3, r0, r1
 80075e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	4bc5      	ldr	r3, [pc, #788]	; (80078fc <UART_SetConfig+0x384>)
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d004      	beq.n	80075f6 <UART_SetConfig+0x7e>
 80075ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	4bc3      	ldr	r3, [pc, #780]	; (8007900 <UART_SetConfig+0x388>)
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d103      	bne.n	80075fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075f6:	f7fd ff3d 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 80075fa:	6778      	str	r0, [r7, #116]	; 0x74
 80075fc:	e002      	b.n	8007604 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075fe:	f7fd ff25 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8007602:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800760c:	f040 80b6 	bne.w	800777c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007612:	461c      	mov	r4, r3
 8007614:	f04f 0500 	mov.w	r5, #0
 8007618:	4622      	mov	r2, r4
 800761a:	462b      	mov	r3, r5
 800761c:	1891      	adds	r1, r2, r2
 800761e:	6439      	str	r1, [r7, #64]	; 0x40
 8007620:	415b      	adcs	r3, r3
 8007622:	647b      	str	r3, [r7, #68]	; 0x44
 8007624:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007628:	1912      	adds	r2, r2, r4
 800762a:	eb45 0303 	adc.w	r3, r5, r3
 800762e:	f04f 0000 	mov.w	r0, #0
 8007632:	f04f 0100 	mov.w	r1, #0
 8007636:	00d9      	lsls	r1, r3, #3
 8007638:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800763c:	00d0      	lsls	r0, r2, #3
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	1911      	adds	r1, r2, r4
 8007644:	6639      	str	r1, [r7, #96]	; 0x60
 8007646:	416b      	adcs	r3, r5
 8007648:	667b      	str	r3, [r7, #100]	; 0x64
 800764a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	461a      	mov	r2, r3
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	1891      	adds	r1, r2, r2
 8007656:	63b9      	str	r1, [r7, #56]	; 0x38
 8007658:	415b      	adcs	r3, r3
 800765a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800765c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007660:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007664:	f7f8 fe04 	bl	8000270 <__aeabi_uldivmod>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4ba5      	ldr	r3, [pc, #660]	; (8007904 <UART_SetConfig+0x38c>)
 800766e:	fba3 2302 	umull	r2, r3, r3, r2
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	011e      	lsls	r6, r3, #4
 8007676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007678:	461c      	mov	r4, r3
 800767a:	f04f 0500 	mov.w	r5, #0
 800767e:	4622      	mov	r2, r4
 8007680:	462b      	mov	r3, r5
 8007682:	1891      	adds	r1, r2, r2
 8007684:	6339      	str	r1, [r7, #48]	; 0x30
 8007686:	415b      	adcs	r3, r3
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
 800768a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800768e:	1912      	adds	r2, r2, r4
 8007690:	eb45 0303 	adc.w	r3, r5, r3
 8007694:	f04f 0000 	mov.w	r0, #0
 8007698:	f04f 0100 	mov.w	r1, #0
 800769c:	00d9      	lsls	r1, r3, #3
 800769e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076a2:	00d0      	lsls	r0, r2, #3
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	1911      	adds	r1, r2, r4
 80076aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80076ac:	416b      	adcs	r3, r5
 80076ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	461a      	mov	r2, r3
 80076b6:	f04f 0300 	mov.w	r3, #0
 80076ba:	1891      	adds	r1, r2, r2
 80076bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80076be:	415b      	adcs	r3, r3
 80076c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80076ca:	f7f8 fdd1 	bl	8000270 <__aeabi_uldivmod>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	4b8c      	ldr	r3, [pc, #560]	; (8007904 <UART_SetConfig+0x38c>)
 80076d4:	fba3 1302 	umull	r1, r3, r3, r2
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	2164      	movs	r1, #100	; 0x64
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	3332      	adds	r3, #50	; 0x32
 80076e6:	4a87      	ldr	r2, [pc, #540]	; (8007904 <UART_SetConfig+0x38c>)
 80076e8:	fba2 2303 	umull	r2, r3, r2, r3
 80076ec:	095b      	lsrs	r3, r3, #5
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076f4:	441e      	add	r6, r3
 80076f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f8:	4618      	mov	r0, r3
 80076fa:	f04f 0100 	mov.w	r1, #0
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	1894      	adds	r4, r2, r2
 8007704:	623c      	str	r4, [r7, #32]
 8007706:	415b      	adcs	r3, r3
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
 800770a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800770e:	1812      	adds	r2, r2, r0
 8007710:	eb41 0303 	adc.w	r3, r1, r3
 8007714:	f04f 0400 	mov.w	r4, #0
 8007718:	f04f 0500 	mov.w	r5, #0
 800771c:	00dd      	lsls	r5, r3, #3
 800771e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007722:	00d4      	lsls	r4, r2, #3
 8007724:	4622      	mov	r2, r4
 8007726:	462b      	mov	r3, r5
 8007728:	1814      	adds	r4, r2, r0
 800772a:	653c      	str	r4, [r7, #80]	; 0x50
 800772c:	414b      	adcs	r3, r1
 800772e:	657b      	str	r3, [r7, #84]	; 0x54
 8007730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	461a      	mov	r2, r3
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	1891      	adds	r1, r2, r2
 800773c:	61b9      	str	r1, [r7, #24]
 800773e:	415b      	adcs	r3, r3
 8007740:	61fb      	str	r3, [r7, #28]
 8007742:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007746:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800774a:	f7f8 fd91 	bl	8000270 <__aeabi_uldivmod>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4b6c      	ldr	r3, [pc, #432]	; (8007904 <UART_SetConfig+0x38c>)
 8007754:	fba3 1302 	umull	r1, r3, r3, r2
 8007758:	095b      	lsrs	r3, r3, #5
 800775a:	2164      	movs	r1, #100	; 0x64
 800775c:	fb01 f303 	mul.w	r3, r1, r3
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	3332      	adds	r3, #50	; 0x32
 8007766:	4a67      	ldr	r2, [pc, #412]	; (8007904 <UART_SetConfig+0x38c>)
 8007768:	fba2 2303 	umull	r2, r3, r2, r3
 800776c:	095b      	lsrs	r3, r3, #5
 800776e:	f003 0207 	and.w	r2, r3, #7
 8007772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4432      	add	r2, r6
 8007778:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800777a:	e0b9      	b.n	80078f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800777c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800777e:	461c      	mov	r4, r3
 8007780:	f04f 0500 	mov.w	r5, #0
 8007784:	4622      	mov	r2, r4
 8007786:	462b      	mov	r3, r5
 8007788:	1891      	adds	r1, r2, r2
 800778a:	6139      	str	r1, [r7, #16]
 800778c:	415b      	adcs	r3, r3
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007794:	1912      	adds	r2, r2, r4
 8007796:	eb45 0303 	adc.w	r3, r5, r3
 800779a:	f04f 0000 	mov.w	r0, #0
 800779e:	f04f 0100 	mov.w	r1, #0
 80077a2:	00d9      	lsls	r1, r3, #3
 80077a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077a8:	00d0      	lsls	r0, r2, #3
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	eb12 0804 	adds.w	r8, r2, r4
 80077b2:	eb43 0905 	adc.w	r9, r3, r5
 80077b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f04f 0100 	mov.w	r1, #0
 80077c0:	f04f 0200 	mov.w	r2, #0
 80077c4:	f04f 0300 	mov.w	r3, #0
 80077c8:	008b      	lsls	r3, r1, #2
 80077ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077ce:	0082      	lsls	r2, r0, #2
 80077d0:	4640      	mov	r0, r8
 80077d2:	4649      	mov	r1, r9
 80077d4:	f7f8 fd4c 	bl	8000270 <__aeabi_uldivmod>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4b49      	ldr	r3, [pc, #292]	; (8007904 <UART_SetConfig+0x38c>)
 80077de:	fba3 2302 	umull	r2, r3, r3, r2
 80077e2:	095b      	lsrs	r3, r3, #5
 80077e4:	011e      	lsls	r6, r3, #4
 80077e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077e8:	4618      	mov	r0, r3
 80077ea:	f04f 0100 	mov.w	r1, #0
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	1894      	adds	r4, r2, r2
 80077f4:	60bc      	str	r4, [r7, #8]
 80077f6:	415b      	adcs	r3, r3
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077fe:	1812      	adds	r2, r2, r0
 8007800:	eb41 0303 	adc.w	r3, r1, r3
 8007804:	f04f 0400 	mov.w	r4, #0
 8007808:	f04f 0500 	mov.w	r5, #0
 800780c:	00dd      	lsls	r5, r3, #3
 800780e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007812:	00d4      	lsls	r4, r2, #3
 8007814:	4622      	mov	r2, r4
 8007816:	462b      	mov	r3, r5
 8007818:	1814      	adds	r4, r2, r0
 800781a:	64bc      	str	r4, [r7, #72]	; 0x48
 800781c:	414b      	adcs	r3, r1
 800781e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	4618      	mov	r0, r3
 8007826:	f04f 0100 	mov.w	r1, #0
 800782a:	f04f 0200 	mov.w	r2, #0
 800782e:	f04f 0300 	mov.w	r3, #0
 8007832:	008b      	lsls	r3, r1, #2
 8007834:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007838:	0082      	lsls	r2, r0, #2
 800783a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800783e:	f7f8 fd17 	bl	8000270 <__aeabi_uldivmod>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4b2f      	ldr	r3, [pc, #188]	; (8007904 <UART_SetConfig+0x38c>)
 8007848:	fba3 1302 	umull	r1, r3, r3, r2
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	2164      	movs	r1, #100	; 0x64
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	3332      	adds	r3, #50	; 0x32
 800785a:	4a2a      	ldr	r2, [pc, #168]	; (8007904 <UART_SetConfig+0x38c>)
 800785c:	fba2 2303 	umull	r2, r3, r2, r3
 8007860:	095b      	lsrs	r3, r3, #5
 8007862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007866:	441e      	add	r6, r3
 8007868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800786a:	4618      	mov	r0, r3
 800786c:	f04f 0100 	mov.w	r1, #0
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	1894      	adds	r4, r2, r2
 8007876:	603c      	str	r4, [r7, #0]
 8007878:	415b      	adcs	r3, r3
 800787a:	607b      	str	r3, [r7, #4]
 800787c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007880:	1812      	adds	r2, r2, r0
 8007882:	eb41 0303 	adc.w	r3, r1, r3
 8007886:	f04f 0400 	mov.w	r4, #0
 800788a:	f04f 0500 	mov.w	r5, #0
 800788e:	00dd      	lsls	r5, r3, #3
 8007890:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007894:	00d4      	lsls	r4, r2, #3
 8007896:	4622      	mov	r2, r4
 8007898:	462b      	mov	r3, r5
 800789a:	eb12 0a00 	adds.w	sl, r2, r0
 800789e:	eb43 0b01 	adc.w	fp, r3, r1
 80078a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f04f 0100 	mov.w	r1, #0
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	008b      	lsls	r3, r1, #2
 80078b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80078ba:	0082      	lsls	r2, r0, #2
 80078bc:	4650      	mov	r0, sl
 80078be:	4659      	mov	r1, fp
 80078c0:	f7f8 fcd6 	bl	8000270 <__aeabi_uldivmod>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4b0e      	ldr	r3, [pc, #56]	; (8007904 <UART_SetConfig+0x38c>)
 80078ca:	fba3 1302 	umull	r1, r3, r3, r2
 80078ce:	095b      	lsrs	r3, r3, #5
 80078d0:	2164      	movs	r1, #100	; 0x64
 80078d2:	fb01 f303 	mul.w	r3, r1, r3
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	011b      	lsls	r3, r3, #4
 80078da:	3332      	adds	r3, #50	; 0x32
 80078dc:	4a09      	ldr	r2, [pc, #36]	; (8007904 <UART_SetConfig+0x38c>)
 80078de:	fba2 2303 	umull	r2, r3, r2, r3
 80078e2:	095b      	lsrs	r3, r3, #5
 80078e4:	f003 020f 	and.w	r2, r3, #15
 80078e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4432      	add	r2, r6
 80078ee:	609a      	str	r2, [r3, #8]
}
 80078f0:	bf00      	nop
 80078f2:	377c      	adds	r7, #124	; 0x7c
 80078f4:	46bd      	mov	sp, r7
 80078f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fa:	bf00      	nop
 80078fc:	40011000 	.word	0x40011000
 8007900:	40011400 	.word	0x40011400
 8007904:	51eb851f 	.word	0x51eb851f

08007908 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007920:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4b20      	ldr	r3, [pc, #128]	; (80079a8 <FSMC_NORSRAM_Init+0xa0>)
 8007926:	4013      	ands	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007932:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007938:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800793e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007944:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800794a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007950:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007956:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800795c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007962:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007968:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800796e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007974:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	2b08      	cmp	r3, #8
 8007982:	d103      	bne.n	800798c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800798a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68f9      	ldr	r1, [r7, #12]
 8007994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	fff00080 	.word	0xfff00080

080079ac <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80079ce:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80079da:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80079e2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80079ea:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80079f4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	3b02      	subs	r3, #2
 80079fc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80079fe:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a04:	4313      	orrs	r3, r2
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6979      	ldr	r1, [r7, #20]
 8007a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	371c      	adds	r7, #28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
	...

08007a28 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a40:	d122      	bne.n	8007a88 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	4b15      	ldr	r3, [pc, #84]	; (8007aa4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a5e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007a66:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007a6e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007a74:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6979      	ldr	r1, [r7, #20]
 8007a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007a86:	e005      	b.n	8007a94 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	cff00000 	.word	0xcff00000

08007aa8 <__errno>:
 8007aa8:	4b01      	ldr	r3, [pc, #4]	; (8007ab0 <__errno+0x8>)
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	20000030 	.word	0x20000030

08007ab4 <__libc_init_array>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	4d0d      	ldr	r5, [pc, #52]	; (8007aec <__libc_init_array+0x38>)
 8007ab8:	4c0d      	ldr	r4, [pc, #52]	; (8007af0 <__libc_init_array+0x3c>)
 8007aba:	1b64      	subs	r4, r4, r5
 8007abc:	10a4      	asrs	r4, r4, #2
 8007abe:	2600      	movs	r6, #0
 8007ac0:	42a6      	cmp	r6, r4
 8007ac2:	d109      	bne.n	8007ad8 <__libc_init_array+0x24>
 8007ac4:	4d0b      	ldr	r5, [pc, #44]	; (8007af4 <__libc_init_array+0x40>)
 8007ac6:	4c0c      	ldr	r4, [pc, #48]	; (8007af8 <__libc_init_array+0x44>)
 8007ac8:	f000 fc4e 	bl	8008368 <_init>
 8007acc:	1b64      	subs	r4, r4, r5
 8007ace:	10a4      	asrs	r4, r4, #2
 8007ad0:	2600      	movs	r6, #0
 8007ad2:	42a6      	cmp	r6, r4
 8007ad4:	d105      	bne.n	8007ae2 <__libc_init_array+0x2e>
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007adc:	4798      	blx	r3
 8007ade:	3601      	adds	r6, #1
 8007ae0:	e7ee      	b.n	8007ac0 <__libc_init_array+0xc>
 8007ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae6:	4798      	blx	r3
 8007ae8:	3601      	adds	r6, #1
 8007aea:	e7f2      	b.n	8007ad2 <__libc_init_array+0x1e>
 8007aec:	0800b478 	.word	0x0800b478
 8007af0:	0800b478 	.word	0x0800b478
 8007af4:	0800b478 	.word	0x0800b478
 8007af8:	0800b47c 	.word	0x0800b47c

08007afc <memset>:
 8007afc:	4402      	add	r2, r0
 8007afe:	4603      	mov	r3, r0
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d100      	bne.n	8007b06 <memset+0xa>
 8007b04:	4770      	bx	lr
 8007b06:	f803 1b01 	strb.w	r1, [r3], #1
 8007b0a:	e7f9      	b.n	8007b00 <memset+0x4>

08007b0c <siprintf>:
 8007b0c:	b40e      	push	{r1, r2, r3}
 8007b0e:	b500      	push	{lr}
 8007b10:	b09c      	sub	sp, #112	; 0x70
 8007b12:	ab1d      	add	r3, sp, #116	; 0x74
 8007b14:	9002      	str	r0, [sp, #8]
 8007b16:	9006      	str	r0, [sp, #24]
 8007b18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b1c:	4809      	ldr	r0, [pc, #36]	; (8007b44 <siprintf+0x38>)
 8007b1e:	9107      	str	r1, [sp, #28]
 8007b20:	9104      	str	r1, [sp, #16]
 8007b22:	4909      	ldr	r1, [pc, #36]	; (8007b48 <siprintf+0x3c>)
 8007b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b28:	9105      	str	r1, [sp, #20]
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	a902      	add	r1, sp, #8
 8007b30:	f000 f868 	bl	8007c04 <_svfiprintf_r>
 8007b34:	9b02      	ldr	r3, [sp, #8]
 8007b36:	2200      	movs	r2, #0
 8007b38:	701a      	strb	r2, [r3, #0]
 8007b3a:	b01c      	add	sp, #112	; 0x70
 8007b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b40:	b003      	add	sp, #12
 8007b42:	4770      	bx	lr
 8007b44:	20000030 	.word	0x20000030
 8007b48:	ffff0208 	.word	0xffff0208

08007b4c <__ssputs_r>:
 8007b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	688e      	ldr	r6, [r1, #8]
 8007b52:	429e      	cmp	r6, r3
 8007b54:	4682      	mov	sl, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	4690      	mov	r8, r2
 8007b5a:	461f      	mov	r7, r3
 8007b5c:	d838      	bhi.n	8007bd0 <__ssputs_r+0x84>
 8007b5e:	898a      	ldrh	r2, [r1, #12]
 8007b60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b64:	d032      	beq.n	8007bcc <__ssputs_r+0x80>
 8007b66:	6825      	ldr	r5, [r4, #0]
 8007b68:	6909      	ldr	r1, [r1, #16]
 8007b6a:	eba5 0901 	sub.w	r9, r5, r1
 8007b6e:	6965      	ldr	r5, [r4, #20]
 8007b70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b78:	3301      	adds	r3, #1
 8007b7a:	444b      	add	r3, r9
 8007b7c:	106d      	asrs	r5, r5, #1
 8007b7e:	429d      	cmp	r5, r3
 8007b80:	bf38      	it	cc
 8007b82:	461d      	movcc	r5, r3
 8007b84:	0553      	lsls	r3, r2, #21
 8007b86:	d531      	bpl.n	8007bec <__ssputs_r+0xa0>
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f000 fb47 	bl	800821c <_malloc_r>
 8007b8e:	4606      	mov	r6, r0
 8007b90:	b950      	cbnz	r0, 8007ba8 <__ssputs_r+0x5c>
 8007b92:	230c      	movs	r3, #12
 8007b94:	f8ca 3000 	str.w	r3, [sl]
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b9e:	81a3      	strh	r3, [r4, #12]
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba8:	6921      	ldr	r1, [r4, #16]
 8007baa:	464a      	mov	r2, r9
 8007bac:	f000 fabe 	bl	800812c <memcpy>
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bba:	81a3      	strh	r3, [r4, #12]
 8007bbc:	6126      	str	r6, [r4, #16]
 8007bbe:	6165      	str	r5, [r4, #20]
 8007bc0:	444e      	add	r6, r9
 8007bc2:	eba5 0509 	sub.w	r5, r5, r9
 8007bc6:	6026      	str	r6, [r4, #0]
 8007bc8:	60a5      	str	r5, [r4, #8]
 8007bca:	463e      	mov	r6, r7
 8007bcc:	42be      	cmp	r6, r7
 8007bce:	d900      	bls.n	8007bd2 <__ssputs_r+0x86>
 8007bd0:	463e      	mov	r6, r7
 8007bd2:	4632      	mov	r2, r6
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	4641      	mov	r1, r8
 8007bd8:	f000 fab6 	bl	8008148 <memmove>
 8007bdc:	68a3      	ldr	r3, [r4, #8]
 8007bde:	6822      	ldr	r2, [r4, #0]
 8007be0:	1b9b      	subs	r3, r3, r6
 8007be2:	4432      	add	r2, r6
 8007be4:	60a3      	str	r3, [r4, #8]
 8007be6:	6022      	str	r2, [r4, #0]
 8007be8:	2000      	movs	r0, #0
 8007bea:	e7db      	b.n	8007ba4 <__ssputs_r+0x58>
 8007bec:	462a      	mov	r2, r5
 8007bee:	f000 fb6f 	bl	80082d0 <_realloc_r>
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d1e1      	bne.n	8007bbc <__ssputs_r+0x70>
 8007bf8:	6921      	ldr	r1, [r4, #16]
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	f000 fabe 	bl	800817c <_free_r>
 8007c00:	e7c7      	b.n	8007b92 <__ssputs_r+0x46>
	...

08007c04 <_svfiprintf_r>:
 8007c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	4698      	mov	r8, r3
 8007c0a:	898b      	ldrh	r3, [r1, #12]
 8007c0c:	061b      	lsls	r3, r3, #24
 8007c0e:	b09d      	sub	sp, #116	; 0x74
 8007c10:	4607      	mov	r7, r0
 8007c12:	460d      	mov	r5, r1
 8007c14:	4614      	mov	r4, r2
 8007c16:	d50e      	bpl.n	8007c36 <_svfiprintf_r+0x32>
 8007c18:	690b      	ldr	r3, [r1, #16]
 8007c1a:	b963      	cbnz	r3, 8007c36 <_svfiprintf_r+0x32>
 8007c1c:	2140      	movs	r1, #64	; 0x40
 8007c1e:	f000 fafd 	bl	800821c <_malloc_r>
 8007c22:	6028      	str	r0, [r5, #0]
 8007c24:	6128      	str	r0, [r5, #16]
 8007c26:	b920      	cbnz	r0, 8007c32 <_svfiprintf_r+0x2e>
 8007c28:	230c      	movs	r3, #12
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	e0d1      	b.n	8007dd6 <_svfiprintf_r+0x1d2>
 8007c32:	2340      	movs	r3, #64	; 0x40
 8007c34:	616b      	str	r3, [r5, #20]
 8007c36:	2300      	movs	r3, #0
 8007c38:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3a:	2320      	movs	r3, #32
 8007c3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c44:	2330      	movs	r3, #48	; 0x30
 8007c46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007df0 <_svfiprintf_r+0x1ec>
 8007c4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c4e:	f04f 0901 	mov.w	r9, #1
 8007c52:	4623      	mov	r3, r4
 8007c54:	469a      	mov	sl, r3
 8007c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c5a:	b10a      	cbz	r2, 8007c60 <_svfiprintf_r+0x5c>
 8007c5c:	2a25      	cmp	r2, #37	; 0x25
 8007c5e:	d1f9      	bne.n	8007c54 <_svfiprintf_r+0x50>
 8007c60:	ebba 0b04 	subs.w	fp, sl, r4
 8007c64:	d00b      	beq.n	8007c7e <_svfiprintf_r+0x7a>
 8007c66:	465b      	mov	r3, fp
 8007c68:	4622      	mov	r2, r4
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	f7ff ff6d 	bl	8007b4c <__ssputs_r>
 8007c72:	3001      	adds	r0, #1
 8007c74:	f000 80aa 	beq.w	8007dcc <_svfiprintf_r+0x1c8>
 8007c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c7a:	445a      	add	r2, fp
 8007c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 80a2 	beq.w	8007dcc <_svfiprintf_r+0x1c8>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c92:	f10a 0a01 	add.w	sl, sl, #1
 8007c96:	9304      	str	r3, [sp, #16]
 8007c98:	9307      	str	r3, [sp, #28]
 8007c9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c9e:	931a      	str	r3, [sp, #104]	; 0x68
 8007ca0:	4654      	mov	r4, sl
 8007ca2:	2205      	movs	r2, #5
 8007ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca8:	4851      	ldr	r0, [pc, #324]	; (8007df0 <_svfiprintf_r+0x1ec>)
 8007caa:	f7f8 fa91 	bl	80001d0 <memchr>
 8007cae:	9a04      	ldr	r2, [sp, #16]
 8007cb0:	b9d8      	cbnz	r0, 8007cea <_svfiprintf_r+0xe6>
 8007cb2:	06d0      	lsls	r0, r2, #27
 8007cb4:	bf44      	itt	mi
 8007cb6:	2320      	movmi	r3, #32
 8007cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cbc:	0711      	lsls	r1, r2, #28
 8007cbe:	bf44      	itt	mi
 8007cc0:	232b      	movmi	r3, #43	; 0x2b
 8007cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007cca:	2b2a      	cmp	r3, #42	; 0x2a
 8007ccc:	d015      	beq.n	8007cfa <_svfiprintf_r+0xf6>
 8007cce:	9a07      	ldr	r2, [sp, #28]
 8007cd0:	4654      	mov	r4, sl
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	f04f 0c0a 	mov.w	ip, #10
 8007cd8:	4621      	mov	r1, r4
 8007cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cde:	3b30      	subs	r3, #48	; 0x30
 8007ce0:	2b09      	cmp	r3, #9
 8007ce2:	d94e      	bls.n	8007d82 <_svfiprintf_r+0x17e>
 8007ce4:	b1b0      	cbz	r0, 8007d14 <_svfiprintf_r+0x110>
 8007ce6:	9207      	str	r2, [sp, #28]
 8007ce8:	e014      	b.n	8007d14 <_svfiprintf_r+0x110>
 8007cea:	eba0 0308 	sub.w	r3, r0, r8
 8007cee:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	9304      	str	r3, [sp, #16]
 8007cf6:	46a2      	mov	sl, r4
 8007cf8:	e7d2      	b.n	8007ca0 <_svfiprintf_r+0x9c>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	1d19      	adds	r1, r3, #4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	9103      	str	r1, [sp, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bfbb      	ittet	lt
 8007d06:	425b      	neglt	r3, r3
 8007d08:	f042 0202 	orrlt.w	r2, r2, #2
 8007d0c:	9307      	strge	r3, [sp, #28]
 8007d0e:	9307      	strlt	r3, [sp, #28]
 8007d10:	bfb8      	it	lt
 8007d12:	9204      	strlt	r2, [sp, #16]
 8007d14:	7823      	ldrb	r3, [r4, #0]
 8007d16:	2b2e      	cmp	r3, #46	; 0x2e
 8007d18:	d10c      	bne.n	8007d34 <_svfiprintf_r+0x130>
 8007d1a:	7863      	ldrb	r3, [r4, #1]
 8007d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d1e:	d135      	bne.n	8007d8c <_svfiprintf_r+0x188>
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	1d1a      	adds	r2, r3, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	9203      	str	r2, [sp, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bfb8      	it	lt
 8007d2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d30:	3402      	adds	r4, #2
 8007d32:	9305      	str	r3, [sp, #20]
 8007d34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e00 <_svfiprintf_r+0x1fc>
 8007d38:	7821      	ldrb	r1, [r4, #0]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	f7f8 fa47 	bl	80001d0 <memchr>
 8007d42:	b140      	cbz	r0, 8007d56 <_svfiprintf_r+0x152>
 8007d44:	2340      	movs	r3, #64	; 0x40
 8007d46:	eba0 000a 	sub.w	r0, r0, sl
 8007d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8007d4e:	9b04      	ldr	r3, [sp, #16]
 8007d50:	4303      	orrs	r3, r0
 8007d52:	3401      	adds	r4, #1
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d5a:	4826      	ldr	r0, [pc, #152]	; (8007df4 <_svfiprintf_r+0x1f0>)
 8007d5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d60:	2206      	movs	r2, #6
 8007d62:	f7f8 fa35 	bl	80001d0 <memchr>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d038      	beq.n	8007ddc <_svfiprintf_r+0x1d8>
 8007d6a:	4b23      	ldr	r3, [pc, #140]	; (8007df8 <_svfiprintf_r+0x1f4>)
 8007d6c:	bb1b      	cbnz	r3, 8007db6 <_svfiprintf_r+0x1b2>
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	3307      	adds	r3, #7
 8007d72:	f023 0307 	bic.w	r3, r3, #7
 8007d76:	3308      	adds	r3, #8
 8007d78:	9303      	str	r3, [sp, #12]
 8007d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7c:	4433      	add	r3, r6
 8007d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d80:	e767      	b.n	8007c52 <_svfiprintf_r+0x4e>
 8007d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d86:	460c      	mov	r4, r1
 8007d88:	2001      	movs	r0, #1
 8007d8a:	e7a5      	b.n	8007cd8 <_svfiprintf_r+0xd4>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	3401      	adds	r4, #1
 8007d90:	9305      	str	r3, [sp, #20]
 8007d92:	4619      	mov	r1, r3
 8007d94:	f04f 0c0a 	mov.w	ip, #10
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d9e:	3a30      	subs	r2, #48	; 0x30
 8007da0:	2a09      	cmp	r2, #9
 8007da2:	d903      	bls.n	8007dac <_svfiprintf_r+0x1a8>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0c5      	beq.n	8007d34 <_svfiprintf_r+0x130>
 8007da8:	9105      	str	r1, [sp, #20]
 8007daa:	e7c3      	b.n	8007d34 <_svfiprintf_r+0x130>
 8007dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db0:	4604      	mov	r4, r0
 8007db2:	2301      	movs	r3, #1
 8007db4:	e7f0      	b.n	8007d98 <_svfiprintf_r+0x194>
 8007db6:	ab03      	add	r3, sp, #12
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	462a      	mov	r2, r5
 8007dbc:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <_svfiprintf_r+0x1f8>)
 8007dbe:	a904      	add	r1, sp, #16
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	f3af 8000 	nop.w
 8007dc6:	1c42      	adds	r2, r0, #1
 8007dc8:	4606      	mov	r6, r0
 8007dca:	d1d6      	bne.n	8007d7a <_svfiprintf_r+0x176>
 8007dcc:	89ab      	ldrh	r3, [r5, #12]
 8007dce:	065b      	lsls	r3, r3, #25
 8007dd0:	f53f af2c 	bmi.w	8007c2c <_svfiprintf_r+0x28>
 8007dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dd6:	b01d      	add	sp, #116	; 0x74
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	ab03      	add	r3, sp, #12
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	462a      	mov	r2, r5
 8007de2:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <_svfiprintf_r+0x1f8>)
 8007de4:	a904      	add	r1, sp, #16
 8007de6:	4638      	mov	r0, r7
 8007de8:	f000 f87a 	bl	8007ee0 <_printf_i>
 8007dec:	e7eb      	b.n	8007dc6 <_svfiprintf_r+0x1c2>
 8007dee:	bf00      	nop
 8007df0:	0800b43c 	.word	0x0800b43c
 8007df4:	0800b446 	.word	0x0800b446
 8007df8:	00000000 	.word	0x00000000
 8007dfc:	08007b4d 	.word	0x08007b4d
 8007e00:	0800b442 	.word	0x0800b442

08007e04 <_printf_common>:
 8007e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	4616      	mov	r6, r2
 8007e0a:	4699      	mov	r9, r3
 8007e0c:	688a      	ldr	r2, [r1, #8]
 8007e0e:	690b      	ldr	r3, [r1, #16]
 8007e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e14:	4293      	cmp	r3, r2
 8007e16:	bfb8      	it	lt
 8007e18:	4613      	movlt	r3, r2
 8007e1a:	6033      	str	r3, [r6, #0]
 8007e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e20:	4607      	mov	r7, r0
 8007e22:	460c      	mov	r4, r1
 8007e24:	b10a      	cbz	r2, 8007e2a <_printf_common+0x26>
 8007e26:	3301      	adds	r3, #1
 8007e28:	6033      	str	r3, [r6, #0]
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	0699      	lsls	r1, r3, #26
 8007e2e:	bf42      	ittt	mi
 8007e30:	6833      	ldrmi	r3, [r6, #0]
 8007e32:	3302      	addmi	r3, #2
 8007e34:	6033      	strmi	r3, [r6, #0]
 8007e36:	6825      	ldr	r5, [r4, #0]
 8007e38:	f015 0506 	ands.w	r5, r5, #6
 8007e3c:	d106      	bne.n	8007e4c <_printf_common+0x48>
 8007e3e:	f104 0a19 	add.w	sl, r4, #25
 8007e42:	68e3      	ldr	r3, [r4, #12]
 8007e44:	6832      	ldr	r2, [r6, #0]
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	42ab      	cmp	r3, r5
 8007e4a:	dc26      	bgt.n	8007e9a <_printf_common+0x96>
 8007e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e50:	1e13      	subs	r3, r2, #0
 8007e52:	6822      	ldr	r2, [r4, #0]
 8007e54:	bf18      	it	ne
 8007e56:	2301      	movne	r3, #1
 8007e58:	0692      	lsls	r2, r2, #26
 8007e5a:	d42b      	bmi.n	8007eb4 <_printf_common+0xb0>
 8007e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e60:	4649      	mov	r1, r9
 8007e62:	4638      	mov	r0, r7
 8007e64:	47c0      	blx	r8
 8007e66:	3001      	adds	r0, #1
 8007e68:	d01e      	beq.n	8007ea8 <_printf_common+0xa4>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	68e5      	ldr	r5, [r4, #12]
 8007e6e:	6832      	ldr	r2, [r6, #0]
 8007e70:	f003 0306 	and.w	r3, r3, #6
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	bf08      	it	eq
 8007e78:	1aad      	subeq	r5, r5, r2
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	6922      	ldr	r2, [r4, #16]
 8007e7e:	bf0c      	ite	eq
 8007e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e84:	2500      	movne	r5, #0
 8007e86:	4293      	cmp	r3, r2
 8007e88:	bfc4      	itt	gt
 8007e8a:	1a9b      	subgt	r3, r3, r2
 8007e8c:	18ed      	addgt	r5, r5, r3
 8007e8e:	2600      	movs	r6, #0
 8007e90:	341a      	adds	r4, #26
 8007e92:	42b5      	cmp	r5, r6
 8007e94:	d11a      	bne.n	8007ecc <_printf_common+0xc8>
 8007e96:	2000      	movs	r0, #0
 8007e98:	e008      	b.n	8007eac <_printf_common+0xa8>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4652      	mov	r2, sl
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	47c0      	blx	r8
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d103      	bne.n	8007eb0 <_printf_common+0xac>
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	e7c6      	b.n	8007e42 <_printf_common+0x3e>
 8007eb4:	18e1      	adds	r1, r4, r3
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	2030      	movs	r0, #48	; 0x30
 8007eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ebe:	4422      	add	r2, r4
 8007ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ec8:	3302      	adds	r3, #2
 8007eca:	e7c7      	b.n	8007e5c <_printf_common+0x58>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	47c0      	blx	r8
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d0e6      	beq.n	8007ea8 <_printf_common+0xa4>
 8007eda:	3601      	adds	r6, #1
 8007edc:	e7d9      	b.n	8007e92 <_printf_common+0x8e>
	...

08007ee0 <_printf_i>:
 8007ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	4691      	mov	r9, r2
 8007ee8:	7e27      	ldrb	r7, [r4, #24]
 8007eea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007eec:	2f78      	cmp	r7, #120	; 0x78
 8007eee:	4680      	mov	r8, r0
 8007ef0:	469a      	mov	sl, r3
 8007ef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ef6:	d807      	bhi.n	8007f08 <_printf_i+0x28>
 8007ef8:	2f62      	cmp	r7, #98	; 0x62
 8007efa:	d80a      	bhi.n	8007f12 <_printf_i+0x32>
 8007efc:	2f00      	cmp	r7, #0
 8007efe:	f000 80d8 	beq.w	80080b2 <_printf_i+0x1d2>
 8007f02:	2f58      	cmp	r7, #88	; 0x58
 8007f04:	f000 80a3 	beq.w	800804e <_printf_i+0x16e>
 8007f08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f10:	e03a      	b.n	8007f88 <_printf_i+0xa8>
 8007f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f16:	2b15      	cmp	r3, #21
 8007f18:	d8f6      	bhi.n	8007f08 <_printf_i+0x28>
 8007f1a:	a001      	add	r0, pc, #4	; (adr r0, 8007f20 <_printf_i+0x40>)
 8007f1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007f20:	08007f79 	.word	0x08007f79
 8007f24:	08007f8d 	.word	0x08007f8d
 8007f28:	08007f09 	.word	0x08007f09
 8007f2c:	08007f09 	.word	0x08007f09
 8007f30:	08007f09 	.word	0x08007f09
 8007f34:	08007f09 	.word	0x08007f09
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08007f09 	.word	0x08007f09
 8007f40:	08007f09 	.word	0x08007f09
 8007f44:	08007f09 	.word	0x08007f09
 8007f48:	08007f09 	.word	0x08007f09
 8007f4c:	08008099 	.word	0x08008099
 8007f50:	08007fbd 	.word	0x08007fbd
 8007f54:	0800807b 	.word	0x0800807b
 8007f58:	08007f09 	.word	0x08007f09
 8007f5c:	08007f09 	.word	0x08007f09
 8007f60:	080080bb 	.word	0x080080bb
 8007f64:	08007f09 	.word	0x08007f09
 8007f68:	08007fbd 	.word	0x08007fbd
 8007f6c:	08007f09 	.word	0x08007f09
 8007f70:	08007f09 	.word	0x08007f09
 8007f74:	08008083 	.word	0x08008083
 8007f78:	680b      	ldr	r3, [r1, #0]
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	600a      	str	r2, [r1, #0]
 8007f80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e0a3      	b.n	80080d4 <_printf_i+0x1f4>
 8007f8c:	6825      	ldr	r5, [r4, #0]
 8007f8e:	6808      	ldr	r0, [r1, #0]
 8007f90:	062e      	lsls	r6, r5, #24
 8007f92:	f100 0304 	add.w	r3, r0, #4
 8007f96:	d50a      	bpl.n	8007fae <_printf_i+0xce>
 8007f98:	6805      	ldr	r5, [r0, #0]
 8007f9a:	600b      	str	r3, [r1, #0]
 8007f9c:	2d00      	cmp	r5, #0
 8007f9e:	da03      	bge.n	8007fa8 <_printf_i+0xc8>
 8007fa0:	232d      	movs	r3, #45	; 0x2d
 8007fa2:	426d      	negs	r5, r5
 8007fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa8:	485e      	ldr	r0, [pc, #376]	; (8008124 <_printf_i+0x244>)
 8007faa:	230a      	movs	r3, #10
 8007fac:	e019      	b.n	8007fe2 <_printf_i+0x102>
 8007fae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007fb2:	6805      	ldr	r5, [r0, #0]
 8007fb4:	600b      	str	r3, [r1, #0]
 8007fb6:	bf18      	it	ne
 8007fb8:	b22d      	sxthne	r5, r5
 8007fba:	e7ef      	b.n	8007f9c <_printf_i+0xbc>
 8007fbc:	680b      	ldr	r3, [r1, #0]
 8007fbe:	6825      	ldr	r5, [r4, #0]
 8007fc0:	1d18      	adds	r0, r3, #4
 8007fc2:	6008      	str	r0, [r1, #0]
 8007fc4:	0628      	lsls	r0, r5, #24
 8007fc6:	d501      	bpl.n	8007fcc <_printf_i+0xec>
 8007fc8:	681d      	ldr	r5, [r3, #0]
 8007fca:	e002      	b.n	8007fd2 <_printf_i+0xf2>
 8007fcc:	0669      	lsls	r1, r5, #25
 8007fce:	d5fb      	bpl.n	8007fc8 <_printf_i+0xe8>
 8007fd0:	881d      	ldrh	r5, [r3, #0]
 8007fd2:	4854      	ldr	r0, [pc, #336]	; (8008124 <_printf_i+0x244>)
 8007fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8007fd6:	bf0c      	ite	eq
 8007fd8:	2308      	moveq	r3, #8
 8007fda:	230a      	movne	r3, #10
 8007fdc:	2100      	movs	r1, #0
 8007fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fe2:	6866      	ldr	r6, [r4, #4]
 8007fe4:	60a6      	str	r6, [r4, #8]
 8007fe6:	2e00      	cmp	r6, #0
 8007fe8:	bfa2      	ittt	ge
 8007fea:	6821      	ldrge	r1, [r4, #0]
 8007fec:	f021 0104 	bicge.w	r1, r1, #4
 8007ff0:	6021      	strge	r1, [r4, #0]
 8007ff2:	b90d      	cbnz	r5, 8007ff8 <_printf_i+0x118>
 8007ff4:	2e00      	cmp	r6, #0
 8007ff6:	d04d      	beq.n	8008094 <_printf_i+0x1b4>
 8007ff8:	4616      	mov	r6, r2
 8007ffa:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ffe:	fb03 5711 	mls	r7, r3, r1, r5
 8008002:	5dc7      	ldrb	r7, [r0, r7]
 8008004:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008008:	462f      	mov	r7, r5
 800800a:	42bb      	cmp	r3, r7
 800800c:	460d      	mov	r5, r1
 800800e:	d9f4      	bls.n	8007ffa <_printf_i+0x11a>
 8008010:	2b08      	cmp	r3, #8
 8008012:	d10b      	bne.n	800802c <_printf_i+0x14c>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	07df      	lsls	r7, r3, #31
 8008018:	d508      	bpl.n	800802c <_printf_i+0x14c>
 800801a:	6923      	ldr	r3, [r4, #16]
 800801c:	6861      	ldr	r1, [r4, #4]
 800801e:	4299      	cmp	r1, r3
 8008020:	bfde      	ittt	le
 8008022:	2330      	movle	r3, #48	; 0x30
 8008024:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008028:	f106 36ff 	addle.w	r6, r6, #4294967295
 800802c:	1b92      	subs	r2, r2, r6
 800802e:	6122      	str	r2, [r4, #16]
 8008030:	f8cd a000 	str.w	sl, [sp]
 8008034:	464b      	mov	r3, r9
 8008036:	aa03      	add	r2, sp, #12
 8008038:	4621      	mov	r1, r4
 800803a:	4640      	mov	r0, r8
 800803c:	f7ff fee2 	bl	8007e04 <_printf_common>
 8008040:	3001      	adds	r0, #1
 8008042:	d14c      	bne.n	80080de <_printf_i+0x1fe>
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	b004      	add	sp, #16
 800804a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804e:	4835      	ldr	r0, [pc, #212]	; (8008124 <_printf_i+0x244>)
 8008050:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	680e      	ldr	r6, [r1, #0]
 8008058:	061f      	lsls	r7, r3, #24
 800805a:	f856 5b04 	ldr.w	r5, [r6], #4
 800805e:	600e      	str	r6, [r1, #0]
 8008060:	d514      	bpl.n	800808c <_printf_i+0x1ac>
 8008062:	07d9      	lsls	r1, r3, #31
 8008064:	bf44      	itt	mi
 8008066:	f043 0320 	orrmi.w	r3, r3, #32
 800806a:	6023      	strmi	r3, [r4, #0]
 800806c:	b91d      	cbnz	r5, 8008076 <_printf_i+0x196>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	f023 0320 	bic.w	r3, r3, #32
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	2310      	movs	r3, #16
 8008078:	e7b0      	b.n	8007fdc <_printf_i+0xfc>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	f043 0320 	orr.w	r3, r3, #32
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	2378      	movs	r3, #120	; 0x78
 8008084:	4828      	ldr	r0, [pc, #160]	; (8008128 <_printf_i+0x248>)
 8008086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800808a:	e7e3      	b.n	8008054 <_printf_i+0x174>
 800808c:	065e      	lsls	r6, r3, #25
 800808e:	bf48      	it	mi
 8008090:	b2ad      	uxthmi	r5, r5
 8008092:	e7e6      	b.n	8008062 <_printf_i+0x182>
 8008094:	4616      	mov	r6, r2
 8008096:	e7bb      	b.n	8008010 <_printf_i+0x130>
 8008098:	680b      	ldr	r3, [r1, #0]
 800809a:	6826      	ldr	r6, [r4, #0]
 800809c:	6960      	ldr	r0, [r4, #20]
 800809e:	1d1d      	adds	r5, r3, #4
 80080a0:	600d      	str	r5, [r1, #0]
 80080a2:	0635      	lsls	r5, r6, #24
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	d501      	bpl.n	80080ac <_printf_i+0x1cc>
 80080a8:	6018      	str	r0, [r3, #0]
 80080aa:	e002      	b.n	80080b2 <_printf_i+0x1d2>
 80080ac:	0671      	lsls	r1, r6, #25
 80080ae:	d5fb      	bpl.n	80080a8 <_printf_i+0x1c8>
 80080b0:	8018      	strh	r0, [r3, #0]
 80080b2:	2300      	movs	r3, #0
 80080b4:	6123      	str	r3, [r4, #16]
 80080b6:	4616      	mov	r6, r2
 80080b8:	e7ba      	b.n	8008030 <_printf_i+0x150>
 80080ba:	680b      	ldr	r3, [r1, #0]
 80080bc:	1d1a      	adds	r2, r3, #4
 80080be:	600a      	str	r2, [r1, #0]
 80080c0:	681e      	ldr	r6, [r3, #0]
 80080c2:	6862      	ldr	r2, [r4, #4]
 80080c4:	2100      	movs	r1, #0
 80080c6:	4630      	mov	r0, r6
 80080c8:	f7f8 f882 	bl	80001d0 <memchr>
 80080cc:	b108      	cbz	r0, 80080d2 <_printf_i+0x1f2>
 80080ce:	1b80      	subs	r0, r0, r6
 80080d0:	6060      	str	r0, [r4, #4]
 80080d2:	6863      	ldr	r3, [r4, #4]
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	2300      	movs	r3, #0
 80080d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080dc:	e7a8      	b.n	8008030 <_printf_i+0x150>
 80080de:	6923      	ldr	r3, [r4, #16]
 80080e0:	4632      	mov	r2, r6
 80080e2:	4649      	mov	r1, r9
 80080e4:	4640      	mov	r0, r8
 80080e6:	47d0      	blx	sl
 80080e8:	3001      	adds	r0, #1
 80080ea:	d0ab      	beq.n	8008044 <_printf_i+0x164>
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	079b      	lsls	r3, r3, #30
 80080f0:	d413      	bmi.n	800811a <_printf_i+0x23a>
 80080f2:	68e0      	ldr	r0, [r4, #12]
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	4298      	cmp	r0, r3
 80080f8:	bfb8      	it	lt
 80080fa:	4618      	movlt	r0, r3
 80080fc:	e7a4      	b.n	8008048 <_printf_i+0x168>
 80080fe:	2301      	movs	r3, #1
 8008100:	4632      	mov	r2, r6
 8008102:	4649      	mov	r1, r9
 8008104:	4640      	mov	r0, r8
 8008106:	47d0      	blx	sl
 8008108:	3001      	adds	r0, #1
 800810a:	d09b      	beq.n	8008044 <_printf_i+0x164>
 800810c:	3501      	adds	r5, #1
 800810e:	68e3      	ldr	r3, [r4, #12]
 8008110:	9903      	ldr	r1, [sp, #12]
 8008112:	1a5b      	subs	r3, r3, r1
 8008114:	42ab      	cmp	r3, r5
 8008116:	dcf2      	bgt.n	80080fe <_printf_i+0x21e>
 8008118:	e7eb      	b.n	80080f2 <_printf_i+0x212>
 800811a:	2500      	movs	r5, #0
 800811c:	f104 0619 	add.w	r6, r4, #25
 8008120:	e7f5      	b.n	800810e <_printf_i+0x22e>
 8008122:	bf00      	nop
 8008124:	0800b44d 	.word	0x0800b44d
 8008128:	0800b45e 	.word	0x0800b45e

0800812c <memcpy>:
 800812c:	440a      	add	r2, r1
 800812e:	4291      	cmp	r1, r2
 8008130:	f100 33ff 	add.w	r3, r0, #4294967295
 8008134:	d100      	bne.n	8008138 <memcpy+0xc>
 8008136:	4770      	bx	lr
 8008138:	b510      	push	{r4, lr}
 800813a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800813e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008142:	4291      	cmp	r1, r2
 8008144:	d1f9      	bne.n	800813a <memcpy+0xe>
 8008146:	bd10      	pop	{r4, pc}

08008148 <memmove>:
 8008148:	4288      	cmp	r0, r1
 800814a:	b510      	push	{r4, lr}
 800814c:	eb01 0402 	add.w	r4, r1, r2
 8008150:	d902      	bls.n	8008158 <memmove+0x10>
 8008152:	4284      	cmp	r4, r0
 8008154:	4623      	mov	r3, r4
 8008156:	d807      	bhi.n	8008168 <memmove+0x20>
 8008158:	1e43      	subs	r3, r0, #1
 800815a:	42a1      	cmp	r1, r4
 800815c:	d008      	beq.n	8008170 <memmove+0x28>
 800815e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008162:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008166:	e7f8      	b.n	800815a <memmove+0x12>
 8008168:	4402      	add	r2, r0
 800816a:	4601      	mov	r1, r0
 800816c:	428a      	cmp	r2, r1
 800816e:	d100      	bne.n	8008172 <memmove+0x2a>
 8008170:	bd10      	pop	{r4, pc}
 8008172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800817a:	e7f7      	b.n	800816c <memmove+0x24>

0800817c <_free_r>:
 800817c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800817e:	2900      	cmp	r1, #0
 8008180:	d048      	beq.n	8008214 <_free_r+0x98>
 8008182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008186:	9001      	str	r0, [sp, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f1a1 0404 	sub.w	r4, r1, #4
 800818e:	bfb8      	it	lt
 8008190:	18e4      	addlt	r4, r4, r3
 8008192:	f000 f8d3 	bl	800833c <__malloc_lock>
 8008196:	4a20      	ldr	r2, [pc, #128]	; (8008218 <_free_r+0x9c>)
 8008198:	9801      	ldr	r0, [sp, #4]
 800819a:	6813      	ldr	r3, [r2, #0]
 800819c:	4615      	mov	r5, r2
 800819e:	b933      	cbnz	r3, 80081ae <_free_r+0x32>
 80081a0:	6063      	str	r3, [r4, #4]
 80081a2:	6014      	str	r4, [r2, #0]
 80081a4:	b003      	add	sp, #12
 80081a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081aa:	f000 b8cd 	b.w	8008348 <__malloc_unlock>
 80081ae:	42a3      	cmp	r3, r4
 80081b0:	d90b      	bls.n	80081ca <_free_r+0x4e>
 80081b2:	6821      	ldr	r1, [r4, #0]
 80081b4:	1862      	adds	r2, r4, r1
 80081b6:	4293      	cmp	r3, r2
 80081b8:	bf04      	itt	eq
 80081ba:	681a      	ldreq	r2, [r3, #0]
 80081bc:	685b      	ldreq	r3, [r3, #4]
 80081be:	6063      	str	r3, [r4, #4]
 80081c0:	bf04      	itt	eq
 80081c2:	1852      	addeq	r2, r2, r1
 80081c4:	6022      	streq	r2, [r4, #0]
 80081c6:	602c      	str	r4, [r5, #0]
 80081c8:	e7ec      	b.n	80081a4 <_free_r+0x28>
 80081ca:	461a      	mov	r2, r3
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	b10b      	cbz	r3, 80081d4 <_free_r+0x58>
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	d9fa      	bls.n	80081ca <_free_r+0x4e>
 80081d4:	6811      	ldr	r1, [r2, #0]
 80081d6:	1855      	adds	r5, r2, r1
 80081d8:	42a5      	cmp	r5, r4
 80081da:	d10b      	bne.n	80081f4 <_free_r+0x78>
 80081dc:	6824      	ldr	r4, [r4, #0]
 80081de:	4421      	add	r1, r4
 80081e0:	1854      	adds	r4, r2, r1
 80081e2:	42a3      	cmp	r3, r4
 80081e4:	6011      	str	r1, [r2, #0]
 80081e6:	d1dd      	bne.n	80081a4 <_free_r+0x28>
 80081e8:	681c      	ldr	r4, [r3, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	6053      	str	r3, [r2, #4]
 80081ee:	4421      	add	r1, r4
 80081f0:	6011      	str	r1, [r2, #0]
 80081f2:	e7d7      	b.n	80081a4 <_free_r+0x28>
 80081f4:	d902      	bls.n	80081fc <_free_r+0x80>
 80081f6:	230c      	movs	r3, #12
 80081f8:	6003      	str	r3, [r0, #0]
 80081fa:	e7d3      	b.n	80081a4 <_free_r+0x28>
 80081fc:	6825      	ldr	r5, [r4, #0]
 80081fe:	1961      	adds	r1, r4, r5
 8008200:	428b      	cmp	r3, r1
 8008202:	bf04      	itt	eq
 8008204:	6819      	ldreq	r1, [r3, #0]
 8008206:	685b      	ldreq	r3, [r3, #4]
 8008208:	6063      	str	r3, [r4, #4]
 800820a:	bf04      	itt	eq
 800820c:	1949      	addeq	r1, r1, r5
 800820e:	6021      	streq	r1, [r4, #0]
 8008210:	6054      	str	r4, [r2, #4]
 8008212:	e7c7      	b.n	80081a4 <_free_r+0x28>
 8008214:	b003      	add	sp, #12
 8008216:	bd30      	pop	{r4, r5, pc}
 8008218:	200000e0 	.word	0x200000e0

0800821c <_malloc_r>:
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	1ccd      	adds	r5, r1, #3
 8008220:	f025 0503 	bic.w	r5, r5, #3
 8008224:	3508      	adds	r5, #8
 8008226:	2d0c      	cmp	r5, #12
 8008228:	bf38      	it	cc
 800822a:	250c      	movcc	r5, #12
 800822c:	2d00      	cmp	r5, #0
 800822e:	4606      	mov	r6, r0
 8008230:	db01      	blt.n	8008236 <_malloc_r+0x1a>
 8008232:	42a9      	cmp	r1, r5
 8008234:	d903      	bls.n	800823e <_malloc_r+0x22>
 8008236:	230c      	movs	r3, #12
 8008238:	6033      	str	r3, [r6, #0]
 800823a:	2000      	movs	r0, #0
 800823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823e:	f000 f87d 	bl	800833c <__malloc_lock>
 8008242:	4921      	ldr	r1, [pc, #132]	; (80082c8 <_malloc_r+0xac>)
 8008244:	680a      	ldr	r2, [r1, #0]
 8008246:	4614      	mov	r4, r2
 8008248:	b99c      	cbnz	r4, 8008272 <_malloc_r+0x56>
 800824a:	4f20      	ldr	r7, [pc, #128]	; (80082cc <_malloc_r+0xb0>)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	b923      	cbnz	r3, 800825a <_malloc_r+0x3e>
 8008250:	4621      	mov	r1, r4
 8008252:	4630      	mov	r0, r6
 8008254:	f000 f862 	bl	800831c <_sbrk_r>
 8008258:	6038      	str	r0, [r7, #0]
 800825a:	4629      	mov	r1, r5
 800825c:	4630      	mov	r0, r6
 800825e:	f000 f85d 	bl	800831c <_sbrk_r>
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	d123      	bne.n	80082ae <_malloc_r+0x92>
 8008266:	230c      	movs	r3, #12
 8008268:	6033      	str	r3, [r6, #0]
 800826a:	4630      	mov	r0, r6
 800826c:	f000 f86c 	bl	8008348 <__malloc_unlock>
 8008270:	e7e3      	b.n	800823a <_malloc_r+0x1e>
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	1b5b      	subs	r3, r3, r5
 8008276:	d417      	bmi.n	80082a8 <_malloc_r+0x8c>
 8008278:	2b0b      	cmp	r3, #11
 800827a:	d903      	bls.n	8008284 <_malloc_r+0x68>
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	441c      	add	r4, r3
 8008280:	6025      	str	r5, [r4, #0]
 8008282:	e004      	b.n	800828e <_malloc_r+0x72>
 8008284:	6863      	ldr	r3, [r4, #4]
 8008286:	42a2      	cmp	r2, r4
 8008288:	bf0c      	ite	eq
 800828a:	600b      	streq	r3, [r1, #0]
 800828c:	6053      	strne	r3, [r2, #4]
 800828e:	4630      	mov	r0, r6
 8008290:	f000 f85a 	bl	8008348 <__malloc_unlock>
 8008294:	f104 000b 	add.w	r0, r4, #11
 8008298:	1d23      	adds	r3, r4, #4
 800829a:	f020 0007 	bic.w	r0, r0, #7
 800829e:	1ac2      	subs	r2, r0, r3
 80082a0:	d0cc      	beq.n	800823c <_malloc_r+0x20>
 80082a2:	1a1b      	subs	r3, r3, r0
 80082a4:	50a3      	str	r3, [r4, r2]
 80082a6:	e7c9      	b.n	800823c <_malloc_r+0x20>
 80082a8:	4622      	mov	r2, r4
 80082aa:	6864      	ldr	r4, [r4, #4]
 80082ac:	e7cc      	b.n	8008248 <_malloc_r+0x2c>
 80082ae:	1cc4      	adds	r4, r0, #3
 80082b0:	f024 0403 	bic.w	r4, r4, #3
 80082b4:	42a0      	cmp	r0, r4
 80082b6:	d0e3      	beq.n	8008280 <_malloc_r+0x64>
 80082b8:	1a21      	subs	r1, r4, r0
 80082ba:	4630      	mov	r0, r6
 80082bc:	f000 f82e 	bl	800831c <_sbrk_r>
 80082c0:	3001      	adds	r0, #1
 80082c2:	d1dd      	bne.n	8008280 <_malloc_r+0x64>
 80082c4:	e7cf      	b.n	8008266 <_malloc_r+0x4a>
 80082c6:	bf00      	nop
 80082c8:	200000e0 	.word	0x200000e0
 80082cc:	200000e4 	.word	0x200000e4

080082d0 <_realloc_r>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	4607      	mov	r7, r0
 80082d4:	4614      	mov	r4, r2
 80082d6:	460e      	mov	r6, r1
 80082d8:	b921      	cbnz	r1, 80082e4 <_realloc_r+0x14>
 80082da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082de:	4611      	mov	r1, r2
 80082e0:	f7ff bf9c 	b.w	800821c <_malloc_r>
 80082e4:	b922      	cbnz	r2, 80082f0 <_realloc_r+0x20>
 80082e6:	f7ff ff49 	bl	800817c <_free_r>
 80082ea:	4625      	mov	r5, r4
 80082ec:	4628      	mov	r0, r5
 80082ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f0:	f000 f830 	bl	8008354 <_malloc_usable_size_r>
 80082f4:	42a0      	cmp	r0, r4
 80082f6:	d20f      	bcs.n	8008318 <_realloc_r+0x48>
 80082f8:	4621      	mov	r1, r4
 80082fa:	4638      	mov	r0, r7
 80082fc:	f7ff ff8e 	bl	800821c <_malloc_r>
 8008300:	4605      	mov	r5, r0
 8008302:	2800      	cmp	r0, #0
 8008304:	d0f2      	beq.n	80082ec <_realloc_r+0x1c>
 8008306:	4631      	mov	r1, r6
 8008308:	4622      	mov	r2, r4
 800830a:	f7ff ff0f 	bl	800812c <memcpy>
 800830e:	4631      	mov	r1, r6
 8008310:	4638      	mov	r0, r7
 8008312:	f7ff ff33 	bl	800817c <_free_r>
 8008316:	e7e9      	b.n	80082ec <_realloc_r+0x1c>
 8008318:	4635      	mov	r5, r6
 800831a:	e7e7      	b.n	80082ec <_realloc_r+0x1c>

0800831c <_sbrk_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d06      	ldr	r5, [pc, #24]	; (8008338 <_sbrk_r+0x1c>)
 8008320:	2300      	movs	r3, #0
 8008322:	4604      	mov	r4, r0
 8008324:	4608      	mov	r0, r1
 8008326:	602b      	str	r3, [r5, #0]
 8008328:	f7fa fd18 	bl	8002d5c <_sbrk>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_sbrk_r+0x1a>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_sbrk_r+0x1a>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	200003a8 	.word	0x200003a8

0800833c <__malloc_lock>:
 800833c:	4801      	ldr	r0, [pc, #4]	; (8008344 <__malloc_lock+0x8>)
 800833e:	f000 b811 	b.w	8008364 <__retarget_lock_acquire_recursive>
 8008342:	bf00      	nop
 8008344:	200003b0 	.word	0x200003b0

08008348 <__malloc_unlock>:
 8008348:	4801      	ldr	r0, [pc, #4]	; (8008350 <__malloc_unlock+0x8>)
 800834a:	f000 b80c 	b.w	8008366 <__retarget_lock_release_recursive>
 800834e:	bf00      	nop
 8008350:	200003b0 	.word	0x200003b0

08008354 <_malloc_usable_size_r>:
 8008354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008358:	1f18      	subs	r0, r3, #4
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfbc      	itt	lt
 800835e:	580b      	ldrlt	r3, [r1, r0]
 8008360:	18c0      	addlt	r0, r0, r3
 8008362:	4770      	bx	lr

08008364 <__retarget_lock_acquire_recursive>:
 8008364:	4770      	bx	lr

08008366 <__retarget_lock_release_recursive>:
 8008366:	4770      	bx	lr

08008368 <_init>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	bf00      	nop
 800836c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836e:	bc08      	pop	{r3}
 8008370:	469e      	mov	lr, r3
 8008372:	4770      	bx	lr

08008374 <_fini>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	bf00      	nop
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr
