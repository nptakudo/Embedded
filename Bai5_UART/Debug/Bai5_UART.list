
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003248  08008c28  08008c28  00018c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be70  0800be70  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800be70  0800be70  0001be70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be78  0800be78  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be78  0800be78  0001be78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be7c  0800be7c  0001be7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800be80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          0000032c  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003c4  200003c4  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c721  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cfe  00000000  00000000  0003c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  000404e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001430  00000000  00000000  00041aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024661  00000000  00000000  00042ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c28b  00000000  00000000  00067539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d36c4  00000000  00000000  000837c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00156e88  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006200  00000000  00000000  00156edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c10 	.word	0x08008c10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08008c10 	.word	0x08008c10

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2108      	movs	r1, #8
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <button_init+0x14>)
 8000582:	f003 f99f 	bl	80038c4 <HAL_GPIO_WritePin>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40020c00 	.word	0x40020c00

08000590 <button_Scan>:

void button_Scan(){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	482f      	ldr	r0, [pc, #188]	; (8000658 <button_Scan+0xc8>)
 800059c:	f003 f992 	bl	80038c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2108      	movs	r1, #8
 80005a4:	482c      	ldr	r0, [pc, #176]	; (8000658 <button_Scan+0xc8>)
 80005a6:	f003 f98d 	bl	80038c4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005aa:	230a      	movs	r3, #10
 80005ac:	2202      	movs	r2, #2
 80005ae:	492b      	ldr	r1, [pc, #172]	; (800065c <button_Scan+0xcc>)
 80005b0:	482b      	ldr	r0, [pc, #172]	; (8000660 <button_Scan+0xd0>)
 80005b2:	f005 f8c8 	bl	8005746 <HAL_SPI_Receive>
	  int button_index = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005be:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	e03f      	b.n	8000646 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db06      	blt.n	80005da <button_Scan+0x4a>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	dc03      	bgt.n	80005da <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3304      	adds	r3, #4
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e018      	b.n	800060c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	dd07      	ble.n	80005f0 <button_Scan+0x60>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	dc04      	bgt.n	80005f0 <button_Scan+0x60>
			  button_index = 7 - i;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f1c3 0307 	rsb	r3, r3, #7
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e00d      	b.n	800060c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b07      	cmp	r3, #7
 80005f4:	dd06      	ble.n	8000604 <button_Scan+0x74>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0b      	cmp	r3, #11
 80005fa:	dc03      	bgt.n	8000604 <button_Scan+0x74>
			  button_index = i + 4;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3304      	adds	r3, #4
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e003      	b.n	800060c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f1c3 0317 	rsb	r3, r3, #23
 800060a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <button_Scan+0xcc>)
 800060e:	881a      	ldrh	r2, [r3, #0]
 8000610:	897b      	ldrh	r3, [r7, #10]
 8000612:	4013      	ands	r3, r2
 8000614:	b29b      	uxth	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d005      	beq.n	8000626 <button_Scan+0x96>
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <button_Scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2100      	movs	r1, #0
 8000620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000624:	e009      	b.n	800063a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <button_Scan+0xd4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062e:	3301      	adds	r3, #1
 8000630:	b299      	uxth	r1, r3
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <button_Scan+0xd4>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800063a:	897b      	ldrh	r3, [r7, #10]
 800063c:	085b      	lsrs	r3, r3, #1
 800063e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	ddbc      	ble.n	80005c6 <button_Scan+0x36>
	  }
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40020c00 	.word	0x40020c00
 800065c:	200000b4 	.word	0x200000b4
 8000660:	20000204 	.word	0x20000204
 8000664:	200000f4 	.word	0x200000f4

08000668 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 800066c:	201e      	movs	r0, #30
 800066e:	f002 fd05 	bl	800307c <DEC2BCD>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <ds3231_init+0x80>)
 8000678:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 800067a:	2016      	movs	r0, #22
 800067c:	f002 fcfe 	bl	800307c <DEC2BCD>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <ds3231_init+0x80>)
 8000686:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000688:	2015      	movs	r0, #21
 800068a:	f002 fcf7 	bl	800307c <DEC2BCD>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <ds3231_init+0x80>)
 8000694:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000696:	2006      	movs	r0, #6
 8000698:	f002 fcf0 	bl	800307c <DEC2BCD>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <ds3231_init+0x80>)
 80006a2:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80006a4:	200f      	movs	r0, #15
 80006a6:	f002 fce9 	bl	800307c <DEC2BCD>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <ds3231_init+0x80>)
 80006b0:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80006b2:	2009      	movs	r0, #9
 80006b4:	f002 fce2 	bl	800307c <DEC2BCD>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <ds3231_init+0x80>)
 80006be:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80006c0:	2017      	movs	r0, #23
 80006c2:	f002 fcdb 	bl	800307c <DEC2BCD>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <ds3231_init+0x80>)
 80006cc:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80006ce:	2332      	movs	r3, #50	; 0x32
 80006d0:	2203      	movs	r2, #3
 80006d2:	21d0      	movs	r1, #208	; 0xd0
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <ds3231_init+0x84>)
 80006d6:	f003 fd73 	bl	80041c0 <HAL_I2C_IsDeviceReady>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d000      	beq.n	80006e2 <ds3231_init+0x7a>
		while(1);
 80006e0:	e7fe      	b.n	80006e0 <ds3231_init+0x78>
	};
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000011c 	.word	0x2000011c
 80006ec:	20000174 	.word	0x20000174

080006f0 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af04      	add	r7, sp, #16
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fcba 	bl	800307c <DEC2BCD>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	b29a      	uxth	r2, r3
 8000710:	230a      	movs	r3, #10
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	2301      	movs	r3, #1
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	f107 030f 	add.w	r3, r7, #15
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	21d0      	movs	r1, #208	; 0xd0
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <ds3231_Write+0x40>)
 8000724:	f003 fa2c 	bl	8003b80 <HAL_I2C_Mem_Write>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000174 	.word	0x20000174

08000734 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800073a:	230a      	movs	r3, #10
 800073c:	9302      	str	r3, [sp, #8]
 800073e:	2307      	movs	r3, #7
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <ds3231_ReadTime+0xa4>)
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2301      	movs	r3, #1
 8000748:	2200      	movs	r2, #0
 800074a:	21d0      	movs	r1, #208	; 0xd0
 800074c:	4823      	ldr	r0, [pc, #140]	; (80007dc <ds3231_ReadTime+0xa8>)
 800074e:	f003 fb11 	bl	8003d74 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <ds3231_ReadTime+0xa4>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f002 fc76 	bl	8003048 <BCD2DEC>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <ds3231_ReadTime+0xac>)
 8000762:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <ds3231_ReadTime+0xa4>)
 8000766:	785b      	ldrb	r3, [r3, #1]
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fc6d 	bl	8003048 <BCD2DEC>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <ds3231_ReadTime+0xb0>)
 8000774:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <ds3231_ReadTime+0xa4>)
 8000778:	789b      	ldrb	r3, [r3, #2]
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fc64 	bl	8003048 <BCD2DEC>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <ds3231_ReadTime+0xb4>)
 8000786:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <ds3231_ReadTime+0xa4>)
 800078a:	78db      	ldrb	r3, [r3, #3]
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fc5b 	bl	8003048 <BCD2DEC>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <ds3231_ReadTime+0xb8>)
 8000798:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <ds3231_ReadTime+0xa4>)
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fc52 	bl	8003048 <BCD2DEC>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <ds3231_ReadTime+0xbc>)
 80007aa:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <ds3231_ReadTime+0xa4>)
 80007ae:	795b      	ldrb	r3, [r3, #5]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fc49 	bl	8003048 <BCD2DEC>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <ds3231_ReadTime+0xc0>)
 80007bc:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <ds3231_ReadTime+0xa4>)
 80007c0:	799b      	ldrb	r3, [r3, #6]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 fc40 	bl	8003048 <BCD2DEC>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <ds3231_ReadTime+0xc4>)
 80007ce:	701a      	strb	r2, [r3, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000011c 	.word	0x2000011c
 80007dc:	20000174 	.word	0x20000174
 80007e0:	20000114 	.word	0x20000114
 80007e4:	20000116 	.word	0x20000116
 80007e8:	20000119 	.word	0x20000119
 80007ec:	20000118 	.word	0x20000118
 80007f0:	20000117 	.word	0x20000117
 80007f4:	2000011a 	.word	0x2000011a
 80007f8:	20000115 	.word	0x20000115

080007fc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	; 0x38
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <MX_FSMC_Init+0xec>)
 800082a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800082e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000830:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000832:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <MX_FSMC_Init+0xf0>)
 8000834:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800083c:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <MX_FSMC_Init+0xec>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <MX_FSMC_Init+0xec>)
 800084a:	2210      	movs	r2, #16
 800084c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800085a:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <MX_FSMC_Init+0xec>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000860:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000870:	2200      	movs	r2, #0
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_FSMC_Init+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_FSMC_Init+0xec>)
 8000884:	2200      	movs	r2, #0
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_FSMC_Init+0xec>)
 800088a:	2200      	movs	r2, #0
 800088c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800088e:	230f      	movs	r3, #15
 8000890:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000892:	230f      	movs	r3, #15
 8000894:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000896:	233c      	movs	r3, #60	; 0x3c
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800089e:	2310      	movs	r3, #16
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80008a2:	2311      	movs	r3, #17
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80008a6:	2300      	movs	r3, #0
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80008aa:	2308      	movs	r3, #8
 80008ac:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80008ae:	230f      	movs	r3, #15
 80008b0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80008b2:	2309      	movs	r3, #9
 80008b4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008ba:	2310      	movs	r3, #16
 80008bc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008be:	2311      	movs	r3, #17
 80008c0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008c6:	463a      	mov	r2, r7
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <MX_FSMC_Init+0xec>)
 80008d0:	f005 fb1c 	bl	8005f0c <HAL_SRAM_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008da:	f002 f8e1 	bl	8002aa0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008de:	bf00      	nop
 80008e0:	3738      	adds	r7, #56	; 0x38
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000124 	.word	0x20000124
 80008ec:	a0000104 	.word	0xa0000104

080008f0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <HAL_FSMC_MspInit+0x88>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d131      	bne.n	8000970 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <HAL_FSMC_MspInit+0x88>)
 800090e:	2201      	movs	r2, #1
 8000910:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_FSMC_MspInit+0x8c>)
 8000918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <HAL_FSMC_MspInit+0x8c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6393      	str	r3, [r2, #56]	; 0x38
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_FSMC_MspInit+0x8c>)
 8000924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800092e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000932:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000940:	230c      	movs	r3, #12
 8000942:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <HAL_FSMC_MspInit+0x90>)
 800094a:	f002 fe1f 	bl	800358c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800094e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000952:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000960:	230c      	movs	r3, #12
 8000962:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <HAL_FSMC_MspInit+0x94>)
 800096a:	f002 fe0f 	bl	800358c <HAL_GPIO_Init>
 800096e:	e000      	b.n	8000972 <HAL_FSMC_MspInit+0x82>
    return;
 8000970:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000b8 	.word	0x200000b8
 800097c:	40023800 	.word	0x40023800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020c00 	.word	0x40020c00

08000988 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000990:	f7ff ffae 	bl	80008f0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	4b6f      	ldr	r3, [pc, #444]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a6e      	ldr	r2, [pc, #440]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b6c      	ldr	r3, [pc, #432]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	4b68      	ldr	r3, [pc, #416]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a67      	ldr	r2, [pc, #412]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b65      	ldr	r3, [pc, #404]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b61      	ldr	r3, [pc, #388]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a60      	ldr	r2, [pc, #384]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b5e      	ldr	r3, [pc, #376]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b5a      	ldr	r3, [pc, #360]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a59      	ldr	r2, [pc, #356]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b57      	ldr	r3, [pc, #348]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b53      	ldr	r3, [pc, #332]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a52      	ldr	r2, [pc, #328]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b50      	ldr	r3, [pc, #320]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a4b      	ldr	r2, [pc, #300]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b49      	ldr	r3, [pc, #292]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a44      	ldr	r2, [pc, #272]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b42      	ldr	r3, [pc, #264]	; (8000b74 <MX_GPIO_Init+0x1d8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2170      	movs	r1, #112	; 0x70
 8000a7a:	483f      	ldr	r0, [pc, #252]	; (8000b78 <MX_GPIO_Init+0x1dc>)
 8000a7c:	f002 ff22 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a86:	483d      	ldr	r0, [pc, #244]	; (8000b7c <MX_GPIO_Init+0x1e0>)
 8000a88:	f002 ff1c 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	483b      	ldr	r0, [pc, #236]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 8000a92:	f002 ff17 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	4839      	ldr	r0, [pc, #228]	; (8000b84 <MX_GPIO_Init+0x1e8>)
 8000a9e:	f002 ff11 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2108      	movs	r1, #8
 8000aa6:	4838      	ldr	r0, [pc, #224]	; (8000b88 <MX_GPIO_Init+0x1ec>)
 8000aa8:	f002 ff0c 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000aac:	2370      	movs	r3, #112	; 0x70
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	482d      	ldr	r0, [pc, #180]	; (8000b78 <MX_GPIO_Init+0x1dc>)
 8000ac4:	f002 fd62 	bl	800358c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4826      	ldr	r0, [pc, #152]	; (8000b7c <MX_GPIO_Init+0x1e0>)
 8000ae2:	f002 fd53 	bl	800358c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000ae6:	23c0      	movs	r3, #192	; 0xc0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4822      	ldr	r0, [pc, #136]	; (8000b84 <MX_GPIO_Init+0x1e8>)
 8000afa:	f002 fd47 	bl	800358c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000afe:	2330      	movs	r3, #48	; 0x30
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	481a      	ldr	r0, [pc, #104]	; (8000b7c <MX_GPIO_Init+0x1e0>)
 8000b12:	f002 fd3b 	bl	800358c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000b16:	2340      	movs	r3, #64	; 0x40
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4814      	ldr	r0, [pc, #80]	; (8000b80 <MX_GPIO_Init+0x1e4>)
 8000b2e:	f002 fd2d 	bl	800358c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480e      	ldr	r0, [pc, #56]	; (8000b84 <MX_GPIO_Init+0x1e8>)
 8000b4c:	f002 fd1e 	bl	800358c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b50:	2308      	movs	r3, #8
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4808      	ldr	r0, [pc, #32]	; (8000b88 <MX_GPIO_Init+0x1ec>)
 8000b68:	f002 fd10 	bl	800358c <HAL_GPIO_Init>

}
 8000b6c:	bf00      	nop
 8000b6e:	3730      	adds	r7, #48	; 0x30
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020c00 	.word	0x40020c00

08000b8c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <MX_I2C1_Init+0x54>)
 8000b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b98:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_I2C1_Init+0x58>)
 8000b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_I2C1_Init+0x50>)
 8000bca:	f002 fe95 	bl	80038f8 <HAL_I2C_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bd4:	f001 ff64 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000174 	.word	0x20000174
 8000be0:	40005400 	.word	0x40005400
 8000be4:	000186a0 	.word	0x000186a0

08000be8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <HAL_I2C_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12b      	bne.n	8000c62 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c26:	23c0      	movs	r3, #192	; 0xc0
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2a:	2312      	movs	r3, #18
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c36:	2304      	movs	r3, #4
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <HAL_I2C_MspInit+0x8c>)
 8000c42:	f002 fca3 	bl	800358c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_I2C_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	; 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020400 	.word	0x40020400

08000c78 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <LCD_WR_REG+0x1c>)
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	8013      	strh	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	600ffffe 	.word	0x600ffffe

08000c98 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <LCD_WR_DATA+0x1c>)
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	8053      	strh	r3, [r2, #2]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	600ffffe 	.word	0x600ffffe

08000cb8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <LCD_RD_DATA+0x20>)
 8000cc0:	885b      	ldrh	r3, [r3, #2]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	b29b      	uxth	r3, r3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	600ffffe 	.word	0x600ffffe

08000cdc <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4623      	mov	r3, r4
 8000cec:	80fb      	strh	r3, [r7, #6]
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80bb      	strh	r3, [r7, #4]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	807b      	strh	r3, [r7, #2]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000cfa:	202a      	movs	r0, #42	; 0x2a
 8000cfc:	f7ff ffbc 	bl	8000c78 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ffc6 	bl	8000c98 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ffc0 	bl	8000c98 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ffba 	bl	8000c98 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ffb4 	bl	8000c98 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000d30:	202b      	movs	r0, #43	; 0x2b
 8000d32:	f7ff ffa1 	bl	8000c78 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ffab 	bl	8000c98 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d42:	88bb      	ldrh	r3, [r7, #4]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ffa5 	bl	8000c98 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d4e:	883b      	ldrh	r3, [r7, #0]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff9f 	bl	8000c98 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d5a:	883b      	ldrh	r3, [r7, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff99 	bl	8000c98 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d66:	202c      	movs	r0, #44	; 0x2c
 8000d68:	f7ff ff86 	bl	8000c78 <LCD_WR_REG>
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd90      	pop	{r4, r7, pc}

08000d74 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <lcd_Clear+0x70>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <lcd_Clear+0x70>)
 8000d98:	885b      	ldrh	r3, [r3, #2]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff ff9b 	bl	8000cdc <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	81fb      	strh	r3, [r7, #14]
 8000daa:	e011      	b.n	8000dd0 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	81bb      	strh	r3, [r7, #12]
 8000db0:	e006      	b.n	8000dc0 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff6f 	bl	8000c98 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000dba:	89bb      	ldrh	r3, [r7, #12]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	81bb      	strh	r3, [r7, #12]
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <lcd_Clear+0x70>)
 8000dc2:	885b      	ldrh	r3, [r3, #2]
 8000dc4:	89ba      	ldrh	r2, [r7, #12]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d3f3      	bcc.n	8000db2 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	81fb      	strh	r3, [r7, #14]
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <lcd_Clear+0x70>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	89fa      	ldrh	r2, [r7, #14]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d3e8      	bcc.n	8000dac <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000dda:	bf00      	nop
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200001c8 	.word	0x200001c8

08000de8 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
 8000df2:	460b      	mov	r3, r1
 8000df4:	80bb      	strh	r3, [r7, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	88fa      	ldrh	r2, [r7, #6]
 8000dfe:	88b9      	ldrh	r1, [r7, #4]
 8000e00:	88f8      	ldrh	r0, [r7, #6]
 8000e02:	f7ff ff6b 	bl	8000cdc <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff45 	bl	8000c98 <LCD_WR_DATA>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4604      	mov	r4, r0
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4623      	mov	r3, r4
 8000e28:	80fb      	strh	r3, [r7, #6]
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80bb      	strh	r3, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	70fb      	strb	r3, [r7, #3]
 8000e32:	4613      	mov	r3, r2
 8000e34:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e42:	085b      	lsrs	r3, r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bf14      	ite	ne
 8000e5a:	2301      	movne	r3, #1
 8000e5c:	2300      	moveq	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	fb12 f303 	smulbb	r3, r2, r3
 8000e6e:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	3b20      	subs	r3, #32
 8000e74:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b29c      	uxth	r4, r3
 8000e84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3b01      	subs	r3, #1
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	88b9      	ldrh	r1, [r7, #4]
 8000e96:	88f8      	ldrh	r0, [r7, #6]
 8000e98:	4622      	mov	r2, r4
 8000e9a:	f7ff ff1f 	bl	8000cdc <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	827b      	strh	r3, [r7, #18]
 8000ea2:	e07a      	b.n	8000f9a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000ea4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ea8:	2b0c      	cmp	r3, #12
 8000eaa:	d028      	beq.n	8000efe <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000eac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d108      	bne.n	8000ec6 <lcd_ShowChar+0xae>
 8000eb4:	78fa      	ldrb	r2, [r7, #3]
 8000eb6:	8a7b      	ldrh	r3, [r7, #18]
 8000eb8:	493c      	ldr	r1, [pc, #240]	; (8000fac <lcd_ShowChar+0x194>)
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	440a      	add	r2, r1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	75fb      	strb	r3, [r7, #23]
 8000ec4:	e01b      	b.n	8000efe <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000ec6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eca:	2b18      	cmp	r3, #24
 8000ecc:	d10b      	bne.n	8000ee6 <lcd_ShowChar+0xce>
 8000ece:	78fa      	ldrb	r2, [r7, #3]
 8000ed0:	8a79      	ldrh	r1, [r7, #18]
 8000ed2:	4837      	ldr	r0, [pc, #220]	; (8000fb0 <lcd_ShowChar+0x198>)
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	4403      	add	r3, r0
 8000ede:	440b      	add	r3, r1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	75fb      	strb	r3, [r7, #23]
 8000ee4:	e00b      	b.n	8000efe <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000ee6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eea:	2b20      	cmp	r3, #32
 8000eec:	d15a      	bne.n	8000fa4 <lcd_ShowChar+0x18c>
 8000eee:	78fa      	ldrb	r2, [r7, #3]
 8000ef0:	8a7b      	ldrh	r3, [r7, #18]
 8000ef2:	4930      	ldr	r1, [pc, #192]	; (8000fb4 <lcd_ShowChar+0x19c>)
 8000ef4:	0192      	lsls	r2, r2, #6
 8000ef6:	440a      	add	r2, r1
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	75bb      	strb	r3, [r7, #22]
 8000f02:	e044      	b.n	8000f8e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000f04:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d120      	bne.n	8000f4e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000f0c:	7dfa      	ldrb	r2, [r7, #23]
 8000f0e:	7dbb      	ldrb	r3, [r7, #22]
 8000f10:	fa42 f303 	asr.w	r3, r2, r3
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <lcd_ShowChar+0x10e>
 8000f1c:	883b      	ldrh	r3, [r7, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff feba 	bl	8000c98 <LCD_WR_DATA>
 8000f24:	e003      	b.n	8000f2e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000f26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff feb5 	bl	8000c98 <LCD_WR_DATA>
				m++;
 8000f2e:	7d7b      	ldrb	r3, [r7, #21]
 8000f30:	3301      	adds	r3, #1
 8000f32:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f34:	7d7b      	ldrb	r3, [r7, #21]
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f3c:	fb02 f201 	mul.w	r2, r2, r1
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d11f      	bne.n	8000f88 <lcd_ShowChar+0x170>
				{
					m=0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	757b      	strb	r3, [r7, #21]
					break;
 8000f4c:	e022      	b.n	8000f94 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f4e:	7dfa      	ldrb	r2, [r7, #23]
 8000f50:	7dbb      	ldrb	r3, [r7, #22]
 8000f52:	fa42 f303 	asr.w	r3, r2, r3
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d005      	beq.n	8000f6a <lcd_ShowChar+0x152>
 8000f5e:	883a      	ldrh	r2, [r7, #0]
 8000f60:	88b9      	ldrh	r1, [r7, #4]
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff3f 	bl	8000de8 <lcd_DrawPoint>
				x++;
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f70:	88fa      	ldrh	r2, [r7, #6]
 8000f72:	8a3b      	ldrh	r3, [r7, #16]
 8000f74:	1ad2      	subs	r2, r2, r3
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d105      	bne.n	8000f88 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f7c:	8a3b      	ldrh	r3, [r7, #16]
 8000f7e:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	3301      	adds	r3, #1
 8000f84:	80bb      	strh	r3, [r7, #4]
					break;
 8000f86:	e005      	b.n	8000f94 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f88:	7dbb      	ldrb	r3, [r7, #22]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	75bb      	strb	r3, [r7, #22]
 8000f8e:	7dbb      	ldrb	r3, [r7, #22]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	d9b7      	bls.n	8000f04 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f94:	8a7b      	ldrh	r3, [r7, #18]
 8000f96:	3301      	adds	r3, #1
 8000f98:	827b      	strh	r3, [r7, #18]
 8000f9a:	8a7a      	ldrh	r2, [r7, #18]
 8000f9c:	89bb      	ldrh	r3, [r7, #12]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d380      	bcc.n	8000ea4 <lcd_ShowChar+0x8c>
 8000fa2:	e000      	b.n	8000fa6 <lcd_ShowChar+0x18e>
		else return;
 8000fa4:	bf00      	nop
				}
			}
		}
	}
}
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	08008d28 	.word	0x08008d28
 8000fb0:	08009318 	.word	0x08009318
 8000fb4:	0800a4e8 	.word	0x0800a4e8

08000fb8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000fcc:	e004      	b.n	8000fd8 <mypow+0x20>
 8000fce:	79fa      	ldrb	r2, [r7, #7]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	1e5a      	subs	r2, r3, #1
 8000fdc:	71ba      	strb	r2, [r7, #6]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f5      	bne.n	8000fce <mypow+0x16>
	return result;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4623      	mov	r3, r4
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	4603      	mov	r3, r0
 8001004:	80bb      	strh	r3, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	807b      	strh	r3, [r7, #2]
 800100a:	4613      	mov	r3, r2
 800100c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800100e:	2300      	movs	r3, #0
 8001010:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001012:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001016:	085b      	lsrs	r3, r3, #1
 8001018:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e059      	b.n	80010d4 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001020:	887c      	ldrh	r4, [r7, #2]
 8001022:	787a      	ldrb	r2, [r7, #1]
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	3b01      	subs	r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4619      	mov	r1, r3
 8001030:	200a      	movs	r0, #10
 8001032:	f7ff ffc1 	bl	8000fb8 <mypow>
 8001036:	4603      	mov	r3, r0
 8001038:	fbb4 f1f3 	udiv	r1, r4, r3
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <lcd_ShowIntNum+0xf8>)
 800103e:	fba3 2301 	umull	r2, r3, r3, r1
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	1aca      	subs	r2, r1, r3
 800104e:	4613      	mov	r3, r2
 8001050:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d121      	bne.n	800109c <lcd_ShowIntNum+0xac>
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	787b      	ldrb	r3, [r7, #1]
 800105c:	3b01      	subs	r3, #1
 800105e:	429a      	cmp	r2, r3
 8001060:	da1c      	bge.n	800109c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001062:	7b3b      	ldrb	r3, [r7, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d117      	bne.n	8001098 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	b29a      	uxth	r2, r3
 800106c:	7b7b      	ldrb	r3, [r7, #13]
 800106e:	b29b      	uxth	r3, r3
 8001070:	fb12 f303 	smulbb	r3, r2, r3
 8001074:	b29a      	uxth	r2, r3
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	4413      	add	r3, r2
 800107a:	b298      	uxth	r0, r3
 800107c:	8c3a      	ldrh	r2, [r7, #32]
 800107e:	88b9      	ldrh	r1, [r7, #4]
 8001080:	2300      	movs	r3, #0
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4613      	mov	r3, r2
 8001090:	2220      	movs	r2, #32
 8001092:	f7ff fec1 	bl	8000e18 <lcd_ShowChar>
				continue;
 8001096:	e01a      	b.n	80010ce <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001098:	2301      	movs	r3, #1
 800109a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	7b7b      	ldrb	r3, [r7, #13]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	fb12 f303 	smulbb	r3, r2, r3
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	4413      	add	r3, r2
 80010ae:	b298      	uxth	r0, r3
 80010b0:	7b3b      	ldrb	r3, [r7, #12]
 80010b2:	3330      	adds	r3, #48	; 0x30
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	8c3c      	ldrh	r4, [r7, #32]
 80010b8:	88b9      	ldrh	r1, [r7, #4]
 80010ba:	2300      	movs	r3, #0
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4623      	mov	r3, r4
 80010ca:	f7ff fea5 	bl	8000e18 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	787b      	ldrb	r3, [r7, #1]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d3a1      	bcc.n	8001020 <lcd_ShowIntNum+0x30>
	}
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	bf00      	nop
 80010e8:	cccccccd 	.word	0xcccccccd

080010ec <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d007      	beq.n	8001116 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <lcd_SetDir+0x44>)
 8001108:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800110c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <lcd_SetDir+0x44>)
 8001110:	22f0      	movs	r2, #240	; 0xf0
 8001112:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001114:	e006      	b.n	8001124 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <lcd_SetDir+0x44>)
 8001118:	22f0      	movs	r2, #240	; 0xf0
 800111a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <lcd_SetDir+0x44>)
 800111e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001122:	805a      	strh	r2, [r3, #2]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	200001c8 	.word	0x200001c8

08001134 <lcd_init>:


void lcd_init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113e:	48aa      	ldr	r0, [pc, #680]	; (80013e8 <lcd_init+0x2b4>)
 8001140:	f002 fbc0 	bl	80038c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001144:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001148:	f002 f858 	bl	80031fc <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001152:	48a5      	ldr	r0, [pc, #660]	; (80013e8 <lcd_init+0x2b4>)
 8001154:	f002 fbb6 	bl	80038c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001158:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800115c:	f002 f84e 	bl	80031fc <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff ffc3 	bl	80010ec <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001166:	20d3      	movs	r0, #211	; 0xd3
 8001168:	f7ff fd86 	bl	8000c78 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800116c:	f7ff fda4 	bl	8000cb8 <LCD_RD_DATA>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b9d      	ldr	r3, [pc, #628]	; (80013ec <lcd_init+0x2b8>)
 8001176:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001178:	f7ff fd9e 	bl	8000cb8 <LCD_RD_DATA>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b9a      	ldr	r3, [pc, #616]	; (80013ec <lcd_init+0x2b8>)
 8001182:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001184:	f7ff fd98 	bl	8000cb8 <LCD_RD_DATA>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b97      	ldr	r3, [pc, #604]	; (80013ec <lcd_init+0x2b8>)
 800118e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001190:	4b96      	ldr	r3, [pc, #600]	; (80013ec <lcd_init+0x2b8>)
 8001192:	889b      	ldrh	r3, [r3, #4]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b94      	ldr	r3, [pc, #592]	; (80013ec <lcd_init+0x2b8>)
 800119a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800119c:	f7ff fd8c 	bl	8000cb8 <LCD_RD_DATA>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b91      	ldr	r3, [pc, #580]	; (80013ec <lcd_init+0x2b8>)
 80011a6:	889b      	ldrh	r3, [r3, #4]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b8f      	ldr	r3, [pc, #572]	; (80013ec <lcd_init+0x2b8>)
 80011ae:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80011b0:	20cf      	movs	r0, #207	; 0xcf
 80011b2:	f7ff fd61 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fd6e 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80011bc:	20c1      	movs	r0, #193	; 0xc1
 80011be:	f7ff fd6b 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80011c2:	2030      	movs	r0, #48	; 0x30
 80011c4:	f7ff fd68 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80011c8:	20ed      	movs	r0, #237	; 0xed
 80011ca:	f7ff fd55 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f7ff fd62 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f7ff fd5f 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80011da:	2012      	movs	r0, #18
 80011dc:	f7ff fd5c 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80011e0:	2081      	movs	r0, #129	; 0x81
 80011e2:	f7ff fd59 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80011e6:	20e8      	movs	r0, #232	; 0xe8
 80011e8:	f7ff fd46 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80011ec:	2085      	movs	r0, #133	; 0x85
 80011ee:	f7ff fd53 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011f2:	2010      	movs	r0, #16
 80011f4:	f7ff fd50 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80011f8:	207a      	movs	r0, #122	; 0x7a
 80011fa:	f7ff fd4d 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80011fe:	20cb      	movs	r0, #203	; 0xcb
 8001200:	f7ff fd3a 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001204:	2039      	movs	r0, #57	; 0x39
 8001206:	f7ff fd47 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800120a:	202c      	movs	r0, #44	; 0x2c
 800120c:	f7ff fd44 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fd41 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001216:	2034      	movs	r0, #52	; 0x34
 8001218:	f7ff fd3e 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff fd3b 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001222:	20f7      	movs	r0, #247	; 0xf7
 8001224:	f7ff fd28 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001228:	2020      	movs	r0, #32
 800122a:	f7ff fd35 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800122e:	20ea      	movs	r0, #234	; 0xea
 8001230:	f7ff fd22 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fd2f 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff fd2c 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001240:	20c0      	movs	r0, #192	; 0xc0
 8001242:	f7ff fd19 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001246:	201b      	movs	r0, #27
 8001248:	f7ff fd26 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800124c:	20c1      	movs	r0, #193	; 0xc1
 800124e:	f7ff fd13 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff fd20 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001258:	20c5      	movs	r0, #197	; 0xc5
 800125a:	f7ff fd0d 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800125e:	2030      	movs	r0, #48	; 0x30
 8001260:	f7ff fd1a 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001264:	2030      	movs	r0, #48	; 0x30
 8001266:	f7ff fd17 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800126a:	20c7      	movs	r0, #199	; 0xc7
 800126c:	f7ff fd04 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001270:	20b7      	movs	r0, #183	; 0xb7
 8001272:	f7ff fd11 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001276:	2036      	movs	r0, #54	; 0x36
 8001278:	f7ff fcfe 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 800127c:	2008      	movs	r0, #8
 800127e:	f7ff fd0b 	bl	8000c98 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001282:	203a      	movs	r0, #58	; 0x3a
 8001284:	f7ff fcf8 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001288:	2055      	movs	r0, #85	; 0x55
 800128a:	f7ff fd05 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800128e:	20b1      	movs	r0, #177	; 0xb1
 8001290:	f7ff fcf2 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fcff 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800129a:	201a      	movs	r0, #26
 800129c:	f7ff fcfc 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80012a0:	20b6      	movs	r0, #182	; 0xb6
 80012a2:	f7ff fce9 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80012a6:	200a      	movs	r0, #10
 80012a8:	f7ff fcf6 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80012ac:	20a2      	movs	r0, #162	; 0xa2
 80012ae:	f7ff fcf3 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80012b2:	20f2      	movs	r0, #242	; 0xf2
 80012b4:	f7ff fce0 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fced 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80012be:	2026      	movs	r0, #38	; 0x26
 80012c0:	f7ff fcda 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fce7 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80012ca:	20e0      	movs	r0, #224	; 0xe0
 80012cc:	f7ff fcd4 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80012d0:	200f      	movs	r0, #15
 80012d2:	f7ff fce1 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80012d6:	202a      	movs	r0, #42	; 0x2a
 80012d8:	f7ff fcde 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80012dc:	2028      	movs	r0, #40	; 0x28
 80012de:	f7ff fcdb 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012e2:	2008      	movs	r0, #8
 80012e4:	f7ff fcd8 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80012e8:	200e      	movs	r0, #14
 80012ea:	f7ff fcd5 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012ee:	2008      	movs	r0, #8
 80012f0:	f7ff fcd2 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012f4:	2054      	movs	r0, #84	; 0x54
 80012f6:	f7ff fccf 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80012fa:	20a9      	movs	r0, #169	; 0xa9
 80012fc:	f7ff fccc 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001300:	2043      	movs	r0, #67	; 0x43
 8001302:	f7ff fcc9 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001306:	200a      	movs	r0, #10
 8001308:	f7ff fcc6 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800130c:	200f      	movs	r0, #15
 800130e:	f7ff fcc3 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fcc0 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff fcbd 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fcba 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff fcb7 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800132a:	20e1      	movs	r0, #225	; 0xe1
 800132c:	f7ff fca4 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fcb1 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001336:	2015      	movs	r0, #21
 8001338:	f7ff fcae 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800133c:	2017      	movs	r0, #23
 800133e:	f7ff fcab 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001342:	2007      	movs	r0, #7
 8001344:	f7ff fca8 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001348:	2011      	movs	r0, #17
 800134a:	f7ff fca5 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800134e:	2006      	movs	r0, #6
 8001350:	f7ff fca2 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001354:	202b      	movs	r0, #43	; 0x2b
 8001356:	f7ff fc9f 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800135a:	2056      	movs	r0, #86	; 0x56
 800135c:	f7ff fc9c 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001360:	203c      	movs	r0, #60	; 0x3c
 8001362:	f7ff fc99 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001366:	2005      	movs	r0, #5
 8001368:	f7ff fc96 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800136c:	2010      	movs	r0, #16
 800136e:	f7ff fc93 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001372:	200f      	movs	r0, #15
 8001374:	f7ff fc90 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001378:	203f      	movs	r0, #63	; 0x3f
 800137a:	f7ff fc8d 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800137e:	203f      	movs	r0, #63	; 0x3f
 8001380:	f7ff fc8a 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001384:	200f      	movs	r0, #15
 8001386:	f7ff fc87 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800138a:	202b      	movs	r0, #43	; 0x2b
 800138c:	f7ff fc74 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fc81 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff fc7e 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff fc7b 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80013a2:	203f      	movs	r0, #63	; 0x3f
 80013a4:	f7ff fc78 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80013a8:	202a      	movs	r0, #42	; 0x2a
 80013aa:	f7ff fc65 	bl	8000c78 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fc72 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff fc6f 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fc6c 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80013c0:	20ef      	movs	r0, #239	; 0xef
 80013c2:	f7ff fc69 	bl	8000c98 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80013c6:	2011      	movs	r0, #17
 80013c8:	f7ff fc56 	bl	8000c78 <LCD_WR_REG>
	HAL_Delay(120);
 80013cc:	2078      	movs	r0, #120	; 0x78
 80013ce:	f001 ff15 	bl	80031fc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80013d2:	2029      	movs	r0, #41	; 0x29
 80013d4:	f7ff fc50 	bl	8000c78 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <lcd_init+0x2bc>)
 80013e0:	f002 fa70 	bl	80038c4 <HAL_GPIO_WritePin>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40020800 	.word	0x40020800
 80013ec:	200001c8 	.word	0x200001c8
 80013f0:	40020000 	.word	0x40020000

080013f4 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af04      	add	r7, sp, #16
 80013fa:	60ba      	str	r2, [r7, #8]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4603      	mov	r3, r0
 8001400:	81fb      	strh	r3, [r7, #14]
 8001402:	460b      	mov	r3, r1
 8001404:	81bb      	strh	r3, [r7, #12]
 8001406:	4613      	mov	r3, r2
 8001408:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001412:	e048      	b.n	80014a6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d145      	bne.n	80014a6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800141a:	89fa      	ldrh	r2, [r7, #14]
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <lcd_ShowStr+0xc4>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001426:	085b      	lsrs	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	1acb      	subs	r3, r1, r3
 800142c:	429a      	cmp	r2, r3
 800142e:	dc3f      	bgt.n	80014b0 <lcd_ShowStr+0xbc>
 8001430:	89ba      	ldrh	r2, [r7, #12]
 8001432:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <lcd_ShowStr+0xc4>)
 8001434:	885b      	ldrh	r3, [r3, #2]
 8001436:	4619      	mov	r1, r3
 8001438:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800143c:	1acb      	subs	r3, r1, r3
 800143e:	429a      	cmp	r2, r3
 8001440:	dc36      	bgt.n	80014b0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b80      	cmp	r3, #128	; 0x80
 8001448:	d902      	bls.n	8001450 <lcd_ShowStr+0x5c>
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
 800144e:	e02a      	b.n	80014a6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b0d      	cmp	r3, #13
 8001456:	d10b      	bne.n	8001470 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001458:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800145c:	b29a      	uxth	r2, r3
 800145e:	89bb      	ldrh	r3, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001464:	8abb      	ldrh	r3, [r7, #20]
 8001466:	81fb      	strh	r3, [r7, #14]
					str++;
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3301      	adds	r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	e017      	b.n	80014a0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	88fc      	ldrh	r4, [r7, #6]
 8001476:	89b9      	ldrh	r1, [r7, #12]
 8001478:	89f8      	ldrh	r0, [r7, #14]
 800147a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	4623      	mov	r3, r4
 800148c:	f7ff fcc4 	bl	8000e18 <lcd_ShowChar>
					x+=sizey/2;
 8001490:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	b29a      	uxth	r2, r3
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	4413      	add	r3, r2
 800149e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3301      	adds	r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1b2      	bne.n	8001414 <lcd_ShowStr+0x20>
 80014ae:	e000      	b.n	80014b2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014b0:	bf00      	nop
			}
		}
	}
}
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd90      	pop	{r4, r7, pc}
 80014b8:	200001c8 	.word	0x200001c8

080014bc <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80014c0:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <led7_Scan+0x104>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <led7_Scan+0x104>)
 80014ca:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <led7_Scan+0x108>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a3d      	ldr	r2, [pc, #244]	; (80015c8 <led7_Scan+0x10c>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <led7_Scan+0x104>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <led7_Scan+0x104>)
 80014e6:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80014e8:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <led7_Scan+0x108>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d847      	bhi.n	8001580 <led7_Scan+0xc4>
 80014f0:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <led7_Scan+0x3c>)
 80014f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f6:	bf00      	nop
 80014f8:	08001509 	.word	0x08001509
 80014fc:	08001527 	.word	0x08001527
 8001500:	08001545 	.word	0x08001545
 8001504:	08001563 	.word	0x08001563
	case 0:
		spi_buffer |= 0x00b0;
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <led7_Scan+0x104>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001510:	b29a      	uxth	r2, r3
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <led7_Scan+0x104>)
 8001514:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <led7_Scan+0x104>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <led7_Scan+0x104>)
 8001522:	801a      	strh	r2, [r3, #0]
		break;
 8001524:	e02d      	b.n	8001582 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <led7_Scan+0x104>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <led7_Scan+0x104>)
 8001532:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <led7_Scan+0x104>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	f023 0320 	bic.w	r3, r3, #32
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <led7_Scan+0x104>)
 8001540:	801a      	strh	r2, [r3, #0]
		break;
 8001542:	e01e      	b.n	8001582 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <led7_Scan+0x104>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <led7_Scan+0x104>)
 8001550:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <led7_Scan+0x104>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	f023 0310 	bic.w	r3, r3, #16
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <led7_Scan+0x104>)
 800155e:	801a      	strh	r2, [r3, #0]
		break;
 8001560:	e00f      	b.n	8001582 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <led7_Scan+0x104>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <led7_Scan+0x104>)
 800156e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <led7_Scan+0x104>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001578:	b29a      	uxth	r2, r3
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <led7_Scan+0x104>)
 800157c:	801a      	strh	r2, [r3, #0]
		break;
 800157e:	e000      	b.n	8001582 <led7_Scan+0xc6>
	default:
		break;
 8001580:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <led7_Scan+0x108>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	425a      	negs	r2, r3
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	bf58      	it	pl
 8001594:	4253      	negpl	r3, r2
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <led7_Scan+0x108>)
 8001598:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2140      	movs	r1, #64	; 0x40
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <led7_Scan+0x110>)
 80015a0:	f002 f990 	bl	80038c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80015a4:	2301      	movs	r3, #1
 80015a6:	2202      	movs	r2, #2
 80015a8:	4905      	ldr	r1, [pc, #20]	; (80015c0 <led7_Scan+0x104>)
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <led7_Scan+0x114>)
 80015ac:	f003 ff8f 	bl	80054ce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <led7_Scan+0x110>)
 80015b6:	f002 f985 	bl	80038c4 <HAL_GPIO_WritePin>
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000004 	.word	0x20000004
 80015c4:	200000bc 	.word	0x200000bc
 80015c8:	20000000 	.word	0x20000000
 80015cc:	40021800 	.word	0x40021800
 80015d0:	20000204 	.word	0x20000204

080015d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d8:	f001 fd9e 	bl	8003118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015dc:	f000 f826 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e0:	f7ff f9dc 	bl	800099c <MX_GPIO_Init>
  MX_TIM2_Init();
 80015e4:	f001 fbde 	bl	8002da4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80015e8:	f001 fab0 	bl	8002b4c <MX_SPI1_Init>
  MX_FSMC_Init();
 80015ec:	f7ff f906 	bl	80007fc <MX_FSMC_Init>
  MX_I2C1_Init();
 80015f0:	f7ff facc 	bl	8000b8c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80015f4:	f001 fcae 	bl	8002f54 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	system_init();
 80015f8:	f000 f882 	bl	8001700 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	lcd_Clear(BLACK);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fbb9 	bl	8000d74 <lcd_Clear>
	UpdateTime();// update the curret time
 8001602:	f000 f8db 	bl	80017bc <UpdateTime>

	while (1) {
		while (!timer2_flag);
 8001606:	bf00      	nop
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <main+0x54>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0fb      	beq.n	8001608 <main+0x34>
		timer2_flag = 0;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <main+0x54>)
 8001612:	2200      	movs	r2, #0
 8001614:	801a      	strh	r2, [r3, #0]
		ds3231_ReadTime();
 8001616:	f7ff f88d 	bl	8000734 <ds3231_ReadTime>
		button_Scan();
 800161a:	f7fe ffb9 	bl	8000590 <button_Scan>
        fsm();
 800161e:	f001 f923 	bl	8002868 <fsm>
        displayScreen();
 8001622:	f000 fdad 	bl	8002180 <displayScreen>
		while (!timer2_flag);
 8001626:	e7ee      	b.n	8001606 <main+0x32>
 8001628:	200000d8 	.word	0x200000d8

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	; 0x50
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	2230      	movs	r2, #48	; 0x30
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f006 f9ee 	bl	8007a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <SystemClock_Config+0xcc>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	4a27      	ldr	r2, [pc, #156]	; (80016f8 <SystemClock_Config+0xcc>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	; 0x40
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <SystemClock_Config+0xcc>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <SystemClock_Config+0xd0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a21      	ldr	r2, [pc, #132]	; (80016fc <SystemClock_Config+0xd0>)
 8001676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <SystemClock_Config+0xd0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001688:	2302      	movs	r3, #2
 800168a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800168c:	2301      	movs	r3, #1
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001690:	2310      	movs	r3, #16
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001694:	2302      	movs	r3, #2
 8001696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001698:	2300      	movs	r3, #0
 800169a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800169c:	2308      	movs	r3, #8
 800169e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016a0:	23a8      	movs	r3, #168	; 0xa8
 80016a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016a8:	2304      	movs	r3, #4
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 fa0f 	bl	8004ad4 <HAL_RCC_OscConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016bc:	f001 f9f0 	bl	8002aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c0:	230f      	movs	r3, #15
 80016c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c4:	2302      	movs	r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80016d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2105      	movs	r1, #5
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 fc70 	bl	8004fc4 <HAL_RCC_ClockConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ea:	f001 f9d9 	bl	8002aa0 <Error_Handler>
  }
}
 80016ee:	bf00      	nop
 80016f0:	3750      	adds	r7, #80	; 0x50
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40007000 	.word	0x40007000

08001700 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2120      	movs	r1, #32
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <system_init+0x40>)
 800170a:	f002 f8db 	bl	80038c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	480b      	ldr	r0, [pc, #44]	; (8001740 <system_init+0x40>)
 8001714:	f002 f8d6 	bl	80038c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2110      	movs	r1, #16
 800171c:	4808      	ldr	r0, [pc, #32]	; (8001740 <system_init+0x40>)
 800171e:	f002 f8d1 	bl	80038c4 <HAL_GPIO_WritePin>

	button_init ();
 8001722:	f7fe ff29 	bl	8000578 <button_init>
	lcd_init();
 8001726:	f7ff fd05 	bl	8001134 <lcd_init>
	ds3231_init();
 800172a:	f7fe ff9d 	bl	8000668 <ds3231_init>
	uart_init_rs232();
 800172e:	f001 fbab 	bl	8002e88 <uart_init_rs232>

	timer_init();
 8001732:	f001 f9bb 	bl	8002aac <timer_init>
	setTimer2(50);
 8001736:	2032      	movs	r0, #50	; 0x32
 8001738:	f001 f9c2 	bl	8002ac0 <setTimer2>
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000

08001744 <cmd_parser_fsm>:

void cmd_parser_fsm(){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	switch (cmd_parser_state){
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <cmd_parser_fsm+0x60>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3b07      	subs	r3, #7
 800174e:	2b03      	cmp	r3, #3
 8001750:	d826      	bhi.n	80017a0 <cmd_parser_fsm+0x5c>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <cmd_parser_fsm+0x14>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	0800179b 	.word	0x0800179b
 800175c:	08001769 	.word	0x08001769
 8001760:	08001777 	.word	0x08001777
 8001764:	0800179b 	.word	0x0800179b
		case REQUEST:
			uart_Rs232SendString("Request!!");
 8001768:	480f      	ldr	r0, [pc, #60]	; (80017a8 <cmd_parser_fsm+0x64>)
 800176a:	f001 fb9b 	bl	8002ea4 <uart_Rs232SendString>
			cmd_parser_state = RECEIVE;
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <cmd_parser_fsm+0x60>)
 8001770:	2209      	movs	r2, #9
 8001772:	601a      	str	r2, [r3, #0]
			break;
 8001774:	e014      	b.n	80017a0 <cmd_parser_fsm+0x5c>
		case RECEIVE:
			if (flag){
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <cmd_parser_fsm+0x68>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00f      	beq.n	800179e <cmd_parser_fsm+0x5a>
				sscanf((const char *)rcv, "%d", &n);
 800177e:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <cmd_parser_fsm+0x6c>)
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <cmd_parser_fsm+0x70>)
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <cmd_parser_fsm+0x74>)
 8001784:	f006 f972 	bl	8007a6c <siscanf>
				clear_buffer();
 8001788:	f000 faca 	bl	8001d20 <clear_buffer>
				cmd_parser_state = FINISH;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <cmd_parser_fsm+0x60>)
 800178e:	220a      	movs	r2, #10
 8001790:	601a      	str	r2, [r3, #0]
				flag=0;
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <cmd_parser_fsm+0x68>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
			}
			break;
 8001798:	e001      	b.n	800179e <cmd_parser_fsm+0x5a>
		case FINISH:
			break;
		case IDLE:
			break;
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <cmd_parser_fsm+0x5c>
			break;
 800179e:	bf00      	nop
	}
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000024 	.word	0x20000024
 80017a8:	08008c28 	.word	0x08008c28
 80017ac:	200000e8 	.word	0x200000e8
 80017b0:	200000d4 	.word	0x200000d4
 80017b4:	08008c34 	.word	0x08008c34
 80017b8:	20000308 	.word	0x20000308

080017bc <UpdateTime>:
		uart_Rs232SendNum(ds3231_sec);
		uart_Rs232SendString("\n");
	}
}

void UpdateTime() {// update the current time
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 80017c0:	2118      	movs	r1, #24
 80017c2:	2006      	movs	r0, #6
 80017c4:	f7fe ff94 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 80017c8:	210b      	movs	r1, #11
 80017ca:	2005      	movs	r0, #5
 80017cc:	f7fe ff90 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 15);
 80017d0:	210f      	movs	r1, #15
 80017d2:	2004      	movs	r0, #4
 80017d4:	f7fe ff8c 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 80017d8:	2106      	movs	r1, #6
 80017da:	2003      	movs	r0, #3
 80017dc:	f7fe ff88 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 9);
 80017e0:	2109      	movs	r1, #9
 80017e2:	2002      	movs	r0, #2
 80017e4:	f7fe ff84 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 0);
 80017e8:	2100      	movs	r1, #0
 80017ea:	2001      	movs	r0, #1
 80017ec:	f7fe ff80 	bl	80006f0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 0);
 80017f0:	2100      	movs	r1, #0
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7fe ff7c 	bl	80006f0 <ds3231_Write>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <displayHour>:

void displayHour(int num, int isBlink) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af04      	add	r7, sp, #16
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	if(isBlink){
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d04f      	beq.n	80018ac <displayHour+0xb0>
	    timeBlink = (timeBlink + 1)%10;
 800180c:	4b40      	ldr	r3, [pc, #256]	; (8001910 <displayHour+0x114>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	1c59      	adds	r1, r3, #1
 8001812:	4b40      	ldr	r3, [pc, #256]	; (8001914 <displayHour+0x118>)
 8001814:	fb83 2301 	smull	r2, r3, r3, r1
 8001818:	109a      	asrs	r2, r3, #2
 800181a:	17cb      	asrs	r3, r1, #31
 800181c:	1ad2      	subs	r2, r2, r3
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	1aca      	subs	r2, r1, r3
 8001828:	4b39      	ldr	r3, [pc, #228]	; (8001910 <displayHour+0x114>)
 800182a:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 800182c:	4b38      	ldr	r3, [pc, #224]	; (8001910 <displayHour+0x114>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b04      	cmp	r3, #4
 8001832:	dc0d      	bgt.n	8001850 <displayHour+0x54>
	    	lcd_ShowStr(70, 100, "  ", GREEN, BLACK, 24, 0);
 8001834:	2300      	movs	r3, #0
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2318      	movs	r3, #24
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2300      	movs	r3, #0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001844:	4a34      	ldr	r2, [pc, #208]	; (8001918 <displayHour+0x11c>)
 8001846:	2164      	movs	r1, #100	; 0x64
 8001848:	2046      	movs	r0, #70	; 0x46
 800184a:	f7ff fdd3 	bl	80013f4 <lcd_ShowStr>
	}
	else {
		lcd_ShowIntNum(70, 100, num/10, 1, GREEN, BLACK, 24);
		lcd_ShowIntNum(83, 100, num%10, 1, GREEN, BLACK, 24);
	}
}
 800184e:	e05a      	b.n	8001906 <displayHour+0x10a>
			lcd_ShowIntNum(70, 100, num/10, 1, GREEN, BLACK, 24);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a30      	ldr	r2, [pc, #192]	; (8001914 <displayHour+0x118>)
 8001854:	fb82 1203 	smull	r1, r2, r2, r3
 8001858:	1092      	asrs	r2, r2, #2
 800185a:	17db      	asrs	r3, r3, #31
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b29a      	uxth	r2, r3
 8001860:	2318      	movs	r3, #24
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	2300      	movs	r3, #0
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	2164      	movs	r1, #100	; 0x64
 8001872:	2046      	movs	r0, #70	; 0x46
 8001874:	f7ff fbbc 	bl	8000ff0 <lcd_ShowIntNum>
			lcd_ShowIntNum(83, 100, num%10, 1, GREEN, BLACK, 24);
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <displayHour+0x118>)
 800187c:	fb83 1302 	smull	r1, r3, r3, r2
 8001880:	1099      	asrs	r1, r3, #2
 8001882:	17d3      	asrs	r3, r2, #31
 8001884:	1ac9      	subs	r1, r1, r3
 8001886:	460b      	mov	r3, r1
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	1ad1      	subs	r1, r2, r3
 8001890:	b28a      	uxth	r2, r1
 8001892:	2318      	movs	r3, #24
 8001894:	9302      	str	r3, [sp, #8]
 8001896:	2300      	movs	r3, #0
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2301      	movs	r3, #1
 80018a2:	2164      	movs	r1, #100	; 0x64
 80018a4:	2053      	movs	r0, #83	; 0x53
 80018a6:	f7ff fba3 	bl	8000ff0 <lcd_ShowIntNum>
}
 80018aa:	e02c      	b.n	8001906 <displayHour+0x10a>
		lcd_ShowIntNum(70, 100, num/10, 1, GREEN, BLACK, 24);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a19      	ldr	r2, [pc, #100]	; (8001914 <displayHour+0x118>)
 80018b0:	fb82 1203 	smull	r1, r2, r2, r3
 80018b4:	1092      	asrs	r2, r2, #2
 80018b6:	17db      	asrs	r3, r3, #31
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	2318      	movs	r3, #24
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	2300      	movs	r3, #0
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2301      	movs	r3, #1
 80018cc:	2164      	movs	r1, #100	; 0x64
 80018ce:	2046      	movs	r0, #70	; 0x46
 80018d0:	f7ff fb8e 	bl	8000ff0 <lcd_ShowIntNum>
		lcd_ShowIntNum(83, 100, num%10, 1, GREEN, BLACK, 24);
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <displayHour+0x118>)
 80018d8:	fb83 1302 	smull	r1, r3, r3, r2
 80018dc:	1099      	asrs	r1, r3, #2
 80018de:	17d3      	asrs	r3, r2, #31
 80018e0:	1ac9      	subs	r1, r1, r3
 80018e2:	460b      	mov	r3, r1
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	1ad1      	subs	r1, r2, r3
 80018ec:	b28a      	uxth	r2, r1
 80018ee:	2318      	movs	r3, #24
 80018f0:	9302      	str	r3, [sp, #8]
 80018f2:	2300      	movs	r3, #0
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2301      	movs	r3, #1
 80018fe:	2164      	movs	r1, #100	; 0x64
 8001900:	2053      	movs	r0, #83	; 0x53
 8001902:	f7ff fb75 	bl	8000ff0 <lcd_ShowIntNum>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200000d0 	.word	0x200000d0
 8001914:	66666667 	.word	0x66666667
 8001918:	08008c40 	.word	0x08008c40

0800191c <displayMin>:

void displayMin(int num, int isBlink) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af04      	add	r7, sp, #16
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
	lcd_ShowChar(96, 100, ':', GREEN, BLACK, 24, 0);
 8001926:	2300      	movs	r3, #0
 8001928:	9302      	str	r3, [sp, #8]
 800192a:	2318      	movs	r3, #24
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2300      	movs	r3, #0
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001936:	223a      	movs	r2, #58	; 0x3a
 8001938:	2164      	movs	r1, #100	; 0x64
 800193a:	2060      	movs	r0, #96	; 0x60
 800193c:	f7ff fa6c 	bl	8000e18 <lcd_ShowChar>
	if (isBlink) {
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d04f      	beq.n	80019e6 <displayMin+0xca>
	    timeBlink = (timeBlink + 1)%10;
 8001946:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <displayMin+0x12c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	1c59      	adds	r1, r3, #1
 800194c:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <displayMin+0x130>)
 800194e:	fb83 2301 	smull	r2, r3, r3, r1
 8001952:	109a      	asrs	r2, r3, #2
 8001954:	17cb      	asrs	r3, r1, #31
 8001956:	1ad2      	subs	r2, r2, r3
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	1aca      	subs	r2, r1, r3
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <displayMin+0x12c>)
 8001964:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <displayMin+0x12c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b04      	cmp	r3, #4
 800196c:	dc0d      	bgt.n	800198a <displayMin+0x6e>
	    	lcd_ShowStr(110, 100, "  ", GREEN, BLACK, 24, 0);
 800196e:	2300      	movs	r3, #0
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	2318      	movs	r3, #24
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	2300      	movs	r3, #0
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800197e:	4a34      	ldr	r2, [pc, #208]	; (8001a50 <displayMin+0x134>)
 8001980:	2164      	movs	r1, #100	; 0x64
 8001982:	206e      	movs	r0, #110	; 0x6e
 8001984:	f7ff fd36 	bl	80013f4 <lcd_ShowStr>
	else {
    	lcd_ShowIntNum(110, 100, num/10, 1, GREEN, BLACK, 24);
    	lcd_ShowIntNum(123, 100, num%10, 1, GREEN, BLACK, 24);
	}

}
 8001988:	e05a      	b.n	8001a40 <displayMin+0x124>
	    	lcd_ShowIntNum(110, 100, num/10, 1, GREEN, BLACK, 24);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <displayMin+0x130>)
 800198e:	fb82 1203 	smull	r1, r2, r2, r3
 8001992:	1092      	asrs	r2, r2, #2
 8001994:	17db      	asrs	r3, r3, #31
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	b29a      	uxth	r2, r3
 800199a:	2318      	movs	r3, #24
 800199c:	9302      	str	r3, [sp, #8]
 800199e:	2300      	movs	r3, #0
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2301      	movs	r3, #1
 80019aa:	2164      	movs	r1, #100	; 0x64
 80019ac:	206e      	movs	r0, #110	; 0x6e
 80019ae:	f7ff fb1f 	bl	8000ff0 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(123, 100, num%10, 1, GREEN, BLACK, 24);
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <displayMin+0x130>)
 80019b6:	fb83 1302 	smull	r1, r3, r3, r2
 80019ba:	1099      	asrs	r1, r3, #2
 80019bc:	17d3      	asrs	r3, r2, #31
 80019be:	1ac9      	subs	r1, r1, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	1ad1      	subs	r1, r2, r3
 80019ca:	b28a      	uxth	r2, r1
 80019cc:	2318      	movs	r3, #24
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	2164      	movs	r1, #100	; 0x64
 80019de:	207b      	movs	r0, #123	; 0x7b
 80019e0:	f7ff fb06 	bl	8000ff0 <lcd_ShowIntNum>
}
 80019e4:	e02c      	b.n	8001a40 <displayMin+0x124>
    	lcd_ShowIntNum(110, 100, num/10, 1, GREEN, BLACK, 24);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <displayMin+0x130>)
 80019ea:	fb82 1203 	smull	r1, r2, r2, r3
 80019ee:	1092      	asrs	r2, r2, #2
 80019f0:	17db      	asrs	r3, r3, #31
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	2318      	movs	r3, #24
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	2300      	movs	r3, #0
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2301      	movs	r3, #1
 8001a06:	2164      	movs	r1, #100	; 0x64
 8001a08:	206e      	movs	r0, #110	; 0x6e
 8001a0a:	f7ff faf1 	bl	8000ff0 <lcd_ShowIntNum>
    	lcd_ShowIntNum(123, 100, num%10, 1, GREEN, BLACK, 24);
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <displayMin+0x130>)
 8001a12:	fb83 1302 	smull	r1, r3, r3, r2
 8001a16:	1099      	asrs	r1, r3, #2
 8001a18:	17d3      	asrs	r3, r2, #31
 8001a1a:	1ac9      	subs	r1, r1, r3
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	1ad1      	subs	r1, r2, r3
 8001a26:	b28a      	uxth	r2, r1
 8001a28:	2318      	movs	r3, #24
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2301      	movs	r3, #1
 8001a38:	2164      	movs	r1, #100	; 0x64
 8001a3a:	207b      	movs	r0, #123	; 0x7b
 8001a3c:	f7ff fad8 	bl	8000ff0 <lcd_ShowIntNum>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200000d0 	.word	0x200000d0
 8001a4c:	66666667 	.word	0x66666667
 8001a50:	08008c40 	.word	0x08008c40

08001a54 <displaySec>:

void displaySec(int num, int isBlink) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	lcd_ShowChar(136, 100, ':', GREEN, BLACK, 24, 0);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	9302      	str	r3, [sp, #8]
 8001a62:	2318      	movs	r3, #24
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	2300      	movs	r3, #0
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a6e:	223a      	movs	r2, #58	; 0x3a
 8001a70:	2164      	movs	r1, #100	; 0x64
 8001a72:	2088      	movs	r0, #136	; 0x88
 8001a74:	f7ff f9d0 	bl	8000e18 <lcd_ShowChar>
	if (isBlink) {
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d04f      	beq.n	8001b1e <displaySec+0xca>
	    timeBlink = (timeBlink + 1)%10;
 8001a7e:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <displaySec+0x12c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1c59      	adds	r1, r3, #1
 8001a84:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <displaySec+0x130>)
 8001a86:	fb83 2301 	smull	r2, r3, r3, r1
 8001a8a:	109a      	asrs	r2, r3, #2
 8001a8c:	17cb      	asrs	r3, r1, #31
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	1aca      	subs	r2, r1, r3
 8001a9a:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <displaySec+0x12c>)
 8001a9c:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <displaySec+0x12c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	dc0d      	bgt.n	8001ac2 <displaySec+0x6e>
	    	lcd_ShowStr(150, 100, "  ", GREEN, BLACK, 24, 0);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	2318      	movs	r3, #24
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ab6:	4a34      	ldr	r2, [pc, #208]	; (8001b88 <displaySec+0x134>)
 8001ab8:	2164      	movs	r1, #100	; 0x64
 8001aba:	2096      	movs	r0, #150	; 0x96
 8001abc:	f7ff fc9a 	bl	80013f4 <lcd_ShowStr>
	}
	else {
    	lcd_ShowIntNum(150, 100, num/10, 1, GREEN, BLACK, 24);
    	lcd_ShowIntNum(163, 100, num%10, 1, GREEN, BLACK, 24);
	}
}
 8001ac0:	e05a      	b.n	8001b78 <displaySec+0x124>
	    	lcd_ShowIntNum(150, 100, num/10, 1, GREEN, BLACK, 24);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a2f      	ldr	r2, [pc, #188]	; (8001b84 <displaySec+0x130>)
 8001ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aca:	1092      	asrs	r2, r2, #2
 8001acc:	17db      	asrs	r3, r3, #31
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	2318      	movs	r3, #24
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	2164      	movs	r1, #100	; 0x64
 8001ae4:	2096      	movs	r0, #150	; 0x96
 8001ae6:	f7ff fa83 	bl	8000ff0 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(163, 100, num%10, 1, GREEN, BLACK, 24);
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <displaySec+0x130>)
 8001aee:	fb83 1302 	smull	r1, r3, r3, r2
 8001af2:	1099      	asrs	r1, r3, #2
 8001af4:	17d3      	asrs	r3, r2, #31
 8001af6:	1ac9      	subs	r1, r1, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	1ad1      	subs	r1, r2, r3
 8001b02:	b28a      	uxth	r2, r1
 8001b04:	2318      	movs	r3, #24
 8001b06:	9302      	str	r3, [sp, #8]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2301      	movs	r3, #1
 8001b14:	2164      	movs	r1, #100	; 0x64
 8001b16:	20a3      	movs	r0, #163	; 0xa3
 8001b18:	f7ff fa6a 	bl	8000ff0 <lcd_ShowIntNum>
}
 8001b1c:	e02c      	b.n	8001b78 <displaySec+0x124>
    	lcd_ShowIntNum(150, 100, num/10, 1, GREEN, BLACK, 24);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <displaySec+0x130>)
 8001b22:	fb82 1203 	smull	r1, r2, r2, r3
 8001b26:	1092      	asrs	r2, r2, #2
 8001b28:	17db      	asrs	r3, r3, #31
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	2318      	movs	r3, #24
 8001b30:	9302      	str	r3, [sp, #8]
 8001b32:	2300      	movs	r3, #0
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	2164      	movs	r1, #100	; 0x64
 8001b40:	2096      	movs	r0, #150	; 0x96
 8001b42:	f7ff fa55 	bl	8000ff0 <lcd_ShowIntNum>
    	lcd_ShowIntNum(163, 100, num%10, 1, GREEN, BLACK, 24);
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <displaySec+0x130>)
 8001b4a:	fb83 1302 	smull	r1, r3, r3, r2
 8001b4e:	1099      	asrs	r1, r3, #2
 8001b50:	17d3      	asrs	r3, r2, #31
 8001b52:	1ac9      	subs	r1, r1, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	1ad1      	subs	r1, r2, r3
 8001b5e:	b28a      	uxth	r2, r1
 8001b60:	2318      	movs	r3, #24
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	2300      	movs	r3, #0
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	2164      	movs	r1, #100	; 0x64
 8001b72:	20a3      	movs	r0, #163	; 0xa3
 8001b74:	f7ff fa3c 	bl	8000ff0 <lcd_ShowIntNum>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200000d0 	.word	0x200000d0
 8001b84:	66666667 	.word	0x66666667
 8001b88:	08008c40 	.word	0x08008c40

08001b8c <convertDay>:

void convertDay(int num) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af04      	add	r7, sp, #16
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	2b06      	cmp	r3, #6
 8001b9a:	d873      	bhi.n	8001c84 <convertDay+0xf8>
 8001b9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <convertDay+0x18>)
 8001b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba2:	bf00      	nop
 8001ba4:	08001bc1 	.word	0x08001bc1
 8001ba8:	08001bdd 	.word	0x08001bdd
 8001bac:	08001bf9 	.word	0x08001bf9
 8001bb0:	08001c15 	.word	0x08001c15
 8001bb4:	08001c31 	.word	0x08001c31
 8001bb8:	08001c4d 	.word	0x08001c4d
 8001bbc:	08001c69 	.word	0x08001c69
	switch(num)
	{
		case 1:
			lcd_ShowStr(20, 130, "SUN", YELLOW, BLACK, 24, 0);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	2318      	movs	r3, #24
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001bd0:	4a2e      	ldr	r2, [pc, #184]	; (8001c8c <convertDay+0x100>)
 8001bd2:	2182      	movs	r1, #130	; 0x82
 8001bd4:	2014      	movs	r0, #20
 8001bd6:	f7ff fc0d 	bl	80013f4 <lcd_ShowStr>
			break;
 8001bda:	e053      	b.n	8001c84 <convertDay+0xf8>
		case 2:
			lcd_ShowStr(20, 130, "MON", YELLOW, BLACK, 24, 0);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	2318      	movs	r3, #24
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001bec:	4a28      	ldr	r2, [pc, #160]	; (8001c90 <convertDay+0x104>)
 8001bee:	2182      	movs	r1, #130	; 0x82
 8001bf0:	2014      	movs	r0, #20
 8001bf2:	f7ff fbff 	bl	80013f4 <lcd_ShowStr>
			break;
 8001bf6:	e045      	b.n	8001c84 <convertDay+0xf8>
		case 3:
			lcd_ShowStr(20, 130, "TUE", YELLOW, BLACK, 24, 0);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	2318      	movs	r3, #24
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2300      	movs	r3, #0
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c08:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <convertDay+0x108>)
 8001c0a:	2182      	movs	r1, #130	; 0x82
 8001c0c:	2014      	movs	r0, #20
 8001c0e:	f7ff fbf1 	bl	80013f4 <lcd_ShowStr>
			break;
 8001c12:	e037      	b.n	8001c84 <convertDay+0xf8>
		case 4:
			lcd_ShowStr(20, 130, "WED", YELLOW, BLACK, 24, 0);
 8001c14:	2300      	movs	r3, #0
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	2318      	movs	r3, #24
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c24:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <convertDay+0x10c>)
 8001c26:	2182      	movs	r1, #130	; 0x82
 8001c28:	2014      	movs	r0, #20
 8001c2a:	f7ff fbe3 	bl	80013f4 <lcd_ShowStr>
			break;
 8001c2e:	e029      	b.n	8001c84 <convertDay+0xf8>
		case 5:
			lcd_ShowStr(20, 130, "THU", YELLOW, BLACK, 24, 0);
 8001c30:	2300      	movs	r3, #0
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	2318      	movs	r3, #24
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c40:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <convertDay+0x110>)
 8001c42:	2182      	movs	r1, #130	; 0x82
 8001c44:	2014      	movs	r0, #20
 8001c46:	f7ff fbd5 	bl	80013f4 <lcd_ShowStr>
			break;
 8001c4a:	e01b      	b.n	8001c84 <convertDay+0xf8>
		case 6:
			lcd_ShowStr(20, 130, "FRI", YELLOW, BLACK, 24, 0);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	2318      	movs	r3, #24
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c5c:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <convertDay+0x114>)
 8001c5e:	2182      	movs	r1, #130	; 0x82
 8001c60:	2014      	movs	r0, #20
 8001c62:	f7ff fbc7 	bl	80013f4 <lcd_ShowStr>
			break;
 8001c66:	e00d      	b.n	8001c84 <convertDay+0xf8>
		case 7:
			lcd_ShowStr(20, 130, "SAT", YELLOW, BLACK, 24, 0);
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	2318      	movs	r3, #24
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <convertDay+0x118>)
 8001c7a:	2182      	movs	r1, #130	; 0x82
 8001c7c:	2014      	movs	r0, #20
 8001c7e:	f7ff fbb9 	bl	80013f4 <lcd_ShowStr>
			break;
 8001c82:	bf00      	nop
	}
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	08008c44 	.word	0x08008c44
 8001c90:	08008c48 	.word	0x08008c48
 8001c94:	08008c4c 	.word	0x08008c4c
 8001c98:	08008c50 	.word	0x08008c50
 8001c9c:	08008c54 	.word	0x08008c54
 8001ca0:	08008c58 	.word	0x08008c58
 8001ca4:	08008c5c 	.word	0x08008c5c

08001ca8 <displayDay>:
void displayDay(int num, int isBlink) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af04      	add	r7, sp, #16
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d025      	beq.n	8001d04 <displayDay+0x5c>
	    timeBlink = (timeBlink + 1)%10;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <displayDay+0x6c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	1c59      	adds	r1, r3, #1
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <displayDay+0x70>)
 8001cc0:	fb83 2301 	smull	r2, r3, r3, r1
 8001cc4:	109a      	asrs	r2, r3, #2
 8001cc6:	17cb      	asrs	r3, r1, #31
 8001cc8:	1ad2      	subs	r2, r2, r3
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	1aca      	subs	r2, r1, r3
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <displayDay+0x6c>)
 8001cd6:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <displayDay+0x6c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	dc0d      	bgt.n	8001cfc <displayDay+0x54>
	    	lcd_ShowStr(20, 130, "   ", GREEN, BLACK, 24, 0);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	2318      	movs	r3, #24
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <displayDay+0x74>)
 8001cf2:	2182      	movs	r1, #130	; 0x82
 8001cf4:	2014      	movs	r0, #20
 8001cf6:	f7ff fb7d 	bl	80013f4 <lcd_ShowStr>
	    else {
	    	convertDay(num);
	    }
	}
	else convertDay(num);
}
 8001cfa:	e006      	b.n	8001d0a <displayDay+0x62>
	    	convertDay(num);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff45 	bl	8001b8c <convertDay>
}
 8001d02:	e002      	b.n	8001d0a <displayDay+0x62>
	else convertDay(num);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff41 	bl	8001b8c <convertDay>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200000d0 	.word	0x200000d0
 8001d18:	66666667 	.word	0x66666667
 8001d1c:	08008c60 	.word	0x08008c60

08001d20 <clear_buffer>:

void clear_buffer() {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	memset(rcv, 0, 100);
 8001d24:	2264      	movs	r2, #100	; 0x64
 8001d26:	2100      	movs	r1, #0
 8001d28:	4803      	ldr	r0, [pc, #12]	; (8001d38 <clear_buffer+0x18>)
 8001d2a:	f005 fe77 	bl	8007a1c <memset>
	index_buffer = 0;
 8001d2e:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <clear_buffer+0x1c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000308 	.word	0x20000308
 8001d3c:	200000e5 	.word	0x200000e5

08001d40 <displayDate>:

void displayDate(int num, int isBlink) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af04      	add	r7, sp, #16
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d030      	beq.n	8001db2 <displayDate+0x72>
	    timeBlink = (timeBlink + 1)%10;
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <displayDate+0x98>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	1c59      	adds	r1, r3, #1
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <displayDate+0x9c>)
 8001d58:	fb83 2301 	smull	r2, r3, r3, r1
 8001d5c:	109a      	asrs	r2, r3, #2
 8001d5e:	17cb      	asrs	r3, r1, #31
 8001d60:	1ad2      	subs	r2, r2, r3
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	1aca      	subs	r2, r1, r3
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <displayDate+0x98>)
 8001d6e:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <displayDate+0x98>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	dc0d      	bgt.n	8001d94 <displayDate+0x54>
	    	lcd_ShowStr(70, 130, "  ", GREEN, BLACK, 24, 0);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9302      	str	r3, [sp, #8]
 8001d7c:	2318      	movs	r3, #24
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2300      	movs	r3, #0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d88:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <displayDate+0xa0>)
 8001d8a:	2182      	movs	r1, #130	; 0x82
 8001d8c:	2046      	movs	r0, #70	; 0x46
 8001d8e:	f7ff fb31 	bl	80013f4 <lcd_ShowStr>
	    }
	}
	else {
    		lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
	}
}
 8001d92:	e01c      	b.n	8001dce <displayDate+0x8e>
	    	lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	2318      	movs	r3, #24
 8001d9a:	9302      	str	r3, [sp, #8]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2302      	movs	r3, #2
 8001da8:	2182      	movs	r1, #130	; 0x82
 8001daa:	2046      	movs	r0, #70	; 0x46
 8001dac:	f7ff f920 	bl	8000ff0 <lcd_ShowIntNum>
}
 8001db0:	e00d      	b.n	8001dce <displayDate+0x8e>
    		lcd_ShowIntNum(70, 130, num, 2, YELLOW, BLACK, 24);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	2318      	movs	r3, #24
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	2182      	movs	r1, #130	; 0x82
 8001dc8:	2046      	movs	r0, #70	; 0x46
 8001dca:	f7ff f911 	bl	8000ff0 <lcd_ShowIntNum>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200000d0 	.word	0x200000d0
 8001ddc:	66666667 	.word	0x66666667
 8001de0:	08008c40 	.word	0x08008c40

08001de4 <convertMonth>:

void convertMonth(int num) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af04      	add	r7, sp, #16
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	2b0b      	cmp	r3, #11
 8001df2:	f200 80c3 	bhi.w	8001f7c <convertMonth+0x198>
 8001df6:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <convertMonth+0x18>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e2d 	.word	0x08001e2d
 8001e00:	08001e49 	.word	0x08001e49
 8001e04:	08001e65 	.word	0x08001e65
 8001e08:	08001e81 	.word	0x08001e81
 8001e0c:	08001e9d 	.word	0x08001e9d
 8001e10:	08001eb9 	.word	0x08001eb9
 8001e14:	08001ed5 	.word	0x08001ed5
 8001e18:	08001ef1 	.word	0x08001ef1
 8001e1c:	08001f0d 	.word	0x08001f0d
 8001e20:	08001f29 	.word	0x08001f29
 8001e24:	08001f45 	.word	0x08001f45
 8001e28:	08001f61 	.word	0x08001f61
    switch(num)
    {
        case 1:
        	lcd_ShowStr(105, 130, "JAN", YELLOW, BLACK, 24, 0);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	2318      	movs	r3, #24
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	2300      	movs	r3, #0
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e3c:	4a51      	ldr	r2, [pc, #324]	; (8001f84 <convertMonth+0x1a0>)
 8001e3e:	2182      	movs	r1, #130	; 0x82
 8001e40:	2069      	movs	r0, #105	; 0x69
 8001e42:	f7ff fad7 	bl	80013f4 <lcd_ShowStr>
            break;
 8001e46:	e099      	b.n	8001f7c <convertMonth+0x198>
        case 2:
        	lcd_ShowStr(105, 130, "FEB", YELLOW, BLACK, 24, 0);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	2318      	movs	r3, #24
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	2300      	movs	r3, #0
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e58:	4a4b      	ldr	r2, [pc, #300]	; (8001f88 <convertMonth+0x1a4>)
 8001e5a:	2182      	movs	r1, #130	; 0x82
 8001e5c:	2069      	movs	r0, #105	; 0x69
 8001e5e:	f7ff fac9 	bl	80013f4 <lcd_ShowStr>
            break;
 8001e62:	e08b      	b.n	8001f7c <convertMonth+0x198>
        case 3:
        	lcd_ShowStr(105, 130, "MAR", YELLOW, BLACK, 24, 0);
 8001e64:	2300      	movs	r3, #0
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	2318      	movs	r3, #24
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e74:	4a45      	ldr	r2, [pc, #276]	; (8001f8c <convertMonth+0x1a8>)
 8001e76:	2182      	movs	r1, #130	; 0x82
 8001e78:	2069      	movs	r0, #105	; 0x69
 8001e7a:	f7ff fabb 	bl	80013f4 <lcd_ShowStr>
            break;
 8001e7e:	e07d      	b.n	8001f7c <convertMonth+0x198>
        case 4:
        	lcd_ShowStr(105, 130, "APR", YELLOW, BLACK, 24, 0);
 8001e80:	2300      	movs	r3, #0
 8001e82:	9302      	str	r3, [sp, #8]
 8001e84:	2318      	movs	r3, #24
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e90:	4a3f      	ldr	r2, [pc, #252]	; (8001f90 <convertMonth+0x1ac>)
 8001e92:	2182      	movs	r1, #130	; 0x82
 8001e94:	2069      	movs	r0, #105	; 0x69
 8001e96:	f7ff faad 	bl	80013f4 <lcd_ShowStr>
            break;
 8001e9a:	e06f      	b.n	8001f7c <convertMonth+0x198>
        case 5:
        	lcd_ShowStr(105, 130, "MAY", YELLOW, BLACK, 24, 0);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9302      	str	r3, [sp, #8]
 8001ea0:	2318      	movs	r3, #24
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001eac:	4a39      	ldr	r2, [pc, #228]	; (8001f94 <convertMonth+0x1b0>)
 8001eae:	2182      	movs	r1, #130	; 0x82
 8001eb0:	2069      	movs	r0, #105	; 0x69
 8001eb2:	f7ff fa9f 	bl	80013f4 <lcd_ShowStr>
            break;
 8001eb6:	e061      	b.n	8001f7c <convertMonth+0x198>
        case 6:
        	lcd_ShowStr(105, 130, "JUN", YELLOW, BLACK, 24, 0);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	2318      	movs	r3, #24
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ec8:	4a33      	ldr	r2, [pc, #204]	; (8001f98 <convertMonth+0x1b4>)
 8001eca:	2182      	movs	r1, #130	; 0x82
 8001ecc:	2069      	movs	r0, #105	; 0x69
 8001ece:	f7ff fa91 	bl	80013f4 <lcd_ShowStr>
            break;
 8001ed2:	e053      	b.n	8001f7c <convertMonth+0x198>
        case 7:
        	lcd_ShowStr(105, 130, "JUL", YELLOW, BLACK, 24, 0);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9302      	str	r3, [sp, #8]
 8001ed8:	2318      	movs	r3, #24
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	2300      	movs	r3, #0
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ee4:	4a2d      	ldr	r2, [pc, #180]	; (8001f9c <convertMonth+0x1b8>)
 8001ee6:	2182      	movs	r1, #130	; 0x82
 8001ee8:	2069      	movs	r0, #105	; 0x69
 8001eea:	f7ff fa83 	bl	80013f4 <lcd_ShowStr>
            break;
 8001eee:	e045      	b.n	8001f7c <convertMonth+0x198>
        case 8:
        	lcd_ShowStr(105, 130, "AUG", YELLOW, BLACK, 24, 0);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	2318      	movs	r3, #24
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f00:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <convertMonth+0x1bc>)
 8001f02:	2182      	movs	r1, #130	; 0x82
 8001f04:	2069      	movs	r0, #105	; 0x69
 8001f06:	f7ff fa75 	bl	80013f4 <lcd_ShowStr>
            break;
 8001f0a:	e037      	b.n	8001f7c <convertMonth+0x198>
        case 9:
        	lcd_ShowStr(105, 130, "SEP", YELLOW, BLACK, 24, 0);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	2318      	movs	r3, #24
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	2300      	movs	r3, #0
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f1c:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <convertMonth+0x1c0>)
 8001f1e:	2182      	movs	r1, #130	; 0x82
 8001f20:	2069      	movs	r0, #105	; 0x69
 8001f22:	f7ff fa67 	bl	80013f4 <lcd_ShowStr>
            break;
 8001f26:	e029      	b.n	8001f7c <convertMonth+0x198>
        case 10:
        	lcd_ShowStr(105, 130, "OCT", YELLOW, BLACK, 24, 0);
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	2318      	movs	r3, #24
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2300      	movs	r3, #0
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f38:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <convertMonth+0x1c4>)
 8001f3a:	2182      	movs	r1, #130	; 0x82
 8001f3c:	2069      	movs	r0, #105	; 0x69
 8001f3e:	f7ff fa59 	bl	80013f4 <lcd_ShowStr>
            break;
 8001f42:	e01b      	b.n	8001f7c <convertMonth+0x198>
        case 11:
        	lcd_ShowStr(105, 130, "NOV", YELLOW, BLACK, 24, 0);
 8001f44:	2300      	movs	r3, #0
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	2318      	movs	r3, #24
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f54:	4a15      	ldr	r2, [pc, #84]	; (8001fac <convertMonth+0x1c8>)
 8001f56:	2182      	movs	r1, #130	; 0x82
 8001f58:	2069      	movs	r0, #105	; 0x69
 8001f5a:	f7ff fa4b 	bl	80013f4 <lcd_ShowStr>
            break;
 8001f5e:	e00d      	b.n	8001f7c <convertMonth+0x198>
        case 12:
        	lcd_ShowStr(105, 130, "DEC", YELLOW, BLACK, 24, 0);
 8001f60:	2300      	movs	r3, #0
 8001f62:	9302      	str	r3, [sp, #8]
 8001f64:	2318      	movs	r3, #24
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f70:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <convertMonth+0x1cc>)
 8001f72:	2182      	movs	r1, #130	; 0x82
 8001f74:	2069      	movs	r0, #105	; 0x69
 8001f76:	f7ff fa3d 	bl	80013f4 <lcd_ShowStr>
            break;
 8001f7a:	bf00      	nop
    }
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	08008c64 	.word	0x08008c64
 8001f88:	08008c68 	.word	0x08008c68
 8001f8c:	08008c6c 	.word	0x08008c6c
 8001f90:	08008c70 	.word	0x08008c70
 8001f94:	08008c74 	.word	0x08008c74
 8001f98:	08008c78 	.word	0x08008c78
 8001f9c:	08008c7c 	.word	0x08008c7c
 8001fa0:	08008c80 	.word	0x08008c80
 8001fa4:	08008c84 	.word	0x08008c84
 8001fa8:	08008c88 	.word	0x08008c88
 8001fac:	08008c8c 	.word	0x08008c8c
 8001fb0:	08008c90 	.word	0x08008c90

08001fb4 <displayMonth>:
void displayMonth(int num, int isBlink) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af04      	add	r7, sp, #16
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d025      	beq.n	8002010 <displayMonth+0x5c>
	    timeBlink = (timeBlink + 1)%10;
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <displayMonth+0x6c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	1c59      	adds	r1, r3, #1
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <displayMonth+0x70>)
 8001fcc:	fb83 2301 	smull	r2, r3, r3, r1
 8001fd0:	109a      	asrs	r2, r3, #2
 8001fd2:	17cb      	asrs	r3, r1, #31
 8001fd4:	1ad2      	subs	r2, r2, r3
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	1aca      	subs	r2, r1, r3
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <displayMonth+0x6c>)
 8001fe2:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <displayMonth+0x6c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	dc0d      	bgt.n	8002008 <displayMonth+0x54>
	    	lcd_ShowStr(105, 130, "   ", GREEN, BLACK, 24, 0);
 8001fec:	2300      	movs	r3, #0
 8001fee:	9302      	str	r3, [sp, #8]
 8001ff0:	2318      	movs	r3, #24
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <displayMonth+0x74>)
 8001ffe:	2182      	movs	r1, #130	; 0x82
 8002000:	2069      	movs	r0, #105	; 0x69
 8002002:	f7ff f9f7 	bl	80013f4 <lcd_ShowStr>
	    }
	}
	else {
		convertMonth(num);
	}
}
 8002006:	e006      	b.n	8002016 <displayMonth+0x62>
	    	convertMonth(num);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff feeb 	bl	8001de4 <convertMonth>
}
 800200e:	e002      	b.n	8002016 <displayMonth+0x62>
		convertMonth(num);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fee7 	bl	8001de4 <convertMonth>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200000d0 	.word	0x200000d0
 8002024:	66666667 	.word	0x66666667
 8002028:	08008c60 	.word	0x08008c60

0800202c <displayYear>:

void displayYear(int num, int isBlink) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af04      	add	r7, sp, #16
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
	if (isBlink) {
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d05c      	beq.n	80020f6 <displayYear+0xca>
	    timeBlink = (timeBlink + 1)%10;
 800203c:	4b4d      	ldr	r3, [pc, #308]	; (8002174 <displayYear+0x148>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	1c59      	adds	r1, r3, #1
 8002042:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <displayYear+0x14c>)
 8002044:	fb83 2301 	smull	r2, r3, r3, r1
 8002048:	109a      	asrs	r2, r3, #2
 800204a:	17cb      	asrs	r3, r1, #31
 800204c:	1ad2      	subs	r2, r2, r3
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	1aca      	subs	r2, r1, r3
 8002058:	4b46      	ldr	r3, [pc, #280]	; (8002174 <displayYear+0x148>)
 800205a:	601a      	str	r2, [r3, #0]
	    if(timeBlink < 5) {
 800205c:	4b45      	ldr	r3, [pc, #276]	; (8002174 <displayYear+0x148>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b04      	cmp	r3, #4
 8002062:	dc0d      	bgt.n	8002080 <displayYear+0x54>
	    	lcd_ShowStr(150, 130, "    ", GREEN, BLACK, 24, 0);
 8002064:	2300      	movs	r3, #0
 8002066:	9302      	str	r3, [sp, #8]
 8002068:	2318      	movs	r3, #24
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	2300      	movs	r3, #0
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002074:	4a41      	ldr	r2, [pc, #260]	; (800217c <displayYear+0x150>)
 8002076:	2182      	movs	r1, #130	; 0x82
 8002078:	2096      	movs	r0, #150	; 0x96
 800207a:	f7ff f9bb 	bl	80013f4 <lcd_ShowStr>
	else {
    	lcd_ShowIntNum(150, 130, 20, 2, YELLOW, BLACK, 24);
    	lcd_ShowIntNum(176, 130, num/10, 1, YELLOW, BLACK, 24);
    	lcd_ShowIntNum(189, 130, num%10, 1, YELLOW, BLACK, 24);
	}
}
 800207e:	e074      	b.n	800216a <displayYear+0x13e>
	    	lcd_ShowIntNum(150, 130, 20, 2, YELLOW, BLACK, 24);
 8002080:	2318      	movs	r3, #24
 8002082:	9302      	str	r3, [sp, #8]
 8002084:	2300      	movs	r3, #0
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2302      	movs	r3, #2
 8002090:	2214      	movs	r2, #20
 8002092:	2182      	movs	r1, #130	; 0x82
 8002094:	2096      	movs	r0, #150	; 0x96
 8002096:	f7fe ffab 	bl	8000ff0 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(176, 130, num/10, 1, YELLOW, BLACK, 24);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a36      	ldr	r2, [pc, #216]	; (8002178 <displayYear+0x14c>)
 800209e:	fb82 1203 	smull	r1, r2, r2, r3
 80020a2:	1092      	asrs	r2, r2, #2
 80020a4:	17db      	asrs	r3, r3, #31
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	2318      	movs	r3, #24
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2301      	movs	r3, #1
 80020ba:	2182      	movs	r1, #130	; 0x82
 80020bc:	20b0      	movs	r0, #176	; 0xb0
 80020be:	f7fe ff97 	bl	8000ff0 <lcd_ShowIntNum>
	    	lcd_ShowIntNum(189, 130, num%10, 1, YELLOW, BLACK, 24);
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <displayYear+0x14c>)
 80020c6:	fb83 1302 	smull	r1, r3, r3, r2
 80020ca:	1099      	asrs	r1, r3, #2
 80020cc:	17d3      	asrs	r3, r2, #31
 80020ce:	1ac9      	subs	r1, r1, r3
 80020d0:	460b      	mov	r3, r1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	1ad1      	subs	r1, r2, r3
 80020da:	b28a      	uxth	r2, r1
 80020dc:	2318      	movs	r3, #24
 80020de:	9302      	str	r3, [sp, #8]
 80020e0:	2300      	movs	r3, #0
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2301      	movs	r3, #1
 80020ec:	2182      	movs	r1, #130	; 0x82
 80020ee:	20bd      	movs	r0, #189	; 0xbd
 80020f0:	f7fe ff7e 	bl	8000ff0 <lcd_ShowIntNum>
}
 80020f4:	e039      	b.n	800216a <displayYear+0x13e>
    	lcd_ShowIntNum(150, 130, 20, 2, YELLOW, BLACK, 24);
 80020f6:	2318      	movs	r3, #24
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	2300      	movs	r3, #0
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2302      	movs	r3, #2
 8002106:	2214      	movs	r2, #20
 8002108:	2182      	movs	r1, #130	; 0x82
 800210a:	2096      	movs	r0, #150	; 0x96
 800210c:	f7fe ff70 	bl	8000ff0 <lcd_ShowIntNum>
    	lcd_ShowIntNum(176, 130, num/10, 1, YELLOW, BLACK, 24);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a19      	ldr	r2, [pc, #100]	; (8002178 <displayYear+0x14c>)
 8002114:	fb82 1203 	smull	r1, r2, r2, r3
 8002118:	1092      	asrs	r2, r2, #2
 800211a:	17db      	asrs	r3, r3, #31
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	b29a      	uxth	r2, r3
 8002120:	2318      	movs	r3, #24
 8002122:	9302      	str	r3, [sp, #8]
 8002124:	2300      	movs	r3, #0
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2301      	movs	r3, #1
 8002130:	2182      	movs	r1, #130	; 0x82
 8002132:	20b0      	movs	r0, #176	; 0xb0
 8002134:	f7fe ff5c 	bl	8000ff0 <lcd_ShowIntNum>
    	lcd_ShowIntNum(189, 130, num%10, 1, YELLOW, BLACK, 24);
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <displayYear+0x14c>)
 800213c:	fb83 1302 	smull	r1, r3, r3, r2
 8002140:	1099      	asrs	r1, r3, #2
 8002142:	17d3      	asrs	r3, r2, #31
 8002144:	1ac9      	subs	r1, r1, r3
 8002146:	460b      	mov	r3, r1
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	1ad1      	subs	r1, r2, r3
 8002150:	b28a      	uxth	r2, r1
 8002152:	2318      	movs	r3, #24
 8002154:	9302      	str	r3, [sp, #8]
 8002156:	2300      	movs	r3, #0
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2301      	movs	r3, #1
 8002162:	2182      	movs	r1, #130	; 0x82
 8002164:	20bd      	movs	r0, #189	; 0xbd
 8002166:	f7fe ff43 	bl	8000ff0 <lcd_ShowIntNum>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200000d0 	.word	0x200000d0
 8002178:	66666667 	.word	0x66666667
 800217c:	08008c94 	.word	0x08008c94

08002180 <displayScreen>:

void displayScreen()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af04      	add	r7, sp, #16
	if (status == NORMAL) {
 8002186:	4ba4      	ldr	r3, [pc, #656]	; (8002418 <displayScreen+0x298>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d12a      	bne.n	80021e4 <displayScreen+0x64>
		displayHour(ds3231_hours,0);
 800218e:	4ba3      	ldr	r3, [pc, #652]	; (800241c <displayScreen+0x29c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fb31 	bl	80017fc <displayHour>
		displayMin(ds3231_min,0);
 800219a:	4ba1      	ldr	r3, [pc, #644]	; (8002420 <displayScreen+0x2a0>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fbbb 	bl	800191c <displayMin>
		displaySec(ds3231_sec,0);
 80021a6:	4b9f      	ldr	r3, [pc, #636]	; (8002424 <displayScreen+0x2a4>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fc51 	bl	8001a54 <displaySec>
		displayDay(ds3231_day,0);
 80021b2:	4b9d      	ldr	r3, [pc, #628]	; (8002428 <displayScreen+0x2a8>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fd75 	bl	8001ca8 <displayDay>
		displayDate(ds3231_date,0);
 80021be:	4b9b      	ldr	r3, [pc, #620]	; (800242c <displayScreen+0x2ac>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fdbb 	bl	8001d40 <displayDate>
		displayMonth(ds3231_month,0);
 80021ca:	4b99      	ldr	r3, [pc, #612]	; (8002430 <displayScreen+0x2b0>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff feef 	bl	8001fb4 <displayMonth>
		displayYear(ds3231_year,0);
 80021d6:	4b97      	ldr	r3, [pc, #604]	; (8002434 <displayScreen+0x2b4>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff25 	bl	800202c <displayYear>
 80021e2:	e167      	b.n	80024b4 <displayScreen+0x334>
	}
	else {
		if (statusModifying == SET_HOUR) {
 80021e4:	4b94      	ldr	r3, [pc, #592]	; (8002438 <displayScreen+0x2b8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d12a      	bne.n	8002242 <displayScreen+0xc2>
			displayHour(hourTemp,1);
 80021ec:	4b93      	ldr	r3, [pc, #588]	; (800243c <displayScreen+0x2bc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fb02 	bl	80017fc <displayHour>
			displayMin(minTemp,0);
 80021f8:	4b91      	ldr	r3, [pc, #580]	; (8002440 <displayScreen+0x2c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fb8c 	bl	800191c <displayMin>
			displaySec(secTemp,0);
 8002204:	4b8f      	ldr	r3, [pc, #572]	; (8002444 <displayScreen+0x2c4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fc22 	bl	8001a54 <displaySec>
			displayDay(dayTemp,0);
 8002210:	4b8d      	ldr	r3, [pc, #564]	; (8002448 <displayScreen+0x2c8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fd46 	bl	8001ca8 <displayDay>
			displayDate(dateTemp,0);
 800221c:	4b8b      	ldr	r3, [pc, #556]	; (800244c <displayScreen+0x2cc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fd8c 	bl	8001d40 <displayDate>
			displayMonth(monthTemp,0);
 8002228:	4b89      	ldr	r3, [pc, #548]	; (8002450 <displayScreen+0x2d0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fec0 	bl	8001fb4 <displayMonth>
			displayYear(yearTemp,0);
 8002234:	4b87      	ldr	r3, [pc, #540]	; (8002454 <displayScreen+0x2d4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fef6 	bl	800202c <displayYear>
 8002240:	e138      	b.n	80024b4 <displayScreen+0x334>
		}

		else if (statusModifying == SET_MIN) {
 8002242:	4b7d      	ldr	r3, [pc, #500]	; (8002438 <displayScreen+0x2b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d12a      	bne.n	80022a0 <displayScreen+0x120>
			displayHour(hourTemp,0);
 800224a:	4b7c      	ldr	r3, [pc, #496]	; (800243c <displayScreen+0x2bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fad3 	bl	80017fc <displayHour>
			displayMin(minTemp,1);
 8002256:	4b7a      	ldr	r3, [pc, #488]	; (8002440 <displayScreen+0x2c0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2101      	movs	r1, #1
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fb5d 	bl	800191c <displayMin>
			displaySec(secTemp,0);
 8002262:	4b78      	ldr	r3, [pc, #480]	; (8002444 <displayScreen+0x2c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fbf3 	bl	8001a54 <displaySec>
			displayDay(dayTemp,0);
 800226e:	4b76      	ldr	r3, [pc, #472]	; (8002448 <displayScreen+0x2c8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fd17 	bl	8001ca8 <displayDay>
			displayDate(dateTemp,0);
 800227a:	4b74      	ldr	r3, [pc, #464]	; (800244c <displayScreen+0x2cc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fd5d 	bl	8001d40 <displayDate>
			displayMonth(monthTemp,0);
 8002286:	4b72      	ldr	r3, [pc, #456]	; (8002450 <displayScreen+0x2d0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fe91 	bl	8001fb4 <displayMonth>
			displayYear(yearTemp,0);
 8002292:	4b70      	ldr	r3, [pc, #448]	; (8002454 <displayScreen+0x2d4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fec7 	bl	800202c <displayYear>
 800229e:	e109      	b.n	80024b4 <displayScreen+0x334>
		}

		else if (statusModifying == SET_SEC) {
 80022a0:	4b65      	ldr	r3, [pc, #404]	; (8002438 <displayScreen+0x2b8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b09      	cmp	r3, #9
 80022a6:	d12a      	bne.n	80022fe <displayScreen+0x17e>
			displayHour(hourTemp,0);
 80022a8:	4b64      	ldr	r3, [pc, #400]	; (800243c <displayScreen+0x2bc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff faa4 	bl	80017fc <displayHour>
			displayMin(minTemp,0);
 80022b4:	4b62      	ldr	r3, [pc, #392]	; (8002440 <displayScreen+0x2c0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fb2e 	bl	800191c <displayMin>
			displaySec(secTemp,1);
 80022c0:	4b60      	ldr	r3, [pc, #384]	; (8002444 <displayScreen+0x2c4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fbc4 	bl	8001a54 <displaySec>
			displayDay(dayTemp,0);
 80022cc:	4b5e      	ldr	r3, [pc, #376]	; (8002448 <displayScreen+0x2c8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fce8 	bl	8001ca8 <displayDay>
			displayDate(dateTemp,0);
 80022d8:	4b5c      	ldr	r3, [pc, #368]	; (800244c <displayScreen+0x2cc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fd2e 	bl	8001d40 <displayDate>
			displayMonth(monthTemp,0);
 80022e4:	4b5a      	ldr	r3, [pc, #360]	; (8002450 <displayScreen+0x2d0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fe62 	bl	8001fb4 <displayMonth>
			displayYear(yearTemp,0);
 80022f0:	4b58      	ldr	r3, [pc, #352]	; (8002454 <displayScreen+0x2d4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fe98 	bl	800202c <displayYear>
 80022fc:	e0da      	b.n	80024b4 <displayScreen+0x334>
		}

		else if (statusModifying == SET_DAY) {
 80022fe:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <displayScreen+0x2b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d12a      	bne.n	800235c <displayScreen+0x1dc>
			displayHour(hourTemp,0);
 8002306:	4b4d      	ldr	r3, [pc, #308]	; (800243c <displayScreen+0x2bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fa75 	bl	80017fc <displayHour>
			displayMin(minTemp,0);
 8002312:	4b4b      	ldr	r3, [pc, #300]	; (8002440 <displayScreen+0x2c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff faff 	bl	800191c <displayMin>
			displaySec(secTemp,0);
 800231e:	4b49      	ldr	r3, [pc, #292]	; (8002444 <displayScreen+0x2c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fb95 	bl	8001a54 <displaySec>
			displayDay(dayTemp,1);
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <displayScreen+0x2c8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fcb9 	bl	8001ca8 <displayDay>
			displayDate(dateTemp,0);
 8002336:	4b45      	ldr	r3, [pc, #276]	; (800244c <displayScreen+0x2cc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fcff 	bl	8001d40 <displayDate>
			displayMonth(monthTemp,0);
 8002342:	4b43      	ldr	r3, [pc, #268]	; (8002450 <displayScreen+0x2d0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fe33 	bl	8001fb4 <displayMonth>
			displayYear(yearTemp,0);
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <displayScreen+0x2d4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fe69 	bl	800202c <displayYear>
 800235a:	e0ab      	b.n	80024b4 <displayScreen+0x334>
		}

		else if (statusModifying == SET_DATE) {
 800235c:	4b36      	ldr	r3, [pc, #216]	; (8002438 <displayScreen+0x2b8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d12a      	bne.n	80023ba <displayScreen+0x23a>
			displayHour(hourTemp,0);
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <displayScreen+0x2bc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fa46 	bl	80017fc <displayHour>
			displayMin(minTemp,0);
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <displayScreen+0x2c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fad0 	bl	800191c <displayMin>
			displaySec(secTemp,0);
 800237c:	4b31      	ldr	r3, [pc, #196]	; (8002444 <displayScreen+0x2c4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fb66 	bl	8001a54 <displaySec>
			displayDay(dayTemp,0);
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <displayScreen+0x2c8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fc8a 	bl	8001ca8 <displayDay>
			displayDate(dateTemp,1);
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <displayScreen+0x2cc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fcd0 	bl	8001d40 <displayDate>
			displayMonth(monthTemp,0);
 80023a0:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <displayScreen+0x2d0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fe04 	bl	8001fb4 <displayMonth>
			displayYear(yearTemp,0);
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <displayScreen+0x2d4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fe3a 	bl	800202c <displayYear>
 80023b8:	e07c      	b.n	80024b4 <displayScreen+0x334>
		}

		else if (statusModifying == SET_MONTH) {
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <displayScreen+0x2b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b05      	cmp	r3, #5
 80023c0:	d14a      	bne.n	8002458 <displayScreen+0x2d8>
			displayHour(hourTemp,0);
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <displayScreen+0x2bc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fa17 	bl	80017fc <displayHour>
			displayMin(minTemp,0);
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <displayScreen+0x2c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff faa1 	bl	800191c <displayMin>
			displaySec(secTemp,0);
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <displayScreen+0x2c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fb37 	bl	8001a54 <displaySec>
			displayDay(dayTemp,0);
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <displayScreen+0x2c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fc5b 	bl	8001ca8 <displayDay>
			displayDate(dateTemp,0);
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <displayScreen+0x2cc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fca1 	bl	8001d40 <displayDate>
			displayMonth(monthTemp,1);
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <displayScreen+0x2d0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2101      	movs	r1, #1
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fdd5 	bl	8001fb4 <displayMonth>
			displayYear(yearTemp,0);
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <displayScreen+0x2d4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fe0b 	bl	800202c <displayYear>
 8002416:	e04d      	b.n	80024b4 <displayScreen+0x334>
 8002418:	200000c0 	.word	0x200000c0
 800241c:	20000119 	.word	0x20000119
 8002420:	20000116 	.word	0x20000116
 8002424:	20000114 	.word	0x20000114
 8002428:	20000118 	.word	0x20000118
 800242c:	20000117 	.word	0x20000117
 8002430:	2000011a 	.word	0x2000011a
 8002434:	20000115 	.word	0x20000115
 8002438:	20000008 	.word	0x20000008
 800243c:	2000000c 	.word	0x2000000c
 8002440:	20000010 	.word	0x20000010
 8002444:	200000c4 	.word	0x200000c4
 8002448:	20000014 	.word	0x20000014
 800244c:	20000018 	.word	0x20000018
 8002450:	2000001c 	.word	0x2000001c
 8002454:	20000020 	.word	0x20000020
		}

		else if (statusModifying == SET_YEAR) {
 8002458:	4b45      	ldr	r3, [pc, #276]	; (8002570 <displayScreen+0x3f0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b06      	cmp	r3, #6
 800245e:	d129      	bne.n	80024b4 <displayScreen+0x334>
			displayHour(hourTemp,0);
 8002460:	4b44      	ldr	r3, [pc, #272]	; (8002574 <displayScreen+0x3f4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff f9c8 	bl	80017fc <displayHour>
			displayMin(minTemp,0);
 800246c:	4b42      	ldr	r3, [pc, #264]	; (8002578 <displayScreen+0x3f8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fa52 	bl	800191c <displayMin>
			displaySec(secTemp,0);
 8002478:	4b40      	ldr	r3, [pc, #256]	; (800257c <displayScreen+0x3fc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fae8 	bl	8001a54 <displaySec>
			displayDay(dayTemp,0);
 8002484:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <displayScreen+0x400>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fc0c 	bl	8001ca8 <displayDay>
			displayDate(dateTemp,0);
 8002490:	4b3c      	ldr	r3, [pc, #240]	; (8002584 <displayScreen+0x404>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fc52 	bl	8001d40 <displayDate>
			displayMonth(monthTemp,0);
 800249c:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <displayScreen+0x408>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fd86 	bl	8001fb4 <displayMonth>
			displayYear(yearTemp,1);
 80024a8:	4b38      	ldr	r3, [pc, #224]	; (800258c <displayScreen+0x40c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2101      	movs	r1, #1
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fdbc 	bl	800202c <displayYear>
		}
	}
	//displayState
	if (status == NORMAL) {
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <displayScreen+0x410>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10d      	bne.n	80024d8 <displayScreen+0x358>
		lcd_ShowStr(20, 160, "1.NOR", YELLOW, BLACK, 24, 0);
 80024bc:	2300      	movs	r3, #0
 80024be:	9302      	str	r3, [sp, #8]
 80024c0:	2318      	movs	r3, #24
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2300      	movs	r3, #0
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024cc:	4a31      	ldr	r2, [pc, #196]	; (8002594 <displayScreen+0x414>)
 80024ce:	21a0      	movs	r1, #160	; 0xa0
 80024d0:	2014      	movs	r0, #20
 80024d2:	f7fe ff8f 	bl	80013f4 <lcd_ShowStr>
 80024d6:	e01e      	b.n	8002516 <displayScreen+0x396>
	}
	else if (status == MODIFY_TIME) {
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <displayScreen+0x410>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b07      	cmp	r3, #7
 80024de:	d10d      	bne.n	80024fc <displayScreen+0x37c>
		lcd_ShowStr(20, 160, "2.MOD", YELLOW, BLACK, 24, 0);
 80024e0:	2300      	movs	r3, #0
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	2318      	movs	r3, #24
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024f0:	4a29      	ldr	r2, [pc, #164]	; (8002598 <displayScreen+0x418>)
 80024f2:	21a0      	movs	r1, #160	; 0xa0
 80024f4:	2014      	movs	r0, #20
 80024f6:	f7fe ff7d 	bl	80013f4 <lcd_ShowStr>
 80024fa:	e00c      	b.n	8002516 <displayScreen+0x396>
	}
	else {
		lcd_ShowStr(20, 160, "3.ALR", YELLOW, BLACK, 24, 0);
 80024fc:	2300      	movs	r3, #0
 80024fe:	9302      	str	r3, [sp, #8]
 8002500:	2318      	movs	r3, #24
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	2300      	movs	r3, #0
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800250c:	4a23      	ldr	r2, [pc, #140]	; (800259c <displayScreen+0x41c>)
 800250e:	21a0      	movs	r1, #160	; 0xa0
 8002510:	2014      	movs	r0, #20
 8002512:	f7fe ff6f 	bl	80013f4 <lcd_ShowStr>
	}

	if (ds3231_hours == hourAlarm && ds3231_min == minAlarm) {
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <displayScreen+0x420>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <displayScreen+0x424>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d114      	bne.n	800254e <displayScreen+0x3ce>
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <displayScreen+0x428>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b20      	ldr	r3, [pc, #128]	; (80025ac <displayScreen+0x42c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d10d      	bne.n	800254e <displayScreen+0x3ce>
		lcd_ShowStr(20, 190, "Wake up honey", RED, BLACK, 24, 0);
 8002532:	2300      	movs	r3, #0
 8002534:	9302      	str	r3, [sp, #8]
 8002536:	2318      	movs	r3, #24
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	2300      	movs	r3, #0
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <displayScreen+0x430>)
 8002544:	21be      	movs	r1, #190	; 0xbe
 8002546:	2014      	movs	r0, #20
 8002548:	f7fe ff54 	bl	80013f4 <lcd_ShowStr>
 800254c:	e00c      	b.n	8002568 <displayScreen+0x3e8>
	}
	else{
		lcd_ShowStr(20, 190, "              ", BLACK, BLACK, 24, 0);
 800254e:	2300      	movs	r3, #0
 8002550:	9302      	str	r3, [sp, #8]
 8002552:	2318      	movs	r3, #24
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	2300      	movs	r3, #0
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2300      	movs	r3, #0
 800255c:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <displayScreen+0x434>)
 800255e:	21be      	movs	r1, #190	; 0xbe
 8002560:	2014      	movs	r0, #20
 8002562:	f7fe ff47 	bl	80013f4 <lcd_ShowStr>
	}

}
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000008 	.word	0x20000008
 8002574:	2000000c 	.word	0x2000000c
 8002578:	20000010 	.word	0x20000010
 800257c:	200000c4 	.word	0x200000c4
 8002580:	20000014 	.word	0x20000014
 8002584:	20000018 	.word	0x20000018
 8002588:	2000001c 	.word	0x2000001c
 800258c:	20000020 	.word	0x20000020
 8002590:	200000c0 	.word	0x200000c0
 8002594:	08008c9c 	.word	0x08008c9c
 8002598:	08008ca4 	.word	0x08008ca4
 800259c:	08008cac 	.word	0x08008cac
 80025a0:	20000119 	.word	0x20000119
 80025a4:	200000c8 	.word	0x200000c8
 80025a8:	20000116 	.word	0x20000116
 80025ac:	200000cc 	.word	0x200000cc
 80025b0:	08008cb4 	.word	0x08008cb4
 80025b4:	08008cc4 	.word	0x08008cc4

080025b8 <modifyTimeFsm>:

void modifyTimeFsm() {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af04      	add	r7, sp, #16
	switch(statusModifying){
 80025be:	4b80      	ldr	r3, [pc, #512]	; (80027c0 <modifyTimeFsm+0x208>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	f200 80e3 	bhi.w	8002790 <modifyTimeFsm+0x1d8>
 80025ca:	a201      	add	r2, pc, #4	; (adr r2, 80025d0 <modifyTimeFsm+0x18>)
 80025cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d0:	080025f5 	.word	0x080025f5
 80025d4:	08002647 	.word	0x08002647
 80025d8:	080026e9 	.word	0x080026e9
 80025dc:	08002713 	.word	0x08002713
 80025e0:	0800273d 	.word	0x0800273d
 80025e4:	08002767 	.word	0x08002767
 80025e8:	08002791 	.word	0x08002791
 80025ec:	08002791 	.word	0x08002791
 80025f0:	08002699 	.word	0x08002699
		case SET_HOUR:
			lcd_ShowStr(20, 50, "Updating hour:", RED, BLACK, 24, 0);
 80025f4:	2300      	movs	r3, #0
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	2318      	movs	r3, #24
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	2300      	movs	r3, #0
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002604:	4a6f      	ldr	r2, [pc, #444]	; (80027c4 <modifyTimeFsm+0x20c>)
 8002606:	2132      	movs	r1, #50	; 0x32
 8002608:	2014      	movs	r0, #20
 800260a:	f7fe fef3 	bl	80013f4 <lcd_ShowStr>
			cmd_parser_fsm();
 800260e:	f7ff f899 	bl	8001744 <cmd_parser_fsm>
			if (cmd_parser_state == FINISH){
 8002612:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <modifyTimeFsm+0x210>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b0a      	cmp	r3, #10
 8002618:	f040 80c1 	bne.w	800279e <modifyTimeFsm+0x1e6>
				ds3231_Write(ADDRESS_HOUR, n);
 800261c:	4b6b      	ldr	r3, [pc, #428]	; (80027cc <modifyTimeFsm+0x214>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4619      	mov	r1, r3
 8002624:	2002      	movs	r0, #2
 8002626:	f7fe f863 	bl	80006f0 <ds3231_Write>
				hourTemp = n;
 800262a:	4b68      	ldr	r3, [pc, #416]	; (80027cc <modifyTimeFsm+0x214>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a68      	ldr	r2, [pc, #416]	; (80027d0 <modifyTimeFsm+0x218>)
 8002630:	6013      	str	r3, [r2, #0]
				statusModifying = SET_MIN;
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <modifyTimeFsm+0x208>)
 8002634:	2202      	movs	r2, #2
 8002636:	601a      	str	r2, [r3, #0]
				cmd_parser_state = REQUEST;
 8002638:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <modifyTimeFsm+0x210>)
 800263a:	2208      	movs	r2, #8
 800263c:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 800263e:	2000      	movs	r0, #0
 8002640:	f7fe fb98 	bl	8000d74 <lcd_Clear>
			}
			break;
 8002644:	e0ab      	b.n	800279e <modifyTimeFsm+0x1e6>

		case SET_MIN:
			lcd_ShowStr(20, 50, "Updating minute:", RED, BLACK, 24, 0);
 8002646:	2300      	movs	r3, #0
 8002648:	9302      	str	r3, [sp, #8]
 800264a:	2318      	movs	r3, #24
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002656:	4a5f      	ldr	r2, [pc, #380]	; (80027d4 <modifyTimeFsm+0x21c>)
 8002658:	2132      	movs	r1, #50	; 0x32
 800265a:	2014      	movs	r0, #20
 800265c:	f7fe feca 	bl	80013f4 <lcd_ShowStr>
			cmd_parser_fsm();
 8002660:	f7ff f870 	bl	8001744 <cmd_parser_fsm>
			if (cmd_parser_state == FINISH){
 8002664:	4b58      	ldr	r3, [pc, #352]	; (80027c8 <modifyTimeFsm+0x210>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b0a      	cmp	r3, #10
 800266a:	f040 809a 	bne.w	80027a2 <modifyTimeFsm+0x1ea>
				ds3231_Write(ADDRESS_MIN, n);
 800266e:	4b57      	ldr	r3, [pc, #348]	; (80027cc <modifyTimeFsm+0x214>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	4619      	mov	r1, r3
 8002676:	2001      	movs	r0, #1
 8002678:	f7fe f83a 	bl	80006f0 <ds3231_Write>
				minTemp = n;
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <modifyTimeFsm+0x214>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a55      	ldr	r2, [pc, #340]	; (80027d8 <modifyTimeFsm+0x220>)
 8002682:	6013      	str	r3, [r2, #0]
				statusModifying = SET_SEC;
 8002684:	4b4e      	ldr	r3, [pc, #312]	; (80027c0 <modifyTimeFsm+0x208>)
 8002686:	2209      	movs	r2, #9
 8002688:	601a      	str	r2, [r3, #0]
				cmd_parser_state = REQUEST;
 800268a:	4b4f      	ldr	r3, [pc, #316]	; (80027c8 <modifyTimeFsm+0x210>)
 800268c:	2208      	movs	r2, #8
 800268e:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe fb6f 	bl	8000d74 <lcd_Clear>
			}
			break;
 8002696:	e084      	b.n	80027a2 <modifyTimeFsm+0x1ea>

		case SET_SEC:
			lcd_ShowStr(20, 50, "Updating sec:", RED, BLACK, 24, 0);
 8002698:	2300      	movs	r3, #0
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	2318      	movs	r3, #24
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	2300      	movs	r3, #0
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026a8:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <modifyTimeFsm+0x224>)
 80026aa:	2132      	movs	r1, #50	; 0x32
 80026ac:	2014      	movs	r0, #20
 80026ae:	f7fe fea1 	bl	80013f4 <lcd_ShowStr>
			cmd_parser_fsm();
 80026b2:	f7ff f847 	bl	8001744 <cmd_parser_fsm>
			if (cmd_parser_state == FINISH){
 80026b6:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <modifyTimeFsm+0x210>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b0a      	cmp	r3, #10
 80026bc:	d173      	bne.n	80027a6 <modifyTimeFsm+0x1ee>
				ds3231_Write(ADDRESS_SEC, n);
 80026be:	4b43      	ldr	r3, [pc, #268]	; (80027cc <modifyTimeFsm+0x214>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4619      	mov	r1, r3
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7fe f812 	bl	80006f0 <ds3231_Write>
				secTemp = n;
 80026cc:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <modifyTimeFsm+0x214>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a43      	ldr	r2, [pc, #268]	; (80027e0 <modifyTimeFsm+0x228>)
 80026d2:	6013      	str	r3, [r2, #0]
				statusModifying = SET_DAY;
 80026d4:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <modifyTimeFsm+0x208>)
 80026d6:	2203      	movs	r2, #3
 80026d8:	601a      	str	r2, [r3, #0]
				cmd_parser_state = IDLE;
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <modifyTimeFsm+0x210>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7fe fb47 	bl	8000d74 <lcd_Clear>
			}
			break;
 80026e6:	e05e      	b.n	80027a6 <modifyTimeFsm+0x1ee>

		case SET_DAY:
			setDay();
 80026e8:	f000 f97a 	bl	80029e0 <setDay>
			if(IsButtonSave()) {
 80026ec:	f000 f92e 	bl	800294c <IsButtonSave>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d059      	beq.n	80027aa <modifyTimeFsm+0x1f2>
				ds3231_Write(ADDRESS_DAY, dayTemp);
 80026f6:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <modifyTimeFsm+0x22c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	2003      	movs	r0, #3
 8002700:	f7fd fff6 	bl	80006f0 <ds3231_Write>
				statusModifying = SET_DATE;
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <modifyTimeFsm+0x208>)
 8002706:	2204      	movs	r2, #4
 8002708:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 800270a:	2000      	movs	r0, #0
 800270c:	f7fe fb32 	bl	8000d74 <lcd_Clear>
			}
			break;
 8002710:	e04b      	b.n	80027aa <modifyTimeFsm+0x1f2>

		case SET_DATE:
			setDate();
 8002712:	f000 f97d 	bl	8002a10 <setDate>
			if(IsButtonSave()) {
 8002716:	f000 f919 	bl	800294c <IsButtonSave>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d046      	beq.n	80027ae <modifyTimeFsm+0x1f6>
				ds3231_Write(ADDRESS_DATE, dateTemp);
 8002720:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <modifyTimeFsm+0x230>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4619      	mov	r1, r3
 8002728:	2004      	movs	r0, #4
 800272a:	f7fd ffe1 	bl	80006f0 <ds3231_Write>
				statusModifying = SET_MONTH;
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <modifyTimeFsm+0x208>)
 8002730:	2205      	movs	r2, #5
 8002732:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 8002734:	2000      	movs	r0, #0
 8002736:	f7fe fb1d 	bl	8000d74 <lcd_Clear>
			}
			break;
 800273a:	e038      	b.n	80027ae <modifyTimeFsm+0x1f6>

		case SET_MONTH:
			setMonth();
 800273c:	f000 f980 	bl	8002a40 <setMonth>
			if(IsButtonSave()) {
 8002740:	f000 f904 	bl	800294c <IsButtonSave>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d033      	beq.n	80027b2 <modifyTimeFsm+0x1fa>
				ds3231_Write(ADDRESS_MONTH, monthTemp);
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <modifyTimeFsm+0x234>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	4619      	mov	r1, r3
 8002752:	2005      	movs	r0, #5
 8002754:	f7fd ffcc 	bl	80006f0 <ds3231_Write>
				statusModifying = SET_YEAR;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <modifyTimeFsm+0x208>)
 800275a:	2206      	movs	r2, #6
 800275c:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe fb08 	bl	8000d74 <lcd_Clear>
			}
			break;
 8002764:	e025      	b.n	80027b2 <modifyTimeFsm+0x1fa>

		case SET_YEAR:
			setYear();
 8002766:	f000 f983 	bl	8002a70 <setYear>
			if(IsButtonSave()) {
 800276a:	f000 f8ef 	bl	800294c <IsButtonSave>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <modifyTimeFsm+0x1fe>
				ds3231_Write(ADDRESS_YEAR, yearTemp);
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <modifyTimeFsm+0x238>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4619      	mov	r1, r3
 800277c:	2006      	movs	r0, #6
 800277e:	f7fd ffb7 	bl	80006f0 <ds3231_Write>
				statusModifying = SET_HOUR;
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <modifyTimeFsm+0x208>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
				lcd_Clear(BLACK);
 8002788:	2000      	movs	r0, #0
 800278a:	f7fe faf3 	bl	8000d74 <lcd_Clear>
			}
			break;
 800278e:	e012      	b.n	80027b6 <modifyTimeFsm+0x1fe>


		default:
			statusModifying = SET_HOUR;
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <modifyTimeFsm+0x208>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe faec 	bl	8000d74 <lcd_Clear>
			break;
 800279c:	e00c      	b.n	80027b8 <modifyTimeFsm+0x200>
			break;
 800279e:	bf00      	nop
 80027a0:	e00a      	b.n	80027b8 <modifyTimeFsm+0x200>
			break;
 80027a2:	bf00      	nop
 80027a4:	e008      	b.n	80027b8 <modifyTimeFsm+0x200>
			break;
 80027a6:	bf00      	nop
 80027a8:	e006      	b.n	80027b8 <modifyTimeFsm+0x200>
			break;
 80027aa:	bf00      	nop
 80027ac:	e004      	b.n	80027b8 <modifyTimeFsm+0x200>
			break;
 80027ae:	bf00      	nop
 80027b0:	e002      	b.n	80027b8 <modifyTimeFsm+0x200>
			break;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <modifyTimeFsm+0x200>
			break;
 80027b6:	bf00      	nop
	}
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000008 	.word	0x20000008
 80027c4:	08008cd4 	.word	0x08008cd4
 80027c8:	20000024 	.word	0x20000024
 80027cc:	200000d4 	.word	0x200000d4
 80027d0:	2000000c 	.word	0x2000000c
 80027d4:	08008ce4 	.word	0x08008ce4
 80027d8:	20000010 	.word	0x20000010
 80027dc:	08008cf8 	.word	0x08008cf8
 80027e0:	200000c4 	.word	0x200000c4
 80027e4:	20000014 	.word	0x20000014
 80027e8:	20000018 	.word	0x20000018
 80027ec:	2000001c 	.word	0x2000001c
 80027f0:	20000020 	.word	0x20000020

080027f4 <modifyAlarmFsm>:

void modifyAlarmFsm(){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	switch(statusModifying) {
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <modifyAlarmFsm+0x60>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d002      	beq.n	8002806 <modifyAlarmFsm+0x12>
 8002800:	2b02      	cmp	r3, #2
 8002802:	d00f      	beq.n	8002824 <modifyAlarmFsm+0x30>
 8002804:	e01d      	b.n	8002842 <modifyAlarmFsm+0x4e>
		case SET_HOUR:
			setHour();
 8002806:	f000 f8b1 	bl	800296c <setHour>
			if(IsButtonSave()) {
 800280a:	f000 f89f 	bl	800294c <IsButtonSave>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01a      	beq.n	800284a <modifyAlarmFsm+0x56>
				hourAlarm = hourTemp;
 8002814:	4b10      	ldr	r3, [pc, #64]	; (8002858 <modifyAlarmFsm+0x64>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a10      	ldr	r2, [pc, #64]	; (800285c <modifyAlarmFsm+0x68>)
 800281a:	6013      	str	r3, [r2, #0]
				statusModifying = SET_MIN;
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <modifyAlarmFsm+0x60>)
 800281e:	2202      	movs	r2, #2
 8002820:	601a      	str	r2, [r3, #0]
			}
			break;
 8002822:	e012      	b.n	800284a <modifyAlarmFsm+0x56>

		case SET_MIN:
			setMin();
 8002824:	f000 f8be 	bl	80029a4 <setMin>
			if(IsButtonSave()) {
 8002828:	f000 f890 	bl	800294c <IsButtonSave>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <modifyAlarmFsm+0x5a>
				minAlarm = minTemp;
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <modifyAlarmFsm+0x6c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <modifyAlarmFsm+0x70>)
 8002838:	6013      	str	r3, [r2, #0]
				statusModifying = SET_HOUR;
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <modifyAlarmFsm+0x60>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
			}
			break;
 8002840:	e005      	b.n	800284e <modifyAlarmFsm+0x5a>

		default:
			statusModifying = SET_HOUR;
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <modifyAlarmFsm+0x60>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]
			break;
 8002848:	e002      	b.n	8002850 <modifyAlarmFsm+0x5c>
			break;
 800284a:	bf00      	nop
 800284c:	e000      	b.n	8002850 <modifyAlarmFsm+0x5c>
			break;
 800284e:	bf00      	nop
	}
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000008 	.word	0x20000008
 8002858:	2000000c 	.word	0x2000000c
 800285c:	200000c8 	.word	0x200000c8
 8002860:	20000010 	.word	0x20000010
 8002864:	200000cc 	.word	0x200000cc

08002868 <fsm>:

void fsm()
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
    switch(status)
 800286c:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <fsm+0x80>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d023      	beq.n	80028bc <fsm+0x54>
 8002874:	2b08      	cmp	r3, #8
 8002876:	dc2c      	bgt.n	80028d2 <fsm+0x6a>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <fsm+0x1a>
 800287c:	2b07      	cmp	r3, #7
 800287e:	d00f      	beq.n	80028a0 <fsm+0x38>
 8002880:	e027      	b.n	80028d2 <fsm+0x6a>
    {
        case NORMAL:
            if(IsButtonMode()) {
 8002882:	f000 f837 	bl	80028f4 <IsButtonMode>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d026      	beq.n	80028da <fsm+0x72>
                status = MODIFY_TIME;
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <fsm+0x80>)
 800288e:	2207      	movs	r2, #7
 8002890:	601a      	str	r2, [r3, #0]
            	statusModifying = SET_HOUR;
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <fsm+0x84>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]
            	cmd_parser_state = REQUEST;
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <fsm+0x88>)
 800289a:	2208      	movs	r2, #8
 800289c:	601a      	str	r2, [r3, #0]
            }
            break;
 800289e:	e01c      	b.n	80028da <fsm+0x72>
        case MODIFY_TIME:
            modifyTimeFsm();
 80028a0:	f7ff fe8a 	bl	80025b8 <modifyTimeFsm>
            if(IsButtonMode()) {
 80028a4:	f000 f826 	bl	80028f4 <IsButtonMode>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d017      	beq.n	80028de <fsm+0x76>
                status = MODIFY_ALARM;
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <fsm+0x80>)
 80028b0:	2208      	movs	r2, #8
 80028b2:	601a      	str	r2, [r3, #0]
                statusModifying = SET_HOUR;
 80028b4:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <fsm+0x84>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
            }
            break;
 80028ba:	e010      	b.n	80028de <fsm+0x76>
        case MODIFY_ALARM:
            modifyAlarmFsm();
 80028bc:	f7ff ff9a 	bl	80027f4 <modifyAlarmFsm>
            if(IsButtonMode())
 80028c0:	f000 f818 	bl	80028f4 <IsButtonMode>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <fsm+0x7a>
                status = NORMAL;
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <fsm+0x80>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
            break;
 80028d0:	e007      	b.n	80028e2 <fsm+0x7a>
        default:
            status = NORMAL;
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <fsm+0x80>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
            break;
 80028d8:	e004      	b.n	80028e4 <fsm+0x7c>
            break;
 80028da:	bf00      	nop
 80028dc:	e002      	b.n	80028e4 <fsm+0x7c>
            break;
 80028de:	bf00      	nop
 80028e0:	e000      	b.n	80028e4 <fsm+0x7c>
            break;
 80028e2:	bf00      	nop
    }
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	200000c0 	.word	0x200000c0
 80028ec:	20000008 	.word	0x20000008
 80028f0:	20000024 	.word	0x20000024

080028f4 <IsButtonMode>:
//button change mode
unsigned char IsButtonMode()
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
    if (button_count[0] == 1)
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <IsButtonMode+0x1c>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <IsButtonMode+0x10>
        return 1;
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <IsButtonMode+0x12>
    else
        return 0;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	200000f4 	.word	0x200000f4

08002914 <IsButtonUp>:

//increase parameter
unsigned char IsButtonUp()
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
	if ((button_count[3] == 1) || (button_count[3] >= 40 && button_count[3] % 4 == 0))
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <IsButtonUp+0x34>)
 800291a:	88db      	ldrh	r3, [r3, #6]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d00a      	beq.n	8002936 <IsButtonUp+0x22>
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <IsButtonUp+0x34>)
 8002922:	88db      	ldrh	r3, [r3, #6]
 8002924:	2b27      	cmp	r3, #39	; 0x27
 8002926:	d908      	bls.n	800293a <IsButtonUp+0x26>
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <IsButtonUp+0x34>)
 800292a:	88db      	ldrh	r3, [r3, #6]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <IsButtonUp+0x26>
        return 1;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <IsButtonUp+0x28>
    else
        return 0;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	200000f4 	.word	0x200000f4

0800294c <IsButtonSave>:

//save parameter
unsigned char IsButtonSave()
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
    if (button_count[12] == 1)
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <IsButtonSave+0x1c>)
 8002952:	8b1b      	ldrh	r3, [r3, #24]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <IsButtonSave+0x10>
        return 1;
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <IsButtonSave+0x12>
    else
        return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	200000f4 	.word	0x200000f4

0800296c <setHour>:

void setHour(int hour)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
    hourTemp = hour%24;
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <setHour+0x30>)
 8002978:	fb83 2301 	smull	r2, r3, r3, r1
 800297c:	109a      	asrs	r2, r3, #2
 800297e:	17cb      	asrs	r3, r1, #31
 8002980:	1ad2      	subs	r2, r2, r3
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	1aca      	subs	r2, r1, r3
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <setHour+0x34>)
 800298e:	601a      	str	r2, [r3, #0]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	2aaaaaab 	.word	0x2aaaaaab
 80029a0:	2000000c 	.word	0x2000000c

080029a4 <setMin>:

void setMin(int min)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
    minTemp = min%60;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <setMin+0x34>)
 80029b0:	fb83 1302 	smull	r1, r3, r3, r2
 80029b4:	4413      	add	r3, r2
 80029b6:	1159      	asrs	r1, r3, #5
 80029b8:	17d3      	asrs	r3, r2, #31
 80029ba:	1ac9      	subs	r1, r1, r3
 80029bc:	460b      	mov	r3, r1
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a5b      	subs	r3, r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	1ad1      	subs	r1, r2, r3
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <setMin+0x38>)
 80029c8:	6019      	str	r1, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	88888889 	.word	0x88888889
 80029dc:	20000010 	.word	0x20000010

080029e0 <setDay>:
{
	secTemp = sec%60;
}

void setDay()
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 80029e4:	f7ff ff96 	bl	8002914 <IsButtonUp>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <setDay+0x26>
    {
        dayTemp++;
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <setDay+0x2c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <setDay+0x2c>)
 80029f6:	6013      	str	r3, [r2, #0]
        if(dayTemp > 7)
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <setDay+0x2c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b07      	cmp	r3, #7
 80029fe:	dd02      	ble.n	8002a06 <setDay+0x26>
            dayTemp = 1;
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <setDay+0x2c>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    }
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000014 	.word	0x20000014

08002a10 <setDate>:

void setDate()
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 8002a14:	f7ff ff7e 	bl	8002914 <IsButtonUp>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <setDate+0x26>
    {
        dateTemp++;
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <setDate+0x2c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3301      	adds	r3, #1
 8002a24:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <setDate+0x2c>)
 8002a26:	6013      	str	r3, [r2, #0]
        if(dateTemp > 31)
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <setDate+0x2c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b1f      	cmp	r3, #31
 8002a2e:	dd02      	ble.n	8002a36 <setDate+0x26>
            dateTemp = 1;
 8002a30:	4b02      	ldr	r3, [pc, #8]	; (8002a3c <setDate+0x2c>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
    }
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000018 	.word	0x20000018

08002a40 <setMonth>:

void setMonth()
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 8002a44:	f7ff ff66 	bl	8002914 <IsButtonUp>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <setMonth+0x26>
    {
        monthTemp++;
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <setMonth+0x2c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <setMonth+0x2c>)
 8002a56:	6013      	str	r3, [r2, #0]
        if(monthTemp > 12)
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <setMonth+0x2c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b0c      	cmp	r3, #12
 8002a5e:	dd02      	ble.n	8002a66 <setMonth+0x26>
            monthTemp = 1;
 8002a60:	4b02      	ldr	r3, [pc, #8]	; (8002a6c <setMonth+0x2c>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    }
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2000001c 	.word	0x2000001c

08002a70 <setYear>:

void setYear()
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0

    if(IsButtonUp())
 8002a74:	f7ff ff4e 	bl	8002914 <IsButtonUp>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <setYear+0x26>
    {
        yearTemp++;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <setYear+0x2c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3301      	adds	r3, #1
 8002a84:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <setYear+0x2c>)
 8002a86:	6013      	str	r3, [r2, #0]
        if(yearTemp > 99)
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <setYear+0x2c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b63      	cmp	r3, #99	; 0x63
 8002a8e:	dd02      	ble.n	8002a96 <setYear+0x26>
            yearTemp = 0;
 8002a90:	4b02      	ldr	r3, [pc, #8]	; (8002a9c <setYear+0x2c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
    }
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000020 	.word	0x20000020

08002aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa4:	b672      	cpsid	i
}
 8002aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002aa8:	e7fe      	b.n	8002aa8 <Error_Handler+0x8>
	...

08002aac <timer_init>:
uint16_t timer2_flag = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;


void timer_init(){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002ab0:	4802      	ldr	r0, [pc, #8]	; (8002abc <timer_init+0x10>)
 8002ab2:	f003 fabf 	bl	8006034 <HAL_TIM_Base_Start_IT>
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	2000025c 	.word	0x2000025c

08002ac0 <setTimer2>:

void setTimer2(uint16_t duration){
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <setTimer2+0x2c>)
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <setTimer2+0x2c>)
 8002ad2:	881a      	ldrh	r2, [r3, #0]
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <setTimer2+0x30>)
 8002ad6:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <setTimer2+0x34>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	801a      	strh	r2, [r3, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	200000dc 	.word	0x200000dc
 8002af0:	200000da 	.word	0x200000da
 8002af4:	200000d8 	.word	0x200000d8

08002af8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b08:	d116      	bne.n	8002b38 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d010      	beq.n	8002b34 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b1c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b2e:	881a      	ldrh	r2, [r3, #0]
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b32:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002b34:	f7fe fcc2 	bl	80014bc <led7_Scan>
	}
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200000da 	.word	0x200000da
 8002b44:	200000d8 	.word	0x200000d8
 8002b48:	200000dc 	.word	0x200000dc

08002b4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b50:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b52:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <MX_SPI1_Init+0x68>)
 8002b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b56:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b98:	220a      	movs	r2, #10
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b9c:	4804      	ldr	r0, [pc, #16]	; (8002bb0 <MX_SPI1_Init+0x64>)
 8002b9e:	f002 fc0d 	bl	80053bc <HAL_SPI_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ba8:	f7ff ff7a 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000204 	.word	0x20000204
 8002bb4:	40013000 	.word	0x40013000

08002bb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	; 0x28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <HAL_SPI_MspInit+0x84>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d12b      	bne.n	8002c32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <HAL_SPI_MspInit+0x88>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <HAL_SPI_MspInit+0x88>)
 8002be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002be8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bea:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <HAL_SPI_MspInit+0x88>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_SPI_MspInit+0x88>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a10      	ldr	r2, [pc, #64]	; (8002c40 <HAL_SPI_MspInit+0x88>)
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <HAL_SPI_MspInit+0x88>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c12:	2338      	movs	r3, #56	; 0x38
 8002c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c22:	2305      	movs	r3, #5
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c26:	f107 0314 	add.w	r3, r7, #20
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4805      	ldr	r0, [pc, #20]	; (8002c44 <HAL_SPI_MspInit+0x8c>)
 8002c2e:	f000 fcad 	bl	800358c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c32:	bf00      	nop
 8002c34:	3728      	adds	r7, #40	; 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40013000 	.word	0x40013000
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020400 	.word	0x40020400

08002c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <HAL_MspInit+0x4c>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <HAL_MspInit+0x4c>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_MspInit+0x4c>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_MspInit+0x4c>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_MspInit+0x4c>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800

08002c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <NMI_Handler+0x4>

08002c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca2:	e7fe      	b.n	8002ca2 <HardFault_Handler+0x4>

08002ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <MemManage_Handler+0x4>

08002caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cae:	e7fe      	b.n	8002cae <BusFault_Handler+0x4>

08002cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <UsageFault_Handler+0x4>

08002cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce4:	f000 fa6a 	bl	80031bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}

08002cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <TIM2_IRQHandler+0x10>)
 8002cf2:	f003 fa0f 	bl	8006114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000025c 	.word	0x2000025c

08002d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <USART1_IRQHandler+0x10>)
 8002d06:	f003 fed7 	bl	8006ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2000036c 	.word	0x2000036c

08002d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <_sbrk+0x5c>)
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <_sbrk+0x60>)
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <_sbrk+0x64>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <_sbrk+0x64>)
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <_sbrk+0x68>)
 8002d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d207      	bcs.n	8002d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d44:	f004 fe40 	bl	80079c8 <__errno>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	220c      	movs	r2, #12
 8002d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d52:	e009      	b.n	8002d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <_sbrk+0x64>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <_sbrk+0x64>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <_sbrk+0x64>)
 8002d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20020000 	.word	0x20020000
 8002d74:	00000400 	.word	0x00000400
 8002d78:	200000e0 	.word	0x200000e0
 8002d7c:	200003c8 	.word	0x200003c8

08002d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <SystemInit+0x20>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <SystemInit+0x20>)
 8002d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db8:	463b      	mov	r3, r7
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <MX_TIM2_Init+0x94>)
 8002dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <MX_TIM2_Init+0x94>)
 8002dca:	f240 3247 	movw	r2, #839	; 0x347
 8002dce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <MX_TIM2_Init+0x94>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <MX_TIM2_Init+0x94>)
 8002dd8:	2263      	movs	r2, #99	; 0x63
 8002dda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ddc:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <MX_TIM2_Init+0x94>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <MX_TIM2_Init+0x94>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002de8:	4813      	ldr	r0, [pc, #76]	; (8002e38 <MX_TIM2_Init+0x94>)
 8002dea:	f003 f8d3 	bl	8005f94 <HAL_TIM_Base_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002df4:	f7ff fe54 	bl	8002aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dfe:	f107 0308 	add.w	r3, r7, #8
 8002e02:	4619      	mov	r1, r3
 8002e04:	480c      	ldr	r0, [pc, #48]	; (8002e38 <MX_TIM2_Init+0x94>)
 8002e06:	f003 fa8d 	bl	8006324 <HAL_TIM_ConfigClockSource>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e10:	f7ff fe46 	bl	8002aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e14:	2300      	movs	r3, #0
 8002e16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4805      	ldr	r0, [pc, #20]	; (8002e38 <MX_TIM2_Init+0x94>)
 8002e22:	f003 fca9 	bl	8006778 <HAL_TIMEx_MasterConfigSynchronization>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e2c:	f7ff fe38 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e30:	bf00      	nop
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	2000025c 	.word	0x2000025c

08002e3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4c:	d115      	bne.n	8002e7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_TIM_Base_MspInit+0x48>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <HAL_TIM_Base_MspInit+0x48>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_TIM_Base_MspInit+0x48>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	201c      	movs	r0, #28
 8002e70:	f000 fac3 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e74:	201c      	movs	r0, #28
 8002e76:	f000 fadc 	bl	8003432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800

08002e88 <uart_init_rs232>:
uint8_t index_buffer = 0;
int flag = 0;
uint8_t rcv[100];
uint8_t msg[100];

void uart_init_rs232(){
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4903      	ldr	r1, [pc, #12]	; (8002e9c <uart_init_rs232+0x14>)
 8002e90:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <uart_init_rs232+0x18>)
 8002e92:	f003 fde0 	bl	8006a56 <HAL_UART_Receive_IT>
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200000e4 	.word	0x200000e4
 8002ea0:	2000036c 	.word	0x2000036c

08002ea4 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4907      	ldr	r1, [pc, #28]	; (8002ecc <uart_Rs232SendString+0x28>)
 8002eb0:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <uart_Rs232SendString+0x2c>)
 8002eb2:	f004 fdbb 	bl	8007a2c <siprintf>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	230a      	movs	r3, #10
 8002ebc:	4904      	ldr	r1, [pc, #16]	; (8002ed0 <uart_Rs232SendString+0x2c>)
 8002ebe:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <uart_Rs232SendString+0x30>)
 8002ec0:	f003 fd37 	bl	8006932 <HAL_UART_Transmit>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	08008d08 	.word	0x08008d08
 8002ed0:	200002a4 	.word	0x200002a4
 8002ed4:	2000036c 	.word	0x2000036c

08002ed8 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <HAL_UART_RxCpltCallback+0x64>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d124      	bne.n	8002f34 <HAL_UART_RxCpltCallback+0x5c>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002eea:	230a      	movs	r3, #10
 8002eec:	2201      	movs	r2, #1
 8002eee:	4914      	ldr	r1, [pc, #80]	; (8002f40 <HAL_UART_RxCpltCallback+0x68>)
 8002ef0:	4814      	ldr	r0, [pc, #80]	; (8002f44 <HAL_UART_RxCpltCallback+0x6c>)
 8002ef2:	f003 fd1e 	bl	8006932 <HAL_UART_Transmit>
		if (receive_buffer1 != '!'){
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_UART_RxCpltCallback+0x68>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b21      	cmp	r3, #33	; 0x21
 8002efc:	d012      	beq.n	8002f24 <HAL_UART_RxCpltCallback+0x4c>
			rcv[index_buffer++] = receive_buffer1;
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_UART_RxCpltCallback+0x70>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	b2d1      	uxtb	r1, r2
 8002f06:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_UART_RxCpltCallback+0x70>)
 8002f08:	7011      	strb	r1, [r2, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_UART_RxCpltCallback+0x68>)
 8002f0e:	7819      	ldrb	r1, [r3, #0]
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_UART_RxCpltCallback+0x74>)
 8002f12:	5499      	strb	r1, [r3, r2]
			if (index_buffer == 100) index_buffer = 0;
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_UART_RxCpltCallback+0x70>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b64      	cmp	r3, #100	; 0x64
 8002f1a:	d106      	bne.n	8002f2a <HAL_UART_RxCpltCallback+0x52>
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_UART_RxCpltCallback+0x70>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	e002      	b.n	8002f2a <HAL_UART_RxCpltCallback+0x52>
		}else{
			flag=1;
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_UART_RxCpltCallback+0x78>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
		}
		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4904      	ldr	r1, [pc, #16]	; (8002f40 <HAL_UART_RxCpltCallback+0x68>)
 8002f2e:	4805      	ldr	r0, [pc, #20]	; (8002f44 <HAL_UART_RxCpltCallback+0x6c>)
 8002f30:	f003 fd91 	bl	8006a56 <HAL_UART_Receive_IT>
	}
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40011000 	.word	0x40011000
 8002f40:	200000e4 	.word	0x200000e4
 8002f44:	2000036c 	.word	0x2000036c
 8002f48:	200000e5 	.word	0x200000e5
 8002f4c:	20000308 	.word	0x20000308
 8002f50:	200000e8 	.word	0x200000e8

08002f54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <MX_USART1_UART_Init+0x50>)
 8002f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f8a:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <MX_USART1_UART_Init+0x4c>)
 8002f8c:	f003 fc84 	bl	8006898 <HAL_UART_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f96:	f7ff fd83 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000036c 	.word	0x2000036c
 8002fa4:	40011000 	.word	0x40011000

08002fa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_UART_MspInit+0x94>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d134      	bne.n	8003034 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <HAL_UART_MspInit+0x98>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_UART_MspInit+0x98>)
 8002fd4:	f043 0310 	orr.w	r3, r3, #16
 8002fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_UART_MspInit+0x98>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_UART_MspInit+0x98>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a14      	ldr	r2, [pc, #80]	; (8003040 <HAL_UART_MspInit+0x98>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_UART_MspInit+0x98>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003002:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003008:	2302      	movs	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003010:	2303      	movs	r3, #3
 8003012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003014:	2307      	movs	r3, #7
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	4619      	mov	r1, r3
 800301e:	4809      	ldr	r0, [pc, #36]	; (8003044 <HAL_UART_MspInit+0x9c>)
 8003020:	f000 fab4 	bl	800358c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003024:	2200      	movs	r2, #0
 8003026:	2100      	movs	r1, #0
 8003028:	2025      	movs	r0, #37	; 0x25
 800302a:	f000 f9e6 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800302e:	2025      	movs	r0, #37	; 0x25
 8003030:	f000 f9ff 	bl	8003432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003034:	bf00      	nop
 8003036:	3728      	adds	r7, #40	; 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40011000 	.word	0x40011000
 8003040:	40023800 	.word	0x40023800
 8003044:	40020000 	.word	0x40020000

08003048 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4413      	add	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4413      	add	r3, r2
 800306c:	b2db      	uxtb	r3, r3
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <DEC2BCD+0x44>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	08db      	lsrs	r3, r3, #3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	b258      	sxtb	r0, r3
 8003096:	79fa      	ldrb	r2, [r7, #7]
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <DEC2BCD+0x44>)
 800309a:	fba3 1302 	umull	r1, r3, r3, r2
 800309e:	08d9      	lsrs	r1, r3, #3
 80030a0:	460b      	mov	r3, r1
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	4303      	orrs	r3, r0
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	cccccccd 	.word	0xcccccccd

080030c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030c8:	480d      	ldr	r0, [pc, #52]	; (8003100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030ca:	490e      	ldr	r1, [pc, #56]	; (8003104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030cc:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d0:	e002      	b.n	80030d8 <LoopCopyDataInit>

080030d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030d6:	3304      	adds	r3, #4

080030d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030dc:	d3f9      	bcc.n	80030d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030de:	4a0b      	ldr	r2, [pc, #44]	; (800310c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030e0:	4c0b      	ldr	r4, [pc, #44]	; (8003110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e4:	e001      	b.n	80030ea <LoopFillZerobss>

080030e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030e8:	3204      	adds	r2, #4

080030ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030ec:	d3fb      	bcc.n	80030e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ee:	f7ff fe47 	bl	8002d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030f2:	f004 fc6f 	bl	80079d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030f6:	f7fe fa6d 	bl	80015d4 <main>
  bx  lr    
 80030fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003104:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003108:	0800be80 	.word	0x0800be80
  ldr r2, =_sbss
 800310c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003110:	200003c4 	.word	0x200003c4

08003114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003114:	e7fe      	b.n	8003114 <ADC_IRQHandler>
	...

08003118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <HAL_Init+0x40>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <HAL_Init+0x40>)
 8003122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_Init+0x40>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <HAL_Init+0x40>)
 800312e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <HAL_Init+0x40>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a07      	ldr	r2, [pc, #28]	; (8003158 <HAL_Init+0x40>)
 800313a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003140:	2003      	movs	r0, #3
 8003142:	f000 f94f 	bl	80033e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003146:	200f      	movs	r0, #15
 8003148:	f000 f808 	bl	800315c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800314c:	f7ff fd7c 	bl	8002c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023c00 	.word	0x40023c00

0800315c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_InitTick+0x54>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_InitTick+0x58>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	4619      	mov	r1, r3
 800316e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003172:	fbb3 f3f1 	udiv	r3, r3, r1
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f967 	bl	800344e <HAL_SYSTICK_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e00e      	b.n	80031a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b0f      	cmp	r3, #15
 800318e:	d80a      	bhi.n	80031a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003190:	2200      	movs	r2, #0
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	f000 f92f 	bl	80033fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800319c:	4a06      	ldr	r2, [pc, #24]	; (80031b8 <HAL_InitTick+0x5c>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e000      	b.n	80031a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000028 	.word	0x20000028
 80031b4:	20000030 	.word	0x20000030
 80031b8:	2000002c 	.word	0x2000002c

080031bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_IncTick+0x20>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_IncTick+0x24>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4413      	add	r3, r2
 80031cc:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <HAL_IncTick+0x24>)
 80031ce:	6013      	str	r3, [r2, #0]
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000030 	.word	0x20000030
 80031e0:	200003b0 	.word	0x200003b0

080031e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return uwTick;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_GetTick+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	200003b0 	.word	0x200003b0

080031fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003204:	f7ff ffee 	bl	80031e4 <HAL_GetTick>
 8003208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d005      	beq.n	8003222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_Delay+0x44>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003222:	bf00      	nop
 8003224:	f7ff ffde 	bl	80031e4 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	429a      	cmp	r2, r3
 8003232:	d8f7      	bhi.n	8003224 <HAL_Delay+0x28>
  {
  }
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000030 	.word	0x20000030

08003244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <__NVIC_SetPriorityGrouping+0x44>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003260:	4013      	ands	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800326c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003276:	4a04      	ldr	r2, [pc, #16]	; (8003288 <__NVIC_SetPriorityGrouping+0x44>)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	60d3      	str	r3, [r2, #12]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	0a1b      	lsrs	r3, r3, #8
 8003296:	f003 0307 	and.w	r3, r3, #7
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	db0b      	blt.n	80032d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	f003 021f 	and.w	r2, r3, #31
 80032c0:	4907      	ldr	r1, [pc, #28]	; (80032e0 <__NVIC_EnableIRQ+0x38>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2001      	movs	r0, #1
 80032ca:	fa00 f202 	lsl.w	r2, r0, r2
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000e100 	.word	0xe000e100

080032e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	db0a      	blt.n	800330e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	490c      	ldr	r1, [pc, #48]	; (8003330 <__NVIC_SetPriority+0x4c>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	0112      	lsls	r2, r2, #4
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	440b      	add	r3, r1
 8003308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800330c:	e00a      	b.n	8003324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4908      	ldr	r1, [pc, #32]	; (8003334 <__NVIC_SetPriority+0x50>)
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	3b04      	subs	r3, #4
 800331c:	0112      	lsls	r2, r2, #4
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	440b      	add	r3, r1
 8003322:	761a      	strb	r2, [r3, #24]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000e100 	.word	0xe000e100
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f1c3 0307 	rsb	r3, r3, #7
 8003352:	2b04      	cmp	r3, #4
 8003354:	bf28      	it	cs
 8003356:	2304      	movcs	r3, #4
 8003358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3304      	adds	r3, #4
 800335e:	2b06      	cmp	r3, #6
 8003360:	d902      	bls.n	8003368 <NVIC_EncodePriority+0x30>
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3b03      	subs	r3, #3
 8003366:	e000      	b.n	800336a <NVIC_EncodePriority+0x32>
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800336c:	f04f 32ff 	mov.w	r2, #4294967295
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43da      	mvns	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	401a      	ands	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003380:	f04f 31ff 	mov.w	r1, #4294967295
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	43d9      	mvns	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003390:	4313      	orrs	r3, r2
         );
}
 8003392:	4618      	mov	r0, r3
 8003394:	3724      	adds	r7, #36	; 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b0:	d301      	bcc.n	80033b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033b2:	2301      	movs	r3, #1
 80033b4:	e00f      	b.n	80033d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <SysTick_Config+0x40>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033be:	210f      	movs	r1, #15
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295
 80033c4:	f7ff ff8e 	bl	80032e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <SysTick_Config+0x40>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <SysTick_Config+0x40>)
 80033d0:	2207      	movs	r2, #7
 80033d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	e000e010 	.word	0xe000e010

080033e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff29 	bl	8003244 <__NVIC_SetPriorityGrouping>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800340c:	f7ff ff3e 	bl	800328c <__NVIC_GetPriorityGrouping>
 8003410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	6978      	ldr	r0, [r7, #20]
 8003418:	f7ff ff8e 	bl	8003338 <NVIC_EncodePriority>
 800341c:	4602      	mov	r2, r0
 800341e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff5d 	bl	80032e4 <__NVIC_SetPriority>
}
 800342a:	bf00      	nop
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	4603      	mov	r3, r0
 800343a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff31 	bl	80032a8 <__NVIC_EnableIRQ>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ffa2 	bl	80033a0 <SysTick_Config>
 800345c:	4603      	mov	r3, r0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003474:	f7ff feb6 	bl	80031e4 <HAL_GetTick>
 8003478:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d008      	beq.n	8003498 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2280      	movs	r2, #128	; 0x80
 800348a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e052      	b.n	800353e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0216 	bic.w	r2, r2, #22
 80034a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d103      	bne.n	80034c8 <HAL_DMA_Abort+0x62>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0208 	bic.w	r2, r2, #8
 80034d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e8:	e013      	b.n	8003512 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ea:	f7ff fe7b 	bl	80031e4 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b05      	cmp	r3, #5
 80034f6:	d90c      	bls.n	8003512 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2203      	movs	r2, #3
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e015      	b.n	800353e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e4      	bne.n	80034ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003524:	223f      	movs	r2, #63	; 0x3f
 8003526:	409a      	lsls	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d004      	beq.n	8003564 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e00c      	b.n	800357e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2205      	movs	r2, #5
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	; 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	e16b      	b.n	8003880 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035a8:	2201      	movs	r2, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	f040 815a 	bne.w	800387a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d005      	beq.n	80035de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d130      	bne.n	8003640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	2203      	movs	r2, #3
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003614:	2201      	movs	r2, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 0201 	and.w	r2, r3, #1
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b03      	cmp	r3, #3
 800364a:	d017      	beq.n	800367c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	2203      	movs	r2, #3
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d123      	bne.n	80036d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	08da      	lsrs	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3208      	adds	r2, #8
 8003690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	220f      	movs	r2, #15
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	08da      	lsrs	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3208      	adds	r2, #8
 80036ca:	69b9      	ldr	r1, [r7, #24]
 80036cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0203 	and.w	r2, r3, #3
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80b4 	beq.w	800387a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	4b60      	ldr	r3, [pc, #384]	; (8003898 <HAL_GPIO_Init+0x30c>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	4a5f      	ldr	r2, [pc, #380]	; (8003898 <HAL_GPIO_Init+0x30c>)
 800371c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003720:	6453      	str	r3, [r2, #68]	; 0x44
 8003722:	4b5d      	ldr	r3, [pc, #372]	; (8003898 <HAL_GPIO_Init+0x30c>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800372e:	4a5b      	ldr	r2, [pc, #364]	; (800389c <HAL_GPIO_Init+0x310>)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	3302      	adds	r3, #2
 8003736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	220f      	movs	r2, #15
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a52      	ldr	r2, [pc, #328]	; (80038a0 <HAL_GPIO_Init+0x314>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d02b      	beq.n	80037b2 <HAL_GPIO_Init+0x226>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a51      	ldr	r2, [pc, #324]	; (80038a4 <HAL_GPIO_Init+0x318>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d025      	beq.n	80037ae <HAL_GPIO_Init+0x222>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a50      	ldr	r2, [pc, #320]	; (80038a8 <HAL_GPIO_Init+0x31c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <HAL_GPIO_Init+0x21e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a4f      	ldr	r2, [pc, #316]	; (80038ac <HAL_GPIO_Init+0x320>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d019      	beq.n	80037a6 <HAL_GPIO_Init+0x21a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4e      	ldr	r2, [pc, #312]	; (80038b0 <HAL_GPIO_Init+0x324>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_GPIO_Init+0x216>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a4d      	ldr	r2, [pc, #308]	; (80038b4 <HAL_GPIO_Init+0x328>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00d      	beq.n	800379e <HAL_GPIO_Init+0x212>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4c      	ldr	r2, [pc, #304]	; (80038b8 <HAL_GPIO_Init+0x32c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <HAL_GPIO_Init+0x20e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4b      	ldr	r2, [pc, #300]	; (80038bc <HAL_GPIO_Init+0x330>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_GPIO_Init+0x20a>
 8003792:	2307      	movs	r3, #7
 8003794:	e00e      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 8003796:	2308      	movs	r3, #8
 8003798:	e00c      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 800379a:	2306      	movs	r3, #6
 800379c:	e00a      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 800379e:	2305      	movs	r3, #5
 80037a0:	e008      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037a2:	2304      	movs	r3, #4
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e004      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037b2:	2300      	movs	r3, #0
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	f002 0203 	and.w	r2, r2, #3
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	4093      	lsls	r3, r2
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c4:	4935      	ldr	r1, [pc, #212]	; (800389c <HAL_GPIO_Init+0x310>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_GPIO_Init+0x334>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f6:	4a32      	ldr	r2, [pc, #200]	; (80038c0 <HAL_GPIO_Init+0x334>)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037fc:	4b30      	ldr	r3, [pc, #192]	; (80038c0 <HAL_GPIO_Init+0x334>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003820:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <HAL_GPIO_Init+0x334>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003826:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_GPIO_Init+0x334>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800384a:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <HAL_GPIO_Init+0x334>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_GPIO_Init+0x334>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003874:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <HAL_GPIO_Init+0x334>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	f67f ae90 	bls.w	80035a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40013800 	.word	0x40013800
 80038a0:	40020000 	.word	0x40020000
 80038a4:	40020400 	.word	0x40020400
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40021400 	.word	0x40021400
 80038b8:	40021800 	.word	0x40021800
 80038bc:	40021c00 	.word	0x40021c00
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
 80038d0:	4613      	mov	r3, r2
 80038d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038d4:	787b      	ldrb	r3, [r7, #1]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038da:	887a      	ldrh	r2, [r7, #2]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038e0:	e003      	b.n	80038ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038e2:	887b      	ldrh	r3, [r7, #2]
 80038e4:	041a      	lsls	r2, r3, #16
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	619a      	str	r2, [r3, #24]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e12b      	b.n	8003b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd f962 	bl	8000be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800394a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800395a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800395c:	f001 fd06 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8003960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4a81      	ldr	r2, [pc, #516]	; (8003b6c <HAL_I2C_Init+0x274>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d807      	bhi.n	800397c <HAL_I2C_Init+0x84>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a80      	ldr	r2, [pc, #512]	; (8003b70 <HAL_I2C_Init+0x278>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e006      	b.n	800398a <HAL_I2C_Init+0x92>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a7d      	ldr	r2, [pc, #500]	; (8003b74 <HAL_I2C_Init+0x27c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	bf94      	ite	ls
 8003984:	2301      	movls	r3, #1
 8003986:	2300      	movhi	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e0e7      	b.n	8003b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a78      	ldr	r2, [pc, #480]	; (8003b78 <HAL_I2C_Init+0x280>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0c9b      	lsrs	r3, r3, #18
 800399c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a6a      	ldr	r2, [pc, #424]	; (8003b6c <HAL_I2C_Init+0x274>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d802      	bhi.n	80039cc <HAL_I2C_Init+0xd4>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3301      	adds	r3, #1
 80039ca:	e009      	b.n	80039e0 <HAL_I2C_Init+0xe8>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
 80039d6:	4a69      	ldr	r2, [pc, #420]	; (8003b7c <HAL_I2C_Init+0x284>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	099b      	lsrs	r3, r3, #6
 80039de:	3301      	adds	r3, #1
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	495c      	ldr	r1, [pc, #368]	; (8003b6c <HAL_I2C_Init+0x274>)
 80039fc:	428b      	cmp	r3, r1
 80039fe:	d819      	bhi.n	8003a34 <HAL_I2C_Init+0x13c>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e59      	subs	r1, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a0e:	1c59      	adds	r1, r3, #1
 8003a10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a14:	400b      	ands	r3, r1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_I2C_Init+0x138>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e59      	subs	r1, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2e:	e051      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a30:	2304      	movs	r3, #4
 8003a32:	e04f      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d111      	bne.n	8003a60 <HAL_I2C_Init+0x168>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	440b      	add	r3, r1
 8003a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e012      	b.n	8003a86 <HAL_I2C_Init+0x18e>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1e58      	subs	r0, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	0099      	lsls	r1, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Init+0x196>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e022      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10e      	bne.n	8003ab4 <HAL_I2C_Init+0x1bc>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1e58      	subs	r0, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	440b      	add	r3, r1
 8003aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab2:	e00f      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	0099      	lsls	r1, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	6809      	ldr	r1, [r1, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6911      	ldr	r1, [r2, #16]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68d2      	ldr	r2, [r2, #12]
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	000186a0 	.word	0x000186a0
 8003b70:	001e847f 	.word	0x001e847f
 8003b74:	003d08ff 	.word	0x003d08ff
 8003b78:	431bde83 	.word	0x431bde83
 8003b7c:	10624dd3 	.word	0x10624dd3

08003b80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	4608      	mov	r0, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4603      	mov	r3, r0
 8003b90:	817b      	strh	r3, [r7, #10]
 8003b92:	460b      	mov	r3, r1
 8003b94:	813b      	strh	r3, [r7, #8]
 8003b96:	4613      	mov	r3, r2
 8003b98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b9a:	f7ff fb23 	bl	80031e4 <HAL_GetTick>
 8003b9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	f040 80d9 	bne.w	8003d60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2319      	movs	r3, #25
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	496d      	ldr	r1, [pc, #436]	; (8003d6c <HAL_I2C_Mem_Write+0x1ec>)
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fdad 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e0cc      	b.n	8003d62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_I2C_Mem_Write+0x56>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e0c5      	b.n	8003d62 <HAL_I2C_Mem_Write+0x1e2>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d007      	beq.n	8003bfc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2221      	movs	r2, #33	; 0x21
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2240      	movs	r2, #64	; 0x40
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a3a      	ldr	r2, [r7, #32]
 8003c26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a4d      	ldr	r2, [pc, #308]	; (8003d70 <HAL_I2C_Mem_Write+0x1f0>)
 8003c3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c3e:	88f8      	ldrh	r0, [r7, #6]
 8003c40:	893a      	ldrh	r2, [r7, #8]
 8003c42:	8979      	ldrh	r1, [r7, #10]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fbe4 	bl	800441c <I2C_RequestMemoryWrite>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d052      	beq.n	8003d00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e081      	b.n	8003d62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fe2e 	bl	80048c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d107      	bne.n	8003c86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e06b      	b.n	8003d62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d11b      	bne.n	8003d00 <HAL_I2C_Mem_Write+0x180>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d017      	beq.n	8003d00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	781a      	ldrb	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1aa      	bne.n	8003c5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fe1a 	bl	8004946 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00d      	beq.n	8003d34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d107      	bne.n	8003d30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e016      	b.n	8003d62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e000      	b.n	8003d62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
  }
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	00100002 	.word	0x00100002
 8003d70:	ffff0000 	.word	0xffff0000

08003d74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08c      	sub	sp, #48	; 0x30
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	817b      	strh	r3, [r7, #10]
 8003d86:	460b      	mov	r3, r1
 8003d88:	813b      	strh	r3, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d8e:	f7ff fa29 	bl	80031e4 <HAL_GetTick>
 8003d92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	f040 8208 	bne.w	80041b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	2319      	movs	r3, #25
 8003da8:	2201      	movs	r2, #1
 8003daa:	497b      	ldr	r1, [pc, #492]	; (8003f98 <HAL_I2C_Mem_Read+0x224>)
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 fcb3 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
 8003dba:	e1fb      	b.n	80041b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_I2C_Mem_Read+0x56>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e1f4      	b.n	80041b4 <HAL_I2C_Mem_Read+0x440>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d007      	beq.n	8003df0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2222      	movs	r2, #34	; 0x22
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a5b      	ldr	r2, [pc, #364]	; (8003f9c <HAL_I2C_Mem_Read+0x228>)
 8003e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e32:	88f8      	ldrh	r0, [r7, #6]
 8003e34:	893a      	ldrh	r2, [r7, #8]
 8003e36:	8979      	ldrh	r1, [r7, #10]
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	4603      	mov	r3, r0
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fb80 	bl	8004548 <I2C_RequestMemoryRead>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e1b0      	b.n	80041b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d113      	bne.n	8003e82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	623b      	str	r3, [r7, #32]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	623b      	str	r3, [r7, #32]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	623b      	str	r3, [r7, #32]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	e184      	b.n	800418c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d11b      	bne.n	8003ec2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e164      	b.n	800418c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d11b      	bne.n	8003f02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	e144      	b.n	800418c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f18:	e138      	b.n	800418c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	f200 80f1 	bhi.w	8004106 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d123      	bne.n	8003f74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fd49 	bl	80049c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e139      	b.n	80041b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f72:	e10b      	b.n	800418c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d14e      	bne.n	800401a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	2200      	movs	r2, #0
 8003f84:	4906      	ldr	r1, [pc, #24]	; (8003fa0 <HAL_I2C_Mem_Read+0x22c>)
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fbc6 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e10e      	b.n	80041b4 <HAL_I2C_Mem_Read+0x440>
 8003f96:	bf00      	nop
 8003f98:	00100002 	.word	0x00100002
 8003f9c:	ffff0000 	.word	0xffff0000
 8003fa0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004018:	e0b8      	b.n	800418c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	2200      	movs	r2, #0
 8004022:	4966      	ldr	r1, [pc, #408]	; (80041bc <HAL_I2C_Mem_Read+0x448>)
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fb77 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0bf      	b.n	80041b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	1c5a      	adds	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	2200      	movs	r2, #0
 800407e:	494f      	ldr	r1, [pc, #316]	; (80041bc <HAL_I2C_Mem_Read+0x448>)
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fb49 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e091      	b.n	80041b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004104:	e042      	b.n	800418c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fc5c 	bl	80049c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e04c      	b.n	80041b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b04      	cmp	r3, #4
 8004158:	d118      	bne.n	800418c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	2b00      	cmp	r3, #0
 8004192:	f47f aec2 	bne.w	8003f1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e000      	b.n	80041b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041b2:	2302      	movs	r3, #2
  }
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3728      	adds	r7, #40	; 0x28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	00010004 	.word	0x00010004

080041c0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	460b      	mov	r3, r1
 80041ce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041d0:	f7ff f808 	bl	80031e4 <HAL_GetTick>
 80041d4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	f040 8111 	bne.w	800440a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	2319      	movs	r3, #25
 80041ee:	2201      	movs	r2, #1
 80041f0:	4988      	ldr	r1, [pc, #544]	; (8004414 <HAL_I2C_IsDeviceReady+0x254>)
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fa90 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
 8004200:	e104      	b.n	800440c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_I2C_IsDeviceReady+0x50>
 800420c:	2302      	movs	r3, #2
 800420e:	e0fd      	b.n	800440c <HAL_I2C_IsDeviceReady+0x24c>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b01      	cmp	r3, #1
 8004224:	d007      	beq.n	8004236 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004244:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2224      	movs	r2, #36	; 0x24
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4a70      	ldr	r2, [pc, #448]	; (8004418 <HAL_I2C_IsDeviceReady+0x258>)
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004268:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2200      	movs	r2, #0
 8004272:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fa4e 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004290:	d103      	bne.n	800429a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e0b6      	b.n	800440c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800429e:	897b      	ldrh	r3, [r7, #10]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042ac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80042ae:	f7fe ff99 	bl	80031e4 <HAL_GetTick>
 80042b2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b02      	cmp	r3, #2
 80042c0:	bf0c      	ite	eq
 80042c2:	2301      	moveq	r3, #1
 80042c4:	2300      	movne	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d8:	bf0c      	ite	eq
 80042da:	2301      	moveq	r3, #1
 80042dc:	2300      	movne	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042e2:	e025      	b.n	8004330 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042e4:	f7fe ff7e 	bl	80031e4 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d302      	bcc.n	80042fa <HAL_I2C_IsDeviceReady+0x13a>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	22a0      	movs	r2, #160	; 0xa0
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b02      	cmp	r3, #2
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004326:	bf0c      	ite	eq
 8004328:	2301      	moveq	r3, #1
 800432a:	2300      	movne	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2ba0      	cmp	r3, #160	; 0xa0
 800433a:	d005      	beq.n	8004348 <HAL_I2C_IsDeviceReady+0x188>
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <HAL_I2C_IsDeviceReady+0x188>
 8004342:	7dbb      	ldrb	r3, [r7, #22]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0cd      	beq.n	80042e4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b02      	cmp	r3, #2
 800435c:	d129      	bne.n	80043b2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2319      	movs	r3, #25
 800438a:	2201      	movs	r2, #1
 800438c:	4921      	ldr	r1, [pc, #132]	; (8004414 <HAL_I2C_IsDeviceReady+0x254>)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f9c2 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e036      	b.n	800440c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e02c      	b.n	800440c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	2319      	movs	r3, #25
 80043d2:	2201      	movs	r2, #1
 80043d4:	490f      	ldr	r1, [pc, #60]	; (8004414 <HAL_I2C_IsDeviceReady+0x254>)
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f99e 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e012      	b.n	800440c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	3301      	adds	r3, #1
 80043ea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	f4ff af32 	bcc.w	800425a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3720      	adds	r7, #32
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	00100002 	.word	0x00100002
 8004418:	ffff0000 	.word	0xffff0000

0800441c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	461a      	mov	r2, r3
 800442a:	4603      	mov	r3, r0
 800442c:	817b      	strh	r3, [r7, #10]
 800442e:	460b      	mov	r3, r1
 8004430:	813b      	strh	r3, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004444:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	2200      	movs	r2, #0
 800444e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f960 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00d      	beq.n	800447a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446c:	d103      	bne.n	8004476 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e05f      	b.n	800453a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800447a:	897b      	ldrh	r3, [r7, #10]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004488:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	6a3a      	ldr	r2, [r7, #32]
 800448e:	492d      	ldr	r1, [pc, #180]	; (8004544 <I2C_RequestMemoryWrite+0x128>)
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f998 	bl	80047c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e04c      	b.n	800453a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b8:	6a39      	ldr	r1, [r7, #32]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fa02 	bl	80048c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d107      	bne.n	80044de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e02b      	b.n	800453a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d105      	bne.n	80044f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044e8:	893b      	ldrh	r3, [r7, #8]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	611a      	str	r2, [r3, #16]
 80044f2:	e021      	b.n	8004538 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044f4:	893b      	ldrh	r3, [r7, #8]
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004504:	6a39      	ldr	r1, [r7, #32]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 f9dc 	bl	80048c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00d      	beq.n	800452e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	2b04      	cmp	r3, #4
 8004518:	d107      	bne.n	800452a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004528:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e005      	b.n	800453a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800452e:	893b      	ldrh	r3, [r7, #8]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	00010002 	.word	0x00010002

08004548 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	461a      	mov	r2, r3
 8004556:	4603      	mov	r3, r0
 8004558:	817b      	strh	r3, [r7, #10]
 800455a:	460b      	mov	r3, r1
 800455c:	813b      	strh	r3, [r7, #8]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004570:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004580:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	2200      	movs	r2, #0
 800458a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f8c2 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00d      	beq.n	80045b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a8:	d103      	bne.n	80045b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e0aa      	b.n	800470c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	6a3a      	ldr	r2, [r7, #32]
 80045ca:	4952      	ldr	r1, [pc, #328]	; (8004714 <I2C_RequestMemoryRead+0x1cc>)
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f8fa 	bl	80047c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e097      	b.n	800470c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f4:	6a39      	ldr	r1, [r7, #32]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f964 	bl	80048c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	2b04      	cmp	r3, #4
 8004608:	d107      	bne.n	800461a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004618:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e076      	b.n	800470c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d105      	bne.n	8004630 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004624:	893b      	ldrh	r3, [r7, #8]
 8004626:	b2da      	uxtb	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	611a      	str	r2, [r3, #16]
 800462e:	e021      	b.n	8004674 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004630:	893b      	ldrh	r3, [r7, #8]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	b29b      	uxth	r3, r3
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800463e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004640:	6a39      	ldr	r1, [r7, #32]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f93e 	bl	80048c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00d      	beq.n	800466a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	2b04      	cmp	r3, #4
 8004654:	d107      	bne.n	8004666 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004664:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e050      	b.n	800470c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800466a:	893b      	ldrh	r3, [r7, #8]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004676:	6a39      	ldr	r1, [r7, #32]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f923 	bl	80048c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	2b04      	cmp	r3, #4
 800468a:	d107      	bne.n	800469c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e035      	b.n	800470c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f82b 	bl	8004718 <I2C_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00d      	beq.n	80046e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d6:	d103      	bne.n	80046e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e013      	b.n	800470c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046e4:	897b      	ldrh	r3, [r7, #10]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	6a3a      	ldr	r2, [r7, #32]
 80046f8:	4906      	ldr	r1, [pc, #24]	; (8004714 <I2C_RequestMemoryRead+0x1cc>)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f863 	bl	80047c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	00010002 	.word	0x00010002

08004718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004728:	e025      	b.n	8004776 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004730:	d021      	beq.n	8004776 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004732:	f7fe fd57 	bl	80031e4 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d302      	bcc.n	8004748 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d116      	bne.n	8004776 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f043 0220 	orr.w	r2, r3, #32
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e023      	b.n	80047be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d10d      	bne.n	800479c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	43da      	mvns	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4013      	ands	r3, r2
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	bf0c      	ite	eq
 8004792:	2301      	moveq	r3, #1
 8004794:	2300      	movne	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	e00c      	b.n	80047b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	43da      	mvns	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4013      	ands	r3, r2
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d0b6      	beq.n	800472a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047d4:	e051      	b.n	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e4:	d123      	bne.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f043 0204 	orr.w	r2, r3, #4
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e046      	b.n	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d021      	beq.n	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7fe fcd5 	bl	80031e4 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d116      	bne.n	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f043 0220 	orr.w	r2, r3, #32
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e020      	b.n	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d10c      	bne.n	800489e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	43da      	mvns	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4013      	ands	r3, r2
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	bf14      	ite	ne
 8004896:	2301      	movne	r3, #1
 8004898:	2300      	moveq	r3, #0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	e00b      	b.n	80048b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	43da      	mvns	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4013      	ands	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	bf14      	ite	ne
 80048b0:	2301      	movne	r3, #1
 80048b2:	2300      	moveq	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d18d      	bne.n	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048d0:	e02d      	b.n	800492e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f8ce 	bl	8004a74 <I2C_IsAcknowledgeFailed>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e02d      	b.n	800493e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d021      	beq.n	800492e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ea:	f7fe fc7b 	bl	80031e4 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d302      	bcc.n	8004900 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d116      	bne.n	800492e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e007      	b.n	800493e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004938:	2b80      	cmp	r3, #128	; 0x80
 800493a:	d1ca      	bne.n	80048d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004952:	e02d      	b.n	80049b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f88d 	bl	8004a74 <I2C_IsAcknowledgeFailed>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e02d      	b.n	80049c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d021      	beq.n	80049b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496c:	f7fe fc3a 	bl	80031e4 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	429a      	cmp	r2, r3
 800497a:	d302      	bcc.n	8004982 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d116      	bne.n	80049b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e007      	b.n	80049c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d1ca      	bne.n	8004954 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049d4:	e042      	b.n	8004a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b10      	cmp	r3, #16
 80049e2:	d119      	bne.n	8004a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0210 	mvn.w	r2, #16
 80049ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e029      	b.n	8004a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a18:	f7fe fbe4 	bl	80031e4 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d302      	bcc.n	8004a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d116      	bne.n	8004a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	f043 0220 	orr.w	r2, r3, #32
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e007      	b.n	8004a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	d1b5      	bne.n	80049d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8a:	d11b      	bne.n	8004ac4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	f043 0204 	orr.w	r2, r3, #4
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e264      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d075      	beq.n	8004bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004af2:	4ba3      	ldr	r3, [pc, #652]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d00c      	beq.n	8004b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afe:	4ba0      	ldr	r3, [pc, #640]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d112      	bne.n	8004b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0a:	4b9d      	ldr	r3, [pc, #628]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b16:	d10b      	bne.n	8004b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	4b99      	ldr	r3, [pc, #612]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d05b      	beq.n	8004bdc <HAL_RCC_OscConfig+0x108>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d157      	bne.n	8004bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e23f      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b38:	d106      	bne.n	8004b48 <HAL_RCC_OscConfig+0x74>
 8004b3a:	4b91      	ldr	r3, [pc, #580]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a90      	ldr	r2, [pc, #576]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e01d      	b.n	8004b84 <HAL_RCC_OscConfig+0xb0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x98>
 8004b52:	4b8b      	ldr	r3, [pc, #556]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a8a      	ldr	r2, [pc, #552]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4b88      	ldr	r3, [pc, #544]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a87      	ldr	r2, [pc, #540]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCC_OscConfig+0xb0>
 8004b6c:	4b84      	ldr	r3, [pc, #528]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a83      	ldr	r2, [pc, #524]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	4b81      	ldr	r3, [pc, #516]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a80      	ldr	r2, [pc, #512]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d013      	beq.n	8004bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fe fb2a 	bl	80031e4 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b94:	f7fe fb26 	bl	80031e4 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	; 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e204      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	4b76      	ldr	r3, [pc, #472]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0xc0>
 8004bb2:	e014      	b.n	8004bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fe fb16 	bl	80031e4 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bbc:	f7fe fb12 	bl	80031e4 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	; 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e1f0      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bce:	4b6c      	ldr	r3, [pc, #432]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0xe8>
 8004bda:	e000      	b.n	8004bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d063      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bea:	4b65      	ldr	r3, [pc, #404]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00b      	beq.n	8004c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf6:	4b62      	ldr	r3, [pc, #392]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d11c      	bne.n	8004c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c02:	4b5f      	ldr	r3, [pc, #380]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0e:	4b5c      	ldr	r3, [pc, #368]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_RCC_OscConfig+0x152>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d001      	beq.n	8004c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e1c4      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c26:	4b56      	ldr	r3, [pc, #344]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4952      	ldr	r1, [pc, #328]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	e03a      	b.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d020      	beq.n	8004c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c44:	4b4f      	ldr	r3, [pc, #316]	; (8004d84 <HAL_RCC_OscConfig+0x2b0>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4a:	f7fe facb 	bl	80031e4 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c52:	f7fe fac7 	bl	80031e4 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e1a5      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c64:	4b46      	ldr	r3, [pc, #280]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c70:	4b43      	ldr	r3, [pc, #268]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4940      	ldr	r1, [pc, #256]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	600b      	str	r3, [r1, #0]
 8004c84:	e015      	b.n	8004cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c86:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <HAL_RCC_OscConfig+0x2b0>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fe faaa 	bl	80031e4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c94:	f7fe faa6 	bl	80031e4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e184      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca6:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d030      	beq.n	8004d20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc6:	4b30      	ldr	r3, [pc, #192]	; (8004d88 <HAL_RCC_OscConfig+0x2b4>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ccc:	f7fe fa8a 	bl	80031e4 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd4:	f7fe fa86 	bl	80031e4 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e164      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce6:	4b26      	ldr	r3, [pc, #152]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x200>
 8004cf2:	e015      	b.n	8004d20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf4:	4b24      	ldr	r3, [pc, #144]	; (8004d88 <HAL_RCC_OscConfig+0x2b4>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfa:	f7fe fa73 	bl	80031e4 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d02:	f7fe fa6f 	bl	80031e4 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e14d      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d14:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f0      	bne.n	8004d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80a0 	beq.w	8004e6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d32:	4b13      	ldr	r3, [pc, #76]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10f      	bne.n	8004d5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	4b0f      	ldr	r3, [pc, #60]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	4a0e      	ldr	r2, [pc, #56]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <HAL_RCC_OscConfig+0x2ac>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_RCC_OscConfig+0x2b8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d121      	bne.n	8004dae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6a:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <HAL_RCC_OscConfig+0x2b8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a07      	ldr	r2, [pc, #28]	; (8004d8c <HAL_RCC_OscConfig+0x2b8>)
 8004d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d76:	f7fe fa35 	bl	80031e4 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7c:	e011      	b.n	8004da2 <HAL_RCC_OscConfig+0x2ce>
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	42470000 	.word	0x42470000
 8004d88:	42470e80 	.word	0x42470e80
 8004d8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d90:	f7fe fa28 	bl	80031e4 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e106      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da2:	4b85      	ldr	r3, [pc, #532]	; (8004fb8 <HAL_RCC_OscConfig+0x4e4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d106      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x2f0>
 8004db6:	4b81      	ldr	r3, [pc, #516]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a80      	ldr	r2, [pc, #512]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc2:	e01c      	b.n	8004dfe <HAL_RCC_OscConfig+0x32a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b05      	cmp	r3, #5
 8004dca:	d10c      	bne.n	8004de6 <HAL_RCC_OscConfig+0x312>
 8004dcc:	4b7b      	ldr	r3, [pc, #492]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	4a7a      	ldr	r2, [pc, #488]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004dd2:	f043 0304 	orr.w	r3, r3, #4
 8004dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd8:	4b78      	ldr	r3, [pc, #480]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	4a77      	ldr	r2, [pc, #476]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	6713      	str	r3, [r2, #112]	; 0x70
 8004de4:	e00b      	b.n	8004dfe <HAL_RCC_OscConfig+0x32a>
 8004de6:	4b75      	ldr	r3, [pc, #468]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a74      	ldr	r2, [pc, #464]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
 8004df2:	4b72      	ldr	r3, [pc, #456]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	4a71      	ldr	r2, [pc, #452]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004df8:	f023 0304 	bic.w	r3, r3, #4
 8004dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d015      	beq.n	8004e32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e06:	f7fe f9ed 	bl	80031e4 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e0e:	f7fe f9e9 	bl	80031e4 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0c5      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	4b65      	ldr	r3, [pc, #404]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ee      	beq.n	8004e0e <HAL_RCC_OscConfig+0x33a>
 8004e30:	e014      	b.n	8004e5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e32:	f7fe f9d7 	bl	80031e4 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fe f9d3 	bl	80031e4 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0af      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e50:	4b5a      	ldr	r3, [pc, #360]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ee      	bne.n	8004e3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e62:	4b56      	ldr	r3, [pc, #344]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a55      	ldr	r2, [pc, #340]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 809b 	beq.w	8004fae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e78:	4b50      	ldr	r3, [pc, #320]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d05c      	beq.n	8004f3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d141      	bne.n	8004f10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8c:	4b4c      	ldr	r3, [pc, #304]	; (8004fc0 <HAL_RCC_OscConfig+0x4ec>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e92:	f7fe f9a7 	bl	80031e4 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9a:	f7fe f9a3 	bl	80031e4 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e081      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eac:	4b43      	ldr	r3, [pc, #268]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f0      	bne.n	8004e9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	019b      	lsls	r3, r3, #6
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	061b      	lsls	r3, r3, #24
 8004edc:	4937      	ldr	r1, [pc, #220]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ee2:	4b37      	ldr	r3, [pc, #220]	; (8004fc0 <HAL_RCC_OscConfig+0x4ec>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7fe f97c 	bl	80031e4 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7fe f978 	bl	80031e4 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e056      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f02:	4b2e      	ldr	r3, [pc, #184]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x41c>
 8004f0e:	e04e      	b.n	8004fae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f10:	4b2b      	ldr	r3, [pc, #172]	; (8004fc0 <HAL_RCC_OscConfig+0x4ec>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f16:	f7fe f965 	bl	80031e4 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f1e:	f7fe f961 	bl	80031e4 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e03f      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f30:	4b22      	ldr	r3, [pc, #136]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f0      	bne.n	8004f1e <HAL_RCC_OscConfig+0x44a>
 8004f3c:	e037      	b.n	8004fae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e032      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f4a:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <HAL_RCC_OscConfig+0x4e8>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d028      	beq.n	8004faa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d121      	bne.n	8004faa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d11a      	bne.n	8004faa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d111      	bne.n	8004faa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	3b01      	subs	r3, #1
 8004f94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d001      	beq.n	8004fae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e000      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40007000 	.word	0x40007000
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	42470060 	.word	0x42470060

08004fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0cc      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b68      	ldr	r3, [pc, #416]	; (800517c <HAL_RCC_ClockConfig+0x1b8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d90c      	bls.n	8005000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b65      	ldr	r3, [pc, #404]	; (800517c <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	4b63      	ldr	r3, [pc, #396]	; (800517c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0b8      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d020      	beq.n	800504e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005018:	4b59      	ldr	r3, [pc, #356]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a58      	ldr	r2, [pc, #352]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005030:	4b53      	ldr	r3, [pc, #332]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4a52      	ldr	r2, [pc, #328]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800503a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503c:	4b50      	ldr	r3, [pc, #320]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	494d      	ldr	r1, [pc, #308]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	4313      	orrs	r3, r2
 800504c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d044      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005062:	4b47      	ldr	r3, [pc, #284]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d119      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e07f      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d003      	beq.n	8005082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507e:	2b03      	cmp	r3, #3
 8005080:	d107      	bne.n	8005092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005082:	4b3f      	ldr	r3, [pc, #252]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e06f      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005092:	4b3b      	ldr	r3, [pc, #236]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e067      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050a2:	4b37      	ldr	r3, [pc, #220]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f023 0203 	bic.w	r2, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4934      	ldr	r1, [pc, #208]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050b4:	f7fe f896 	bl	80031e4 <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050bc:	f7fe f892 	bl	80031e4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e04f      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d2:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 020c 	and.w	r2, r3, #12
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1eb      	bne.n	80050bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050e4:	4b25      	ldr	r3, [pc, #148]	; (800517c <HAL_RCC_ClockConfig+0x1b8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d20c      	bcs.n	800510c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b22      	ldr	r3, [pc, #136]	; (800517c <HAL_RCC_ClockConfig+0x1b8>)
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fa:	4b20      	ldr	r3, [pc, #128]	; (800517c <HAL_RCC_ClockConfig+0x1b8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e032      	b.n	8005172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4916      	ldr	r1, [pc, #88]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d009      	beq.n	800514a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	490e      	ldr	r1, [pc, #56]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800514a:	f000 f821 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 800514e:	4602      	mov	r2, r0
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	091b      	lsrs	r3, r3, #4
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	490a      	ldr	r1, [pc, #40]	; (8005184 <HAL_RCC_ClockConfig+0x1c0>)
 800515c:	5ccb      	ldrb	r3, [r1, r3]
 800515e:	fa22 f303 	lsr.w	r3, r2, r3
 8005162:	4a09      	ldr	r2, [pc, #36]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7fd fff6 	bl	800315c <HAL_InitTick>

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40023c00 	.word	0x40023c00
 8005180:	40023800 	.word	0x40023800
 8005184:	0800bca8 	.word	0x0800bca8
 8005188:	20000028 	.word	0x20000028
 800518c:	2000002c 	.word	0x2000002c

08005190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	607b      	str	r3, [r7, #4]
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	2300      	movs	r3, #0
 80051a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a8:	4b67      	ldr	r3, [pc, #412]	; (8005348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 030c 	and.w	r3, r3, #12
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d00d      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x40>
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	f200 80bd 	bhi.w	8005334 <HAL_RCC_GetSysClockFreq+0x1a4>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x34>
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d003      	beq.n	80051ca <HAL_RCC_GetSysClockFreq+0x3a>
 80051c2:	e0b7      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051c4:	4b61      	ldr	r3, [pc, #388]	; (800534c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051c6:	60bb      	str	r3, [r7, #8]
       break;
 80051c8:	e0b7      	b.n	800533a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ca:	4b61      	ldr	r3, [pc, #388]	; (8005350 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80051cc:	60bb      	str	r3, [r7, #8]
      break;
 80051ce:	e0b4      	b.n	800533a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051d0:	4b5d      	ldr	r3, [pc, #372]	; (8005348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051da:	4b5b      	ldr	r3, [pc, #364]	; (8005348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d04d      	beq.n	8005282 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e6:	4b58      	ldr	r3, [pc, #352]	; (8005348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	099b      	lsrs	r3, r3, #6
 80051ec:	461a      	mov	r2, r3
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051f6:	f04f 0100 	mov.w	r1, #0
 80051fa:	ea02 0800 	and.w	r8, r2, r0
 80051fe:	ea03 0901 	and.w	r9, r3, r1
 8005202:	4640      	mov	r0, r8
 8005204:	4649      	mov	r1, r9
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	014b      	lsls	r3, r1, #5
 8005210:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005214:	0142      	lsls	r2, r0, #5
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	ebb0 0008 	subs.w	r0, r0, r8
 800521e:	eb61 0109 	sbc.w	r1, r1, r9
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	018b      	lsls	r3, r1, #6
 800522c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005230:	0182      	lsls	r2, r0, #6
 8005232:	1a12      	subs	r2, r2, r0
 8005234:	eb63 0301 	sbc.w	r3, r3, r1
 8005238:	f04f 0000 	mov.w	r0, #0
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	00d9      	lsls	r1, r3, #3
 8005242:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005246:	00d0      	lsls	r0, r2, #3
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	eb12 0208 	adds.w	r2, r2, r8
 8005250:	eb43 0309 	adc.w	r3, r3, r9
 8005254:	f04f 0000 	mov.w	r0, #0
 8005258:	f04f 0100 	mov.w	r1, #0
 800525c:	0259      	lsls	r1, r3, #9
 800525e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005262:	0250      	lsls	r0, r2, #9
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4610      	mov	r0, r2
 800526a:	4619      	mov	r1, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	461a      	mov	r2, r3
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	f7fb f804 	bl	8000280 <__aeabi_uldivmod>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4613      	mov	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	e04a      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005282:	4b31      	ldr	r3, [pc, #196]	; (8005348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	099b      	lsrs	r3, r3, #6
 8005288:	461a      	mov	r2, r3
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005292:	f04f 0100 	mov.w	r1, #0
 8005296:	ea02 0400 	and.w	r4, r2, r0
 800529a:	ea03 0501 	and.w	r5, r3, r1
 800529e:	4620      	mov	r0, r4
 80052a0:	4629      	mov	r1, r5
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	014b      	lsls	r3, r1, #5
 80052ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052b0:	0142      	lsls	r2, r0, #5
 80052b2:	4610      	mov	r0, r2
 80052b4:	4619      	mov	r1, r3
 80052b6:	1b00      	subs	r0, r0, r4
 80052b8:	eb61 0105 	sbc.w	r1, r1, r5
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	018b      	lsls	r3, r1, #6
 80052c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052ca:	0182      	lsls	r2, r0, #6
 80052cc:	1a12      	subs	r2, r2, r0
 80052ce:	eb63 0301 	sbc.w	r3, r3, r1
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	00d9      	lsls	r1, r3, #3
 80052dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052e0:	00d0      	lsls	r0, r2, #3
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	1912      	adds	r2, r2, r4
 80052e8:	eb45 0303 	adc.w	r3, r5, r3
 80052ec:	f04f 0000 	mov.w	r0, #0
 80052f0:	f04f 0100 	mov.w	r1, #0
 80052f4:	0299      	lsls	r1, r3, #10
 80052f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052fa:	0290      	lsls	r0, r2, #10
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4610      	mov	r0, r2
 8005302:	4619      	mov	r1, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	461a      	mov	r2, r3
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	f7fa ffb8 	bl	8000280 <__aeabi_uldivmod>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4613      	mov	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	0c1b      	lsrs	r3, r3, #16
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	3301      	adds	r3, #1
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	60bb      	str	r3, [r7, #8]
      break;
 8005332:	e002      	b.n	800533a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005336:	60bb      	str	r3, [r7, #8]
      break;
 8005338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800533a:	68bb      	ldr	r3, [r7, #8]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005346:	bf00      	nop
 8005348:	40023800 	.word	0x40023800
 800534c:	00f42400 	.word	0x00f42400
 8005350:	007a1200 	.word	0x007a1200

08005354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_RCC_GetHCLKFreq+0x14>)
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000028 	.word	0x20000028

0800536c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005370:	f7ff fff0 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	0a9b      	lsrs	r3, r3, #10
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4903      	ldr	r1, [pc, #12]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40023800 	.word	0x40023800
 8005390:	0800bcb8 	.word	0x0800bcb8

08005394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005398:	f7ff ffdc 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 800539c:	4602      	mov	r2, r0
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0b5b      	lsrs	r3, r3, #13
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4903      	ldr	r1, [pc, #12]	; (80053b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053aa:	5ccb      	ldrb	r3, [r1, r3]
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40023800 	.word	0x40023800
 80053b8:	0800bcb8 	.word	0x0800bcb8

080053bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e07b      	b.n	80054c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d108      	bne.n	80053e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053de:	d009      	beq.n	80053f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	61da      	str	r2, [r3, #28]
 80053e6:	e005      	b.n	80053f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fd fbd2 	bl	8002bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	ea42 0103 	orr.w	r1, r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	0c1b      	lsrs	r3, r3, #16
 8005492:	f003 0104 	and.w	r1, r3, #4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	f003 0210 	and.w	r2, r3, #16
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b088      	sub	sp, #32
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	4613      	mov	r3, r2
 80054dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_SPI_Transmit+0x22>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e126      	b.n	800573e <HAL_SPI_Transmit+0x270>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054f8:	f7fd fe74 	bl	80031e4 <HAL_GetTick>
 80054fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d002      	beq.n	8005514 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800550e:	2302      	movs	r3, #2
 8005510:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005512:	e10b      	b.n	800572c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_SPI_Transmit+0x52>
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d102      	bne.n	8005526 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005524:	e102      	b.n	800572c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2203      	movs	r2, #3
 800552a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	88fa      	ldrh	r2, [r7, #6]
 800553e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	88fa      	ldrh	r2, [r7, #6]
 8005544:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556c:	d10f      	bne.n	800558e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800558c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d007      	beq.n	80055ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b4:	d14b      	bne.n	800564e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_SPI_Transmit+0xf6>
 80055be:	8afb      	ldrh	r3, [r7, #22]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d13e      	bne.n	8005642 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	881a      	ldrh	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	1c9a      	adds	r2, r3, #2
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055e8:	e02b      	b.n	8005642 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d112      	bne.n	800561e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	881a      	ldrh	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	1c9a      	adds	r2, r3, #2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	86da      	strh	r2, [r3, #54]	; 0x36
 800561c:	e011      	b.n	8005642 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800561e:	f7fd fde1 	bl	80031e4 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d803      	bhi.n	8005636 <HAL_SPI_Transmit+0x168>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d102      	bne.n	800563c <HAL_SPI_Transmit+0x16e>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005640:	e074      	b.n	800572c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1ce      	bne.n	80055ea <HAL_SPI_Transmit+0x11c>
 800564c:	e04c      	b.n	80056e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_SPI_Transmit+0x18e>
 8005656:	8afb      	ldrh	r3, [r7, #22]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d140      	bne.n	80056de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	330c      	adds	r3, #12
 8005666:	7812      	ldrb	r2, [r2, #0]
 8005668:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005678:	b29b      	uxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005682:	e02c      	b.n	80056de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b02      	cmp	r3, #2
 8005690:	d113      	bne.n	80056ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80056b8:	e011      	b.n	80056de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ba:	f7fd fd93 	bl	80031e4 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d803      	bhi.n	80056d2 <HAL_SPI_Transmit+0x204>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d102      	bne.n	80056d8 <HAL_SPI_Transmit+0x20a>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056dc:	e026      	b.n	800572c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1cd      	bne.n	8005684 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	6839      	ldr	r1, [r7, #0]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 fbcb 	bl	8005e88 <SPI_EndRxTxTransaction>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	e000      	b.n	800572c <HAL_SPI_Transmit+0x25e>
  }

error:
 800572a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800573c:	7ffb      	ldrb	r3, [r7, #31]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b088      	sub	sp, #32
 800574a:	af02      	add	r7, sp, #8
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	603b      	str	r3, [r7, #0]
 8005752:	4613      	mov	r3, r2
 8005754:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005762:	d112      	bne.n	800578a <HAL_SPI_Receive+0x44>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10e      	bne.n	800578a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2204      	movs	r2, #4
 8005770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005774:	88fa      	ldrh	r2, [r7, #6]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	4613      	mov	r3, r2
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 f8f1 	bl	8005968 <HAL_SPI_TransmitReceive>
 8005786:	4603      	mov	r3, r0
 8005788:	e0ea      	b.n	8005960 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_SPI_Receive+0x52>
 8005794:	2302      	movs	r3, #2
 8005796:	e0e3      	b.n	8005960 <HAL_SPI_Receive+0x21a>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057a0:	f7fd fd20 	bl	80031e4 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d002      	beq.n	80057b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
 80057b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057b6:	e0ca      	b.n	800594e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_SPI_Receive+0x7e>
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057c8:	e0c1      	b.n	800594e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2204      	movs	r2, #4
 80057ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	88fa      	ldrh	r2, [r7, #6]
 80057e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	88fa      	ldrh	r2, [r7, #6]
 80057e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005810:	d10f      	bne.n	8005832 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005830:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d007      	beq.n	8005850 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800584e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d162      	bne.n	800591e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005858:	e02e      	b.n	80058b8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d115      	bne.n	8005894 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f103 020c 	add.w	r2, r3, #12
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	7812      	ldrb	r2, [r2, #0]
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005892:	e011      	b.n	80058b8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005894:	f7fd fca6 	bl	80031e4 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d803      	bhi.n	80058ac <HAL_SPI_Receive+0x166>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d102      	bne.n	80058b2 <HAL_SPI_Receive+0x16c>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058b6:	e04a      	b.n	800594e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1cb      	bne.n	800585a <HAL_SPI_Receive+0x114>
 80058c2:	e031      	b.n	8005928 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d113      	bne.n	80058fa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	b292      	uxth	r2, r2
 80058de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	1c9a      	adds	r2, r3, #2
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058f8:	e011      	b.n	800591e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058fa:	f7fd fc73 	bl	80031e4 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d803      	bhi.n	8005912 <HAL_SPI_Receive+0x1cc>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d102      	bne.n	8005918 <HAL_SPI_Receive+0x1d2>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800591c:	e017      	b.n	800594e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1cd      	bne.n	80058c4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fa45 	bl	8005dbc <SPI_EndRxTransaction>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
 800594a:	e000      	b.n	800594e <HAL_SPI_Receive+0x208>
  }

error :
 800594c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800595e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	; 0x30
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005976:	2301      	movs	r3, #1
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_SPI_TransmitReceive+0x26>
 800598a:	2302      	movs	r3, #2
 800598c:	e18a      	b.n	8005ca4 <HAL_SPI_TransmitReceive+0x33c>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005996:	f7fd fc25 	bl	80031e4 <HAL_GetTick>
 800599a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80059ac:	887b      	ldrh	r3, [r7, #2]
 80059ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d00f      	beq.n	80059d8 <HAL_SPI_TransmitReceive+0x70>
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059be:	d107      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d103      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x68>
 80059c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d003      	beq.n	80059d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059d6:	e15b      	b.n	8005c90 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_SPI_TransmitReceive+0x82>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_SPI_TransmitReceive+0x82>
 80059e4:	887b      	ldrh	r3, [r7, #2]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059f0:	e14e      	b.n	8005c90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d003      	beq.n	8005a06 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2205      	movs	r2, #5
 8005a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	887a      	ldrh	r2, [r7, #2]
 8005a16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	887a      	ldrh	r2, [r7, #2]
 8005a1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	887a      	ldrh	r2, [r7, #2]
 8005a28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	887a      	ldrh	r2, [r7, #2]
 8005a2e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b40      	cmp	r3, #64	; 0x40
 8005a48:	d007      	beq.n	8005a5a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a62:	d178      	bne.n	8005b56 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <HAL_SPI_TransmitReceive+0x10a>
 8005a6c:	8b7b      	ldrh	r3, [r7, #26]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d166      	bne.n	8005b40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	881a      	ldrh	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	1c9a      	adds	r2, r3, #2
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a96:	e053      	b.n	8005b40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d11b      	bne.n	8005ade <HAL_SPI_TransmitReceive+0x176>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d016      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x176>
 8005ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d113      	bne.n	8005ade <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	881a      	ldrh	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	1c9a      	adds	r2, r3, #2
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d119      	bne.n	8005b20 <HAL_SPI_TransmitReceive+0x1b8>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d014      	beq.n	8005b20 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	b292      	uxth	r2, r2
 8005b02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	1c9a      	adds	r2, r3, #2
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b20:	f7fd fb60 	bl	80031e4 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d807      	bhi.n	8005b40 <HAL_SPI_TransmitReceive+0x1d8>
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d003      	beq.n	8005b40 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b3e:	e0a7      	b.n	8005c90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1a6      	bne.n	8005a98 <HAL_SPI_TransmitReceive+0x130>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1a1      	bne.n	8005a98 <HAL_SPI_TransmitReceive+0x130>
 8005b54:	e07c      	b.n	8005c50 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_TransmitReceive+0x1fc>
 8005b5e:	8b7b      	ldrh	r3, [r7, #26]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d16b      	bne.n	8005c3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	7812      	ldrb	r2, [r2, #0]
 8005b70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b8a:	e057      	b.n	8005c3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d11c      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x26c>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d017      	beq.n	8005bd4 <HAL_SPI_TransmitReceive+0x26c>
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d114      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d119      	bne.n	8005c16 <HAL_SPI_TransmitReceive+0x2ae>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d014      	beq.n	8005c16 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c12:	2301      	movs	r3, #1
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c16:	f7fd fae5 	bl	80031e4 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d803      	bhi.n	8005c2e <HAL_SPI_TransmitReceive+0x2c6>
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2c:	d102      	bne.n	8005c34 <HAL_SPI_TransmitReceive+0x2cc>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c3a:	e029      	b.n	8005c90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1a2      	bne.n	8005b8c <HAL_SPI_TransmitReceive+0x224>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d19d      	bne.n	8005b8c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f917 	bl	8005e88 <SPI_EndRxTxTransaction>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d006      	beq.n	8005c6e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c6c:	e010      	b.n	8005c90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10b      	bne.n	8005c8e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	e000      	b.n	8005c90 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ca0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3730      	adds	r7, #48	; 0x30
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cbc:	f7fd fa92 	bl	80031e4 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	4413      	add	r3, r2
 8005cca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ccc:	f7fd fa8a 	bl	80031e4 <HAL_GetTick>
 8005cd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cd2:	4b39      	ldr	r3, [pc, #228]	; (8005db8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	015b      	lsls	r3, r3, #5
 8005cd8:	0d1b      	lsrs	r3, r3, #20
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	fb02 f303 	mul.w	r3, r2, r3
 8005ce0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ce2:	e054      	b.n	8005d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d050      	beq.n	8005d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cec:	f7fd fa7a 	bl	80031e4 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d902      	bls.n	8005d02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d13d      	bne.n	8005d7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d1a:	d111      	bne.n	8005d40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d24:	d004      	beq.n	8005d30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2e:	d107      	bne.n	8005d40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d48:	d10f      	bne.n	8005d6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e017      	b.n	8005dae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4013      	ands	r3, r2
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	bf0c      	ite	eq
 8005d9e:	2301      	moveq	r3, #1
 8005da0:	2300      	movne	r3, #0
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d19b      	bne.n	8005ce4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3720      	adds	r7, #32
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20000028 	.word	0x20000028

08005dbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd0:	d111      	bne.n	8005df6 <SPI_EndRxTransaction+0x3a>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dda:	d004      	beq.n	8005de6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de4:	d107      	bne.n	8005df6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dfe:	d12a      	bne.n	8005e56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e08:	d012      	beq.n	8005e30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2200      	movs	r2, #0
 8005e12:	2180      	movs	r1, #128	; 0x80
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff ff49 	bl	8005cac <SPI_WaitFlagStateUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d02d      	beq.n	8005e7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e026      	b.n	8005e7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2200      	movs	r2, #0
 8005e38:	2101      	movs	r1, #1
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff ff36 	bl	8005cac <SPI_WaitFlagStateUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01a      	beq.n	8005e7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4a:	f043 0220 	orr.w	r2, r3, #32
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e013      	b.n	8005e7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2101      	movs	r1, #1
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7ff ff23 	bl	8005cac <SPI_WaitFlagStateUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e70:	f043 0220 	orr.w	r2, r3, #32
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e000      	b.n	8005e7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e94:	4b1b      	ldr	r3, [pc, #108]	; (8005f04 <SPI_EndRxTxTransaction+0x7c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <SPI_EndRxTxTransaction+0x80>)
 8005e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9e:	0d5b      	lsrs	r3, r3, #21
 8005ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb2:	d112      	bne.n	8005eda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2180      	movs	r1, #128	; 0x80
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff fef4 	bl	8005cac <SPI_WaitFlagStateUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d016      	beq.n	8005ef8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	f043 0220 	orr.w	r2, r3, #32
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e00f      	b.n	8005efa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	2b80      	cmp	r3, #128	; 0x80
 8005ef2:	d0f2      	beq.n	8005eda <SPI_EndRxTxTransaction+0x52>
 8005ef4:	e000      	b.n	8005ef8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ef6:	bf00      	nop
  }

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000028 	.word	0x20000028
 8005f08:	165e9f81 	.word	0x165e9f81

08005f0c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e034      	b.n	8005f8c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7fa fd26 	bl	8000988 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3308      	adds	r3, #8
 8005f44:	4619      	mov	r1, r3
 8005f46:	4610      	mov	r0, r2
 8005f48:	f001 fc6e 	bl	8007828 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	461a      	mov	r2, r3
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	f001 fcb8 	bl	80078cc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6858      	ldr	r0, [r3, #4]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	f001 fced 	bl	8007948 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	6892      	ldr	r2, [r2, #8]
 8005f76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	6892      	ldr	r2, [r2, #8]
 8005f82:	f041 0101 	orr.w	r1, r1, #1
 8005f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e041      	b.n	800602a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fc ff3e 	bl	8002e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f000 fa96 	bl	8006504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	d001      	beq.n	800604c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e04e      	b.n	80060ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a23      	ldr	r2, [pc, #140]	; (80060f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d022      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x80>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006076:	d01d      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x80>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <HAL_TIM_Base_Start_IT+0xc8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d018      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x80>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <HAL_TIM_Base_Start_IT+0xcc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x80>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <HAL_TIM_Base_Start_IT+0xd0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00e      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x80>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <HAL_TIM_Base_Start_IT+0xd4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d009      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x80>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a19      	ldr	r2, [pc, #100]	; (800610c <HAL_TIM_Base_Start_IT+0xd8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x80>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a18      	ldr	r2, [pc, #96]	; (8006110 <HAL_TIM_Base_Start_IT+0xdc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d111      	bne.n	80060d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b06      	cmp	r3, #6
 80060c4:	d010      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d6:	e007      	b.n	80060e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40000400 	.word	0x40000400
 8006100:	40000800 	.word	0x40000800
 8006104:	40000c00 	.word	0x40000c00
 8006108:	40010400 	.word	0x40010400
 800610c:	40014000 	.word	0x40014000
 8006110:	40001800 	.word	0x40001800

08006114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b02      	cmp	r3, #2
 8006128:	d122      	bne.n	8006170 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b02      	cmp	r3, #2
 8006136:	d11b      	bne.n	8006170 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0202 	mvn.w	r2, #2
 8006140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f9b5 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 800615c:	e005      	b.n	800616a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f9a7 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f9b8 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b04      	cmp	r3, #4
 800617c:	d122      	bne.n	80061c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b04      	cmp	r3, #4
 800618a:	d11b      	bne.n	80061c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0204 	mvn.w	r2, #4
 8006194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2202      	movs	r2, #2
 800619a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f98b 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 80061b0:	e005      	b.n	80061be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f97d 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f98e 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d122      	bne.n	8006218 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d11b      	bne.n	8006218 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0208 	mvn.w	r2, #8
 80061e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2204      	movs	r2, #4
 80061ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f961 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 8006204:	e005      	b.n	8006212 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f953 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f964 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0310 	and.w	r3, r3, #16
 8006222:	2b10      	cmp	r3, #16
 8006224:	d122      	bne.n	800626c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b10      	cmp	r3, #16
 8006232:	d11b      	bne.n	800626c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0210 	mvn.w	r2, #16
 800623c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2208      	movs	r2, #8
 8006242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f937 	bl	80064c6 <HAL_TIM_IC_CaptureCallback>
 8006258:	e005      	b.n	8006266 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f929 	bl	80064b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f93a 	bl	80064da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b01      	cmp	r3, #1
 8006278:	d10e      	bne.n	8006298 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b01      	cmp	r3, #1
 8006286:	d107      	bne.n	8006298 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0201 	mvn.w	r2, #1
 8006290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fc fc30 	bl	8002af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b80      	cmp	r3, #128	; 0x80
 80062a4:	d10e      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b0:	2b80      	cmp	r3, #128	; 0x80
 80062b2:	d107      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fae0 	bl	8006884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	2b40      	cmp	r3, #64	; 0x40
 80062d0:	d10e      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d107      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f8ff 	bl	80064ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d10e      	bne.n	800631c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b20      	cmp	r3, #32
 800630a:	d107      	bne.n	800631c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0220 	mvn.w	r2, #32
 8006314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 faaa 	bl	8006870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800631c:	bf00      	nop
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_TIM_ConfigClockSource+0x1c>
 800633c:	2302      	movs	r3, #2
 800633e:	e0b4      	b.n	80064aa <HAL_TIM_ConfigClockSource+0x186>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800635e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006378:	d03e      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0xd4>
 800637a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800637e:	f200 8087 	bhi.w	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 8006382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006386:	f000 8086 	beq.w	8006496 <HAL_TIM_ConfigClockSource+0x172>
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638e:	d87f      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 8006390:	2b70      	cmp	r3, #112	; 0x70
 8006392:	d01a      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0xa6>
 8006394:	2b70      	cmp	r3, #112	; 0x70
 8006396:	d87b      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 8006398:	2b60      	cmp	r3, #96	; 0x60
 800639a:	d050      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x11a>
 800639c:	2b60      	cmp	r3, #96	; 0x60
 800639e:	d877      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b50      	cmp	r3, #80	; 0x50
 80063a2:	d03c      	beq.n	800641e <HAL_TIM_ConfigClockSource+0xfa>
 80063a4:	2b50      	cmp	r3, #80	; 0x50
 80063a6:	d873      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b40      	cmp	r3, #64	; 0x40
 80063aa:	d058      	beq.n	800645e <HAL_TIM_ConfigClockSource+0x13a>
 80063ac:	2b40      	cmp	r3, #64	; 0x40
 80063ae:	d86f      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063b0:	2b30      	cmp	r3, #48	; 0x30
 80063b2:	d064      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063b4:	2b30      	cmp	r3, #48	; 0x30
 80063b6:	d86b      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d060      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d867      	bhi.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d05c      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063c4:	2b10      	cmp	r3, #16
 80063c6:	d05a      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063c8:	e062      	b.n	8006490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6899      	ldr	r1, [r3, #8]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f000 f9ad 	bl	8006738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	609a      	str	r2, [r3, #8]
      break;
 80063f6:	e04f      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	6899      	ldr	r1, [r3, #8]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f000 f996 	bl	8006738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800641a:	609a      	str	r2, [r3, #8]
      break;
 800641c:	e03c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6859      	ldr	r1, [r3, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	461a      	mov	r2, r3
 800642c:	f000 f90a 	bl	8006644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2150      	movs	r1, #80	; 0x50
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f963 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 800643c:	e02c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6859      	ldr	r1, [r3, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	461a      	mov	r2, r3
 800644c:	f000 f929 	bl	80066a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2160      	movs	r1, #96	; 0x60
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f953 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 800645c:	e01c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	461a      	mov	r2, r3
 800646c:	f000 f8ea 	bl	8006644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2140      	movs	r1, #64	; 0x40
 8006476:	4618      	mov	r0, r3
 8006478:	f000 f943 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 800647c:	e00c      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f000 f93a 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 800648e:	e003      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
      break;
 8006494:	e000      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a40      	ldr	r2, [pc, #256]	; (8006618 <TIM_Base_SetConfig+0x114>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d013      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006522:	d00f      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a3d      	ldr	r2, [pc, #244]	; (800661c <TIM_Base_SetConfig+0x118>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00b      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a3c      	ldr	r2, [pc, #240]	; (8006620 <TIM_Base_SetConfig+0x11c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d007      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a3b      	ldr	r2, [pc, #236]	; (8006624 <TIM_Base_SetConfig+0x120>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a3a      	ldr	r2, [pc, #232]	; (8006628 <TIM_Base_SetConfig+0x124>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d108      	bne.n	8006556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2f      	ldr	r2, [pc, #188]	; (8006618 <TIM_Base_SetConfig+0x114>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d02b      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006564:	d027      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2c      	ldr	r2, [pc, #176]	; (800661c <TIM_Base_SetConfig+0x118>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d023      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a2b      	ldr	r2, [pc, #172]	; (8006620 <TIM_Base_SetConfig+0x11c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d01f      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2a      	ldr	r2, [pc, #168]	; (8006624 <TIM_Base_SetConfig+0x120>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01b      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a29      	ldr	r2, [pc, #164]	; (8006628 <TIM_Base_SetConfig+0x124>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d017      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a28      	ldr	r2, [pc, #160]	; (800662c <TIM_Base_SetConfig+0x128>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d013      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a27      	ldr	r2, [pc, #156]	; (8006630 <TIM_Base_SetConfig+0x12c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00f      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a26      	ldr	r2, [pc, #152]	; (8006634 <TIM_Base_SetConfig+0x130>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00b      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a25      	ldr	r2, [pc, #148]	; (8006638 <TIM_Base_SetConfig+0x134>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d007      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a24      	ldr	r2, [pc, #144]	; (800663c <TIM_Base_SetConfig+0x138>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d003      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a23      	ldr	r2, [pc, #140]	; (8006640 <TIM_Base_SetConfig+0x13c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d108      	bne.n	80065c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <TIM_Base_SetConfig+0x114>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_Base_SetConfig+0xf8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a0c      	ldr	r2, [pc, #48]	; (8006628 <TIM_Base_SetConfig+0x124>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d103      	bne.n	8006604 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	615a      	str	r2, [r3, #20]
}
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40010000 	.word	0x40010000
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40000c00 	.word	0x40000c00
 8006628:	40010400 	.word	0x40010400
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800
 8006638:	40001800 	.word	0x40001800
 800663c:	40001c00 	.word	0x40001c00
 8006640:	40002000 	.word	0x40002000

08006644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f023 0201 	bic.w	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800666e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 030a 	bic.w	r3, r3, #10
 8006680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b087      	sub	sp, #28
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f023 0210 	bic.w	r2, r3, #16
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	031b      	lsls	r3, r3, #12
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	f043 0307 	orr.w	r3, r3, #7
 8006724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	609a      	str	r2, [r3, #8]
}
 800672c:	bf00      	nop
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	021a      	lsls	r2, r3, #8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	431a      	orrs	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4313      	orrs	r3, r2
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	609a      	str	r2, [r3, #8]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800678c:	2302      	movs	r3, #2
 800678e:	e05a      	b.n	8006846 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a21      	ldr	r2, [pc, #132]	; (8006854 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d022      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067dc:	d01d      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d018      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1b      	ldr	r2, [pc, #108]	; (800685c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d013      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1a      	ldr	r2, [pc, #104]	; (8006860 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00e      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a18      	ldr	r2, [pc, #96]	; (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d009      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a17      	ldr	r2, [pc, #92]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a15      	ldr	r2, [pc, #84]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d10c      	bne.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006820:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	4313      	orrs	r3, r2
 800682a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40010000 	.word	0x40010000
 8006858:	40000400 	.word	0x40000400
 800685c:	40000800 	.word	0x40000800
 8006860:	40000c00 	.word	0x40000c00
 8006864:	40010400 	.word	0x40010400
 8006868:	40014000 	.word	0x40014000
 800686c:	40001800 	.word	0x40001800

08006870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e03f      	b.n	800692a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fc fb72 	bl	8002fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2224      	movs	r2, #36	; 0x24
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fddb 	bl	8007498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b08a      	sub	sp, #40	; 0x28
 8006936:	af02      	add	r7, sp, #8
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	603b      	str	r3, [r7, #0]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b20      	cmp	r3, #32
 8006950:	d17c      	bne.n	8006a4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <HAL_UART_Transmit+0x2c>
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e075      	b.n	8006a4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_UART_Transmit+0x3e>
 800696c:	2302      	movs	r3, #2
 800696e:	e06e      	b.n	8006a4e <HAL_UART_Transmit+0x11c>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2221      	movs	r2, #33	; 0x21
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006986:	f7fc fc2d 	bl	80031e4 <HAL_GetTick>
 800698a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	88fa      	ldrh	r2, [r7, #6]
 8006990:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	88fa      	ldrh	r2, [r7, #6]
 8006996:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a0:	d108      	bne.n	80069b4 <HAL_UART_Transmit+0x82>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	61bb      	str	r3, [r7, #24]
 80069b2:	e003      	b.n	80069bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069c4:	e02a      	b.n	8006a1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2200      	movs	r2, #0
 80069ce:	2180      	movs	r1, #128	; 0x80
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 fb1f 	bl	8007014 <UART_WaitOnFlagUntilTimeout>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e036      	b.n	8006a4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10b      	bne.n	80069fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	3302      	adds	r3, #2
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	e007      	b.n	8006a0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	781a      	ldrb	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1cf      	bne.n	80069c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2140      	movs	r1, #64	; 0x40
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 faef 	bl	8007014 <UART_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e006      	b.n	8006a4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e000      	b.n	8006a4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a4c:	2302      	movs	r3, #2
  }
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3720      	adds	r7, #32
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	4613      	mov	r3, r2
 8006a62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d11d      	bne.n	8006aac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <HAL_UART_Receive_IT+0x26>
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e016      	b.n	8006aae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_UART_Receive_IT+0x38>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e00f      	b.n	8006aae <HAL_UART_Receive_IT+0x58>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a9c:	88fb      	ldrh	r3, [r7, #6]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fb24 	bl	80070f0 <UART_Start_Receive_IT>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	e000      	b.n	8006aae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006aac:	2302      	movs	r3, #2
  }
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b0ba      	sub	sp, #232	; 0xe8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10f      	bne.n	8006b1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d009      	beq.n	8006b1e <HAL_UART_IRQHandler+0x66>
 8006b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fc03 	bl	8007322 <UART_Receive_IT>
      return;
 8006b1c:	e256      	b.n	8006fcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80de 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x22c>
 8006b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d106      	bne.n	8006b42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80d1 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <HAL_UART_IRQHandler+0xae>
 8006b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f043 0201 	orr.w	r2, r3, #1
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <HAL_UART_IRQHandler+0xd2>
 8006b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f043 0202 	orr.w	r2, r3, #2
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <HAL_UART_IRQHandler+0xf6>
 8006b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	f043 0204 	orr.w	r2, r3, #4
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d011      	beq.n	8006bde <HAL_UART_IRQHandler+0x126>
 8006bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d105      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	f043 0208 	orr.w	r2, r3, #8
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 81ed 	beq.w	8006fc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bec:	f003 0320 	and.w	r3, r3, #32
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d008      	beq.n	8006c06 <HAL_UART_IRQHandler+0x14e>
 8006bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fb8e 	bl	8007322 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	bf0c      	ite	eq
 8006c14:	2301      	moveq	r3, #1
 8006c16:	2300      	movne	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d103      	bne.n	8006c32 <HAL_UART_IRQHandler+0x17a>
 8006c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d04f      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa96 	bl	8007164 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	d141      	bne.n	8006cca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3314      	adds	r3, #20
 8006c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3314      	adds	r3, #20
 8006c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1d9      	bne.n	8006c46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d013      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	4a7d      	ldr	r2, [pc, #500]	; (8006e94 <HAL_UART_IRQHandler+0x3dc>)
 8006ca0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fc fc4d 	bl	8003546 <HAL_DMA_Abort_IT>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d016      	beq.n	8006ce0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	e00e      	b.n	8006ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f990 	bl	8006fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc8:	e00a      	b.n	8006ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f98c 	bl	8006fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd0:	e006      	b.n	8006ce0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f988 	bl	8006fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006cde:	e170      	b.n	8006fc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce0:	bf00      	nop
    return;
 8006ce2:	e16e      	b.n	8006fc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	f040 814a 	bne.w	8006f82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 8143 	beq.w	8006f82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 813c 	beq.w	8006f82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60bb      	str	r3, [r7, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	60bb      	str	r3, [r7, #8]
 8006d1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	f040 80b4 	bne.w	8006e98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8140 	beq.w	8006fc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	f080 8139 	bcs.w	8006fc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d66:	f000 8088 	beq.w	8006e7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	330c      	adds	r3, #12
 8006d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	330c      	adds	r3, #12
 8006d92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006da2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1d9      	bne.n	8006d6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3314      	adds	r3, #20
 8006dbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dc8:	f023 0301 	bic.w	r3, r3, #1
 8006dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3314      	adds	r3, #20
 8006dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e1      	bne.n	8006db6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3314      	adds	r3, #20
 8006df8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3314      	adds	r3, #20
 8006e12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e3      	bne.n	8006df2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4a:	f023 0310 	bic.w	r3, r3, #16
 8006e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	330c      	adds	r3, #12
 8006e58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e3      	bne.n	8006e38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fc faf6 	bl	8003466 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f8b6 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e90:	e099      	b.n	8006fc6 <HAL_UART_IRQHandler+0x50e>
 8006e92:	bf00      	nop
 8006e94:	0800722b 	.word	0x0800722b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 808b 	beq.w	8006fca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 8086 	beq.w	8006fca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	330c      	adds	r3, #12
 8006ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ee2:	647a      	str	r2, [r7, #68]	; 0x44
 8006ee4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ee8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e3      	bne.n	8006ebe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3314      	adds	r3, #20
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	623b      	str	r3, [r7, #32]
   return(result);
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3314      	adds	r3, #20
 8006f16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f1a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e3      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	330c      	adds	r3, #12
 8006f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	e853 3f00 	ldrex	r3, [r3]
 8006f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0310 	bic.w	r3, r3, #16
 8006f52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	330c      	adds	r3, #12
 8006f5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f60:	61fa      	str	r2, [r7, #28]
 8006f62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	69b9      	ldr	r1, [r7, #24]
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e3      	bne.n	8006f3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f83e 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f80:	e023      	b.n	8006fca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d009      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x4ea>
 8006f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f959 	bl	8007252 <UART_Transmit_IT>
    return;
 8006fa0:	e014      	b.n	8006fcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00e      	beq.n	8006fcc <HAL_UART_IRQHandler+0x514>
 8006fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f999 	bl	80072f2 <UART_EndTransmit_IT>
    return;
 8006fc0:	e004      	b.n	8006fcc <HAL_UART_IRQHandler+0x514>
    return;
 8006fc2:	bf00      	nop
 8006fc4:	e002      	b.n	8006fcc <HAL_UART_IRQHandler+0x514>
      return;
 8006fc6:	bf00      	nop
 8006fc8:	e000      	b.n	8006fcc <HAL_UART_IRQHandler+0x514>
      return;
 8006fca:	bf00      	nop
  }
}
 8006fcc:	37e8      	adds	r7, #232	; 0xe8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop

08006fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b090      	sub	sp, #64	; 0x40
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	4613      	mov	r3, r2
 8007022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007024:	e050      	b.n	80070c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d04c      	beq.n	80070c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800702e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007030:	2b00      	cmp	r3, #0
 8007032:	d007      	beq.n	8007044 <UART_WaitOnFlagUntilTimeout+0x30>
 8007034:	f7fc f8d6 	bl	80031e4 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007040:	429a      	cmp	r2, r3
 8007042:	d241      	bcs.n	80070c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	330c      	adds	r3, #12
 800704a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	330c      	adds	r3, #12
 8007062:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007064:	637a      	str	r2, [r7, #52]	; 0x34
 8007066:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800706a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e5      	bne.n	8007044 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3314      	adds	r3, #20
 800707e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	e853 3f00 	ldrex	r3, [r3]
 8007086:	613b      	str	r3, [r7, #16]
   return(result);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f023 0301 	bic.w	r3, r3, #1
 800708e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3314      	adds	r3, #20
 8007096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007098:	623a      	str	r2, [r7, #32]
 800709a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	69f9      	ldr	r1, [r7, #28]
 800709e:	6a3a      	ldr	r2, [r7, #32]
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e5      	bne.n	8007078 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e00f      	b.n	80070e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	4013      	ands	r3, r2
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	bf0c      	ite	eq
 80070d8:	2301      	moveq	r3, #1
 80070da:	2300      	movne	r3, #0
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d09f      	beq.n	8007026 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3740      	adds	r7, #64	; 0x40
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	88fa      	ldrh	r2, [r7, #6]
 8007108:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	88fa      	ldrh	r2, [r7, #6]
 800710e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2222      	movs	r2, #34	; 0x22
 800711a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007134:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695a      	ldr	r2, [r3, #20]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0201 	orr.w	r2, r2, #1
 8007144:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0220 	orr.w	r2, r2, #32
 8007154:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b095      	sub	sp, #84	; 0x54
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330c      	adds	r3, #12
 8007172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	330c      	adds	r3, #12
 800718a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800718c:	643a      	str	r2, [r7, #64]	; 0x40
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e5      	bne.n	800716c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3314      	adds	r3, #20
 80071a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f023 0301 	bic.w	r3, r3, #1
 80071b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3314      	adds	r3, #20
 80071be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e5      	bne.n	80071a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d119      	bne.n	8007210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	330c      	adds	r3, #12
 80071e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f023 0310 	bic.w	r3, r3, #16
 80071f2:	647b      	str	r3, [r7, #68]	; 0x44
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	330c      	adds	r3, #12
 80071fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071fc:	61ba      	str	r2, [r7, #24]
 80071fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6979      	ldr	r1, [r7, #20]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	613b      	str	r3, [r7, #16]
   return(result);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e5      	bne.n	80071dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800721e:	bf00      	nop
 8007220:	3754      	adds	r7, #84	; 0x54
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f7ff fecf 	bl	8006fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b21      	cmp	r3, #33	; 0x21
 8007264:	d13e      	bne.n	80072e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726e:	d114      	bne.n	800729a <UART_Transmit_IT+0x48>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d110      	bne.n	800729a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800728c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	1c9a      	adds	r2, r3, #2
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	621a      	str	r2, [r3, #32]
 8007298:	e008      	b.n	80072ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	1c59      	adds	r1, r3, #1
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6211      	str	r1, [r2, #32]
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	4619      	mov	r1, r3
 80072ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10f      	bne.n	80072e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	e000      	b.n	80072e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072e4:	2302      	movs	r3, #2
  }
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68da      	ldr	r2, [r3, #12]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007308:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2220      	movs	r2, #32
 800730e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fe5e 	bl	8006fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b08c      	sub	sp, #48	; 0x30
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b22      	cmp	r3, #34	; 0x22
 8007334:	f040 80ab 	bne.w	800748e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007340:	d117      	bne.n	8007372 <UART_Receive_IT+0x50>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d113      	bne.n	8007372 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	b29b      	uxth	r3, r3
 800735c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007360:	b29a      	uxth	r2, r3
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736a:	1c9a      	adds	r2, r3, #2
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	629a      	str	r2, [r3, #40]	; 0x28
 8007370:	e026      	b.n	80073c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007378:	2300      	movs	r3, #0
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007384:	d007      	beq.n	8007396 <UART_Receive_IT+0x74>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <UART_Receive_IT+0x82>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	b2da      	uxtb	r2, r3
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	e008      	b.n	80073b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	4619      	mov	r1, r3
 80073ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d15a      	bne.n	800748a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0220 	bic.w	r2, r2, #32
 80073e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695a      	ldr	r2, [r3, #20]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0201 	bic.w	r2, r2, #1
 8007402:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	2b01      	cmp	r3, #1
 8007412:	d135      	bne.n	8007480 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	330c      	adds	r3, #12
 8007420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	613b      	str	r3, [r7, #16]
   return(result);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f023 0310 	bic.w	r3, r3, #16
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	330c      	adds	r3, #12
 8007438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743a:	623a      	str	r2, [r7, #32]
 800743c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	69f9      	ldr	r1, [r7, #28]
 8007440:	6a3a      	ldr	r2, [r7, #32]
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	61bb      	str	r3, [r7, #24]
   return(result);
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e5      	bne.n	800741a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b10      	cmp	r3, #16
 800745a:	d10a      	bne.n	8007472 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff fdbf 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
 800747e:	e002      	b.n	8007486 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fb fd29 	bl	8002ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	e002      	b.n	8007490 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	e000      	b.n	8007490 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800748e:	2302      	movs	r3, #2
  }
}
 8007490:	4618      	mov	r0, r3
 8007492:	3730      	adds	r7, #48	; 0x30
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749c:	b09f      	sub	sp, #124	; 0x7c
 800749e:	af00      	add	r7, sp, #0
 80074a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ae:	68d9      	ldr	r1, [r3, #12]
 80074b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	ea40 0301 	orr.w	r3, r0, r1
 80074b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	431a      	orrs	r2, r3
 80074ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80074d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074dc:	f021 010c 	bic.w	r1, r1, #12
 80074e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074e6:	430b      	orrs	r3, r1
 80074e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f6:	6999      	ldr	r1, [r3, #24]
 80074f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	ea40 0301 	orr.w	r3, r0, r1
 8007500:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	4bc5      	ldr	r3, [pc, #788]	; (800781c <UART_SetConfig+0x384>)
 8007508:	429a      	cmp	r2, r3
 800750a:	d004      	beq.n	8007516 <UART_SetConfig+0x7e>
 800750c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	4bc3      	ldr	r3, [pc, #780]	; (8007820 <UART_SetConfig+0x388>)
 8007512:	429a      	cmp	r2, r3
 8007514:	d103      	bne.n	800751e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007516:	f7fd ff3d 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 800751a:	6778      	str	r0, [r7, #116]	; 0x74
 800751c:	e002      	b.n	8007524 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800751e:	f7fd ff25 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8007522:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800752c:	f040 80b6 	bne.w	800769c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007532:	461c      	mov	r4, r3
 8007534:	f04f 0500 	mov.w	r5, #0
 8007538:	4622      	mov	r2, r4
 800753a:	462b      	mov	r3, r5
 800753c:	1891      	adds	r1, r2, r2
 800753e:	6439      	str	r1, [r7, #64]	; 0x40
 8007540:	415b      	adcs	r3, r3
 8007542:	647b      	str	r3, [r7, #68]	; 0x44
 8007544:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007548:	1912      	adds	r2, r2, r4
 800754a:	eb45 0303 	adc.w	r3, r5, r3
 800754e:	f04f 0000 	mov.w	r0, #0
 8007552:	f04f 0100 	mov.w	r1, #0
 8007556:	00d9      	lsls	r1, r3, #3
 8007558:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800755c:	00d0      	lsls	r0, r2, #3
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	1911      	adds	r1, r2, r4
 8007564:	6639      	str	r1, [r7, #96]	; 0x60
 8007566:	416b      	adcs	r3, r5
 8007568:	667b      	str	r3, [r7, #100]	; 0x64
 800756a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	461a      	mov	r2, r3
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	1891      	adds	r1, r2, r2
 8007576:	63b9      	str	r1, [r7, #56]	; 0x38
 8007578:	415b      	adcs	r3, r3
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800757c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007580:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007584:	f7f8 fe7c 	bl	8000280 <__aeabi_uldivmod>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4ba5      	ldr	r3, [pc, #660]	; (8007824 <UART_SetConfig+0x38c>)
 800758e:	fba3 2302 	umull	r2, r3, r3, r2
 8007592:	095b      	lsrs	r3, r3, #5
 8007594:	011e      	lsls	r6, r3, #4
 8007596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007598:	461c      	mov	r4, r3
 800759a:	f04f 0500 	mov.w	r5, #0
 800759e:	4622      	mov	r2, r4
 80075a0:	462b      	mov	r3, r5
 80075a2:	1891      	adds	r1, r2, r2
 80075a4:	6339      	str	r1, [r7, #48]	; 0x30
 80075a6:	415b      	adcs	r3, r3
 80075a8:	637b      	str	r3, [r7, #52]	; 0x34
 80075aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075ae:	1912      	adds	r2, r2, r4
 80075b0:	eb45 0303 	adc.w	r3, r5, r3
 80075b4:	f04f 0000 	mov.w	r0, #0
 80075b8:	f04f 0100 	mov.w	r1, #0
 80075bc:	00d9      	lsls	r1, r3, #3
 80075be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075c2:	00d0      	lsls	r0, r2, #3
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	1911      	adds	r1, r2, r4
 80075ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80075cc:	416b      	adcs	r3, r5
 80075ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	461a      	mov	r2, r3
 80075d6:	f04f 0300 	mov.w	r3, #0
 80075da:	1891      	adds	r1, r2, r2
 80075dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80075de:	415b      	adcs	r3, r3
 80075e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80075ea:	f7f8 fe49 	bl	8000280 <__aeabi_uldivmod>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4b8c      	ldr	r3, [pc, #560]	; (8007824 <UART_SetConfig+0x38c>)
 80075f4:	fba3 1302 	umull	r1, r3, r3, r2
 80075f8:	095b      	lsrs	r3, r3, #5
 80075fa:	2164      	movs	r1, #100	; 0x64
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	3332      	adds	r3, #50	; 0x32
 8007606:	4a87      	ldr	r2, [pc, #540]	; (8007824 <UART_SetConfig+0x38c>)
 8007608:	fba2 2303 	umull	r2, r3, r2, r3
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007614:	441e      	add	r6, r3
 8007616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007618:	4618      	mov	r0, r3
 800761a:	f04f 0100 	mov.w	r1, #0
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	1894      	adds	r4, r2, r2
 8007624:	623c      	str	r4, [r7, #32]
 8007626:	415b      	adcs	r3, r3
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
 800762a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800762e:	1812      	adds	r2, r2, r0
 8007630:	eb41 0303 	adc.w	r3, r1, r3
 8007634:	f04f 0400 	mov.w	r4, #0
 8007638:	f04f 0500 	mov.w	r5, #0
 800763c:	00dd      	lsls	r5, r3, #3
 800763e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007642:	00d4      	lsls	r4, r2, #3
 8007644:	4622      	mov	r2, r4
 8007646:	462b      	mov	r3, r5
 8007648:	1814      	adds	r4, r2, r0
 800764a:	653c      	str	r4, [r7, #80]	; 0x50
 800764c:	414b      	adcs	r3, r1
 800764e:	657b      	str	r3, [r7, #84]	; 0x54
 8007650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	461a      	mov	r2, r3
 8007656:	f04f 0300 	mov.w	r3, #0
 800765a:	1891      	adds	r1, r2, r2
 800765c:	61b9      	str	r1, [r7, #24]
 800765e:	415b      	adcs	r3, r3
 8007660:	61fb      	str	r3, [r7, #28]
 8007662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007666:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800766a:	f7f8 fe09 	bl	8000280 <__aeabi_uldivmod>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4b6c      	ldr	r3, [pc, #432]	; (8007824 <UART_SetConfig+0x38c>)
 8007674:	fba3 1302 	umull	r1, r3, r3, r2
 8007678:	095b      	lsrs	r3, r3, #5
 800767a:	2164      	movs	r1, #100	; 0x64
 800767c:	fb01 f303 	mul.w	r3, r1, r3
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	3332      	adds	r3, #50	; 0x32
 8007686:	4a67      	ldr	r2, [pc, #412]	; (8007824 <UART_SetConfig+0x38c>)
 8007688:	fba2 2303 	umull	r2, r3, r2, r3
 800768c:	095b      	lsrs	r3, r3, #5
 800768e:	f003 0207 	and.w	r2, r3, #7
 8007692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4432      	add	r2, r6
 8007698:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800769a:	e0b9      	b.n	8007810 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800769c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800769e:	461c      	mov	r4, r3
 80076a0:	f04f 0500 	mov.w	r5, #0
 80076a4:	4622      	mov	r2, r4
 80076a6:	462b      	mov	r3, r5
 80076a8:	1891      	adds	r1, r2, r2
 80076aa:	6139      	str	r1, [r7, #16]
 80076ac:	415b      	adcs	r3, r3
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076b4:	1912      	adds	r2, r2, r4
 80076b6:	eb45 0303 	adc.w	r3, r5, r3
 80076ba:	f04f 0000 	mov.w	r0, #0
 80076be:	f04f 0100 	mov.w	r1, #0
 80076c2:	00d9      	lsls	r1, r3, #3
 80076c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076c8:	00d0      	lsls	r0, r2, #3
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	eb12 0804 	adds.w	r8, r2, r4
 80076d2:	eb43 0905 	adc.w	r9, r3, r5
 80076d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	4618      	mov	r0, r3
 80076dc:	f04f 0100 	mov.w	r1, #0
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	008b      	lsls	r3, r1, #2
 80076ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076ee:	0082      	lsls	r2, r0, #2
 80076f0:	4640      	mov	r0, r8
 80076f2:	4649      	mov	r1, r9
 80076f4:	f7f8 fdc4 	bl	8000280 <__aeabi_uldivmod>
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	4b49      	ldr	r3, [pc, #292]	; (8007824 <UART_SetConfig+0x38c>)
 80076fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007702:	095b      	lsrs	r3, r3, #5
 8007704:	011e      	lsls	r6, r3, #4
 8007706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007708:	4618      	mov	r0, r3
 800770a:	f04f 0100 	mov.w	r1, #0
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	1894      	adds	r4, r2, r2
 8007714:	60bc      	str	r4, [r7, #8]
 8007716:	415b      	adcs	r3, r3
 8007718:	60fb      	str	r3, [r7, #12]
 800771a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800771e:	1812      	adds	r2, r2, r0
 8007720:	eb41 0303 	adc.w	r3, r1, r3
 8007724:	f04f 0400 	mov.w	r4, #0
 8007728:	f04f 0500 	mov.w	r5, #0
 800772c:	00dd      	lsls	r5, r3, #3
 800772e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007732:	00d4      	lsls	r4, r2, #3
 8007734:	4622      	mov	r2, r4
 8007736:	462b      	mov	r3, r5
 8007738:	1814      	adds	r4, r2, r0
 800773a:	64bc      	str	r4, [r7, #72]	; 0x48
 800773c:	414b      	adcs	r3, r1
 800773e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	f04f 0100 	mov.w	r1, #0
 800774a:	f04f 0200 	mov.w	r2, #0
 800774e:	f04f 0300 	mov.w	r3, #0
 8007752:	008b      	lsls	r3, r1, #2
 8007754:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007758:	0082      	lsls	r2, r0, #2
 800775a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800775e:	f7f8 fd8f 	bl	8000280 <__aeabi_uldivmod>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4b2f      	ldr	r3, [pc, #188]	; (8007824 <UART_SetConfig+0x38c>)
 8007768:	fba3 1302 	umull	r1, r3, r3, r2
 800776c:	095b      	lsrs	r3, r3, #5
 800776e:	2164      	movs	r1, #100	; 0x64
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	3332      	adds	r3, #50	; 0x32
 800777a:	4a2a      	ldr	r2, [pc, #168]	; (8007824 <UART_SetConfig+0x38c>)
 800777c:	fba2 2303 	umull	r2, r3, r2, r3
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007786:	441e      	add	r6, r3
 8007788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800778a:	4618      	mov	r0, r3
 800778c:	f04f 0100 	mov.w	r1, #0
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	1894      	adds	r4, r2, r2
 8007796:	603c      	str	r4, [r7, #0]
 8007798:	415b      	adcs	r3, r3
 800779a:	607b      	str	r3, [r7, #4]
 800779c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077a0:	1812      	adds	r2, r2, r0
 80077a2:	eb41 0303 	adc.w	r3, r1, r3
 80077a6:	f04f 0400 	mov.w	r4, #0
 80077aa:	f04f 0500 	mov.w	r5, #0
 80077ae:	00dd      	lsls	r5, r3, #3
 80077b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80077b4:	00d4      	lsls	r4, r2, #3
 80077b6:	4622      	mov	r2, r4
 80077b8:	462b      	mov	r3, r5
 80077ba:	eb12 0a00 	adds.w	sl, r2, r0
 80077be:	eb43 0b01 	adc.w	fp, r3, r1
 80077c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f04f 0100 	mov.w	r1, #0
 80077cc:	f04f 0200 	mov.w	r2, #0
 80077d0:	f04f 0300 	mov.w	r3, #0
 80077d4:	008b      	lsls	r3, r1, #2
 80077d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077da:	0082      	lsls	r2, r0, #2
 80077dc:	4650      	mov	r0, sl
 80077de:	4659      	mov	r1, fp
 80077e0:	f7f8 fd4e 	bl	8000280 <__aeabi_uldivmod>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4b0e      	ldr	r3, [pc, #56]	; (8007824 <UART_SetConfig+0x38c>)
 80077ea:	fba3 1302 	umull	r1, r3, r3, r2
 80077ee:	095b      	lsrs	r3, r3, #5
 80077f0:	2164      	movs	r1, #100	; 0x64
 80077f2:	fb01 f303 	mul.w	r3, r1, r3
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	3332      	adds	r3, #50	; 0x32
 80077fc:	4a09      	ldr	r2, [pc, #36]	; (8007824 <UART_SetConfig+0x38c>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	f003 020f 	and.w	r2, r3, #15
 8007808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4432      	add	r2, r6
 800780e:	609a      	str	r2, [r3, #8]
}
 8007810:	bf00      	nop
 8007812:	377c      	adds	r7, #124	; 0x7c
 8007814:	46bd      	mov	sp, r7
 8007816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781a:	bf00      	nop
 800781c:	40011000 	.word	0x40011000
 8007820:	40011400 	.word	0x40011400
 8007824:	51eb851f 	.word	0x51eb851f

08007828 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007840:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4b20      	ldr	r3, [pc, #128]	; (80078c8 <FSMC_NORSRAM_Init+0xa0>)
 8007846:	4013      	ands	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007852:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007858:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800785e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007864:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800786a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007870:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007876:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800787c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007882:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007888:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800788e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007894:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d103      	bne.n	80078ac <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078aa:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68f9      	ldr	r1, [r7, #12]
 80078b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	fff00080 	.word	0xfff00080

080078cc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80078ee:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80078fa:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007902:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800790a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	3b01      	subs	r3, #1
 8007912:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007914:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	3b02      	subs	r3, #2
 800791c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800791e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007924:	4313      	orrs	r3, r2
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6979      	ldr	r1, [r7, #20]
 8007934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
	...

08007948 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007960:	d122      	bne.n	80079a8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007970:	4013      	ands	r3, r2
 8007972:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800797e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007986:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800798e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007994:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6979      	ldr	r1, [r7, #20]
 80079a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80079a6:	e005      	b.n	80079b4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80079b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	cff00000 	.word	0xcff00000

080079c8 <__errno>:
 80079c8:	4b01      	ldr	r3, [pc, #4]	; (80079d0 <__errno+0x8>)
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	20000034 	.word	0x20000034

080079d4 <__libc_init_array>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	4d0d      	ldr	r5, [pc, #52]	; (8007a0c <__libc_init_array+0x38>)
 80079d8:	4c0d      	ldr	r4, [pc, #52]	; (8007a10 <__libc_init_array+0x3c>)
 80079da:	1b64      	subs	r4, r4, r5
 80079dc:	10a4      	asrs	r4, r4, #2
 80079de:	2600      	movs	r6, #0
 80079e0:	42a6      	cmp	r6, r4
 80079e2:	d109      	bne.n	80079f8 <__libc_init_array+0x24>
 80079e4:	4d0b      	ldr	r5, [pc, #44]	; (8007a14 <__libc_init_array+0x40>)
 80079e6:	4c0c      	ldr	r4, [pc, #48]	; (8007a18 <__libc_init_array+0x44>)
 80079e8:	f001 f912 	bl	8008c10 <_init>
 80079ec:	1b64      	subs	r4, r4, r5
 80079ee:	10a4      	asrs	r4, r4, #2
 80079f0:	2600      	movs	r6, #0
 80079f2:	42a6      	cmp	r6, r4
 80079f4:	d105      	bne.n	8007a02 <__libc_init_array+0x2e>
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079fc:	4798      	blx	r3
 80079fe:	3601      	adds	r6, #1
 8007a00:	e7ee      	b.n	80079e0 <__libc_init_array+0xc>
 8007a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a06:	4798      	blx	r3
 8007a08:	3601      	adds	r6, #1
 8007a0a:	e7f2      	b.n	80079f2 <__libc_init_array+0x1e>
 8007a0c:	0800be78 	.word	0x0800be78
 8007a10:	0800be78 	.word	0x0800be78
 8007a14:	0800be78 	.word	0x0800be78
 8007a18:	0800be7c 	.word	0x0800be7c

08007a1c <memset>:
 8007a1c:	4402      	add	r2, r0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d100      	bne.n	8007a26 <memset+0xa>
 8007a24:	4770      	bx	lr
 8007a26:	f803 1b01 	strb.w	r1, [r3], #1
 8007a2a:	e7f9      	b.n	8007a20 <memset+0x4>

08007a2c <siprintf>:
 8007a2c:	b40e      	push	{r1, r2, r3}
 8007a2e:	b500      	push	{lr}
 8007a30:	b09c      	sub	sp, #112	; 0x70
 8007a32:	ab1d      	add	r3, sp, #116	; 0x74
 8007a34:	9002      	str	r0, [sp, #8]
 8007a36:	9006      	str	r0, [sp, #24]
 8007a38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a3c:	4809      	ldr	r0, [pc, #36]	; (8007a64 <siprintf+0x38>)
 8007a3e:	9107      	str	r1, [sp, #28]
 8007a40:	9104      	str	r1, [sp, #16]
 8007a42:	4909      	ldr	r1, [pc, #36]	; (8007a68 <siprintf+0x3c>)
 8007a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a48:	9105      	str	r1, [sp, #20]
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	a902      	add	r1, sp, #8
 8007a50:	f000 f896 	bl	8007b80 <_svfiprintf_r>
 8007a54:	9b02      	ldr	r3, [sp, #8]
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	b01c      	add	sp, #112	; 0x70
 8007a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a60:	b003      	add	sp, #12
 8007a62:	4770      	bx	lr
 8007a64:	20000034 	.word	0x20000034
 8007a68:	ffff0208 	.word	0xffff0208

08007a6c <siscanf>:
 8007a6c:	b40e      	push	{r1, r2, r3}
 8007a6e:	b510      	push	{r4, lr}
 8007a70:	b09f      	sub	sp, #124	; 0x7c
 8007a72:	ac21      	add	r4, sp, #132	; 0x84
 8007a74:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007a78:	f854 2b04 	ldr.w	r2, [r4], #4
 8007a7c:	9201      	str	r2, [sp, #4]
 8007a7e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007a82:	9004      	str	r0, [sp, #16]
 8007a84:	9008      	str	r0, [sp, #32]
 8007a86:	f7f8 fba3 	bl	80001d0 <strlen>
 8007a8a:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <siscanf+0x50>)
 8007a8c:	9005      	str	r0, [sp, #20]
 8007a8e:	9009      	str	r0, [sp, #36]	; 0x24
 8007a90:	930d      	str	r3, [sp, #52]	; 0x34
 8007a92:	480b      	ldr	r0, [pc, #44]	; (8007ac0 <siscanf+0x54>)
 8007a94:	9a01      	ldr	r2, [sp, #4]
 8007a96:	6800      	ldr	r0, [r0, #0]
 8007a98:	9403      	str	r4, [sp, #12]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9311      	str	r3, [sp, #68]	; 0x44
 8007a9e:	9316      	str	r3, [sp, #88]	; 0x58
 8007aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007aa4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007aa8:	a904      	add	r1, sp, #16
 8007aaa:	4623      	mov	r3, r4
 8007aac:	f000 f9c2 	bl	8007e34 <__ssvfiscanf_r>
 8007ab0:	b01f      	add	sp, #124	; 0x7c
 8007ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ab6:	b003      	add	sp, #12
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	08007ac5 	.word	0x08007ac5
 8007ac0:	20000034 	.word	0x20000034

08007ac4 <__seofread>:
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	4770      	bx	lr

08007ac8 <__ssputs_r>:
 8007ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007acc:	688e      	ldr	r6, [r1, #8]
 8007ace:	429e      	cmp	r6, r3
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4690      	mov	r8, r2
 8007ad6:	461f      	mov	r7, r3
 8007ad8:	d838      	bhi.n	8007b4c <__ssputs_r+0x84>
 8007ada:	898a      	ldrh	r2, [r1, #12]
 8007adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ae0:	d032      	beq.n	8007b48 <__ssputs_r+0x80>
 8007ae2:	6825      	ldr	r5, [r4, #0]
 8007ae4:	6909      	ldr	r1, [r1, #16]
 8007ae6:	eba5 0901 	sub.w	r9, r5, r1
 8007aea:	6965      	ldr	r5, [r4, #20]
 8007aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007af4:	3301      	adds	r3, #1
 8007af6:	444b      	add	r3, r9
 8007af8:	106d      	asrs	r5, r5, #1
 8007afa:	429d      	cmp	r5, r3
 8007afc:	bf38      	it	cc
 8007afe:	461d      	movcc	r5, r3
 8007b00:	0553      	lsls	r3, r2, #21
 8007b02:	d531      	bpl.n	8007b68 <__ssputs_r+0xa0>
 8007b04:	4629      	mov	r1, r5
 8007b06:	f000 ffdf 	bl	8008ac8 <_malloc_r>
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	b950      	cbnz	r0, 8007b24 <__ssputs_r+0x5c>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	f8ca 3000 	str.w	r3, [sl]
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1a:	81a3      	strh	r3, [r4, #12]
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b24:	6921      	ldr	r1, [r4, #16]
 8007b26:	464a      	mov	r2, r9
 8007b28:	f000 ff56 	bl	80089d8 <memcpy>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	6126      	str	r6, [r4, #16]
 8007b3a:	6165      	str	r5, [r4, #20]
 8007b3c:	444e      	add	r6, r9
 8007b3e:	eba5 0509 	sub.w	r5, r5, r9
 8007b42:	6026      	str	r6, [r4, #0]
 8007b44:	60a5      	str	r5, [r4, #8]
 8007b46:	463e      	mov	r6, r7
 8007b48:	42be      	cmp	r6, r7
 8007b4a:	d900      	bls.n	8007b4e <__ssputs_r+0x86>
 8007b4c:	463e      	mov	r6, r7
 8007b4e:	4632      	mov	r2, r6
 8007b50:	6820      	ldr	r0, [r4, #0]
 8007b52:	4641      	mov	r1, r8
 8007b54:	f000 ff4e 	bl	80089f4 <memmove>
 8007b58:	68a3      	ldr	r3, [r4, #8]
 8007b5a:	6822      	ldr	r2, [r4, #0]
 8007b5c:	1b9b      	subs	r3, r3, r6
 8007b5e:	4432      	add	r2, r6
 8007b60:	60a3      	str	r3, [r4, #8]
 8007b62:	6022      	str	r2, [r4, #0]
 8007b64:	2000      	movs	r0, #0
 8007b66:	e7db      	b.n	8007b20 <__ssputs_r+0x58>
 8007b68:	462a      	mov	r2, r5
 8007b6a:	f001 f807 	bl	8008b7c <_realloc_r>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d1e1      	bne.n	8007b38 <__ssputs_r+0x70>
 8007b74:	6921      	ldr	r1, [r4, #16]
 8007b76:	4650      	mov	r0, sl
 8007b78:	f000 ff56 	bl	8008a28 <_free_r>
 8007b7c:	e7c7      	b.n	8007b0e <__ssputs_r+0x46>
	...

08007b80 <_svfiprintf_r>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	4698      	mov	r8, r3
 8007b86:	898b      	ldrh	r3, [r1, #12]
 8007b88:	061b      	lsls	r3, r3, #24
 8007b8a:	b09d      	sub	sp, #116	; 0x74
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	4614      	mov	r4, r2
 8007b92:	d50e      	bpl.n	8007bb2 <_svfiprintf_r+0x32>
 8007b94:	690b      	ldr	r3, [r1, #16]
 8007b96:	b963      	cbnz	r3, 8007bb2 <_svfiprintf_r+0x32>
 8007b98:	2140      	movs	r1, #64	; 0x40
 8007b9a:	f000 ff95 	bl	8008ac8 <_malloc_r>
 8007b9e:	6028      	str	r0, [r5, #0]
 8007ba0:	6128      	str	r0, [r5, #16]
 8007ba2:	b920      	cbnz	r0, 8007bae <_svfiprintf_r+0x2e>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	e0d1      	b.n	8007d52 <_svfiprintf_r+0x1d2>
 8007bae:	2340      	movs	r3, #64	; 0x40
 8007bb0:	616b      	str	r3, [r5, #20]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb6:	2320      	movs	r3, #32
 8007bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bc0:	2330      	movs	r3, #48	; 0x30
 8007bc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d6c <_svfiprintf_r+0x1ec>
 8007bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bca:	f04f 0901 	mov.w	r9, #1
 8007bce:	4623      	mov	r3, r4
 8007bd0:	469a      	mov	sl, r3
 8007bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bd6:	b10a      	cbz	r2, 8007bdc <_svfiprintf_r+0x5c>
 8007bd8:	2a25      	cmp	r2, #37	; 0x25
 8007bda:	d1f9      	bne.n	8007bd0 <_svfiprintf_r+0x50>
 8007bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8007be0:	d00b      	beq.n	8007bfa <_svfiprintf_r+0x7a>
 8007be2:	465b      	mov	r3, fp
 8007be4:	4622      	mov	r2, r4
 8007be6:	4629      	mov	r1, r5
 8007be8:	4638      	mov	r0, r7
 8007bea:	f7ff ff6d 	bl	8007ac8 <__ssputs_r>
 8007bee:	3001      	adds	r0, #1
 8007bf0:	f000 80aa 	beq.w	8007d48 <_svfiprintf_r+0x1c8>
 8007bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bf6:	445a      	add	r2, fp
 8007bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8007bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 80a2 	beq.w	8007d48 <_svfiprintf_r+0x1c8>
 8007c04:	2300      	movs	r3, #0
 8007c06:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c0e:	f10a 0a01 	add.w	sl, sl, #1
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	9307      	str	r3, [sp, #28]
 8007c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c1c:	4654      	mov	r4, sl
 8007c1e:	2205      	movs	r2, #5
 8007c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c24:	4851      	ldr	r0, [pc, #324]	; (8007d6c <_svfiprintf_r+0x1ec>)
 8007c26:	f7f8 fadb 	bl	80001e0 <memchr>
 8007c2a:	9a04      	ldr	r2, [sp, #16]
 8007c2c:	b9d8      	cbnz	r0, 8007c66 <_svfiprintf_r+0xe6>
 8007c2e:	06d0      	lsls	r0, r2, #27
 8007c30:	bf44      	itt	mi
 8007c32:	2320      	movmi	r3, #32
 8007c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c38:	0711      	lsls	r1, r2, #28
 8007c3a:	bf44      	itt	mi
 8007c3c:	232b      	movmi	r3, #43	; 0x2b
 8007c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c42:	f89a 3000 	ldrb.w	r3, [sl]
 8007c46:	2b2a      	cmp	r3, #42	; 0x2a
 8007c48:	d015      	beq.n	8007c76 <_svfiprintf_r+0xf6>
 8007c4a:	9a07      	ldr	r2, [sp, #28]
 8007c4c:	4654      	mov	r4, sl
 8007c4e:	2000      	movs	r0, #0
 8007c50:	f04f 0c0a 	mov.w	ip, #10
 8007c54:	4621      	mov	r1, r4
 8007c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c5a:	3b30      	subs	r3, #48	; 0x30
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	d94e      	bls.n	8007cfe <_svfiprintf_r+0x17e>
 8007c60:	b1b0      	cbz	r0, 8007c90 <_svfiprintf_r+0x110>
 8007c62:	9207      	str	r2, [sp, #28]
 8007c64:	e014      	b.n	8007c90 <_svfiprintf_r+0x110>
 8007c66:	eba0 0308 	sub.w	r3, r0, r8
 8007c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	46a2      	mov	sl, r4
 8007c74:	e7d2      	b.n	8007c1c <_svfiprintf_r+0x9c>
 8007c76:	9b03      	ldr	r3, [sp, #12]
 8007c78:	1d19      	adds	r1, r3, #4
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	9103      	str	r1, [sp, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bfbb      	ittet	lt
 8007c82:	425b      	neglt	r3, r3
 8007c84:	f042 0202 	orrlt.w	r2, r2, #2
 8007c88:	9307      	strge	r3, [sp, #28]
 8007c8a:	9307      	strlt	r3, [sp, #28]
 8007c8c:	bfb8      	it	lt
 8007c8e:	9204      	strlt	r2, [sp, #16]
 8007c90:	7823      	ldrb	r3, [r4, #0]
 8007c92:	2b2e      	cmp	r3, #46	; 0x2e
 8007c94:	d10c      	bne.n	8007cb0 <_svfiprintf_r+0x130>
 8007c96:	7863      	ldrb	r3, [r4, #1]
 8007c98:	2b2a      	cmp	r3, #42	; 0x2a
 8007c9a:	d135      	bne.n	8007d08 <_svfiprintf_r+0x188>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	1d1a      	adds	r2, r3, #4
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	9203      	str	r2, [sp, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bfb8      	it	lt
 8007ca8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cac:	3402      	adds	r4, #2
 8007cae:	9305      	str	r3, [sp, #20]
 8007cb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d7c <_svfiprintf_r+0x1fc>
 8007cb4:	7821      	ldrb	r1, [r4, #0]
 8007cb6:	2203      	movs	r2, #3
 8007cb8:	4650      	mov	r0, sl
 8007cba:	f7f8 fa91 	bl	80001e0 <memchr>
 8007cbe:	b140      	cbz	r0, 8007cd2 <_svfiprintf_r+0x152>
 8007cc0:	2340      	movs	r3, #64	; 0x40
 8007cc2:	eba0 000a 	sub.w	r0, r0, sl
 8007cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	4303      	orrs	r3, r0
 8007cce:	3401      	adds	r4, #1
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd6:	4826      	ldr	r0, [pc, #152]	; (8007d70 <_svfiprintf_r+0x1f0>)
 8007cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cdc:	2206      	movs	r2, #6
 8007cde:	f7f8 fa7f 	bl	80001e0 <memchr>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d038      	beq.n	8007d58 <_svfiprintf_r+0x1d8>
 8007ce6:	4b23      	ldr	r3, [pc, #140]	; (8007d74 <_svfiprintf_r+0x1f4>)
 8007ce8:	bb1b      	cbnz	r3, 8007d32 <_svfiprintf_r+0x1b2>
 8007cea:	9b03      	ldr	r3, [sp, #12]
 8007cec:	3307      	adds	r3, #7
 8007cee:	f023 0307 	bic.w	r3, r3, #7
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	9303      	str	r3, [sp, #12]
 8007cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf8:	4433      	add	r3, r6
 8007cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007cfc:	e767      	b.n	8007bce <_svfiprintf_r+0x4e>
 8007cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d02:	460c      	mov	r4, r1
 8007d04:	2001      	movs	r0, #1
 8007d06:	e7a5      	b.n	8007c54 <_svfiprintf_r+0xd4>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	3401      	adds	r4, #1
 8007d0c:	9305      	str	r3, [sp, #20]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	f04f 0c0a 	mov.w	ip, #10
 8007d14:	4620      	mov	r0, r4
 8007d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d1a:	3a30      	subs	r2, #48	; 0x30
 8007d1c:	2a09      	cmp	r2, #9
 8007d1e:	d903      	bls.n	8007d28 <_svfiprintf_r+0x1a8>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0c5      	beq.n	8007cb0 <_svfiprintf_r+0x130>
 8007d24:	9105      	str	r1, [sp, #20]
 8007d26:	e7c3      	b.n	8007cb0 <_svfiprintf_r+0x130>
 8007d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e7f0      	b.n	8007d14 <_svfiprintf_r+0x194>
 8007d32:	ab03      	add	r3, sp, #12
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	462a      	mov	r2, r5
 8007d38:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <_svfiprintf_r+0x1f8>)
 8007d3a:	a904      	add	r1, sp, #16
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	f3af 8000 	nop.w
 8007d42:	1c42      	adds	r2, r0, #1
 8007d44:	4606      	mov	r6, r0
 8007d46:	d1d6      	bne.n	8007cf6 <_svfiprintf_r+0x176>
 8007d48:	89ab      	ldrh	r3, [r5, #12]
 8007d4a:	065b      	lsls	r3, r3, #25
 8007d4c:	f53f af2c 	bmi.w	8007ba8 <_svfiprintf_r+0x28>
 8007d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d52:	b01d      	add	sp, #116	; 0x74
 8007d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d58:	ab03      	add	r3, sp, #12
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <_svfiprintf_r+0x1f8>)
 8007d60:	a904      	add	r1, sp, #16
 8007d62:	4638      	mov	r0, r7
 8007d64:	f000 fa4c 	bl	8008200 <_printf_i>
 8007d68:	e7eb      	b.n	8007d42 <_svfiprintf_r+0x1c2>
 8007d6a:	bf00      	nop
 8007d6c:	0800bcc0 	.word	0x0800bcc0
 8007d70:	0800bcca 	.word	0x0800bcca
 8007d74:	00000000 	.word	0x00000000
 8007d78:	08007ac9 	.word	0x08007ac9
 8007d7c:	0800bcc6 	.word	0x0800bcc6

08007d80 <_sungetc_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	1c4b      	adds	r3, r1, #1
 8007d84:	4614      	mov	r4, r2
 8007d86:	d103      	bne.n	8007d90 <_sungetc_r+0x10>
 8007d88:	f04f 35ff 	mov.w	r5, #4294967295
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	8993      	ldrh	r3, [r2, #12]
 8007d92:	f023 0320 	bic.w	r3, r3, #32
 8007d96:	8193      	strh	r3, [r2, #12]
 8007d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d9a:	6852      	ldr	r2, [r2, #4]
 8007d9c:	b2cd      	uxtb	r5, r1
 8007d9e:	b18b      	cbz	r3, 8007dc4 <_sungetc_r+0x44>
 8007da0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007da2:	4293      	cmp	r3, r2
 8007da4:	dd08      	ble.n	8007db8 <_sungetc_r+0x38>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	1e5a      	subs	r2, r3, #1
 8007daa:	6022      	str	r2, [r4, #0]
 8007dac:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007db0:	6863      	ldr	r3, [r4, #4]
 8007db2:	3301      	adds	r3, #1
 8007db4:	6063      	str	r3, [r4, #4]
 8007db6:	e7e9      	b.n	8007d8c <_sungetc_r+0xc>
 8007db8:	4621      	mov	r1, r4
 8007dba:	f000 fdd1 	bl	8008960 <__submore>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d0f1      	beq.n	8007da6 <_sungetc_r+0x26>
 8007dc2:	e7e1      	b.n	8007d88 <_sungetc_r+0x8>
 8007dc4:	6921      	ldr	r1, [r4, #16]
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	b151      	cbz	r1, 8007de0 <_sungetc_r+0x60>
 8007dca:	4299      	cmp	r1, r3
 8007dcc:	d208      	bcs.n	8007de0 <_sungetc_r+0x60>
 8007dce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007dd2:	42a9      	cmp	r1, r5
 8007dd4:	d104      	bne.n	8007de0 <_sungetc_r+0x60>
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	3201      	adds	r2, #1
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	6062      	str	r2, [r4, #4]
 8007dde:	e7d5      	b.n	8007d8c <_sungetc_r+0xc>
 8007de0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007de8:	6363      	str	r3, [r4, #52]	; 0x34
 8007dea:	2303      	movs	r3, #3
 8007dec:	63a3      	str	r3, [r4, #56]	; 0x38
 8007dee:	4623      	mov	r3, r4
 8007df0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	2301      	movs	r3, #1
 8007df8:	e7dc      	b.n	8007db4 <_sungetc_r+0x34>

08007dfa <__ssrefill_r>:
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007e00:	b169      	cbz	r1, 8007e1e <__ssrefill_r+0x24>
 8007e02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e06:	4299      	cmp	r1, r3
 8007e08:	d001      	beq.n	8007e0e <__ssrefill_r+0x14>
 8007e0a:	f000 fe0d 	bl	8008a28 <_free_r>
 8007e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e10:	6063      	str	r3, [r4, #4]
 8007e12:	2000      	movs	r0, #0
 8007e14:	6360      	str	r0, [r4, #52]	; 0x34
 8007e16:	b113      	cbz	r3, 8007e1e <__ssrefill_r+0x24>
 8007e18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e1a:	6023      	str	r3, [r4, #0]
 8007e1c:	bd10      	pop	{r4, pc}
 8007e1e:	6923      	ldr	r3, [r4, #16]
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	2300      	movs	r3, #0
 8007e24:	6063      	str	r3, [r4, #4]
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	f043 0320 	orr.w	r3, r3, #32
 8007e2c:	81a3      	strh	r3, [r4, #12]
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e32:	e7f3      	b.n	8007e1c <__ssrefill_r+0x22>

08007e34 <__ssvfiscanf_r>:
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	460c      	mov	r4, r1
 8007e3a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8007e3e:	2100      	movs	r1, #0
 8007e40:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007e44:	49b2      	ldr	r1, [pc, #712]	; (8008110 <__ssvfiscanf_r+0x2dc>)
 8007e46:	91a0      	str	r1, [sp, #640]	; 0x280
 8007e48:	f10d 0804 	add.w	r8, sp, #4
 8007e4c:	49b1      	ldr	r1, [pc, #708]	; (8008114 <__ssvfiscanf_r+0x2e0>)
 8007e4e:	4fb2      	ldr	r7, [pc, #712]	; (8008118 <__ssvfiscanf_r+0x2e4>)
 8007e50:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800811c <__ssvfiscanf_r+0x2e8>
 8007e54:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007e58:	4606      	mov	r6, r0
 8007e5a:	91a1      	str	r1, [sp, #644]	; 0x284
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	f892 a000 	ldrb.w	sl, [r2]
 8007e62:	f1ba 0f00 	cmp.w	sl, #0
 8007e66:	f000 8151 	beq.w	800810c <__ssvfiscanf_r+0x2d8>
 8007e6a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8007e6e:	f013 0308 	ands.w	r3, r3, #8
 8007e72:	f102 0501 	add.w	r5, r2, #1
 8007e76:	d019      	beq.n	8007eac <__ssvfiscanf_r+0x78>
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	dd0f      	ble.n	8007e9e <__ssvfiscanf_r+0x6a>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	5cba      	ldrb	r2, [r7, r2]
 8007e84:	0712      	lsls	r2, r2, #28
 8007e86:	d401      	bmi.n	8007e8c <__ssvfiscanf_r+0x58>
 8007e88:	462a      	mov	r2, r5
 8007e8a:	e7e8      	b.n	8007e5e <__ssvfiscanf_r+0x2a>
 8007e8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007e8e:	3201      	adds	r2, #1
 8007e90:	9245      	str	r2, [sp, #276]	; 0x114
 8007e92:	6862      	ldr	r2, [r4, #4]
 8007e94:	3301      	adds	r3, #1
 8007e96:	3a01      	subs	r2, #1
 8007e98:	6062      	str	r2, [r4, #4]
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	e7ec      	b.n	8007e78 <__ssvfiscanf_r+0x44>
 8007e9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	4798      	blx	r3
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d0e9      	beq.n	8007e7e <__ssvfiscanf_r+0x4a>
 8007eaa:	e7ed      	b.n	8007e88 <__ssvfiscanf_r+0x54>
 8007eac:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8007eb0:	f040 8083 	bne.w	8007fba <__ssvfiscanf_r+0x186>
 8007eb4:	9341      	str	r3, [sp, #260]	; 0x104
 8007eb6:	9343      	str	r3, [sp, #268]	; 0x10c
 8007eb8:	7853      	ldrb	r3, [r2, #1]
 8007eba:	2b2a      	cmp	r3, #42	; 0x2a
 8007ebc:	bf02      	ittt	eq
 8007ebe:	2310      	moveq	r3, #16
 8007ec0:	1c95      	addeq	r5, r2, #2
 8007ec2:	9341      	streq	r3, [sp, #260]	; 0x104
 8007ec4:	220a      	movs	r2, #10
 8007ec6:	46ab      	mov	fp, r5
 8007ec8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8007ecc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007ed0:	2b09      	cmp	r3, #9
 8007ed2:	d91d      	bls.n	8007f10 <__ssvfiscanf_r+0xdc>
 8007ed4:	4891      	ldr	r0, [pc, #580]	; (800811c <__ssvfiscanf_r+0x2e8>)
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	f7f8 f982 	bl	80001e0 <memchr>
 8007edc:	b140      	cbz	r0, 8007ef0 <__ssvfiscanf_r+0xbc>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	eba0 0009 	sub.w	r0, r0, r9
 8007ee4:	fa03 f000 	lsl.w	r0, r3, r0
 8007ee8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007eea:	4318      	orrs	r0, r3
 8007eec:	9041      	str	r0, [sp, #260]	; 0x104
 8007eee:	465d      	mov	r5, fp
 8007ef0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ef4:	2b78      	cmp	r3, #120	; 0x78
 8007ef6:	d806      	bhi.n	8007f06 <__ssvfiscanf_r+0xd2>
 8007ef8:	2b57      	cmp	r3, #87	; 0x57
 8007efa:	d810      	bhi.n	8007f1e <__ssvfiscanf_r+0xea>
 8007efc:	2b25      	cmp	r3, #37	; 0x25
 8007efe:	d05c      	beq.n	8007fba <__ssvfiscanf_r+0x186>
 8007f00:	d856      	bhi.n	8007fb0 <__ssvfiscanf_r+0x17c>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d074      	beq.n	8007ff0 <__ssvfiscanf_r+0x1bc>
 8007f06:	2303      	movs	r3, #3
 8007f08:	9347      	str	r3, [sp, #284]	; 0x11c
 8007f0a:	230a      	movs	r3, #10
 8007f0c:	9342      	str	r3, [sp, #264]	; 0x108
 8007f0e:	e081      	b.n	8008014 <__ssvfiscanf_r+0x1e0>
 8007f10:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007f12:	fb02 1303 	mla	r3, r2, r3, r1
 8007f16:	3b30      	subs	r3, #48	; 0x30
 8007f18:	9343      	str	r3, [sp, #268]	; 0x10c
 8007f1a:	465d      	mov	r5, fp
 8007f1c:	e7d3      	b.n	8007ec6 <__ssvfiscanf_r+0x92>
 8007f1e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007f22:	2a20      	cmp	r2, #32
 8007f24:	d8ef      	bhi.n	8007f06 <__ssvfiscanf_r+0xd2>
 8007f26:	a101      	add	r1, pc, #4	; (adr r1, 8007f2c <__ssvfiscanf_r+0xf8>)
 8007f28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f2c:	08007fff 	.word	0x08007fff
 8007f30:	08007f07 	.word	0x08007f07
 8007f34:	08007f07 	.word	0x08007f07
 8007f38:	0800805d 	.word	0x0800805d
 8007f3c:	08007f07 	.word	0x08007f07
 8007f40:	08007f07 	.word	0x08007f07
 8007f44:	08007f07 	.word	0x08007f07
 8007f48:	08007f07 	.word	0x08007f07
 8007f4c:	08007f07 	.word	0x08007f07
 8007f50:	08007f07 	.word	0x08007f07
 8007f54:	08007f07 	.word	0x08007f07
 8007f58:	08008073 	.word	0x08008073
 8007f5c:	08008049 	.word	0x08008049
 8007f60:	08007fb7 	.word	0x08007fb7
 8007f64:	08007fb7 	.word	0x08007fb7
 8007f68:	08007fb7 	.word	0x08007fb7
 8007f6c:	08007f07 	.word	0x08007f07
 8007f70:	0800804d 	.word	0x0800804d
 8007f74:	08007f07 	.word	0x08007f07
 8007f78:	08007f07 	.word	0x08007f07
 8007f7c:	08007f07 	.word	0x08007f07
 8007f80:	08007f07 	.word	0x08007f07
 8007f84:	08008083 	.word	0x08008083
 8007f88:	08008055 	.word	0x08008055
 8007f8c:	08007ff7 	.word	0x08007ff7
 8007f90:	08007f07 	.word	0x08007f07
 8007f94:	08007f07 	.word	0x08007f07
 8007f98:	0800807f 	.word	0x0800807f
 8007f9c:	08007f07 	.word	0x08007f07
 8007fa0:	08008049 	.word	0x08008049
 8007fa4:	08007f07 	.word	0x08007f07
 8007fa8:	08007f07 	.word	0x08007f07
 8007fac:	08007fff 	.word	0x08007fff
 8007fb0:	3b45      	subs	r3, #69	; 0x45
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d8a7      	bhi.n	8007f06 <__ssvfiscanf_r+0xd2>
 8007fb6:	2305      	movs	r3, #5
 8007fb8:	e02b      	b.n	8008012 <__ssvfiscanf_r+0x1de>
 8007fba:	6863      	ldr	r3, [r4, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dd0d      	ble.n	8007fdc <__ssvfiscanf_r+0x1a8>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	781a      	ldrb	r2, [r3, #0]
 8007fc4:	4552      	cmp	r2, sl
 8007fc6:	f040 80a1 	bne.w	800810c <__ssvfiscanf_r+0x2d8>
 8007fca:	3301      	adds	r3, #1
 8007fcc:	6862      	ldr	r2, [r4, #4]
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007fd2:	3a01      	subs	r2, #1
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	6062      	str	r2, [r4, #4]
 8007fd8:	9345      	str	r3, [sp, #276]	; 0x114
 8007fda:	e755      	b.n	8007e88 <__ssvfiscanf_r+0x54>
 8007fdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	4798      	blx	r3
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d0eb      	beq.n	8007fc0 <__ssvfiscanf_r+0x18c>
 8007fe8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f040 8084 	bne.w	80080f8 <__ssvfiscanf_r+0x2c4>
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	e086      	b.n	8008104 <__ssvfiscanf_r+0x2d0>
 8007ff6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007ff8:	f042 0220 	orr.w	r2, r2, #32
 8007ffc:	9241      	str	r2, [sp, #260]	; 0x104
 8007ffe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008004:	9241      	str	r2, [sp, #260]	; 0x104
 8008006:	2210      	movs	r2, #16
 8008008:	2b6f      	cmp	r3, #111	; 0x6f
 800800a:	9242      	str	r2, [sp, #264]	; 0x108
 800800c:	bf34      	ite	cc
 800800e:	2303      	movcc	r3, #3
 8008010:	2304      	movcs	r3, #4
 8008012:	9347      	str	r3, [sp, #284]	; 0x11c
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	dd41      	ble.n	800809e <__ssvfiscanf_r+0x26a>
 800801a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800801c:	0659      	lsls	r1, r3, #25
 800801e:	d404      	bmi.n	800802a <__ssvfiscanf_r+0x1f6>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	781a      	ldrb	r2, [r3, #0]
 8008024:	5cba      	ldrb	r2, [r7, r2]
 8008026:	0712      	lsls	r2, r2, #28
 8008028:	d440      	bmi.n	80080ac <__ssvfiscanf_r+0x278>
 800802a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800802c:	2b02      	cmp	r3, #2
 800802e:	dc4f      	bgt.n	80080d0 <__ssvfiscanf_r+0x29c>
 8008030:	466b      	mov	r3, sp
 8008032:	4622      	mov	r2, r4
 8008034:	a941      	add	r1, sp, #260	; 0x104
 8008036:	4630      	mov	r0, r6
 8008038:	f000 fa08 	bl	800844c <_scanf_chars>
 800803c:	2801      	cmp	r0, #1
 800803e:	d065      	beq.n	800810c <__ssvfiscanf_r+0x2d8>
 8008040:	2802      	cmp	r0, #2
 8008042:	f47f af21 	bne.w	8007e88 <__ssvfiscanf_r+0x54>
 8008046:	e7cf      	b.n	8007fe8 <__ssvfiscanf_r+0x1b4>
 8008048:	220a      	movs	r2, #10
 800804a:	e7dd      	b.n	8008008 <__ssvfiscanf_r+0x1d4>
 800804c:	2300      	movs	r3, #0
 800804e:	9342      	str	r3, [sp, #264]	; 0x108
 8008050:	2303      	movs	r3, #3
 8008052:	e7de      	b.n	8008012 <__ssvfiscanf_r+0x1de>
 8008054:	2308      	movs	r3, #8
 8008056:	9342      	str	r3, [sp, #264]	; 0x108
 8008058:	2304      	movs	r3, #4
 800805a:	e7da      	b.n	8008012 <__ssvfiscanf_r+0x1de>
 800805c:	4629      	mov	r1, r5
 800805e:	4640      	mov	r0, r8
 8008060:	f000 fb40 	bl	80086e4 <__sccl>
 8008064:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800806a:	9341      	str	r3, [sp, #260]	; 0x104
 800806c:	4605      	mov	r5, r0
 800806e:	2301      	movs	r3, #1
 8008070:	e7cf      	b.n	8008012 <__ssvfiscanf_r+0x1de>
 8008072:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008078:	9341      	str	r3, [sp, #260]	; 0x104
 800807a:	2300      	movs	r3, #0
 800807c:	e7c9      	b.n	8008012 <__ssvfiscanf_r+0x1de>
 800807e:	2302      	movs	r3, #2
 8008080:	e7c7      	b.n	8008012 <__ssvfiscanf_r+0x1de>
 8008082:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008084:	06c3      	lsls	r3, r0, #27
 8008086:	f53f aeff 	bmi.w	8007e88 <__ssvfiscanf_r+0x54>
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800808e:	1d19      	adds	r1, r3, #4
 8008090:	9100      	str	r1, [sp, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	07c0      	lsls	r0, r0, #31
 8008096:	bf4c      	ite	mi
 8008098:	801a      	strhmi	r2, [r3, #0]
 800809a:	601a      	strpl	r2, [r3, #0]
 800809c:	e6f4      	b.n	8007e88 <__ssvfiscanf_r+0x54>
 800809e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80080a0:	4621      	mov	r1, r4
 80080a2:	4630      	mov	r0, r6
 80080a4:	4798      	blx	r3
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d0b7      	beq.n	800801a <__ssvfiscanf_r+0x1e6>
 80080aa:	e79d      	b.n	8007fe8 <__ssvfiscanf_r+0x1b4>
 80080ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80080ae:	3201      	adds	r2, #1
 80080b0:	9245      	str	r2, [sp, #276]	; 0x114
 80080b2:	6862      	ldr	r2, [r4, #4]
 80080b4:	3a01      	subs	r2, #1
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	6062      	str	r2, [r4, #4]
 80080ba:	dd02      	ble.n	80080c2 <__ssvfiscanf_r+0x28e>
 80080bc:	3301      	adds	r3, #1
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	e7ae      	b.n	8008020 <__ssvfiscanf_r+0x1ec>
 80080c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80080c4:	4621      	mov	r1, r4
 80080c6:	4630      	mov	r0, r6
 80080c8:	4798      	blx	r3
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d0a8      	beq.n	8008020 <__ssvfiscanf_r+0x1ec>
 80080ce:	e78b      	b.n	8007fe8 <__ssvfiscanf_r+0x1b4>
 80080d0:	2b04      	cmp	r3, #4
 80080d2:	dc06      	bgt.n	80080e2 <__ssvfiscanf_r+0x2ae>
 80080d4:	466b      	mov	r3, sp
 80080d6:	4622      	mov	r2, r4
 80080d8:	a941      	add	r1, sp, #260	; 0x104
 80080da:	4630      	mov	r0, r6
 80080dc:	f000 fa0e 	bl	80084fc <_scanf_i>
 80080e0:	e7ac      	b.n	800803c <__ssvfiscanf_r+0x208>
 80080e2:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <__ssvfiscanf_r+0x2ec>)
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f43f aecf 	beq.w	8007e88 <__ssvfiscanf_r+0x54>
 80080ea:	466b      	mov	r3, sp
 80080ec:	4622      	mov	r2, r4
 80080ee:	a941      	add	r1, sp, #260	; 0x104
 80080f0:	4630      	mov	r0, r6
 80080f2:	f3af 8000 	nop.w
 80080f6:	e7a1      	b.n	800803c <__ssvfiscanf_r+0x208>
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80080fe:	bf18      	it	ne
 8008100:	f04f 30ff 	movne.w	r0, #4294967295
 8008104:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800810e:	e7f9      	b.n	8008104 <__ssvfiscanf_r+0x2d0>
 8008110:	08007d81 	.word	0x08007d81
 8008114:	08007dfb 	.word	0x08007dfb
 8008118:	0800bd0f 	.word	0x0800bd0f
 800811c:	0800bcc6 	.word	0x0800bcc6
 8008120:	00000000 	.word	0x00000000

08008124 <_printf_common>:
 8008124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008128:	4616      	mov	r6, r2
 800812a:	4699      	mov	r9, r3
 800812c:	688a      	ldr	r2, [r1, #8]
 800812e:	690b      	ldr	r3, [r1, #16]
 8008130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008134:	4293      	cmp	r3, r2
 8008136:	bfb8      	it	lt
 8008138:	4613      	movlt	r3, r2
 800813a:	6033      	str	r3, [r6, #0]
 800813c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008140:	4607      	mov	r7, r0
 8008142:	460c      	mov	r4, r1
 8008144:	b10a      	cbz	r2, 800814a <_printf_common+0x26>
 8008146:	3301      	adds	r3, #1
 8008148:	6033      	str	r3, [r6, #0]
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	0699      	lsls	r1, r3, #26
 800814e:	bf42      	ittt	mi
 8008150:	6833      	ldrmi	r3, [r6, #0]
 8008152:	3302      	addmi	r3, #2
 8008154:	6033      	strmi	r3, [r6, #0]
 8008156:	6825      	ldr	r5, [r4, #0]
 8008158:	f015 0506 	ands.w	r5, r5, #6
 800815c:	d106      	bne.n	800816c <_printf_common+0x48>
 800815e:	f104 0a19 	add.w	sl, r4, #25
 8008162:	68e3      	ldr	r3, [r4, #12]
 8008164:	6832      	ldr	r2, [r6, #0]
 8008166:	1a9b      	subs	r3, r3, r2
 8008168:	42ab      	cmp	r3, r5
 800816a:	dc26      	bgt.n	80081ba <_printf_common+0x96>
 800816c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008170:	1e13      	subs	r3, r2, #0
 8008172:	6822      	ldr	r2, [r4, #0]
 8008174:	bf18      	it	ne
 8008176:	2301      	movne	r3, #1
 8008178:	0692      	lsls	r2, r2, #26
 800817a:	d42b      	bmi.n	80081d4 <_printf_common+0xb0>
 800817c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008180:	4649      	mov	r1, r9
 8008182:	4638      	mov	r0, r7
 8008184:	47c0      	blx	r8
 8008186:	3001      	adds	r0, #1
 8008188:	d01e      	beq.n	80081c8 <_printf_common+0xa4>
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	68e5      	ldr	r5, [r4, #12]
 800818e:	6832      	ldr	r2, [r6, #0]
 8008190:	f003 0306 	and.w	r3, r3, #6
 8008194:	2b04      	cmp	r3, #4
 8008196:	bf08      	it	eq
 8008198:	1aad      	subeq	r5, r5, r2
 800819a:	68a3      	ldr	r3, [r4, #8]
 800819c:	6922      	ldr	r2, [r4, #16]
 800819e:	bf0c      	ite	eq
 80081a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081a4:	2500      	movne	r5, #0
 80081a6:	4293      	cmp	r3, r2
 80081a8:	bfc4      	itt	gt
 80081aa:	1a9b      	subgt	r3, r3, r2
 80081ac:	18ed      	addgt	r5, r5, r3
 80081ae:	2600      	movs	r6, #0
 80081b0:	341a      	adds	r4, #26
 80081b2:	42b5      	cmp	r5, r6
 80081b4:	d11a      	bne.n	80081ec <_printf_common+0xc8>
 80081b6:	2000      	movs	r0, #0
 80081b8:	e008      	b.n	80081cc <_printf_common+0xa8>
 80081ba:	2301      	movs	r3, #1
 80081bc:	4652      	mov	r2, sl
 80081be:	4649      	mov	r1, r9
 80081c0:	4638      	mov	r0, r7
 80081c2:	47c0      	blx	r8
 80081c4:	3001      	adds	r0, #1
 80081c6:	d103      	bne.n	80081d0 <_printf_common+0xac>
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d0:	3501      	adds	r5, #1
 80081d2:	e7c6      	b.n	8008162 <_printf_common+0x3e>
 80081d4:	18e1      	adds	r1, r4, r3
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	2030      	movs	r0, #48	; 0x30
 80081da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081de:	4422      	add	r2, r4
 80081e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081e8:	3302      	adds	r3, #2
 80081ea:	e7c7      	b.n	800817c <_printf_common+0x58>
 80081ec:	2301      	movs	r3, #1
 80081ee:	4622      	mov	r2, r4
 80081f0:	4649      	mov	r1, r9
 80081f2:	4638      	mov	r0, r7
 80081f4:	47c0      	blx	r8
 80081f6:	3001      	adds	r0, #1
 80081f8:	d0e6      	beq.n	80081c8 <_printf_common+0xa4>
 80081fa:	3601      	adds	r6, #1
 80081fc:	e7d9      	b.n	80081b2 <_printf_common+0x8e>
	...

08008200 <_printf_i>:
 8008200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008204:	460c      	mov	r4, r1
 8008206:	4691      	mov	r9, r2
 8008208:	7e27      	ldrb	r7, [r4, #24]
 800820a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800820c:	2f78      	cmp	r7, #120	; 0x78
 800820e:	4680      	mov	r8, r0
 8008210:	469a      	mov	sl, r3
 8008212:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008216:	d807      	bhi.n	8008228 <_printf_i+0x28>
 8008218:	2f62      	cmp	r7, #98	; 0x62
 800821a:	d80a      	bhi.n	8008232 <_printf_i+0x32>
 800821c:	2f00      	cmp	r7, #0
 800821e:	f000 80d8 	beq.w	80083d2 <_printf_i+0x1d2>
 8008222:	2f58      	cmp	r7, #88	; 0x58
 8008224:	f000 80a3 	beq.w	800836e <_printf_i+0x16e>
 8008228:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800822c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008230:	e03a      	b.n	80082a8 <_printf_i+0xa8>
 8008232:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008236:	2b15      	cmp	r3, #21
 8008238:	d8f6      	bhi.n	8008228 <_printf_i+0x28>
 800823a:	a001      	add	r0, pc, #4	; (adr r0, 8008240 <_printf_i+0x40>)
 800823c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008240:	08008299 	.word	0x08008299
 8008244:	080082ad 	.word	0x080082ad
 8008248:	08008229 	.word	0x08008229
 800824c:	08008229 	.word	0x08008229
 8008250:	08008229 	.word	0x08008229
 8008254:	08008229 	.word	0x08008229
 8008258:	080082ad 	.word	0x080082ad
 800825c:	08008229 	.word	0x08008229
 8008260:	08008229 	.word	0x08008229
 8008264:	08008229 	.word	0x08008229
 8008268:	08008229 	.word	0x08008229
 800826c:	080083b9 	.word	0x080083b9
 8008270:	080082dd 	.word	0x080082dd
 8008274:	0800839b 	.word	0x0800839b
 8008278:	08008229 	.word	0x08008229
 800827c:	08008229 	.word	0x08008229
 8008280:	080083db 	.word	0x080083db
 8008284:	08008229 	.word	0x08008229
 8008288:	080082dd 	.word	0x080082dd
 800828c:	08008229 	.word	0x08008229
 8008290:	08008229 	.word	0x08008229
 8008294:	080083a3 	.word	0x080083a3
 8008298:	680b      	ldr	r3, [r1, #0]
 800829a:	1d1a      	adds	r2, r3, #4
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	600a      	str	r2, [r1, #0]
 80082a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082a8:	2301      	movs	r3, #1
 80082aa:	e0a3      	b.n	80083f4 <_printf_i+0x1f4>
 80082ac:	6825      	ldr	r5, [r4, #0]
 80082ae:	6808      	ldr	r0, [r1, #0]
 80082b0:	062e      	lsls	r6, r5, #24
 80082b2:	f100 0304 	add.w	r3, r0, #4
 80082b6:	d50a      	bpl.n	80082ce <_printf_i+0xce>
 80082b8:	6805      	ldr	r5, [r0, #0]
 80082ba:	600b      	str	r3, [r1, #0]
 80082bc:	2d00      	cmp	r5, #0
 80082be:	da03      	bge.n	80082c8 <_printf_i+0xc8>
 80082c0:	232d      	movs	r3, #45	; 0x2d
 80082c2:	426d      	negs	r5, r5
 80082c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082c8:	485e      	ldr	r0, [pc, #376]	; (8008444 <_printf_i+0x244>)
 80082ca:	230a      	movs	r3, #10
 80082cc:	e019      	b.n	8008302 <_printf_i+0x102>
 80082ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80082d2:	6805      	ldr	r5, [r0, #0]
 80082d4:	600b      	str	r3, [r1, #0]
 80082d6:	bf18      	it	ne
 80082d8:	b22d      	sxthne	r5, r5
 80082da:	e7ef      	b.n	80082bc <_printf_i+0xbc>
 80082dc:	680b      	ldr	r3, [r1, #0]
 80082de:	6825      	ldr	r5, [r4, #0]
 80082e0:	1d18      	adds	r0, r3, #4
 80082e2:	6008      	str	r0, [r1, #0]
 80082e4:	0628      	lsls	r0, r5, #24
 80082e6:	d501      	bpl.n	80082ec <_printf_i+0xec>
 80082e8:	681d      	ldr	r5, [r3, #0]
 80082ea:	e002      	b.n	80082f2 <_printf_i+0xf2>
 80082ec:	0669      	lsls	r1, r5, #25
 80082ee:	d5fb      	bpl.n	80082e8 <_printf_i+0xe8>
 80082f0:	881d      	ldrh	r5, [r3, #0]
 80082f2:	4854      	ldr	r0, [pc, #336]	; (8008444 <_printf_i+0x244>)
 80082f4:	2f6f      	cmp	r7, #111	; 0x6f
 80082f6:	bf0c      	ite	eq
 80082f8:	2308      	moveq	r3, #8
 80082fa:	230a      	movne	r3, #10
 80082fc:	2100      	movs	r1, #0
 80082fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008302:	6866      	ldr	r6, [r4, #4]
 8008304:	60a6      	str	r6, [r4, #8]
 8008306:	2e00      	cmp	r6, #0
 8008308:	bfa2      	ittt	ge
 800830a:	6821      	ldrge	r1, [r4, #0]
 800830c:	f021 0104 	bicge.w	r1, r1, #4
 8008310:	6021      	strge	r1, [r4, #0]
 8008312:	b90d      	cbnz	r5, 8008318 <_printf_i+0x118>
 8008314:	2e00      	cmp	r6, #0
 8008316:	d04d      	beq.n	80083b4 <_printf_i+0x1b4>
 8008318:	4616      	mov	r6, r2
 800831a:	fbb5 f1f3 	udiv	r1, r5, r3
 800831e:	fb03 5711 	mls	r7, r3, r1, r5
 8008322:	5dc7      	ldrb	r7, [r0, r7]
 8008324:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008328:	462f      	mov	r7, r5
 800832a:	42bb      	cmp	r3, r7
 800832c:	460d      	mov	r5, r1
 800832e:	d9f4      	bls.n	800831a <_printf_i+0x11a>
 8008330:	2b08      	cmp	r3, #8
 8008332:	d10b      	bne.n	800834c <_printf_i+0x14c>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	07df      	lsls	r7, r3, #31
 8008338:	d508      	bpl.n	800834c <_printf_i+0x14c>
 800833a:	6923      	ldr	r3, [r4, #16]
 800833c:	6861      	ldr	r1, [r4, #4]
 800833e:	4299      	cmp	r1, r3
 8008340:	bfde      	ittt	le
 8008342:	2330      	movle	r3, #48	; 0x30
 8008344:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008348:	f106 36ff 	addle.w	r6, r6, #4294967295
 800834c:	1b92      	subs	r2, r2, r6
 800834e:	6122      	str	r2, [r4, #16]
 8008350:	f8cd a000 	str.w	sl, [sp]
 8008354:	464b      	mov	r3, r9
 8008356:	aa03      	add	r2, sp, #12
 8008358:	4621      	mov	r1, r4
 800835a:	4640      	mov	r0, r8
 800835c:	f7ff fee2 	bl	8008124 <_printf_common>
 8008360:	3001      	adds	r0, #1
 8008362:	d14c      	bne.n	80083fe <_printf_i+0x1fe>
 8008364:	f04f 30ff 	mov.w	r0, #4294967295
 8008368:	b004      	add	sp, #16
 800836a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836e:	4835      	ldr	r0, [pc, #212]	; (8008444 <_printf_i+0x244>)
 8008370:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	680e      	ldr	r6, [r1, #0]
 8008378:	061f      	lsls	r7, r3, #24
 800837a:	f856 5b04 	ldr.w	r5, [r6], #4
 800837e:	600e      	str	r6, [r1, #0]
 8008380:	d514      	bpl.n	80083ac <_printf_i+0x1ac>
 8008382:	07d9      	lsls	r1, r3, #31
 8008384:	bf44      	itt	mi
 8008386:	f043 0320 	orrmi.w	r3, r3, #32
 800838a:	6023      	strmi	r3, [r4, #0]
 800838c:	b91d      	cbnz	r5, 8008396 <_printf_i+0x196>
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	f023 0320 	bic.w	r3, r3, #32
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	2310      	movs	r3, #16
 8008398:	e7b0      	b.n	80082fc <_printf_i+0xfc>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	f043 0320 	orr.w	r3, r3, #32
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	2378      	movs	r3, #120	; 0x78
 80083a4:	4828      	ldr	r0, [pc, #160]	; (8008448 <_printf_i+0x248>)
 80083a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083aa:	e7e3      	b.n	8008374 <_printf_i+0x174>
 80083ac:	065e      	lsls	r6, r3, #25
 80083ae:	bf48      	it	mi
 80083b0:	b2ad      	uxthmi	r5, r5
 80083b2:	e7e6      	b.n	8008382 <_printf_i+0x182>
 80083b4:	4616      	mov	r6, r2
 80083b6:	e7bb      	b.n	8008330 <_printf_i+0x130>
 80083b8:	680b      	ldr	r3, [r1, #0]
 80083ba:	6826      	ldr	r6, [r4, #0]
 80083bc:	6960      	ldr	r0, [r4, #20]
 80083be:	1d1d      	adds	r5, r3, #4
 80083c0:	600d      	str	r5, [r1, #0]
 80083c2:	0635      	lsls	r5, r6, #24
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	d501      	bpl.n	80083cc <_printf_i+0x1cc>
 80083c8:	6018      	str	r0, [r3, #0]
 80083ca:	e002      	b.n	80083d2 <_printf_i+0x1d2>
 80083cc:	0671      	lsls	r1, r6, #25
 80083ce:	d5fb      	bpl.n	80083c8 <_printf_i+0x1c8>
 80083d0:	8018      	strh	r0, [r3, #0]
 80083d2:	2300      	movs	r3, #0
 80083d4:	6123      	str	r3, [r4, #16]
 80083d6:	4616      	mov	r6, r2
 80083d8:	e7ba      	b.n	8008350 <_printf_i+0x150>
 80083da:	680b      	ldr	r3, [r1, #0]
 80083dc:	1d1a      	adds	r2, r3, #4
 80083de:	600a      	str	r2, [r1, #0]
 80083e0:	681e      	ldr	r6, [r3, #0]
 80083e2:	6862      	ldr	r2, [r4, #4]
 80083e4:	2100      	movs	r1, #0
 80083e6:	4630      	mov	r0, r6
 80083e8:	f7f7 fefa 	bl	80001e0 <memchr>
 80083ec:	b108      	cbz	r0, 80083f2 <_printf_i+0x1f2>
 80083ee:	1b80      	subs	r0, r0, r6
 80083f0:	6060      	str	r0, [r4, #4]
 80083f2:	6863      	ldr	r3, [r4, #4]
 80083f4:	6123      	str	r3, [r4, #16]
 80083f6:	2300      	movs	r3, #0
 80083f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083fc:	e7a8      	b.n	8008350 <_printf_i+0x150>
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	4632      	mov	r2, r6
 8008402:	4649      	mov	r1, r9
 8008404:	4640      	mov	r0, r8
 8008406:	47d0      	blx	sl
 8008408:	3001      	adds	r0, #1
 800840a:	d0ab      	beq.n	8008364 <_printf_i+0x164>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	079b      	lsls	r3, r3, #30
 8008410:	d413      	bmi.n	800843a <_printf_i+0x23a>
 8008412:	68e0      	ldr	r0, [r4, #12]
 8008414:	9b03      	ldr	r3, [sp, #12]
 8008416:	4298      	cmp	r0, r3
 8008418:	bfb8      	it	lt
 800841a:	4618      	movlt	r0, r3
 800841c:	e7a4      	b.n	8008368 <_printf_i+0x168>
 800841e:	2301      	movs	r3, #1
 8008420:	4632      	mov	r2, r6
 8008422:	4649      	mov	r1, r9
 8008424:	4640      	mov	r0, r8
 8008426:	47d0      	blx	sl
 8008428:	3001      	adds	r0, #1
 800842a:	d09b      	beq.n	8008364 <_printf_i+0x164>
 800842c:	3501      	adds	r5, #1
 800842e:	68e3      	ldr	r3, [r4, #12]
 8008430:	9903      	ldr	r1, [sp, #12]
 8008432:	1a5b      	subs	r3, r3, r1
 8008434:	42ab      	cmp	r3, r5
 8008436:	dcf2      	bgt.n	800841e <_printf_i+0x21e>
 8008438:	e7eb      	b.n	8008412 <_printf_i+0x212>
 800843a:	2500      	movs	r5, #0
 800843c:	f104 0619 	add.w	r6, r4, #25
 8008440:	e7f5      	b.n	800842e <_printf_i+0x22e>
 8008442:	bf00      	nop
 8008444:	0800bcd1 	.word	0x0800bcd1
 8008448:	0800bce2 	.word	0x0800bce2

0800844c <_scanf_chars>:
 800844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008450:	4615      	mov	r5, r2
 8008452:	688a      	ldr	r2, [r1, #8]
 8008454:	4680      	mov	r8, r0
 8008456:	460c      	mov	r4, r1
 8008458:	b932      	cbnz	r2, 8008468 <_scanf_chars+0x1c>
 800845a:	698a      	ldr	r2, [r1, #24]
 800845c:	2a00      	cmp	r2, #0
 800845e:	bf0c      	ite	eq
 8008460:	2201      	moveq	r2, #1
 8008462:	f04f 32ff 	movne.w	r2, #4294967295
 8008466:	608a      	str	r2, [r1, #8]
 8008468:	6822      	ldr	r2, [r4, #0]
 800846a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80084f8 <_scanf_chars+0xac>
 800846e:	06d1      	lsls	r1, r2, #27
 8008470:	bf5f      	itttt	pl
 8008472:	681a      	ldrpl	r2, [r3, #0]
 8008474:	1d11      	addpl	r1, r2, #4
 8008476:	6019      	strpl	r1, [r3, #0]
 8008478:	6816      	ldrpl	r6, [r2, #0]
 800847a:	2700      	movs	r7, #0
 800847c:	69a0      	ldr	r0, [r4, #24]
 800847e:	b188      	cbz	r0, 80084a4 <_scanf_chars+0x58>
 8008480:	2801      	cmp	r0, #1
 8008482:	d107      	bne.n	8008494 <_scanf_chars+0x48>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	781a      	ldrb	r2, [r3, #0]
 8008488:	6963      	ldr	r3, [r4, #20]
 800848a:	5c9b      	ldrb	r3, [r3, r2]
 800848c:	b953      	cbnz	r3, 80084a4 <_scanf_chars+0x58>
 800848e:	bb27      	cbnz	r7, 80084da <_scanf_chars+0x8e>
 8008490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008494:	2802      	cmp	r0, #2
 8008496:	d120      	bne.n	80084da <_scanf_chars+0x8e>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f813 3009 	ldrb.w	r3, [r3, r9]
 80084a0:	071b      	lsls	r3, r3, #28
 80084a2:	d41a      	bmi.n	80084da <_scanf_chars+0x8e>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	06da      	lsls	r2, r3, #27
 80084a8:	bf5e      	ittt	pl
 80084aa:	682b      	ldrpl	r3, [r5, #0]
 80084ac:	781b      	ldrbpl	r3, [r3, #0]
 80084ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 80084b2:	682a      	ldr	r2, [r5, #0]
 80084b4:	686b      	ldr	r3, [r5, #4]
 80084b6:	3201      	adds	r2, #1
 80084b8:	602a      	str	r2, [r5, #0]
 80084ba:	68a2      	ldr	r2, [r4, #8]
 80084bc:	3b01      	subs	r3, #1
 80084be:	3a01      	subs	r2, #1
 80084c0:	606b      	str	r3, [r5, #4]
 80084c2:	3701      	adds	r7, #1
 80084c4:	60a2      	str	r2, [r4, #8]
 80084c6:	b142      	cbz	r2, 80084da <_scanf_chars+0x8e>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dcd7      	bgt.n	800847c <_scanf_chars+0x30>
 80084cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084d0:	4629      	mov	r1, r5
 80084d2:	4640      	mov	r0, r8
 80084d4:	4798      	blx	r3
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d0d0      	beq.n	800847c <_scanf_chars+0x30>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	f013 0310 	ands.w	r3, r3, #16
 80084e0:	d105      	bne.n	80084ee <_scanf_chars+0xa2>
 80084e2:	68e2      	ldr	r2, [r4, #12]
 80084e4:	3201      	adds	r2, #1
 80084e6:	60e2      	str	r2, [r4, #12]
 80084e8:	69a2      	ldr	r2, [r4, #24]
 80084ea:	b102      	cbz	r2, 80084ee <_scanf_chars+0xa2>
 80084ec:	7033      	strb	r3, [r6, #0]
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	441f      	add	r7, r3
 80084f2:	6127      	str	r7, [r4, #16]
 80084f4:	2000      	movs	r0, #0
 80084f6:	e7cb      	b.n	8008490 <_scanf_chars+0x44>
 80084f8:	0800bd0f 	.word	0x0800bd0f

080084fc <_scanf_i>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	4698      	mov	r8, r3
 8008502:	4b74      	ldr	r3, [pc, #464]	; (80086d4 <_scanf_i+0x1d8>)
 8008504:	460c      	mov	r4, r1
 8008506:	4682      	mov	sl, r0
 8008508:	4616      	mov	r6, r2
 800850a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800850e:	b087      	sub	sp, #28
 8008510:	ab03      	add	r3, sp, #12
 8008512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008516:	4b70      	ldr	r3, [pc, #448]	; (80086d8 <_scanf_i+0x1dc>)
 8008518:	69a1      	ldr	r1, [r4, #24]
 800851a:	4a70      	ldr	r2, [pc, #448]	; (80086dc <_scanf_i+0x1e0>)
 800851c:	2903      	cmp	r1, #3
 800851e:	bf18      	it	ne
 8008520:	461a      	movne	r2, r3
 8008522:	68a3      	ldr	r3, [r4, #8]
 8008524:	9201      	str	r2, [sp, #4]
 8008526:	1e5a      	subs	r2, r3, #1
 8008528:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800852c:	bf88      	it	hi
 800852e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008532:	4627      	mov	r7, r4
 8008534:	bf82      	ittt	hi
 8008536:	eb03 0905 	addhi.w	r9, r3, r5
 800853a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800853e:	60a3      	strhi	r3, [r4, #8]
 8008540:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008544:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008548:	bf98      	it	ls
 800854a:	f04f 0900 	movls.w	r9, #0
 800854e:	6023      	str	r3, [r4, #0]
 8008550:	463d      	mov	r5, r7
 8008552:	f04f 0b00 	mov.w	fp, #0
 8008556:	6831      	ldr	r1, [r6, #0]
 8008558:	ab03      	add	r3, sp, #12
 800855a:	7809      	ldrb	r1, [r1, #0]
 800855c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008560:	2202      	movs	r2, #2
 8008562:	f7f7 fe3d 	bl	80001e0 <memchr>
 8008566:	b328      	cbz	r0, 80085b4 <_scanf_i+0xb8>
 8008568:	f1bb 0f01 	cmp.w	fp, #1
 800856c:	d159      	bne.n	8008622 <_scanf_i+0x126>
 800856e:	6862      	ldr	r2, [r4, #4]
 8008570:	b92a      	cbnz	r2, 800857e <_scanf_i+0x82>
 8008572:	6822      	ldr	r2, [r4, #0]
 8008574:	2308      	movs	r3, #8
 8008576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800857a:	6063      	str	r3, [r4, #4]
 800857c:	6022      	str	r2, [r4, #0]
 800857e:	6822      	ldr	r2, [r4, #0]
 8008580:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008584:	6022      	str	r2, [r4, #0]
 8008586:	68a2      	ldr	r2, [r4, #8]
 8008588:	1e51      	subs	r1, r2, #1
 800858a:	60a1      	str	r1, [r4, #8]
 800858c:	b192      	cbz	r2, 80085b4 <_scanf_i+0xb8>
 800858e:	6832      	ldr	r2, [r6, #0]
 8008590:	1c51      	adds	r1, r2, #1
 8008592:	6031      	str	r1, [r6, #0]
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	f805 2b01 	strb.w	r2, [r5], #1
 800859a:	6872      	ldr	r2, [r6, #4]
 800859c:	3a01      	subs	r2, #1
 800859e:	2a00      	cmp	r2, #0
 80085a0:	6072      	str	r2, [r6, #4]
 80085a2:	dc07      	bgt.n	80085b4 <_scanf_i+0xb8>
 80085a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80085a8:	4631      	mov	r1, r6
 80085aa:	4650      	mov	r0, sl
 80085ac:	4790      	blx	r2
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f040 8085 	bne.w	80086be <_scanf_i+0x1c2>
 80085b4:	f10b 0b01 	add.w	fp, fp, #1
 80085b8:	f1bb 0f03 	cmp.w	fp, #3
 80085bc:	d1cb      	bne.n	8008556 <_scanf_i+0x5a>
 80085be:	6863      	ldr	r3, [r4, #4]
 80085c0:	b90b      	cbnz	r3, 80085c6 <_scanf_i+0xca>
 80085c2:	230a      	movs	r3, #10
 80085c4:	6063      	str	r3, [r4, #4]
 80085c6:	6863      	ldr	r3, [r4, #4]
 80085c8:	4945      	ldr	r1, [pc, #276]	; (80086e0 <_scanf_i+0x1e4>)
 80085ca:	6960      	ldr	r0, [r4, #20]
 80085cc:	1ac9      	subs	r1, r1, r3
 80085ce:	f000 f889 	bl	80086e4 <__sccl>
 80085d2:	f04f 0b00 	mov.w	fp, #0
 80085d6:	68a3      	ldr	r3, [r4, #8]
 80085d8:	6822      	ldr	r2, [r4, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d03d      	beq.n	800865a <_scanf_i+0x15e>
 80085de:	6831      	ldr	r1, [r6, #0]
 80085e0:	6960      	ldr	r0, [r4, #20]
 80085e2:	f891 c000 	ldrb.w	ip, [r1]
 80085e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d035      	beq.n	800865a <_scanf_i+0x15e>
 80085ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80085f2:	d124      	bne.n	800863e <_scanf_i+0x142>
 80085f4:	0510      	lsls	r0, r2, #20
 80085f6:	d522      	bpl.n	800863e <_scanf_i+0x142>
 80085f8:	f10b 0b01 	add.w	fp, fp, #1
 80085fc:	f1b9 0f00 	cmp.w	r9, #0
 8008600:	d003      	beq.n	800860a <_scanf_i+0x10e>
 8008602:	3301      	adds	r3, #1
 8008604:	f109 39ff 	add.w	r9, r9, #4294967295
 8008608:	60a3      	str	r3, [r4, #8]
 800860a:	6873      	ldr	r3, [r6, #4]
 800860c:	3b01      	subs	r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	6073      	str	r3, [r6, #4]
 8008612:	dd1b      	ble.n	800864c <_scanf_i+0x150>
 8008614:	6833      	ldr	r3, [r6, #0]
 8008616:	3301      	adds	r3, #1
 8008618:	6033      	str	r3, [r6, #0]
 800861a:	68a3      	ldr	r3, [r4, #8]
 800861c:	3b01      	subs	r3, #1
 800861e:	60a3      	str	r3, [r4, #8]
 8008620:	e7d9      	b.n	80085d6 <_scanf_i+0xda>
 8008622:	f1bb 0f02 	cmp.w	fp, #2
 8008626:	d1ae      	bne.n	8008586 <_scanf_i+0x8a>
 8008628:	6822      	ldr	r2, [r4, #0]
 800862a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800862e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008632:	d1bf      	bne.n	80085b4 <_scanf_i+0xb8>
 8008634:	2310      	movs	r3, #16
 8008636:	6063      	str	r3, [r4, #4]
 8008638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800863c:	e7a2      	b.n	8008584 <_scanf_i+0x88>
 800863e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008642:	6022      	str	r2, [r4, #0]
 8008644:	780b      	ldrb	r3, [r1, #0]
 8008646:	f805 3b01 	strb.w	r3, [r5], #1
 800864a:	e7de      	b.n	800860a <_scanf_i+0x10e>
 800864c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008650:	4631      	mov	r1, r6
 8008652:	4650      	mov	r0, sl
 8008654:	4798      	blx	r3
 8008656:	2800      	cmp	r0, #0
 8008658:	d0df      	beq.n	800861a <_scanf_i+0x11e>
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	05d9      	lsls	r1, r3, #23
 800865e:	d50d      	bpl.n	800867c <_scanf_i+0x180>
 8008660:	42bd      	cmp	r5, r7
 8008662:	d909      	bls.n	8008678 <_scanf_i+0x17c>
 8008664:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008668:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800866c:	4632      	mov	r2, r6
 800866e:	4650      	mov	r0, sl
 8008670:	4798      	blx	r3
 8008672:	f105 39ff 	add.w	r9, r5, #4294967295
 8008676:	464d      	mov	r5, r9
 8008678:	42bd      	cmp	r5, r7
 800867a:	d028      	beq.n	80086ce <_scanf_i+0x1d2>
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	f012 0210 	ands.w	r2, r2, #16
 8008682:	d113      	bne.n	80086ac <_scanf_i+0x1b0>
 8008684:	702a      	strb	r2, [r5, #0]
 8008686:	6863      	ldr	r3, [r4, #4]
 8008688:	9e01      	ldr	r6, [sp, #4]
 800868a:	4639      	mov	r1, r7
 800868c:	4650      	mov	r0, sl
 800868e:	47b0      	blx	r6
 8008690:	f8d8 3000 	ldr.w	r3, [r8]
 8008694:	6821      	ldr	r1, [r4, #0]
 8008696:	1d1a      	adds	r2, r3, #4
 8008698:	f8c8 2000 	str.w	r2, [r8]
 800869c:	f011 0f20 	tst.w	r1, #32
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	d00f      	beq.n	80086c4 <_scanf_i+0x1c8>
 80086a4:	6018      	str	r0, [r3, #0]
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	3301      	adds	r3, #1
 80086aa:	60e3      	str	r3, [r4, #12]
 80086ac:	1bed      	subs	r5, r5, r7
 80086ae:	44ab      	add	fp, r5
 80086b0:	6925      	ldr	r5, [r4, #16]
 80086b2:	445d      	add	r5, fp
 80086b4:	6125      	str	r5, [r4, #16]
 80086b6:	2000      	movs	r0, #0
 80086b8:	b007      	add	sp, #28
 80086ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086be:	f04f 0b00 	mov.w	fp, #0
 80086c2:	e7ca      	b.n	800865a <_scanf_i+0x15e>
 80086c4:	07ca      	lsls	r2, r1, #31
 80086c6:	bf4c      	ite	mi
 80086c8:	8018      	strhmi	r0, [r3, #0]
 80086ca:	6018      	strpl	r0, [r3, #0]
 80086cc:	e7eb      	b.n	80086a6 <_scanf_i+0x1aa>
 80086ce:	2001      	movs	r0, #1
 80086d0:	e7f2      	b.n	80086b8 <_scanf_i+0x1bc>
 80086d2:	bf00      	nop
 80086d4:	08008d1c 	.word	0x08008d1c
 80086d8:	0800895d 	.word	0x0800895d
 80086dc:	08008861 	.word	0x08008861
 80086e0:	0800bd0c 	.word	0x0800bd0c

080086e4 <__sccl>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	780b      	ldrb	r3, [r1, #0]
 80086e8:	4604      	mov	r4, r0
 80086ea:	2b5e      	cmp	r3, #94	; 0x5e
 80086ec:	bf0b      	itete	eq
 80086ee:	784b      	ldrbeq	r3, [r1, #1]
 80086f0:	1c48      	addne	r0, r1, #1
 80086f2:	1c88      	addeq	r0, r1, #2
 80086f4:	2200      	movne	r2, #0
 80086f6:	bf08      	it	eq
 80086f8:	2201      	moveq	r2, #1
 80086fa:	1e61      	subs	r1, r4, #1
 80086fc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008700:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008704:	42a9      	cmp	r1, r5
 8008706:	d1fb      	bne.n	8008700 <__sccl+0x1c>
 8008708:	b90b      	cbnz	r3, 800870e <__sccl+0x2a>
 800870a:	3801      	subs	r0, #1
 800870c:	bd70      	pop	{r4, r5, r6, pc}
 800870e:	f082 0101 	eor.w	r1, r2, #1
 8008712:	54e1      	strb	r1, [r4, r3]
 8008714:	1c42      	adds	r2, r0, #1
 8008716:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800871a:	2d2d      	cmp	r5, #45	; 0x2d
 800871c:	f102 36ff 	add.w	r6, r2, #4294967295
 8008720:	4610      	mov	r0, r2
 8008722:	d006      	beq.n	8008732 <__sccl+0x4e>
 8008724:	2d5d      	cmp	r5, #93	; 0x5d
 8008726:	d0f1      	beq.n	800870c <__sccl+0x28>
 8008728:	b90d      	cbnz	r5, 800872e <__sccl+0x4a>
 800872a:	4630      	mov	r0, r6
 800872c:	e7ee      	b.n	800870c <__sccl+0x28>
 800872e:	462b      	mov	r3, r5
 8008730:	e7ef      	b.n	8008712 <__sccl+0x2e>
 8008732:	7816      	ldrb	r6, [r2, #0]
 8008734:	2e5d      	cmp	r6, #93	; 0x5d
 8008736:	d0fa      	beq.n	800872e <__sccl+0x4a>
 8008738:	42b3      	cmp	r3, r6
 800873a:	dcf8      	bgt.n	800872e <__sccl+0x4a>
 800873c:	4618      	mov	r0, r3
 800873e:	3001      	adds	r0, #1
 8008740:	4286      	cmp	r6, r0
 8008742:	5421      	strb	r1, [r4, r0]
 8008744:	dcfb      	bgt.n	800873e <__sccl+0x5a>
 8008746:	43d8      	mvns	r0, r3
 8008748:	4430      	add	r0, r6
 800874a:	1c5d      	adds	r5, r3, #1
 800874c:	42b3      	cmp	r3, r6
 800874e:	bfa8      	it	ge
 8008750:	2000      	movge	r0, #0
 8008752:	182b      	adds	r3, r5, r0
 8008754:	3202      	adds	r2, #2
 8008756:	e7de      	b.n	8008716 <__sccl+0x32>

08008758 <_strtol_l.isra.0>:
 8008758:	2b01      	cmp	r3, #1
 800875a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800875e:	d001      	beq.n	8008764 <_strtol_l.isra.0+0xc>
 8008760:	2b24      	cmp	r3, #36	; 0x24
 8008762:	d906      	bls.n	8008772 <_strtol_l.isra.0+0x1a>
 8008764:	f7ff f930 	bl	80079c8 <__errno>
 8008768:	2316      	movs	r3, #22
 800876a:	6003      	str	r3, [r0, #0]
 800876c:	2000      	movs	r0, #0
 800876e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008772:	4f3a      	ldr	r7, [pc, #232]	; (800885c <_strtol_l.isra.0+0x104>)
 8008774:	468e      	mov	lr, r1
 8008776:	4676      	mov	r6, lr
 8008778:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800877c:	5de5      	ldrb	r5, [r4, r7]
 800877e:	f015 0508 	ands.w	r5, r5, #8
 8008782:	d1f8      	bne.n	8008776 <_strtol_l.isra.0+0x1e>
 8008784:	2c2d      	cmp	r4, #45	; 0x2d
 8008786:	d134      	bne.n	80087f2 <_strtol_l.isra.0+0x9a>
 8008788:	f89e 4000 	ldrb.w	r4, [lr]
 800878c:	f04f 0801 	mov.w	r8, #1
 8008790:	f106 0e02 	add.w	lr, r6, #2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d05c      	beq.n	8008852 <_strtol_l.isra.0+0xfa>
 8008798:	2b10      	cmp	r3, #16
 800879a:	d10c      	bne.n	80087b6 <_strtol_l.isra.0+0x5e>
 800879c:	2c30      	cmp	r4, #48	; 0x30
 800879e:	d10a      	bne.n	80087b6 <_strtol_l.isra.0+0x5e>
 80087a0:	f89e 4000 	ldrb.w	r4, [lr]
 80087a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087a8:	2c58      	cmp	r4, #88	; 0x58
 80087aa:	d14d      	bne.n	8008848 <_strtol_l.isra.0+0xf0>
 80087ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80087b0:	2310      	movs	r3, #16
 80087b2:	f10e 0e02 	add.w	lr, lr, #2
 80087b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80087ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087be:	2600      	movs	r6, #0
 80087c0:	fbbc f9f3 	udiv	r9, ip, r3
 80087c4:	4635      	mov	r5, r6
 80087c6:	fb03 ca19 	mls	sl, r3, r9, ip
 80087ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80087ce:	2f09      	cmp	r7, #9
 80087d0:	d818      	bhi.n	8008804 <_strtol_l.isra.0+0xac>
 80087d2:	463c      	mov	r4, r7
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	dd24      	ble.n	8008822 <_strtol_l.isra.0+0xca>
 80087d8:	2e00      	cmp	r6, #0
 80087da:	db1f      	blt.n	800881c <_strtol_l.isra.0+0xc4>
 80087dc:	45a9      	cmp	r9, r5
 80087de:	d31d      	bcc.n	800881c <_strtol_l.isra.0+0xc4>
 80087e0:	d101      	bne.n	80087e6 <_strtol_l.isra.0+0x8e>
 80087e2:	45a2      	cmp	sl, r4
 80087e4:	db1a      	blt.n	800881c <_strtol_l.isra.0+0xc4>
 80087e6:	fb05 4503 	mla	r5, r5, r3, r4
 80087ea:	2601      	movs	r6, #1
 80087ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80087f0:	e7eb      	b.n	80087ca <_strtol_l.isra.0+0x72>
 80087f2:	2c2b      	cmp	r4, #43	; 0x2b
 80087f4:	bf08      	it	eq
 80087f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80087fa:	46a8      	mov	r8, r5
 80087fc:	bf08      	it	eq
 80087fe:	f106 0e02 	addeq.w	lr, r6, #2
 8008802:	e7c7      	b.n	8008794 <_strtol_l.isra.0+0x3c>
 8008804:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008808:	2f19      	cmp	r7, #25
 800880a:	d801      	bhi.n	8008810 <_strtol_l.isra.0+0xb8>
 800880c:	3c37      	subs	r4, #55	; 0x37
 800880e:	e7e1      	b.n	80087d4 <_strtol_l.isra.0+0x7c>
 8008810:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008814:	2f19      	cmp	r7, #25
 8008816:	d804      	bhi.n	8008822 <_strtol_l.isra.0+0xca>
 8008818:	3c57      	subs	r4, #87	; 0x57
 800881a:	e7db      	b.n	80087d4 <_strtol_l.isra.0+0x7c>
 800881c:	f04f 36ff 	mov.w	r6, #4294967295
 8008820:	e7e4      	b.n	80087ec <_strtol_l.isra.0+0x94>
 8008822:	2e00      	cmp	r6, #0
 8008824:	da05      	bge.n	8008832 <_strtol_l.isra.0+0xda>
 8008826:	2322      	movs	r3, #34	; 0x22
 8008828:	6003      	str	r3, [r0, #0]
 800882a:	4665      	mov	r5, ip
 800882c:	b942      	cbnz	r2, 8008840 <_strtol_l.isra.0+0xe8>
 800882e:	4628      	mov	r0, r5
 8008830:	e79d      	b.n	800876e <_strtol_l.isra.0+0x16>
 8008832:	f1b8 0f00 	cmp.w	r8, #0
 8008836:	d000      	beq.n	800883a <_strtol_l.isra.0+0xe2>
 8008838:	426d      	negs	r5, r5
 800883a:	2a00      	cmp	r2, #0
 800883c:	d0f7      	beq.n	800882e <_strtol_l.isra.0+0xd6>
 800883e:	b10e      	cbz	r6, 8008844 <_strtol_l.isra.0+0xec>
 8008840:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008844:	6011      	str	r1, [r2, #0]
 8008846:	e7f2      	b.n	800882e <_strtol_l.isra.0+0xd6>
 8008848:	2430      	movs	r4, #48	; 0x30
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1b3      	bne.n	80087b6 <_strtol_l.isra.0+0x5e>
 800884e:	2308      	movs	r3, #8
 8008850:	e7b1      	b.n	80087b6 <_strtol_l.isra.0+0x5e>
 8008852:	2c30      	cmp	r4, #48	; 0x30
 8008854:	d0a4      	beq.n	80087a0 <_strtol_l.isra.0+0x48>
 8008856:	230a      	movs	r3, #10
 8008858:	e7ad      	b.n	80087b6 <_strtol_l.isra.0+0x5e>
 800885a:	bf00      	nop
 800885c:	0800bd0f 	.word	0x0800bd0f

08008860 <_strtol_r>:
 8008860:	f7ff bf7a 	b.w	8008758 <_strtol_l.isra.0>

08008864 <_strtoul_l.isra.0>:
 8008864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008868:	4e3b      	ldr	r6, [pc, #236]	; (8008958 <_strtoul_l.isra.0+0xf4>)
 800886a:	4686      	mov	lr, r0
 800886c:	468c      	mov	ip, r1
 800886e:	4660      	mov	r0, ip
 8008870:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008874:	5da5      	ldrb	r5, [r4, r6]
 8008876:	f015 0508 	ands.w	r5, r5, #8
 800887a:	d1f8      	bne.n	800886e <_strtoul_l.isra.0+0xa>
 800887c:	2c2d      	cmp	r4, #45	; 0x2d
 800887e:	d134      	bne.n	80088ea <_strtoul_l.isra.0+0x86>
 8008880:	f89c 4000 	ldrb.w	r4, [ip]
 8008884:	f04f 0801 	mov.w	r8, #1
 8008888:	f100 0c02 	add.w	ip, r0, #2
 800888c:	2b00      	cmp	r3, #0
 800888e:	d05e      	beq.n	800894e <_strtoul_l.isra.0+0xea>
 8008890:	2b10      	cmp	r3, #16
 8008892:	d10c      	bne.n	80088ae <_strtoul_l.isra.0+0x4a>
 8008894:	2c30      	cmp	r4, #48	; 0x30
 8008896:	d10a      	bne.n	80088ae <_strtoul_l.isra.0+0x4a>
 8008898:	f89c 0000 	ldrb.w	r0, [ip]
 800889c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80088a0:	2858      	cmp	r0, #88	; 0x58
 80088a2:	d14f      	bne.n	8008944 <_strtoul_l.isra.0+0xe0>
 80088a4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80088a8:	2310      	movs	r3, #16
 80088aa:	f10c 0c02 	add.w	ip, ip, #2
 80088ae:	f04f 37ff 	mov.w	r7, #4294967295
 80088b2:	2500      	movs	r5, #0
 80088b4:	fbb7 f7f3 	udiv	r7, r7, r3
 80088b8:	fb03 f907 	mul.w	r9, r3, r7
 80088bc:	ea6f 0909 	mvn.w	r9, r9
 80088c0:	4628      	mov	r0, r5
 80088c2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80088c6:	2e09      	cmp	r6, #9
 80088c8:	d818      	bhi.n	80088fc <_strtoul_l.isra.0+0x98>
 80088ca:	4634      	mov	r4, r6
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	dd24      	ble.n	800891a <_strtoul_l.isra.0+0xb6>
 80088d0:	2d00      	cmp	r5, #0
 80088d2:	db1f      	blt.n	8008914 <_strtoul_l.isra.0+0xb0>
 80088d4:	4287      	cmp	r7, r0
 80088d6:	d31d      	bcc.n	8008914 <_strtoul_l.isra.0+0xb0>
 80088d8:	d101      	bne.n	80088de <_strtoul_l.isra.0+0x7a>
 80088da:	45a1      	cmp	r9, r4
 80088dc:	db1a      	blt.n	8008914 <_strtoul_l.isra.0+0xb0>
 80088de:	fb00 4003 	mla	r0, r0, r3, r4
 80088e2:	2501      	movs	r5, #1
 80088e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80088e8:	e7eb      	b.n	80088c2 <_strtoul_l.isra.0+0x5e>
 80088ea:	2c2b      	cmp	r4, #43	; 0x2b
 80088ec:	bf08      	it	eq
 80088ee:	f89c 4000 	ldrbeq.w	r4, [ip]
 80088f2:	46a8      	mov	r8, r5
 80088f4:	bf08      	it	eq
 80088f6:	f100 0c02 	addeq.w	ip, r0, #2
 80088fa:	e7c7      	b.n	800888c <_strtoul_l.isra.0+0x28>
 80088fc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008900:	2e19      	cmp	r6, #25
 8008902:	d801      	bhi.n	8008908 <_strtoul_l.isra.0+0xa4>
 8008904:	3c37      	subs	r4, #55	; 0x37
 8008906:	e7e1      	b.n	80088cc <_strtoul_l.isra.0+0x68>
 8008908:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800890c:	2e19      	cmp	r6, #25
 800890e:	d804      	bhi.n	800891a <_strtoul_l.isra.0+0xb6>
 8008910:	3c57      	subs	r4, #87	; 0x57
 8008912:	e7db      	b.n	80088cc <_strtoul_l.isra.0+0x68>
 8008914:	f04f 35ff 	mov.w	r5, #4294967295
 8008918:	e7e4      	b.n	80088e4 <_strtoul_l.isra.0+0x80>
 800891a:	2d00      	cmp	r5, #0
 800891c:	da07      	bge.n	800892e <_strtoul_l.isra.0+0xca>
 800891e:	2322      	movs	r3, #34	; 0x22
 8008920:	f8ce 3000 	str.w	r3, [lr]
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	b942      	cbnz	r2, 800893c <_strtoul_l.isra.0+0xd8>
 800892a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800892e:	f1b8 0f00 	cmp.w	r8, #0
 8008932:	d000      	beq.n	8008936 <_strtoul_l.isra.0+0xd2>
 8008934:	4240      	negs	r0, r0
 8008936:	2a00      	cmp	r2, #0
 8008938:	d0f7      	beq.n	800892a <_strtoul_l.isra.0+0xc6>
 800893a:	b10d      	cbz	r5, 8008940 <_strtoul_l.isra.0+0xdc>
 800893c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008940:	6011      	str	r1, [r2, #0]
 8008942:	e7f2      	b.n	800892a <_strtoul_l.isra.0+0xc6>
 8008944:	2430      	movs	r4, #48	; 0x30
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1b1      	bne.n	80088ae <_strtoul_l.isra.0+0x4a>
 800894a:	2308      	movs	r3, #8
 800894c:	e7af      	b.n	80088ae <_strtoul_l.isra.0+0x4a>
 800894e:	2c30      	cmp	r4, #48	; 0x30
 8008950:	d0a2      	beq.n	8008898 <_strtoul_l.isra.0+0x34>
 8008952:	230a      	movs	r3, #10
 8008954:	e7ab      	b.n	80088ae <_strtoul_l.isra.0+0x4a>
 8008956:	bf00      	nop
 8008958:	0800bd0f 	.word	0x0800bd0f

0800895c <_strtoul_r>:
 800895c:	f7ff bf82 	b.w	8008864 <_strtoul_l.isra.0>

08008960 <__submore>:
 8008960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008964:	460c      	mov	r4, r1
 8008966:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800896c:	4299      	cmp	r1, r3
 800896e:	d11d      	bne.n	80089ac <__submore+0x4c>
 8008970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008974:	f000 f8a8 	bl	8008ac8 <_malloc_r>
 8008978:	b918      	cbnz	r0, 8008982 <__submore+0x22>
 800897a:	f04f 30ff 	mov.w	r0, #4294967295
 800897e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008986:	63a3      	str	r3, [r4, #56]	; 0x38
 8008988:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800898c:	6360      	str	r0, [r4, #52]	; 0x34
 800898e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008992:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008996:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800899a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800899e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80089a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80089a6:	6020      	str	r0, [r4, #0]
 80089a8:	2000      	movs	r0, #0
 80089aa:	e7e8      	b.n	800897e <__submore+0x1e>
 80089ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80089ae:	0077      	lsls	r7, r6, #1
 80089b0:	463a      	mov	r2, r7
 80089b2:	f000 f8e3 	bl	8008b7c <_realloc_r>
 80089b6:	4605      	mov	r5, r0
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d0de      	beq.n	800897a <__submore+0x1a>
 80089bc:	eb00 0806 	add.w	r8, r0, r6
 80089c0:	4601      	mov	r1, r0
 80089c2:	4632      	mov	r2, r6
 80089c4:	4640      	mov	r0, r8
 80089c6:	f000 f807 	bl	80089d8 <memcpy>
 80089ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80089ce:	f8c4 8000 	str.w	r8, [r4]
 80089d2:	e7e9      	b.n	80089a8 <__submore+0x48>

080089d4 <__retarget_lock_acquire_recursive>:
 80089d4:	4770      	bx	lr

080089d6 <__retarget_lock_release_recursive>:
 80089d6:	4770      	bx	lr

080089d8 <memcpy>:
 80089d8:	440a      	add	r2, r1
 80089da:	4291      	cmp	r1, r2
 80089dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80089e0:	d100      	bne.n	80089e4 <memcpy+0xc>
 80089e2:	4770      	bx	lr
 80089e4:	b510      	push	{r4, lr}
 80089e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ee:	4291      	cmp	r1, r2
 80089f0:	d1f9      	bne.n	80089e6 <memcpy+0xe>
 80089f2:	bd10      	pop	{r4, pc}

080089f4 <memmove>:
 80089f4:	4288      	cmp	r0, r1
 80089f6:	b510      	push	{r4, lr}
 80089f8:	eb01 0402 	add.w	r4, r1, r2
 80089fc:	d902      	bls.n	8008a04 <memmove+0x10>
 80089fe:	4284      	cmp	r4, r0
 8008a00:	4623      	mov	r3, r4
 8008a02:	d807      	bhi.n	8008a14 <memmove+0x20>
 8008a04:	1e43      	subs	r3, r0, #1
 8008a06:	42a1      	cmp	r1, r4
 8008a08:	d008      	beq.n	8008a1c <memmove+0x28>
 8008a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a12:	e7f8      	b.n	8008a06 <memmove+0x12>
 8008a14:	4402      	add	r2, r0
 8008a16:	4601      	mov	r1, r0
 8008a18:	428a      	cmp	r2, r1
 8008a1a:	d100      	bne.n	8008a1e <memmove+0x2a>
 8008a1c:	bd10      	pop	{r4, pc}
 8008a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a26:	e7f7      	b.n	8008a18 <memmove+0x24>

08008a28 <_free_r>:
 8008a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	d048      	beq.n	8008ac0 <_free_r+0x98>
 8008a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a32:	9001      	str	r0, [sp, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f1a1 0404 	sub.w	r4, r1, #4
 8008a3a:	bfb8      	it	lt
 8008a3c:	18e4      	addlt	r4, r4, r3
 8008a3e:	f000 f8d3 	bl	8008be8 <__malloc_lock>
 8008a42:	4a20      	ldr	r2, [pc, #128]	; (8008ac4 <_free_r+0x9c>)
 8008a44:	9801      	ldr	r0, [sp, #4]
 8008a46:	6813      	ldr	r3, [r2, #0]
 8008a48:	4615      	mov	r5, r2
 8008a4a:	b933      	cbnz	r3, 8008a5a <_free_r+0x32>
 8008a4c:	6063      	str	r3, [r4, #4]
 8008a4e:	6014      	str	r4, [r2, #0]
 8008a50:	b003      	add	sp, #12
 8008a52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a56:	f000 b8cd 	b.w	8008bf4 <__malloc_unlock>
 8008a5a:	42a3      	cmp	r3, r4
 8008a5c:	d90b      	bls.n	8008a76 <_free_r+0x4e>
 8008a5e:	6821      	ldr	r1, [r4, #0]
 8008a60:	1862      	adds	r2, r4, r1
 8008a62:	4293      	cmp	r3, r2
 8008a64:	bf04      	itt	eq
 8008a66:	681a      	ldreq	r2, [r3, #0]
 8008a68:	685b      	ldreq	r3, [r3, #4]
 8008a6a:	6063      	str	r3, [r4, #4]
 8008a6c:	bf04      	itt	eq
 8008a6e:	1852      	addeq	r2, r2, r1
 8008a70:	6022      	streq	r2, [r4, #0]
 8008a72:	602c      	str	r4, [r5, #0]
 8008a74:	e7ec      	b.n	8008a50 <_free_r+0x28>
 8008a76:	461a      	mov	r2, r3
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	b10b      	cbz	r3, 8008a80 <_free_r+0x58>
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d9fa      	bls.n	8008a76 <_free_r+0x4e>
 8008a80:	6811      	ldr	r1, [r2, #0]
 8008a82:	1855      	adds	r5, r2, r1
 8008a84:	42a5      	cmp	r5, r4
 8008a86:	d10b      	bne.n	8008aa0 <_free_r+0x78>
 8008a88:	6824      	ldr	r4, [r4, #0]
 8008a8a:	4421      	add	r1, r4
 8008a8c:	1854      	adds	r4, r2, r1
 8008a8e:	42a3      	cmp	r3, r4
 8008a90:	6011      	str	r1, [r2, #0]
 8008a92:	d1dd      	bne.n	8008a50 <_free_r+0x28>
 8008a94:	681c      	ldr	r4, [r3, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	6053      	str	r3, [r2, #4]
 8008a9a:	4421      	add	r1, r4
 8008a9c:	6011      	str	r1, [r2, #0]
 8008a9e:	e7d7      	b.n	8008a50 <_free_r+0x28>
 8008aa0:	d902      	bls.n	8008aa8 <_free_r+0x80>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	6003      	str	r3, [r0, #0]
 8008aa6:	e7d3      	b.n	8008a50 <_free_r+0x28>
 8008aa8:	6825      	ldr	r5, [r4, #0]
 8008aaa:	1961      	adds	r1, r4, r5
 8008aac:	428b      	cmp	r3, r1
 8008aae:	bf04      	itt	eq
 8008ab0:	6819      	ldreq	r1, [r3, #0]
 8008ab2:	685b      	ldreq	r3, [r3, #4]
 8008ab4:	6063      	str	r3, [r4, #4]
 8008ab6:	bf04      	itt	eq
 8008ab8:	1949      	addeq	r1, r1, r5
 8008aba:	6021      	streq	r1, [r4, #0]
 8008abc:	6054      	str	r4, [r2, #4]
 8008abe:	e7c7      	b.n	8008a50 <_free_r+0x28>
 8008ac0:	b003      	add	sp, #12
 8008ac2:	bd30      	pop	{r4, r5, pc}
 8008ac4:	200000ec 	.word	0x200000ec

08008ac8 <_malloc_r>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	1ccd      	adds	r5, r1, #3
 8008acc:	f025 0503 	bic.w	r5, r5, #3
 8008ad0:	3508      	adds	r5, #8
 8008ad2:	2d0c      	cmp	r5, #12
 8008ad4:	bf38      	it	cc
 8008ad6:	250c      	movcc	r5, #12
 8008ad8:	2d00      	cmp	r5, #0
 8008ada:	4606      	mov	r6, r0
 8008adc:	db01      	blt.n	8008ae2 <_malloc_r+0x1a>
 8008ade:	42a9      	cmp	r1, r5
 8008ae0:	d903      	bls.n	8008aea <_malloc_r+0x22>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	6033      	str	r3, [r6, #0]
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aea:	f000 f87d 	bl	8008be8 <__malloc_lock>
 8008aee:	4921      	ldr	r1, [pc, #132]	; (8008b74 <_malloc_r+0xac>)
 8008af0:	680a      	ldr	r2, [r1, #0]
 8008af2:	4614      	mov	r4, r2
 8008af4:	b99c      	cbnz	r4, 8008b1e <_malloc_r+0x56>
 8008af6:	4f20      	ldr	r7, [pc, #128]	; (8008b78 <_malloc_r+0xb0>)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	b923      	cbnz	r3, 8008b06 <_malloc_r+0x3e>
 8008afc:	4621      	mov	r1, r4
 8008afe:	4630      	mov	r0, r6
 8008b00:	f000 f862 	bl	8008bc8 <_sbrk_r>
 8008b04:	6038      	str	r0, [r7, #0]
 8008b06:	4629      	mov	r1, r5
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f000 f85d 	bl	8008bc8 <_sbrk_r>
 8008b0e:	1c43      	adds	r3, r0, #1
 8008b10:	d123      	bne.n	8008b5a <_malloc_r+0x92>
 8008b12:	230c      	movs	r3, #12
 8008b14:	6033      	str	r3, [r6, #0]
 8008b16:	4630      	mov	r0, r6
 8008b18:	f000 f86c 	bl	8008bf4 <__malloc_unlock>
 8008b1c:	e7e3      	b.n	8008ae6 <_malloc_r+0x1e>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	1b5b      	subs	r3, r3, r5
 8008b22:	d417      	bmi.n	8008b54 <_malloc_r+0x8c>
 8008b24:	2b0b      	cmp	r3, #11
 8008b26:	d903      	bls.n	8008b30 <_malloc_r+0x68>
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	441c      	add	r4, r3
 8008b2c:	6025      	str	r5, [r4, #0]
 8008b2e:	e004      	b.n	8008b3a <_malloc_r+0x72>
 8008b30:	6863      	ldr	r3, [r4, #4]
 8008b32:	42a2      	cmp	r2, r4
 8008b34:	bf0c      	ite	eq
 8008b36:	600b      	streq	r3, [r1, #0]
 8008b38:	6053      	strne	r3, [r2, #4]
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f000 f85a 	bl	8008bf4 <__malloc_unlock>
 8008b40:	f104 000b 	add.w	r0, r4, #11
 8008b44:	1d23      	adds	r3, r4, #4
 8008b46:	f020 0007 	bic.w	r0, r0, #7
 8008b4a:	1ac2      	subs	r2, r0, r3
 8008b4c:	d0cc      	beq.n	8008ae8 <_malloc_r+0x20>
 8008b4e:	1a1b      	subs	r3, r3, r0
 8008b50:	50a3      	str	r3, [r4, r2]
 8008b52:	e7c9      	b.n	8008ae8 <_malloc_r+0x20>
 8008b54:	4622      	mov	r2, r4
 8008b56:	6864      	ldr	r4, [r4, #4]
 8008b58:	e7cc      	b.n	8008af4 <_malloc_r+0x2c>
 8008b5a:	1cc4      	adds	r4, r0, #3
 8008b5c:	f024 0403 	bic.w	r4, r4, #3
 8008b60:	42a0      	cmp	r0, r4
 8008b62:	d0e3      	beq.n	8008b2c <_malloc_r+0x64>
 8008b64:	1a21      	subs	r1, r4, r0
 8008b66:	4630      	mov	r0, r6
 8008b68:	f000 f82e 	bl	8008bc8 <_sbrk_r>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d1dd      	bne.n	8008b2c <_malloc_r+0x64>
 8008b70:	e7cf      	b.n	8008b12 <_malloc_r+0x4a>
 8008b72:	bf00      	nop
 8008b74:	200000ec 	.word	0x200000ec
 8008b78:	200000f0 	.word	0x200000f0

08008b7c <_realloc_r>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	4607      	mov	r7, r0
 8008b80:	4614      	mov	r4, r2
 8008b82:	460e      	mov	r6, r1
 8008b84:	b921      	cbnz	r1, 8008b90 <_realloc_r+0x14>
 8008b86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	f7ff bf9c 	b.w	8008ac8 <_malloc_r>
 8008b90:	b922      	cbnz	r2, 8008b9c <_realloc_r+0x20>
 8008b92:	f7ff ff49 	bl	8008a28 <_free_r>
 8008b96:	4625      	mov	r5, r4
 8008b98:	4628      	mov	r0, r5
 8008b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b9c:	f000 f830 	bl	8008c00 <_malloc_usable_size_r>
 8008ba0:	42a0      	cmp	r0, r4
 8008ba2:	d20f      	bcs.n	8008bc4 <_realloc_r+0x48>
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	f7ff ff8e 	bl	8008ac8 <_malloc_r>
 8008bac:	4605      	mov	r5, r0
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d0f2      	beq.n	8008b98 <_realloc_r+0x1c>
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	f7ff ff0f 	bl	80089d8 <memcpy>
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	f7ff ff33 	bl	8008a28 <_free_r>
 8008bc2:	e7e9      	b.n	8008b98 <_realloc_r+0x1c>
 8008bc4:	4635      	mov	r5, r6
 8008bc6:	e7e7      	b.n	8008b98 <_realloc_r+0x1c>

08008bc8 <_sbrk_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d06      	ldr	r5, [pc, #24]	; (8008be4 <_sbrk_r+0x1c>)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	f7fa f89e 	bl	8002d14 <_sbrk>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d102      	bne.n	8008be2 <_sbrk_r+0x1a>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b103      	cbz	r3, 8008be2 <_sbrk_r+0x1a>
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	200003b4 	.word	0x200003b4

08008be8 <__malloc_lock>:
 8008be8:	4801      	ldr	r0, [pc, #4]	; (8008bf0 <__malloc_lock+0x8>)
 8008bea:	f7ff bef3 	b.w	80089d4 <__retarget_lock_acquire_recursive>
 8008bee:	bf00      	nop
 8008bf0:	200003bc 	.word	0x200003bc

08008bf4 <__malloc_unlock>:
 8008bf4:	4801      	ldr	r0, [pc, #4]	; (8008bfc <__malloc_unlock+0x8>)
 8008bf6:	f7ff beee 	b.w	80089d6 <__retarget_lock_release_recursive>
 8008bfa:	bf00      	nop
 8008bfc:	200003bc 	.word	0x200003bc

08008c00 <_malloc_usable_size_r>:
 8008c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c04:	1f18      	subs	r0, r3, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	bfbc      	itt	lt
 8008c0a:	580b      	ldrlt	r3, [r1, r0]
 8008c0c:	18c0      	addlt	r0, r0, r3
 8008c0e:	4770      	bx	lr

08008c10 <_init>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	bf00      	nop
 8008c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c16:	bc08      	pop	{r3}
 8008c18:	469e      	mov	lr, r3
 8008c1a:	4770      	bx	lr

08008c1c <_fini>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	bf00      	nop
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr
